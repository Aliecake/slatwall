(window.webpackJsonp=window.webpackJsonp||[]).push([["bundle"],{"../../../node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!******************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/node_modules/moment/locale sync ^\.\/.*$ ***!
  \******************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){eval('var map = {\n\t"./af": "../../../node_modules/moment/locale/af.js",\n\t"./af.js": "../../../node_modules/moment/locale/af.js",\n\t"./ar": "../../../node_modules/moment/locale/ar.js",\n\t"./ar-dz": "../../../node_modules/moment/locale/ar-dz.js",\n\t"./ar-dz.js": "../../../node_modules/moment/locale/ar-dz.js",\n\t"./ar-kw": "../../../node_modules/moment/locale/ar-kw.js",\n\t"./ar-kw.js": "../../../node_modules/moment/locale/ar-kw.js",\n\t"./ar-ly": "../../../node_modules/moment/locale/ar-ly.js",\n\t"./ar-ly.js": "../../../node_modules/moment/locale/ar-ly.js",\n\t"./ar-ma": "../../../node_modules/moment/locale/ar-ma.js",\n\t"./ar-ma.js": "../../../node_modules/moment/locale/ar-ma.js",\n\t"./ar-sa": "../../../node_modules/moment/locale/ar-sa.js",\n\t"./ar-sa.js": "../../../node_modules/moment/locale/ar-sa.js",\n\t"./ar-tn": "../../../node_modules/moment/locale/ar-tn.js",\n\t"./ar-tn.js": "../../../node_modules/moment/locale/ar-tn.js",\n\t"./ar.js": "../../../node_modules/moment/locale/ar.js",\n\t"./az": "../../../node_modules/moment/locale/az.js",\n\t"./az.js": "../../../node_modules/moment/locale/az.js",\n\t"./be": "../../../node_modules/moment/locale/be.js",\n\t"./be.js": "../../../node_modules/moment/locale/be.js",\n\t"./bg": "../../../node_modules/moment/locale/bg.js",\n\t"./bg.js": "../../../node_modules/moment/locale/bg.js",\n\t"./bm": "../../../node_modules/moment/locale/bm.js",\n\t"./bm.js": "../../../node_modules/moment/locale/bm.js",\n\t"./bn": "../../../node_modules/moment/locale/bn.js",\n\t"./bn.js": "../../../node_modules/moment/locale/bn.js",\n\t"./bo": "../../../node_modules/moment/locale/bo.js",\n\t"./bo.js": "../../../node_modules/moment/locale/bo.js",\n\t"./br": "../../../node_modules/moment/locale/br.js",\n\t"./br.js": "../../../node_modules/moment/locale/br.js",\n\t"./bs": "../../../node_modules/moment/locale/bs.js",\n\t"./bs.js": "../../../node_modules/moment/locale/bs.js",\n\t"./ca": "../../../node_modules/moment/locale/ca.js",\n\t"./ca.js": "../../../node_modules/moment/locale/ca.js",\n\t"./cs": "../../../node_modules/moment/locale/cs.js",\n\t"./cs.js": "../../../node_modules/moment/locale/cs.js",\n\t"./cv": "../../../node_modules/moment/locale/cv.js",\n\t"./cv.js": "../../../node_modules/moment/locale/cv.js",\n\t"./cy": "../../../node_modules/moment/locale/cy.js",\n\t"./cy.js": "../../../node_modules/moment/locale/cy.js",\n\t"./da": "../../../node_modules/moment/locale/da.js",\n\t"./da.js": "../../../node_modules/moment/locale/da.js",\n\t"./de": "../../../node_modules/moment/locale/de.js",\n\t"./de-at": "../../../node_modules/moment/locale/de-at.js",\n\t"./de-at.js": "../../../node_modules/moment/locale/de-at.js",\n\t"./de-ch": "../../../node_modules/moment/locale/de-ch.js",\n\t"./de-ch.js": "../../../node_modules/moment/locale/de-ch.js",\n\t"./de.js": "../../../node_modules/moment/locale/de.js",\n\t"./dv": "../../../node_modules/moment/locale/dv.js",\n\t"./dv.js": "../../../node_modules/moment/locale/dv.js",\n\t"./el": "../../../node_modules/moment/locale/el.js",\n\t"./el.js": "../../../node_modules/moment/locale/el.js",\n\t"./en-au": "../../../node_modules/moment/locale/en-au.js",\n\t"./en-au.js": "../../../node_modules/moment/locale/en-au.js",\n\t"./en-ca": "../../../node_modules/moment/locale/en-ca.js",\n\t"./en-ca.js": "../../../node_modules/moment/locale/en-ca.js",\n\t"./en-gb": "../../../node_modules/moment/locale/en-gb.js",\n\t"./en-gb.js": "../../../node_modules/moment/locale/en-gb.js",\n\t"./en-ie": "../../../node_modules/moment/locale/en-ie.js",\n\t"./en-ie.js": "../../../node_modules/moment/locale/en-ie.js",\n\t"./en-il": "../../../node_modules/moment/locale/en-il.js",\n\t"./en-il.js": "../../../node_modules/moment/locale/en-il.js",\n\t"./en-nz": "../../../node_modules/moment/locale/en-nz.js",\n\t"./en-nz.js": "../../../node_modules/moment/locale/en-nz.js",\n\t"./eo": "../../../node_modules/moment/locale/eo.js",\n\t"./eo.js": "../../../node_modules/moment/locale/eo.js",\n\t"./es": "../../../node_modules/moment/locale/es.js",\n\t"./es-do": "../../../node_modules/moment/locale/es-do.js",\n\t"./es-do.js": "../../../node_modules/moment/locale/es-do.js",\n\t"./es-us": "../../../node_modules/moment/locale/es-us.js",\n\t"./es-us.js": "../../../node_modules/moment/locale/es-us.js",\n\t"./es.js": "../../../node_modules/moment/locale/es.js",\n\t"./et": "../../../node_modules/moment/locale/et.js",\n\t"./et.js": "../../../node_modules/moment/locale/et.js",\n\t"./eu": "../../../node_modules/moment/locale/eu.js",\n\t"./eu.js": "../../../node_modules/moment/locale/eu.js",\n\t"./fa": "../../../node_modules/moment/locale/fa.js",\n\t"./fa.js": "../../../node_modules/moment/locale/fa.js",\n\t"./fi": "../../../node_modules/moment/locale/fi.js",\n\t"./fi.js": "../../../node_modules/moment/locale/fi.js",\n\t"./fo": "../../../node_modules/moment/locale/fo.js",\n\t"./fo.js": "../../../node_modules/moment/locale/fo.js",\n\t"./fr": "../../../node_modules/moment/locale/fr.js",\n\t"./fr-ca": "../../../node_modules/moment/locale/fr-ca.js",\n\t"./fr-ca.js": "../../../node_modules/moment/locale/fr-ca.js",\n\t"./fr-ch": "../../../node_modules/moment/locale/fr-ch.js",\n\t"./fr-ch.js": "../../../node_modules/moment/locale/fr-ch.js",\n\t"./fr.js": "../../../node_modules/moment/locale/fr.js",\n\t"./fy": "../../../node_modules/moment/locale/fy.js",\n\t"./fy.js": "../../../node_modules/moment/locale/fy.js",\n\t"./gd": "../../../node_modules/moment/locale/gd.js",\n\t"./gd.js": "../../../node_modules/moment/locale/gd.js",\n\t"./gl": "../../../node_modules/moment/locale/gl.js",\n\t"./gl.js": "../../../node_modules/moment/locale/gl.js",\n\t"./gom-latn": "../../../node_modules/moment/locale/gom-latn.js",\n\t"./gom-latn.js": "../../../node_modules/moment/locale/gom-latn.js",\n\t"./gu": "../../../node_modules/moment/locale/gu.js",\n\t"./gu.js": "../../../node_modules/moment/locale/gu.js",\n\t"./he": "../../../node_modules/moment/locale/he.js",\n\t"./he.js": "../../../node_modules/moment/locale/he.js",\n\t"./hi": "../../../node_modules/moment/locale/hi.js",\n\t"./hi.js": "../../../node_modules/moment/locale/hi.js",\n\t"./hr": "../../../node_modules/moment/locale/hr.js",\n\t"./hr.js": "../../../node_modules/moment/locale/hr.js",\n\t"./hu": "../../../node_modules/moment/locale/hu.js",\n\t"./hu.js": "../../../node_modules/moment/locale/hu.js",\n\t"./hy-am": "../../../node_modules/moment/locale/hy-am.js",\n\t"./hy-am.js": "../../../node_modules/moment/locale/hy-am.js",\n\t"./id": "../../../node_modules/moment/locale/id.js",\n\t"./id.js": "../../../node_modules/moment/locale/id.js",\n\t"./is": "../../../node_modules/moment/locale/is.js",\n\t"./is.js": "../../../node_modules/moment/locale/is.js",\n\t"./it": "../../../node_modules/moment/locale/it.js",\n\t"./it.js": "../../../node_modules/moment/locale/it.js",\n\t"./ja": "../../../node_modules/moment/locale/ja.js",\n\t"./ja.js": "../../../node_modules/moment/locale/ja.js",\n\t"./jv": "../../../node_modules/moment/locale/jv.js",\n\t"./jv.js": "../../../node_modules/moment/locale/jv.js",\n\t"./ka": "../../../node_modules/moment/locale/ka.js",\n\t"./ka.js": "../../../node_modules/moment/locale/ka.js",\n\t"./kk": "../../../node_modules/moment/locale/kk.js",\n\t"./kk.js": "../../../node_modules/moment/locale/kk.js",\n\t"./km": "../../../node_modules/moment/locale/km.js",\n\t"./km.js": "../../../node_modules/moment/locale/km.js",\n\t"./kn": "../../../node_modules/moment/locale/kn.js",\n\t"./kn.js": "../../../node_modules/moment/locale/kn.js",\n\t"./ko": "../../../node_modules/moment/locale/ko.js",\n\t"./ko.js": "../../../node_modules/moment/locale/ko.js",\n\t"./ky": "../../../node_modules/moment/locale/ky.js",\n\t"./ky.js": "../../../node_modules/moment/locale/ky.js",\n\t"./lb": "../../../node_modules/moment/locale/lb.js",\n\t"./lb.js": "../../../node_modules/moment/locale/lb.js",\n\t"./lo": "../../../node_modules/moment/locale/lo.js",\n\t"./lo.js": "../../../node_modules/moment/locale/lo.js",\n\t"./lt": "../../../node_modules/moment/locale/lt.js",\n\t"./lt.js": "../../../node_modules/moment/locale/lt.js",\n\t"./lv": "../../../node_modules/moment/locale/lv.js",\n\t"./lv.js": "../../../node_modules/moment/locale/lv.js",\n\t"./me": "../../../node_modules/moment/locale/me.js",\n\t"./me.js": "../../../node_modules/moment/locale/me.js",\n\t"./mi": "../../../node_modules/moment/locale/mi.js",\n\t"./mi.js": "../../../node_modules/moment/locale/mi.js",\n\t"./mk": "../../../node_modules/moment/locale/mk.js",\n\t"./mk.js": "../../../node_modules/moment/locale/mk.js",\n\t"./ml": "../../../node_modules/moment/locale/ml.js",\n\t"./ml.js": "../../../node_modules/moment/locale/ml.js",\n\t"./mn": "../../../node_modules/moment/locale/mn.js",\n\t"./mn.js": "../../../node_modules/moment/locale/mn.js",\n\t"./mr": "../../../node_modules/moment/locale/mr.js",\n\t"./mr.js": "../../../node_modules/moment/locale/mr.js",\n\t"./ms": "../../../node_modules/moment/locale/ms.js",\n\t"./ms-my": "../../../node_modules/moment/locale/ms-my.js",\n\t"./ms-my.js": "../../../node_modules/moment/locale/ms-my.js",\n\t"./ms.js": "../../../node_modules/moment/locale/ms.js",\n\t"./mt": "../../../node_modules/moment/locale/mt.js",\n\t"./mt.js": "../../../node_modules/moment/locale/mt.js",\n\t"./my": "../../../node_modules/moment/locale/my.js",\n\t"./my.js": "../../../node_modules/moment/locale/my.js",\n\t"./nb": "../../../node_modules/moment/locale/nb.js",\n\t"./nb.js": "../../../node_modules/moment/locale/nb.js",\n\t"./ne": "../../../node_modules/moment/locale/ne.js",\n\t"./ne.js": "../../../node_modules/moment/locale/ne.js",\n\t"./nl": "../../../node_modules/moment/locale/nl.js",\n\t"./nl-be": "../../../node_modules/moment/locale/nl-be.js",\n\t"./nl-be.js": "../../../node_modules/moment/locale/nl-be.js",\n\t"./nl.js": "../../../node_modules/moment/locale/nl.js",\n\t"./nn": "../../../node_modules/moment/locale/nn.js",\n\t"./nn.js": "../../../node_modules/moment/locale/nn.js",\n\t"./pa-in": "../../../node_modules/moment/locale/pa-in.js",\n\t"./pa-in.js": "../../../node_modules/moment/locale/pa-in.js",\n\t"./pl": "../../../node_modules/moment/locale/pl.js",\n\t"./pl.js": "../../../node_modules/moment/locale/pl.js",\n\t"./pt": "../../../node_modules/moment/locale/pt.js",\n\t"./pt-br": "../../../node_modules/moment/locale/pt-br.js",\n\t"./pt-br.js": "../../../node_modules/moment/locale/pt-br.js",\n\t"./pt.js": "../../../node_modules/moment/locale/pt.js",\n\t"./ro": "../../../node_modules/moment/locale/ro.js",\n\t"./ro.js": "../../../node_modules/moment/locale/ro.js",\n\t"./ru": "../../../node_modules/moment/locale/ru.js",\n\t"./ru.js": "../../../node_modules/moment/locale/ru.js",\n\t"./sd": "../../../node_modules/moment/locale/sd.js",\n\t"./sd.js": "../../../node_modules/moment/locale/sd.js",\n\t"./se": "../../../node_modules/moment/locale/se.js",\n\t"./se.js": "../../../node_modules/moment/locale/se.js",\n\t"./si": "../../../node_modules/moment/locale/si.js",\n\t"./si.js": "../../../node_modules/moment/locale/si.js",\n\t"./sk": "../../../node_modules/moment/locale/sk.js",\n\t"./sk.js": "../../../node_modules/moment/locale/sk.js",\n\t"./sl": "../../../node_modules/moment/locale/sl.js",\n\t"./sl.js": "../../../node_modules/moment/locale/sl.js",\n\t"./sq": "../../../node_modules/moment/locale/sq.js",\n\t"./sq.js": "../../../node_modules/moment/locale/sq.js",\n\t"./sr": "../../../node_modules/moment/locale/sr.js",\n\t"./sr-cyrl": "../../../node_modules/moment/locale/sr-cyrl.js",\n\t"./sr-cyrl.js": "../../../node_modules/moment/locale/sr-cyrl.js",\n\t"./sr.js": "../../../node_modules/moment/locale/sr.js",\n\t"./ss": "../../../node_modules/moment/locale/ss.js",\n\t"./ss.js": "../../../node_modules/moment/locale/ss.js",\n\t"./sv": "../../../node_modules/moment/locale/sv.js",\n\t"./sv.js": "../../../node_modules/moment/locale/sv.js",\n\t"./sw": "../../../node_modules/moment/locale/sw.js",\n\t"./sw.js": "../../../node_modules/moment/locale/sw.js",\n\t"./ta": "../../../node_modules/moment/locale/ta.js",\n\t"./ta.js": "../../../node_modules/moment/locale/ta.js",\n\t"./te": "../../../node_modules/moment/locale/te.js",\n\t"./te.js": "../../../node_modules/moment/locale/te.js",\n\t"./tet": "../../../node_modules/moment/locale/tet.js",\n\t"./tet.js": "../../../node_modules/moment/locale/tet.js",\n\t"./tg": "../../../node_modules/moment/locale/tg.js",\n\t"./tg.js": "../../../node_modules/moment/locale/tg.js",\n\t"./th": "../../../node_modules/moment/locale/th.js",\n\t"./th.js": "../../../node_modules/moment/locale/th.js",\n\t"./tl-ph": "../../../node_modules/moment/locale/tl-ph.js",\n\t"./tl-ph.js": "../../../node_modules/moment/locale/tl-ph.js",\n\t"./tlh": "../../../node_modules/moment/locale/tlh.js",\n\t"./tlh.js": "../../../node_modules/moment/locale/tlh.js",\n\t"./tr": "../../../node_modules/moment/locale/tr.js",\n\t"./tr.js": "../../../node_modules/moment/locale/tr.js",\n\t"./tzl": "../../../node_modules/moment/locale/tzl.js",\n\t"./tzl.js": "../../../node_modules/moment/locale/tzl.js",\n\t"./tzm": "../../../node_modules/moment/locale/tzm.js",\n\t"./tzm-latn": "../../../node_modules/moment/locale/tzm-latn.js",\n\t"./tzm-latn.js": "../../../node_modules/moment/locale/tzm-latn.js",\n\t"./tzm.js": "../../../node_modules/moment/locale/tzm.js",\n\t"./ug-cn": "../../../node_modules/moment/locale/ug-cn.js",\n\t"./ug-cn.js": "../../../node_modules/moment/locale/ug-cn.js",\n\t"./uk": "../../../node_modules/moment/locale/uk.js",\n\t"./uk.js": "../../../node_modules/moment/locale/uk.js",\n\t"./ur": "../../../node_modules/moment/locale/ur.js",\n\t"./ur.js": "../../../node_modules/moment/locale/ur.js",\n\t"./uz": "../../../node_modules/moment/locale/uz.js",\n\t"./uz-latn": "../../../node_modules/moment/locale/uz-latn.js",\n\t"./uz-latn.js": "../../../node_modules/moment/locale/uz-latn.js",\n\t"./uz.js": "../../../node_modules/moment/locale/uz.js",\n\t"./vi": "../../../node_modules/moment/locale/vi.js",\n\t"./vi.js": "../../../node_modules/moment/locale/vi.js",\n\t"./x-pseudo": "../../../node_modules/moment/locale/x-pseudo.js",\n\t"./x-pseudo.js": "../../../node_modules/moment/locale/x-pseudo.js",\n\t"./yo": "../../../node_modules/moment/locale/yo.js",\n\t"./yo.js": "../../../node_modules/moment/locale/yo.js",\n\t"./zh-cn": "../../../node_modules/moment/locale/zh-cn.js",\n\t"./zh-cn.js": "../../../node_modules/moment/locale/zh-cn.js",\n\t"./zh-hk": "../../../node_modules/moment/locale/zh-hk.js",\n\t"./zh-hk.js": "../../../node_modules/moment/locale/zh-hk.js",\n\t"./zh-tw": "../../../node_modules/moment/locale/zh-tw.js",\n\t"./zh-tw.js": "../../../node_modules/moment/locale/zh-tw.js"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = "../../../node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$";\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/node_modules/moment/locale_sync_^\\.\\/.*$?')},"../../../org/Hibachi/HibachiAssets/js/jquery-typewatch-2.0.js":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/HibachiAssets/js/jquery-typewatch-2.0.js ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports){eval('/**\n * @depends /jquery-1.7.1.min.js\n * \n */\n\n/*\n*\tTypeWatch 2.0 - Original by Denny Ferrassoli / Refactored by Charles Christolini\n*\n*\tExamples/Docs: github.com/dennyferra/TypeWatch\n*\t\n*  Copyright(c) 2007 Denny Ferrassoli - DennyDotNet.com\n*  Coprright(c) 2008 Charles Christolini - BinaryPie.com\n*  \n*  Dual licensed under the MIT and GPL licenses:\n*  http://www.opensource.org/licenses/mit-license.php\n*  http://www.gnu.org/licenses/gpl.html\n*/\n\n(function(jQuery) {\n\tjQuery.fn.typeWatch = function(o) {\n\t\t// Options\n\t\tvar options = jQuery.extend({\n\t\t\twait: 750,\n\t\t\tcallback: function() { },\n\t\t\thighlight: true,\n\t\t\tcaptureLength: 2\n\t\t}, o);\n\n\t\tfunction checkElement(timer, override) {\n\t\t\tvar elTxt = jQuery(timer.el).val();\n\n\t\t\t// Fire if text >= options.captureLength AND text != saved txt OR if override AND text >= options.captureLength\n\t\t\tif ((elTxt.length >= options.captureLength && elTxt.toUpperCase() != timer.text)\n\t\t\t|| (override && elTxt.length >= options.captureLength)) {\n\t\t\t\ttimer.text = elTxt.toUpperCase();\n\t\t\t\ttimer.cb(elTxt);\n\t\t\t}\n\t\t};\n\n\t\tfunction watchElement(elem) {\n\t\t\t// Must be text or textarea\n\t\t\tif (elem.type.toUpperCase() == "TEXT" || elem.nodeName.toUpperCase() == "TEXTAREA") {\n\n\t\t\t\t// Allocate timer element\n\t\t\t\tvar timer = {\n\t\t\t\t\ttimer: null,\n\t\t\t\t\ttext: jQuery(elem).val().toUpperCase(),\n\t\t\t\t\tcb: options.callback,\n\t\t\t\t\tel: elem,\n\t\t\t\t\twait: options.wait\n\t\t\t\t};\n\n\t\t\t\t// Set focus action (highlight)\n\t\t\t\tif (options.highlight) {\n\t\t\t\t\tjQuery(elem).focus(\n\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\tthis.select();\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Key watcher / clear and reset the timer\n\t\t\t\tvar startWatch = function(evt) {\n\t\t\t\t\tvar timerWait = timer.wait;\n\t\t\t\t\tvar overrideBool = false;\n\n\t\t\t\t\tif (evt.keyCode == 13 && this.type.toUpperCase() == "TEXT") {\n\t\t\t\t\t\ttimerWait = 1;\n\t\t\t\t\t\toverrideBool = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar timerCallbackFx = function() {\n\t\t\t\t\t\tcheckElement(timer, overrideBool)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Clear timer\t\t\t\t\t\n\t\t\t\t\tclearTimeout(timer.timer);\n\t\t\t\t\ttimer.timer = setTimeout(timerCallbackFx, timerWait);\n\t\t\t\t};\n\n\t\t\t\tjQuery(elem).keydown(startWatch);\n\t\t\t}\n\t\t};\n\n\t\t// Watch Each Element\n\t\treturn this.each(function(index) {\n\t\t\twatchElement(this);\n\t\t});\n\n\t};\n})(jQuery);\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/HibachiAssets/js/jquery-typewatch-2.0.js?')},"../../../org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js":
/*!******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports){eval("/*\n * jQuery timepicker addon\n * By: Trent Richardson [http://trentrichardson.com]\n * Version 1.3.1\n * Last Modified: 07/07/2013\n *\n * Copyright 2013 Trent Richardson\n * You may use this project under MIT or GPL licenses.\n * http://trentrichardson.com/Impromptu/GPL-LICENSE.txt\n * http://trentrichardson.com/Impromptu/MIT-LICENSE.txt\n */\n\n/*jslint evil: true, white: false, undef: false, nomen: false */\n\n(function($) {\n\n\t/*\n\t* Lets not redefine timepicker, Prevent \"Uncaught RangeError: Maximum call stack size exceeded\"\n\t*/\n\t$.ui.timepicker = $.ui.timepicker || {};\n\tif ($.ui.timepicker.version) {\n\t\treturn;\n\t}\n\n\t/*\n\t* Extend jQueryUI, get it started with our version number\n\t*/\n\t$.extend($.ui, {\n\t\ttimepicker: {\n\t\t\tversion: \"1.3.1\"\n\t\t}\n\t});\n\n\t/* \n\t* Timepicker manager.\n\t* Use the singleton instance of this class, $.timepicker, to interact with the time picker.\n\t* Settings for (groups of) time pickers are maintained in an instance object,\n\t* allowing multiple different settings on the same page.\n\t*/\n\tvar Timepicker = function() {\n\t\tthis.regional = []; // Available regional settings, indexed by language code\n\t\tthis.regional[''] = { // Default regional settings\n\t\t\tcurrentText: 'Now',\n\t\t\tcloseText: 'Done',\n\t\t\tamNames: ['AM', 'A'],\n\t\t\tpmNames: ['PM', 'P'],\n\t\t\ttimeFormat: 'HH:mm',\n\t\t\ttimeSuffix: '',\n\t\t\ttimeOnlyTitle: 'Choose Time',\n\t\t\ttimeText: 'Time',\n\t\t\thourText: 'Hour',\n\t\t\tminuteText: 'Minute',\n\t\t\tsecondText: 'Second',\n\t\t\tmillisecText: 'Millisecond',\n\t\t\tmicrosecText: 'Microsecond',\n\t\t\ttimezoneText: 'Time Zone',\n\t\t\tisRTL: false\n\t\t};\n\t\tthis._defaults = { // Global defaults for all the datetime picker instances\n\t\t\tshowButtonPanel: true,\n\t\t\ttimeOnly: false,\n\t\t\tshowHour: null,\n\t\t\tshowMinute: null,\n\t\t\tshowSecond: null,\n\t\t\tshowMillisec: null,\n\t\t\tshowMicrosec: null,\n\t\t\tshowTimezone: null,\n\t\t\tshowTime: true,\n\t\t\tstepHour: 1,\n\t\t\tstepMinute: 1,\n\t\t\tstepSecond: 1,\n\t\t\tstepMillisec: 1,\n\t\t\tstepMicrosec: 1,\n\t\t\thour: 0,\n\t\t\tminute: 0,\n\t\t\tsecond: 0,\n\t\t\tmillisec: 0,\n\t\t\tmicrosec: 0,\n\t\t\ttimezone: null,\n\t\t\thourMin: 0,\n\t\t\tminuteMin: 0,\n\t\t\tsecondMin: 0,\n\t\t\tmillisecMin: 0,\n\t\t\tmicrosecMin: 0,\n\t\t\thourMax: 23,\n\t\t\tminuteMax: 59,\n\t\t\tsecondMax: 59,\n\t\t\tmillisecMax: 999,\n\t\t\tmicrosecMax: 999,\n\t\t\tminDateTime: null,\n\t\t\tmaxDateTime: null,\n\t\t\tonSelect: null,\n\t\t\thourGrid: 0,\n\t\t\tminuteGrid: 0,\n\t\t\tsecondGrid: 0,\n\t\t\tmillisecGrid: 0,\n\t\t\tmicrosecGrid: 0,\n\t\t\talwaysSetTime: true,\n\t\t\tseparator: ' ',\n\t\t\taltFieldTimeOnly: true,\n\t\t\taltTimeFormat: null,\n\t\t\taltSeparator: null,\n\t\t\taltTimeSuffix: null,\n\t\t\tpickerTimeFormat: null,\n\t\t\tpickerTimeSuffix: null,\n\t\t\tshowTimepicker: true,\n\t\t\ttimezoneList: null,\n\t\t\taddSliderAccess: false,\n\t\t\tsliderAccessArgs: null,\n\t\t\tcontrolType: 'slider',\n\t\t\tdefaultValue: null,\n\t\t\tparse: 'strict'\n\t\t};\n\t\t$.extend(this._defaults, this.regional['']);\n\t};\n\n\t$.extend(Timepicker.prototype, {\n\t\t$input: null,\n\t\t$altInput: null,\n\t\t$timeObj: null,\n\t\tinst: null,\n\t\thour_slider: null,\n\t\tminute_slider: null,\n\t\tsecond_slider: null,\n\t\tmillisec_slider: null,\n\t\tmicrosec_slider: null,\n\t\ttimezone_select: null,\n\t\thour: 0,\n\t\tminute: 0,\n\t\tsecond: 0,\n\t\tmillisec: 0,\n\t\tmicrosec: 0,\n\t\ttimezone: null,\n\t\thourMinOriginal: null,\n\t\tminuteMinOriginal: null,\n\t\tsecondMinOriginal: null,\n\t\tmillisecMinOriginal: null,\n\t\tmicrosecMinOriginal: null,\n\t\thourMaxOriginal: null,\n\t\tminuteMaxOriginal: null,\n\t\tsecondMaxOriginal: null,\n\t\tmillisecMaxOriginal: null,\n\t\tmicrosecMaxOriginal: null,\n\t\tampm: '',\n\t\tformattedDate: '',\n\t\tformattedTime: '',\n\t\tformattedDateTime: '',\n\t\ttimezoneList: null,\n\t\tunits: ['hour','minute','second','millisec', 'microsec'],\n\t\tsupport: {},\n\t\tcontrol: null,\n\n\t\t/* \n\t\t* Override the default settings for all instances of the time picker.\n\t\t* @param  settings  object - the new settings to use as defaults (anonymous object)\n\t\t* @return the manager object\n\t\t*/\n\t\tsetDefaults: function(settings) {\n\t\t\textendRemove(this._defaults, settings || {});\n\t\t\treturn this;\n\t\t},\n\n\t\t/*\n\t\t* Create a new Timepicker instance\n\t\t*/\n\t\t_newInst: function($input, opts) {\n\t\t\tvar tp_inst = new Timepicker(),\n\t\t\t\tinlineSettings = {},\n            \tfns = {},\n\t\t    \toverrides, i;\n\n\t\t\tfor (var attrName in this._defaults) {\n\t\t\t\tif(this._defaults.hasOwnProperty(attrName)){\n\t\t\t\t\tvar attrValue = $input.attr('time:' + attrName);\n\t\t\t\t\tif (attrValue) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tinlineSettings[attrName] = eval(attrValue);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tinlineSettings[attrName] = attrValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t    overrides = {\n\t\t        beforeShow: function (input, dp_inst) {\n\t\t            if ($.isFunction(tp_inst._defaults.evnts.beforeShow)) {\n\t\t                return tp_inst._defaults.evnts.beforeShow.call($input[0], input, dp_inst, tp_inst);\n\t\t            }\n\t\t        },\n\t\t        onChangeMonthYear: function (year, month, dp_inst) {\n\t\t            // Update the time as well : this prevents the time from disappearing from the $input field.\n\t\t            tp_inst._updateDateTime(dp_inst);\n\t\t            if ($.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)) {\n\t\t                tp_inst._defaults.evnts.onChangeMonthYear.call($input[0], year, month, dp_inst, tp_inst);\n\t\t            }\n\t\t        },\n\t\t        onClose: function (dateText, dp_inst) {\n\t\t            if (tp_inst.timeDefined === true && $input.val() !== '') {\n\t\t                tp_inst._updateDateTime(dp_inst);\n\t\t            }\n\t\t            if ($.isFunction(tp_inst._defaults.evnts.onClose)) {\n\t\t                tp_inst._defaults.evnts.onClose.call($input[0], dateText, dp_inst, tp_inst);\n\t\t            }\n\t\t        }\n\t\t    };\n\t\t    for (i in overrides) {\n\t\t        if (overrides.hasOwnProperty(i)) {\n\t\t            fns[i] = opts[i] || null;\n\t\t        }\n\t\t    }\n\n\t\t    tp_inst._defaults = $.extend({}, this._defaults, inlineSettings, opts, overrides, {\n\t\t        evnts:fns,\n\t\t        timepicker: tp_inst // add timepicker as a property of datepicker: $.datepicker._get(dp_inst, 'timepicker');\n\t\t    });\n\t\t\ttp_inst.amNames = $.map(tp_inst._defaults.amNames, function(val) {\n\t\t\t\treturn val.toUpperCase();\n\t\t\t});\n\t\t\ttp_inst.pmNames = $.map(tp_inst._defaults.pmNames, function(val) {\n\t\t\t\treturn val.toUpperCase();\n\t\t\t});\n\n\t\t\t// detect which units are supported\n\t\t\ttp_inst.support = detectSupport(\n\t\t\t\t\ttp_inst._defaults.timeFormat + \n\t\t\t\t\t(tp_inst._defaults.pickerTimeFormat? tp_inst._defaults.pickerTimeFormat:'') + \n\t\t\t\t\t(tp_inst._defaults.altTimeFormat? tp_inst._defaults.altTimeFormat:''));\n\n\t\t\t// controlType is string - key to our this._controls\n\t\t\tif(typeof(tp_inst._defaults.controlType) === 'string'){\n\t\t\t\tif(tp_inst._defaults.controlType == 'slider' && typeof(jQuery.ui.slider) === 'undefined'){\n\t\t\t\t\ttp_inst._defaults.controlType = 'select';\n\t\t\t\t}\n\t\t\t\ttp_inst.control = tp_inst._controls[tp_inst._defaults.controlType];\n\t\t\t}\n\t\t\t// controlType is an object and must implement create, options, value methods\n\t\t\telse{ \n\t\t\t\ttp_inst.control = tp_inst._defaults.controlType;\n\t\t\t}\n\n\t\t\t// prep the timezone options\n\t\t\tvar timezoneList = [-720,-660,-600,-570,-540,-480,-420,-360,-300,-270,-240,-210,-180,-120,-60,\n\t\t\t\t\t0,60,120,180,210,240,270,300,330,345,360,390,420,480,525,540,570,600,630,660,690,720,765,780,840];\n\t\t\tif (tp_inst._defaults.timezoneList !== null) {\n\t\t\t\ttimezoneList = tp_inst._defaults.timezoneList;\n\t\t\t}\n\t\t\tvar tzl=timezoneList.length,tzi=0,tzv=null;\n\t\t\tif (tzl > 0 && typeof timezoneList[0] !== 'object') {\n\t\t\t\tfor(; tzi<tzl; tzi++){\n\t\t\t\t\ttzv = timezoneList[tzi];\n\t\t\t\t\ttimezoneList[tzi] = { value: tzv, label: $.timepicker.timezoneOffsetString(tzv, tp_inst.support.iso8601) };\n\t\t\t\t}\n\t\t\t}\n\t\t\ttp_inst._defaults.timezoneList = timezoneList;\n\n\t\t\t// set the default units\n\t\t\ttp_inst.timezone = tp_inst._defaults.timezone !== null? $.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone) : \n\t\t\t\t\t\t\t((new Date()).getTimezoneOffset()*-1);\n\t\t\ttp_inst.hour = tp_inst._defaults.hour < tp_inst._defaults.hourMin? tp_inst._defaults.hourMin : \n\t\t\t\t\t\t\ttp_inst._defaults.hour > tp_inst._defaults.hourMax? tp_inst._defaults.hourMax : tp_inst._defaults.hour;\n\t\t\ttp_inst.minute = tp_inst._defaults.minute < tp_inst._defaults.minuteMin? tp_inst._defaults.minuteMin : \n\t\t\t\t\t\t\ttp_inst._defaults.minute > tp_inst._defaults.minuteMax? tp_inst._defaults.minuteMax : tp_inst._defaults.minute;\n\t\t\ttp_inst.second = tp_inst._defaults.second < tp_inst._defaults.secondMin? tp_inst._defaults.secondMin : \n\t\t\t\t\t\t\ttp_inst._defaults.second > tp_inst._defaults.secondMax? tp_inst._defaults.secondMax : tp_inst._defaults.second;\n\t\t\ttp_inst.millisec = tp_inst._defaults.millisec < tp_inst._defaults.millisecMin? tp_inst._defaults.millisecMin : \n\t\t\t\t\t\t\ttp_inst._defaults.millisec > tp_inst._defaults.millisecMax? tp_inst._defaults.millisecMax : tp_inst._defaults.millisec;\n\t\t\ttp_inst.microsec = tp_inst._defaults.microsec < tp_inst._defaults.microsecMin? tp_inst._defaults.microsecMin : \n\t\t\t\t\t\t\ttp_inst._defaults.microsec > tp_inst._defaults.microsecMax? tp_inst._defaults.microsecMax : tp_inst._defaults.microsec;\n\t\t\ttp_inst.ampm = '';\n\t\t\ttp_inst.$input = $input;\n\n\t\t\tif (tp_inst._defaults.altField) {\n\t\t\t\ttp_inst.$altInput = $(tp_inst._defaults.altField).css({\n\t\t\t\t\tcursor: 'pointer'\n\t\t\t\t}).focus(function() {\n\t\t\t\t\t$input.trigger(\"focus\");\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (tp_inst._defaults.minDate === 0 || tp_inst._defaults.minDateTime === 0) {\n\t\t\t\ttp_inst._defaults.minDate = new Date();\n\t\t\t}\n\t\t\tif (tp_inst._defaults.maxDate === 0 || tp_inst._defaults.maxDateTime === 0) {\n\t\t\t\ttp_inst._defaults.maxDate = new Date();\n\t\t\t}\n\n\t\t\t// datepicker needs minDate/maxDate, timepicker needs minDateTime/maxDateTime..\n\t\t\tif (tp_inst._defaults.minDate !== undefined && tp_inst._defaults.minDate instanceof Date) {\n\t\t\t\ttp_inst._defaults.minDateTime = new Date(tp_inst._defaults.minDate.getTime());\n\t\t\t}\n\t\t\tif (tp_inst._defaults.minDateTime !== undefined && tp_inst._defaults.minDateTime instanceof Date) {\n\t\t\t\ttp_inst._defaults.minDate = new Date(tp_inst._defaults.minDateTime.getTime());\n\t\t\t}\n\t\t\tif (tp_inst._defaults.maxDate !== undefined && tp_inst._defaults.maxDate instanceof Date) {\n\t\t\t\ttp_inst._defaults.maxDateTime = new Date(tp_inst._defaults.maxDate.getTime());\n\t\t\t}\n\t\t\tif (tp_inst._defaults.maxDateTime !== undefined && tp_inst._defaults.maxDateTime instanceof Date) {\n\t\t\t\ttp_inst._defaults.maxDate = new Date(tp_inst._defaults.maxDateTime.getTime());\n\t\t\t}\n\t\t\ttp_inst.$input.bind('focus', function() {\n\t\t\t\ttp_inst._onFocus();\n\t\t\t});\n\n\t\t\treturn tp_inst;\n\t\t},\n\n\t\t/*\n\t\t* add our sliders to the calendar\n\t\t*/\n\t\t_addTimePicker: function(dp_inst) {\n\t\t\tvar currDT = (this.$altInput && this._defaults.altFieldTimeOnly) ? this.$input.val() + ' ' + this.$altInput.val() : this.$input.val();\n\n\t\t\tthis.timeDefined = this._parseTime(currDT);\n\t\t\tthis._limitMinMaxDateTime(dp_inst, false);\n\t\t\tthis._injectTimePicker();\n\t\t},\n\n\t\t/*\n\t\t* parse the time string from input value or _setTime\n\t\t*/\n\t\t_parseTime: function(timeString, withDate) {\n\t\t\tif (!this.inst) {\n\t\t\t\tthis.inst = $.datepicker._getInst(this.$input[0]);\n\t\t\t}\n\n\t\t\tif (withDate || !this._defaults.timeOnly) {\n\t\t\t\tvar dp_dateFormat = $.datepicker._get(this.inst, 'dateFormat');\n\t\t\t\ttry {\n\t\t\t\t\tvar parseRes = parseDateTimeInternal(dp_dateFormat, this._defaults.timeFormat, timeString, $.datepicker._getFormatConfig(this.inst), this._defaults);\n\t\t\t\t\tif (!parseRes.timeObj) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t$.extend(this, parseRes.timeObj);\n\t\t\t\t} catch (err) {\n\t\t\t\t\t$.timepicker.log(\"Error parsing the date/time string: \" + err +\n\t\t\t\t\t\t\t\t\t\"\\ndate/time string = \" + timeString +\n\t\t\t\t\t\t\t\t\t\"\\ntimeFormat = \" + this._defaults.timeFormat +\n\t\t\t\t\t\t\t\t\t\"\\ndateFormat = \" + dp_dateFormat);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tvar timeObj = $.datepicker.parseTime(this._defaults.timeFormat, timeString, this._defaults);\n\t\t\t\tif (!timeObj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t$.extend(this, timeObj);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t* generate and inject html for timepicker into ui datepicker\n\t\t*/\n\t\t_injectTimePicker: function() {\n\t\t\tvar $dp = this.inst.dpDiv,\n\t\t\t\to = this.inst.settings,\n\t\t\t\ttp_inst = this,\n\t\t\t\tlitem = '',\n\t\t\t\tuitem = '',\n\t\t\t\tshow = null,\n\t\t\t\tmax = {},\n\t\t\t\tgridSize = {},\n\t\t\t\tsize = null,\n\t\t\t\ti=0,\n\t\t\t\tl=0;\n\n\t\t\t// Prevent displaying twice\n\t\t\tif ($dp.find(\"div.ui-timepicker-div\").length === 0 && o.showTimepicker) {\n\t\t\t\tvar noDisplay = ' style=\"display:none;\"',\n\t\t\t\t\thtml = '<div class=\"ui-timepicker-div'+ (o.isRTL? ' ui-timepicker-rtl' : '') +'\"><dl>' + '<dt class=\"ui_tpicker_time_label\"' + ((o.showTime) ? '' : noDisplay) + '>' + o.timeText + '</dt>' + \n\t\t\t\t\t\t\t\t'<dd class=\"ui_tpicker_time\"' + ((o.showTime) ? '' : noDisplay) + '></dd>';\n\n\t\t\t\t// Create the markup\n\t\t\t\tfor(i=0,l=this.units.length; i<l; i++){\n\t\t\t\t\tlitem = this.units[i];\n\t\t\t\t\tuitem = litem.substr(0,1).toUpperCase() + litem.substr(1);\n\t\t\t\t\tshow = o['show'+uitem] !== null? o['show'+uitem] : this.support[litem];\n\n\t\t\t\t\t// Added by Peter Medeiros:\n\t\t\t\t\t// - Figure out what the hour/minute/second max should be based on the step values.\n\t\t\t\t\t// - Example: if stepMinute is 15, then minMax is 45.\n\t\t\t\t\tmax[litem] = parseInt((o[litem+'Max'] - ((o[litem+'Max'] - o[litem+'Min']) % o['step'+uitem])), 10);\n\t\t\t\t\tgridSize[litem] = 0;\n\n\t\t\t\t\thtml += '<dt class=\"ui_tpicker_'+ litem +'_label\"' + (show ? '' : noDisplay) + '>' + o[litem +'Text'] + '</dt>' + \n\t\t\t\t\t\t\t\t'<dd class=\"ui_tpicker_'+ litem +'\"><div class=\"ui_tpicker_'+ litem +'_slider\"' + (show ? '' : noDisplay) + '></div>';\n\n\t\t\t\t\tif (show && o[litem+'Grid'] > 0) {\n\t\t\t\t\t\thtml += '<div style=\"padding-left: 1px\"><table class=\"ui-tpicker-grid-label\"><tr>';\n\n\t\t\t\t\t\tif(litem == 'hour'){\n\t\t\t\t\t\t\tfor (var h = o[litem+'Min']; h <= max[litem]; h += parseInt(o[litem+'Grid'], 10)) {\n\t\t\t\t\t\t\t\tgridSize[litem]++;\n\t\t\t\t\t\t\t\tvar tmph = $.datepicker.formatTime(this.support.ampm? 'hht':'HH', {hour:h}, o);\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\thtml += '<td data-for=\"'+litem+'\">' + tmph + '</td>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tfor (var m = o[litem+'Min']; m <= max[litem]; m += parseInt(o[litem+'Grid'], 10)) {\n\t\t\t\t\t\t\t\tgridSize[litem]++;\n\t\t\t\t\t\t\t\thtml += '<td data-for=\"'+litem+'\">' + ((m < 10) ? '0' : '') + m + '</td>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\thtml += '</tr></table></div>';\n\t\t\t\t\t}\n\t\t\t\t\thtml += '</dd>';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Timezone\n\t\t\t\tvar showTz = o.showTimezone !== null? o.showTimezone : this.support.timezone;\n\t\t\t\thtml += '<dt class=\"ui_tpicker_timezone_label\"' + (showTz ? '' : noDisplay) + '>' + o.timezoneText + '</dt>';\n\t\t\t\thtml += '<dd class=\"ui_tpicker_timezone\" ' + (showTz ? '' : noDisplay) + '></dd>';\n\n\t\t\t\t// Create the elements from string\n\t\t\t\thtml += '</dl></div>';\n\t\t\t\tvar $tp = $(html);\n\n\t\t\t\t// if we only want time picker...\n\t\t\t\tif (o.timeOnly === true) {\n\t\t\t\t\t$tp.prepend('<div class=\"ui-widget-header ui-helper-clearfix ui-corner-all\">' + '<div class=\"ui-datepicker-title\">' + o.timeOnlyTitle + '</div>' + '</div>');\n\t\t\t\t\t$dp.find('.ui-datepicker-header, .ui-datepicker-calendar').hide();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// add sliders, adjust grids, add events\n\t\t\t\tfor(i=0,l=tp_inst.units.length; i<l; i++){\n\t\t\t\t\tlitem = tp_inst.units[i];\n\t\t\t\t\tuitem = litem.substr(0,1).toUpperCase() + litem.substr(1);\n\t\t\t\t\tshow = o['show'+uitem] !== null? o['show'+uitem] : this.support[litem];\n\n\t\t\t\t\t// add the slider\n\t\t\t\t\ttp_inst[litem+'_slider'] = tp_inst.control.create(tp_inst, $tp.find('.ui_tpicker_'+litem+'_slider'), litem, tp_inst[litem], o[litem+'Min'], max[litem], o['step'+uitem]);\n\n\t\t\t\t\t// adjust the grid and add click event\n\t\t\t\t\tif (show && o[litem+'Grid'] > 0) {\n\t\t\t\t\t\tsize = 100 * gridSize[litem] * o[litem+'Grid'] / (max[litem] - o[litem+'Min']);\n\t\t\t\t\t\t$tp.find('.ui_tpicker_'+litem+' table').css({\n\t\t\t\t\t\t\twidth: size + \"%\",\n\t\t\t\t\t\t\tmarginLeft: o.isRTL? '0' : ((size / (-2 * gridSize[litem])) + \"%\"),\n\t\t\t\t\t\t\tmarginRight: o.isRTL? ((size / (-2 * gridSize[litem])) + \"%\") : '0',\n\t\t\t\t\t\t\tborderCollapse: 'collapse'\n\t\t\t\t\t\t}).find(\"td\").click(function(e){\n\t\t\t\t\t\t\t\tvar $t = $(this),\n\t\t\t\t\t\t\t\t\th = $t.html(),\n\t\t\t\t\t\t\t\t\tn = parseInt(h.replace(/[^0-9]/g),10),\n\t\t\t\t\t\t\t\t\tap = h.replace(/[^apm]/ig),\n\t\t\t\t\t\t\t\t\tf = $t.data('for'); // loses scope, so we use data-for\n\n\t\t\t\t\t\t\t\tif(f == 'hour'){\n\t\t\t\t\t\t\t\t\tif(ap.indexOf('p') !== -1 && n < 12){\n\t\t\t\t\t\t\t\t\t\tn += 12;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\tif(ap.indexOf('a') !== -1 && n === 12){\n\t\t\t\t\t\t\t\t\t\t\tn = 0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ttp_inst.control.value(tp_inst, tp_inst[f+'_slider'], litem, n);\n\n\t\t\t\t\t\t\t\ttp_inst._onTimeChange();\n\t\t\t\t\t\t\t\ttp_inst._onSelectHandler();\n\t\t\t\t\t\t\t}).css({\n\t\t\t\t\t\t\t\tcursor: 'pointer',\n\t\t\t\t\t\t\t\twidth: (100 / gridSize[litem]) + '%',\n\t\t\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t\t\t\toverflow: 'hidden'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} // end if grid > 0\n\t\t\t\t} // end for loop\n\n\t\t\t\t// Add timezone options\n\t\t\t\tthis.timezone_select = $tp.find('.ui_tpicker_timezone').append('<select></select>').find(\"select\");\n\t\t\t\t$.fn.append.apply(this.timezone_select,\n\t\t\t\t$.map(o.timezoneList, function(val, idx) {\n\t\t\t\t\treturn $(\"<option />\").val(typeof val == \"object\" ? val.value : val).text(typeof val == \"object\" ? val.label : val);\n\t\t\t\t}));\n\t\t\t\tif (typeof(this.timezone) != \"undefined\" && this.timezone !== null && this.timezone !== \"\") {\n\t\t\t\t\tvar local_timezone = (new Date(this.inst.selectedYear, this.inst.selectedMonth, this.inst.selectedDay, 12)).getTimezoneOffset()*-1;\n\t\t\t\t\tif (local_timezone == this.timezone) {\n\t\t\t\t\t\tselectLocalTimezone(tp_inst);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.timezone_select.val(this.timezone);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof(this.hour) != \"undefined\" && this.hour !== null && this.hour !== \"\") {\n\t\t\t\t\t\tthis.timezone_select.val(o.timezone);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tselectLocalTimezone(tp_inst);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.timezone_select.change(function() {\n\t\t\t\t\ttp_inst._onTimeChange();\n\t\t\t\t\ttp_inst._onSelectHandler();\n\t\t\t\t});\n\t\t\t\t// End timezone options\n\t\t\t\t\n\t\t\t\t// inject timepicker into datepicker\n\t\t\t\tvar $buttonPanel = $dp.find('.ui-datepicker-buttonpane');\n\t\t\t\tif ($buttonPanel.length) {\n\t\t\t\t\t$buttonPanel.before($tp);\n\t\t\t\t} else {\n\t\t\t\t\t$dp.append($tp);\n\t\t\t\t}\n\n\t\t\t\tthis.$timeObj = $tp.find('.ui_tpicker_time');\n\n\t\t\t\tif (this.inst !== null) {\n\t\t\t\t\tvar timeDefined = this.timeDefined;\n\t\t\t\t\tthis._onTimeChange();\n\t\t\t\t\tthis.timeDefined = timeDefined;\n\t\t\t\t}\n\n\t\t\t\t// slideAccess integration: http://trentrichardson.com/2011/11/11/jquery-ui-sliders-and-touch-accessibility/\n\t\t\t\tif (this._defaults.addSliderAccess) {\n\t\t\t\t\tvar sliderAccessArgs = this._defaults.sliderAccessArgs,\n\t\t\t\t\t\trtl = this._defaults.isRTL;\n\t\t\t\t\tsliderAccessArgs.isRTL = rtl;\n\t\t\t\t\t\t\n\t\t\t\t\tsetTimeout(function() { // fix for inline mode\n\t\t\t\t\t\tif ($tp.find('.ui-slider-access').length === 0) {\n\t\t\t\t\t\t\t$tp.find('.ui-slider:visible').sliderAccess(sliderAccessArgs);\n\n\t\t\t\t\t\t\t// fix any grids since sliders are shorter\n\t\t\t\t\t\t\tvar sliderAccessWidth = $tp.find('.ui-slider-access:eq(0)').outerWidth(true);\n\t\t\t\t\t\t\tif (sliderAccessWidth) {\n\t\t\t\t\t\t\t\t$tp.find('table:visible').each(function() {\n\t\t\t\t\t\t\t\t\tvar $g = $(this),\n\t\t\t\t\t\t\t\t\t\toldWidth = $g.outerWidth(),\n\t\t\t\t\t\t\t\t\t\toldMarginLeft = $g.css(rtl? 'marginRight':'marginLeft').toString().replace('%', ''),\n\t\t\t\t\t\t\t\t\t\tnewWidth = oldWidth - sliderAccessWidth,\n\t\t\t\t\t\t\t\t\t\tnewMarginLeft = ((oldMarginLeft * newWidth) / oldWidth) + '%',\n\t\t\t\t\t\t\t\t\t\tcss = { width: newWidth, marginRight: 0, marginLeft: 0 };\n\t\t\t\t\t\t\t\t\tcss[rtl? 'marginRight':'marginLeft'] = newMarginLeft;\n\t\t\t\t\t\t\t\t\t$g.css(css);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 10);\n\t\t\t\t}\n\t\t\t\t// end slideAccess integration\n\n\t\t\t\ttp_inst._limitMinMaxDateTime(this.inst, true);\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t* This function tries to limit the ability to go outside the\n\t\t* min/max date range\n\t\t*/\n\t\t_limitMinMaxDateTime: function(dp_inst, adjustSliders) {\n\t\t\tvar o = this._defaults,\n\t\t\t\tdp_date = new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay);\n\n\t\t\tif (!this._defaults.showTimepicker) {\n\t\t\t\treturn;\n\t\t\t} // No time so nothing to check here\n\n\t\t\tif ($.datepicker._get(dp_inst, 'minDateTime') !== null && $.datepicker._get(dp_inst, 'minDateTime') !== undefined && dp_date) {\n\t\t\t\tvar minDateTime = $.datepicker._get(dp_inst, 'minDateTime'),\n\t\t\t\t\tminDateTimeDate = new Date(minDateTime.getFullYear(), minDateTime.getMonth(), minDateTime.getDate(), 0, 0, 0, 0);\n\n\t\t\t\tif (this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null || this.microsecMinOriginal === null) {\n\t\t\t\t\tthis.hourMinOriginal = o.hourMin;\n\t\t\t\t\tthis.minuteMinOriginal = o.minuteMin;\n\t\t\t\t\tthis.secondMinOriginal = o.secondMin;\n\t\t\t\t\tthis.millisecMinOriginal = o.millisecMin;\n\t\t\t\t\tthis.microsecMinOriginal = o.microsecMin;\n\t\t\t\t}\n\n\t\t\t\tif (dp_inst.settings.timeOnly || minDateTimeDate.getTime() == dp_date.getTime()) {\n\t\t\t\t\tthis._defaults.hourMin = minDateTime.getHours();\n\t\t\t\t\tif (this.hour <= this._defaults.hourMin) {\n\t\t\t\t\t\tthis.hour = this._defaults.hourMin;\n\t\t\t\t\t\tthis._defaults.minuteMin = minDateTime.getMinutes();\n\t\t\t\t\t\tif (this.minute <= this._defaults.minuteMin) {\n\t\t\t\t\t\t\tthis.minute = this._defaults.minuteMin;\n\t\t\t\t\t\t\tthis._defaults.secondMin = minDateTime.getSeconds();\n\t\t\t\t\t\t\tif (this.second <= this._defaults.secondMin) {\n\t\t\t\t\t\t\t\tthis.second = this._defaults.secondMin;\n\t\t\t\t\t\t\t\tthis._defaults.millisecMin = minDateTime.getMilliseconds();\n\t\t\t\t\t\t\t\tif(this.millisec <= this._defaults.millisecMin) {\n\t\t\t\t\t\t\t\t\tthis.millisec = this._defaults.millisecMin;\n\t\t\t\t\t\t\t\t\tthis._defaults.microsecMin = minDateTime.getMicroseconds();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (this.microsec < this._defaults.microsecMin) {\n\t\t\t\t\t\t\t\t\t\tthis.microsec = this._defaults.microsecMin;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis._defaults.microsecMin = this.microsecMinOriginal;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis._defaults.millisecMin = this.millisecMinOriginal;\n\t\t\t\t\t\t\t\tthis._defaults.microsecMin = this.microsecMinOriginal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._defaults.secondMin = this.secondMinOriginal;\n\t\t\t\t\t\t\tthis._defaults.millisecMin = this.millisecMinOriginal;\n\t\t\t\t\t\t\tthis._defaults.microsecMin = this.microsecMinOriginal;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._defaults.minuteMin = this.minuteMinOriginal;\n\t\t\t\t\t\tthis._defaults.secondMin = this.secondMinOriginal;\n\t\t\t\t\t\tthis._defaults.millisecMin = this.millisecMinOriginal;\n\t\t\t\t\t\tthis._defaults.microsecMin = this.microsecMinOriginal;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._defaults.hourMin = this.hourMinOriginal;\n\t\t\t\t\tthis._defaults.minuteMin = this.minuteMinOriginal;\n\t\t\t\t\tthis._defaults.secondMin = this.secondMinOriginal;\n\t\t\t\t\tthis._defaults.millisecMin = this.millisecMinOriginal;\n\t\t\t\t\tthis._defaults.microsecMin = this.microsecMinOriginal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($.datepicker._get(dp_inst, 'maxDateTime') !== null && $.datepicker._get(dp_inst, 'maxDateTime') !== undefined && dp_date) {\n\t\t\t\tvar maxDateTime = $.datepicker._get(dp_inst, 'maxDateTime'),\n\t\t\t\t\tmaxDateTimeDate = new Date(maxDateTime.getFullYear(), maxDateTime.getMonth(), maxDateTime.getDate(), 0, 0, 0, 0);\n\n\t\t\t\tif (this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null || this.millisecMaxOriginal === null) {\n\t\t\t\t\tthis.hourMaxOriginal = o.hourMax;\n\t\t\t\t\tthis.minuteMaxOriginal = o.minuteMax;\n\t\t\t\t\tthis.secondMaxOriginal = o.secondMax;\n\t\t\t\t\tthis.millisecMaxOriginal = o.millisecMax;\n\t\t\t\t\tthis.microsecMaxOriginal = o.microsecMax;\n\t\t\t\t}\n\n\t\t\t\tif (dp_inst.settings.timeOnly || maxDateTimeDate.getTime() == dp_date.getTime()) {\n\t\t\t\t\tthis._defaults.hourMax = maxDateTime.getHours();\n\t\t\t\t\tif (this.hour >= this._defaults.hourMax) {\n\t\t\t\t\t\tthis.hour = this._defaults.hourMax;\n\t\t\t\t\t\tthis._defaults.minuteMax = maxDateTime.getMinutes();\n\t\t\t\t\t\tif (this.minute >= this._defaults.minuteMax) {\n\t\t\t\t\t\t\tthis.minute = this._defaults.minuteMax;\n\t\t\t\t\t\t\tthis._defaults.secondMax = maxDateTime.getSeconds();\n\t\t\t\t\t\t\tif (this.second >= this._defaults.secondMax) {\n\t\t\t\t\t\t\t\tthis.second = this._defaults.secondMax;\n\t\t\t\t\t\t\t\tthis._defaults.millisecMax = maxDateTime.getMilliseconds();\n\t\t\t\t\t\t\t\tif (this.millisec >= this._defaults.millisecMax) {\n\t\t\t\t\t\t\t\t\tthis.millisec = this._defaults.millisecMax;\n\t\t\t\t\t\t\t\t\tthis._defaults.microsecMax = maxDateTime.getMicroseconds();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (this.microsec > this._defaults.microsecMax) {\n\t\t\t\t\t\t\t\t\t\tthis.microsec = this._defaults.microsecMax;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis._defaults.microsecMax = this.microsecMaxOriginal;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis._defaults.millisecMax = this.millisecMaxOriginal;\n\t\t\t\t\t\t\t\tthis._defaults.microsecMax = this.microsecMaxOriginal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._defaults.secondMax = this.secondMaxOriginal;\n\t\t\t\t\t\t\tthis._defaults.millisecMax = this.millisecMaxOriginal;\n\t\t\t\t\t\t\tthis._defaults.microsecMax = this.microsecMaxOriginal;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._defaults.minuteMax = this.minuteMaxOriginal;\n\t\t\t\t\t\tthis._defaults.secondMax = this.secondMaxOriginal;\n\t\t\t\t\t\tthis._defaults.millisecMax = this.millisecMaxOriginal;\n\t\t\t\t\t\tthis._defaults.microsecMax = this.microsecMaxOriginal;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._defaults.hourMax = this.hourMaxOriginal;\n\t\t\t\t\tthis._defaults.minuteMax = this.minuteMaxOriginal;\n\t\t\t\t\tthis._defaults.secondMax = this.secondMaxOriginal;\n\t\t\t\t\tthis._defaults.millisecMax = this.millisecMaxOriginal;\n\t\t\t\t\tthis._defaults.microsecMax = this.microsecMaxOriginal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (adjustSliders !== undefined && adjustSliders === true) {\n\t\t\t\tvar hourMax = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)), 10),\n\t\t\t\t\tminMax = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)), 10),\n\t\t\t\t\tsecMax = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)), 10),\n\t\t\t\t\tmillisecMax = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)), 10);\n\t\t\t\t\tmicrosecMax = parseInt((this._defaults.microsecMax - ((this._defaults.microsecMax - this._defaults.microsecMin) % this._defaults.stepMicrosec)), 10);\n\n\t\t\t\tif (this.hour_slider) {\n\t\t\t\t\tthis.control.options(this, this.hour_slider, 'hour', { min: this._defaults.hourMin, max: hourMax });\n\t\t\t\t\tthis.control.value(this, this.hour_slider, 'hour', this.hour - (this.hour % this._defaults.stepHour));\n\t\t\t\t}\n\t\t\t\tif (this.minute_slider) {\n\t\t\t\t\tthis.control.options(this, this.minute_slider, 'minute', { min: this._defaults.minuteMin, max: minMax });\n\t\t\t\t\tthis.control.value(this, this.minute_slider, 'minute', this.minute - (this.minute % this._defaults.stepMinute));\n\t\t\t\t}\n\t\t\t\tif (this.second_slider) {\n\t\t\t\t\tthis.control.options(this, this.second_slider, 'second', { min: this._defaults.secondMin, max: secMax });\n\t\t\t\t\tthis.control.value(this, this.second_slider, 'second', this.second - (this.second % this._defaults.stepSecond));\n\t\t\t\t}\n\t\t\t\tif (this.millisec_slider) {\n\t\t\t\t\tthis.control.options(this, this.millisec_slider, 'millisec', { min: this._defaults.millisecMin, max: millisecMax });\n\t\t\t\t\tthis.control.value(this, this.millisec_slider, 'millisec', this.millisec - (this.millisec % this._defaults.stepMillisec));\n\t\t\t\t}\n\t\t\t\tif (this.microsec_slider) {\n\t\t\t\t\tthis.control.options(this, this.microsec_slider, 'microsec', { min: this._defaults.microsecMin, max: microsecMax });\n\t\t\t\t\tthis.control.value(this, this.microsec_slider, 'microsec', this.microsec - (this.microsec % this._defaults.stepMicrosec));\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\n\t\t/*\n\t\t* when a slider moves, set the internal time...\n\t\t* on time change is also called when the time is updated in the text field\n\t\t*/\n\t\t_onTimeChange: function() {\n\t\t\tvar hour = (this.hour_slider) ? this.control.value(this, this.hour_slider, 'hour') : false,\n\t\t\t\tminute = (this.minute_slider) ? this.control.value(this, this.minute_slider, 'minute') : false,\n\t\t\t\tsecond = (this.second_slider) ? this.control.value(this, this.second_slider, 'second') : false,\n\t\t\t\tmillisec = (this.millisec_slider) ? this.control.value(this, this.millisec_slider, 'millisec') : false,\n\t\t\t\tmicrosec = (this.microsec_slider) ? this.control.value(this, this.microsec_slider, 'microsec') : false,\n\t\t\t\ttimezone = (this.timezone_select) ? this.timezone_select.val() : false,\n\t\t\t\to = this._defaults,\n\t\t\t\tpickerTimeFormat = o.pickerTimeFormat || o.timeFormat,\n\t\t\t\tpickerTimeSuffix = o.pickerTimeSuffix || o.timeSuffix;\n\n\t\t\tif (typeof(hour) == 'object') {\n\t\t\t\thour = false;\n\t\t\t}\n\t\t\tif (typeof(minute) == 'object') {\n\t\t\t\tminute = false;\n\t\t\t}\n\t\t\tif (typeof(second) == 'object') {\n\t\t\t\tsecond = false;\n\t\t\t}\n\t\t\tif (typeof(millisec) == 'object') {\n\t\t\t\tmillisec = false;\n\t\t\t}\n\t\t\tif (typeof(microsec) == 'object') {\n\t\t\t\tmicrosec = false;\n\t\t\t}\n\t\t\tif (typeof(timezone) == 'object') {\n\t\t\t\ttimezone = false;\n\t\t\t}\n\n\t\t\tif (hour !== false) {\n\t\t\t\thour = parseInt(hour, 10);\n\t\t\t}\n\t\t\tif (minute !== false) {\n\t\t\t\tminute = parseInt(minute, 10);\n\t\t\t}\n\t\t\tif (second !== false) {\n\t\t\t\tsecond = parseInt(second, 10);\n\t\t\t}\n\t\t\tif (millisec !== false) {\n\t\t\t\tmillisec = parseInt(millisec, 10);\n\t\t\t}\n\t\t\tif (microsec !== false) {\n\t\t\t\tmicrosec = parseInt(microsec, 10);\n\t\t\t}\n\n\t\t\tvar ampm = o[hour < 12 ? 'amNames' : 'pmNames'][0];\n\n\t\t\t// If the update was done in the input field, the input field should not be updated.\n\t\t\t// If the update was done using the sliders, update the input field.\n\t\t\tvar hasChanged = (hour != this.hour || minute != this.minute || second != this.second || millisec != this.millisec || microsec != this.microsec \n\t\t\t\t\t\t\t\t|| (this.ampm.length > 0 && (hour < 12) != ($.inArray(this.ampm.toUpperCase(), this.amNames) !== -1)) \n\t\t\t\t\t\t\t\t|| (this.timezone !== null && timezone != this.timezone));\n\n\t\t\tif (hasChanged) {\n\n\t\t\t\tif (hour !== false) {\n\t\t\t\t\tthis.hour = hour;\n\t\t\t\t}\n\t\t\t\tif (minute !== false) {\n\t\t\t\t\tthis.minute = minute;\n\t\t\t\t}\n\t\t\t\tif (second !== false) {\n\t\t\t\t\tthis.second = second;\n\t\t\t\t}\n\t\t\t\tif (millisec !== false) {\n\t\t\t\t\tthis.millisec = millisec;\n\t\t\t\t}\n\t\t\t\tif (microsec !== false) {\n\t\t\t\t\tthis.microsec = microsec;\n\t\t\t\t}\n\t\t\t\tif (timezone !== false) {\n\t\t\t\t\tthis.timezone = timezone;\n\t\t\t\t}\n\n\t\t\t\tif (!this.inst) {\n\t\t\t\t\tthis.inst = $.datepicker._getInst(this.$input[0]);\n\t\t\t\t}\n\n\t\t\t\tthis._limitMinMaxDateTime(this.inst, true);\n\t\t\t}\n\t\t\tif (this.support.ampm) {\n\t\t\t\tthis.ampm = ampm;\n\t\t\t}\n\n\t\t\t// Updates the time within the timepicker\n\t\t\tthis.formattedTime = $.datepicker.formatTime(o.timeFormat, this, o);\n\t\t\tif (this.$timeObj) {\n\t\t\t\tif(pickerTimeFormat === o.timeFormat){\n\t\t\t\t\tthis.$timeObj.text(this.formattedTime + pickerTimeSuffix);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tthis.$timeObj.text($.datepicker.formatTime(pickerTimeFormat, this, o) + pickerTimeSuffix);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.timeDefined = true;\n\t\t\tif (hasChanged) {\n\t\t\t\tthis._updateDateTime();\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t* call custom onSelect.\n\t\t* bind to sliders slidestop, and grid click.\n\t\t*/\n\t\t_onSelectHandler: function() {\n\t\t\tvar onSelect = this._defaults.onSelect || this.inst.settings.onSelect;\n\t\t\tvar inputEl = this.$input ? this.$input[0] : null;\n\t\t\tif (onSelect && inputEl) {\n\t\t\t\tonSelect.apply(inputEl, [this.formattedDateTime, this]);\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t* update our input with the new date time..\n\t\t*/\n\t\t_updateDateTime: function(dp_inst) {\n\t\t\tdp_inst = this.inst || dp_inst;\n\t\t\t//var dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),\n\t\t\tvar dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay)),\n\t\t\t\tdateFmt = $.datepicker._get(dp_inst, 'dateFormat'),\n\t\t\t\tformatCfg = $.datepicker._getFormatConfig(dp_inst),\n\t\t\t\ttimeAvailable = dt !== null && this.timeDefined;\n\t\t\tthis.formattedDate = $.datepicker.formatDate(dateFmt, (dt === null ? new Date() : dt), formatCfg);\n\t\t\tvar formattedDateTime = this.formattedDate;\n\t\t\t\n\t\t\t// if a slider was changed but datepicker doesn't have a value yet, set it\n\t\t\tif(dp_inst.lastVal===\"\"){\n                dp_inst.currentYear=dp_inst.selectedYear;\n                dp_inst.currentMonth=dp_inst.selectedMonth;\n                dp_inst.currentDay=dp_inst.selectedDay;\n            }\n\n\t\t\t/*\n\t\t\t* remove following lines to force every changes in date picker to change the input value\n\t\t\t* Bug descriptions: when an input field has a default value, and click on the field to pop up the date picker. \n\t\t\t* If the user manually empty the value in the input field, the date picker will never change selected value.\n\t\t\t*/\n\t\t\t//if (dp_inst.lastVal !== undefined && (dp_inst.lastVal.length > 0 && this.$input.val().length === 0)) {\n\t\t\t//\treturn;\n\t\t\t//}\n\n\t\t\tif (this._defaults.timeOnly === true) {\n\t\t\t\tformattedDateTime = this.formattedTime;\n\t\t\t} else if (this._defaults.timeOnly !== true && (this._defaults.alwaysSetTime || timeAvailable)) {\n\t\t\t\tformattedDateTime += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix;\n\t\t\t}\n\n\t\t\tthis.formattedDateTime = formattedDateTime;\n\n\t\t\tif (!this._defaults.showTimepicker) {\n\t\t\t\tthis.$input.val(this.formattedDate);\n\t\t\t} else if (this.$altInput && this._defaults.timeOnly === false && this._defaults.altFieldTimeOnly === true) {\n\t\t\t\tthis.$altInput.val(this.formattedTime);\n\t\t\t\tthis.$input.val(this.formattedDate);\n\t\t\t} else if (this.$altInput) {\n\t\t\t\tthis.$input.val(formattedDateTime);\n\t\t\t\tvar altFormattedDateTime = '',\n\t\t\t\t\taltSeparator = this._defaults.altSeparator ? this._defaults.altSeparator : this._defaults.separator,\n\t\t\t\t\taltTimeSuffix = this._defaults.altTimeSuffix ? this._defaults.altTimeSuffix : this._defaults.timeSuffix;\n\t\t\t\t\n\t\t\t\tif(!this._defaults.timeOnly){\n\t\t\t\t\tif (this._defaults.altFormat){\n\t\t\t\t\t\taltFormattedDateTime = $.datepicker.formatDate(this._defaults.altFormat, (dt === null ? new Date() : dt), formatCfg);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\taltFormattedDateTime = this.formattedDate;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (altFormattedDateTime){\n\t\t\t\t\t\taltFormattedDateTime += altSeparator;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(this._defaults.altTimeFormat){\n\t\t\t\t\taltFormattedDateTime += $.datepicker.formatTime(this._defaults.altTimeFormat, this, this._defaults) + altTimeSuffix;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\taltFormattedDateTime += this.formattedTime + altTimeSuffix;\n\t\t\t\t}\n\t\t\t\tthis.$altInput.val(altFormattedDateTime);\n\t\t\t} else {\n\t\t\t\tthis.$input.val(formattedDateTime);\n\t\t\t}\n\n\t\t\tthis.$input.trigger(\"change\");\n\t\t},\n\n\t\t_onFocus: function() {\n\t\t\tif (!this.$input.val() && this._defaults.defaultValue) {\n\t\t\t\tthis.$input.val(this._defaults.defaultValue);\n\t\t\t\tvar inst = $.datepicker._getInst(this.$input.get(0)),\n\t\t\t\t\ttp_inst = $.datepicker._get(inst, 'timepicker');\n\t\t\t\tif (tp_inst) {\n\t\t\t\t\tif (tp_inst._defaults.timeOnly && (inst.input.val() != inst.lastVal)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t$.datepicker._updateDatepicker(inst);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t$.timepicker.log(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/*\n\t\t* Small abstraction to control types\n\t\t* We can add more, just be sure to follow the pattern: create, options, value\n\t\t*/\n\t\t_controls: {\n\t\t\t// slider methods\n\t\t\tslider: {\n\t\t\t\tcreate: function(tp_inst, obj, unit, val, min, max, step){\n\t\t\t\t\tvar rtl = tp_inst._defaults.isRTL; // if rtl go -60->0 instead of 0->60\n\t\t\t\t\treturn obj.prop('slide', null).slider({\n\t\t\t\t\t\torientation: \"horizontal\",\n\t\t\t\t\t\tvalue: rtl? val*-1 : val,\n\t\t\t\t\t\tmin: rtl? max*-1 : min,\n\t\t\t\t\t\tmax: rtl? min*-1 : max,\n\t\t\t\t\t\tstep: step,\n\t\t\t\t\t\tslide: function(event, ui) {\n\t\t\t\t\t\t\ttp_inst.control.value(tp_inst, $(this), unit, rtl? ui.value*-1:ui.value);\n\t\t\t\t\t\t\ttp_inst._onTimeChange();\n\t\t\t\t\t\t},\n\t\t\t\t\t\tstop: function(event, ui) {\n\t\t\t\t\t\t\ttp_inst._onSelectHandler();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\t\n\t\t\t\t},\n\t\t\t\toptions: function(tp_inst, obj, unit, opts, val){\n\t\t\t\t\tif(tp_inst._defaults.isRTL){\n\t\t\t\t\t\tif(typeof(opts) == 'string'){\n\t\t\t\t\t\t\tif(opts == 'min' || opts == 'max'){\n\t\t\t\t\t\t\t\tif(val !== undefined){\n\t\t\t\t\t\t\t\t\treturn obj.slider(opts, val*-1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn Math.abs(obj.slider(opts));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn obj.slider(opts);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar min = opts.min, \n\t\t\t\t\t\t\tmax = opts.max;\n\t\t\t\t\t\topts.min = opts.max = null;\n\t\t\t\t\t\tif(min !== undefined){\n\t\t\t\t\t\t\topts.max = min * -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(max !== undefined){\n\t\t\t\t\t\t\topts.min = max * -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn obj.slider(opts);\n\t\t\t\t\t}\n\t\t\t\t\tif(typeof(opts) == 'string' && val !== undefined){\n\t\t\t\t\t\t\treturn obj.slider(opts, val);\n\t\t\t\t\t}\n\t\t\t\t\treturn obj.slider(opts);\n\t\t\t\t},\n\t\t\t\tvalue: function(tp_inst, obj, unit, val){\n\t\t\t\t\tif(tp_inst._defaults.isRTL){\n\t\t\t\t\t\tif(val !== undefined){\n\t\t\t\t\t\t\treturn obj.slider('value', val*-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Math.abs(obj.slider('value'));\n\t\t\t\t\t}\n\t\t\t\t\tif(val !== undefined){\n\t\t\t\t\t\treturn obj.slider('value', val);\n\t\t\t\t\t}\n\t\t\t\t\treturn obj.slider('value');\n\t\t\t\t}\n\t\t\t},\n\t\t\t// select methods\n\t\t\tselect: {\n\t\t\t\tcreate: function(tp_inst, obj, unit, val, min, max, step){\n\t\t\t\t\tvar sel = '<select class=\"ui-timepicker-select\" data-unit=\"'+ unit +'\" data-min=\"'+ min +'\" data-max=\"'+ max +'\" data-step=\"'+ step +'\">',\n\t\t\t\t\t\tformat = tp_inst._defaults.pickerTimeFormat || tp_inst._defaults.timeFormat;\n\n\t\t\t\t\tfor(var i=min; i<=max; i+=step){\t\t\t\t\t\t\n\t\t\t\t\t\tsel += '<option value=\"'+ i +'\"'+ (i==val? ' selected':'') +'>';\n\t\t\t\t\t\tif(unit == 'hour'){\n\t\t\t\t\t\t\tsel += $.datepicker.formatTime($.trim(format.replace(/[^ht ]/ig,'')), {hour:i}, tp_inst._defaults);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(unit == 'millisec' || unit == 'microsec' || i >= 10){ sel += i; }\n\t\t\t\t\t\telse {sel += '0'+ i.toString(); }\n\t\t\t\t\t\tsel += '</option>';\n\t\t\t\t\t}\n\t\t\t\t\tsel += '</select>';\n\n\t\t\t\t\tobj.children('select').remove();\n\n\t\t\t\t\t$(sel).appendTo(obj).change(function(e){\n\t\t\t\t\t\ttp_inst._onTimeChange();\n\t\t\t\t\t\ttp_inst._onSelectHandler();\n\t\t\t\t\t});\n\n\t\t\t\t\treturn obj;\n\t\t\t\t},\n\t\t\t\toptions: function(tp_inst, obj, unit, opts, val){\n\t\t\t\t\tvar o = {},\n\t\t\t\t\t\t$t = obj.children('select');\n\t\t\t\t\tif(typeof(opts) == 'string'){\n\t\t\t\t\t\tif(val === undefined){\n\t\t\t\t\t\t\treturn $t.data(opts);\n\t\t\t\t\t\t}\n\t\t\t\t\t\to[opts] = val;\t\n\t\t\t\t\t}\n\t\t\t\t\telse{ o = opts; }\n\t\t\t\t\treturn tp_inst.control.create(tp_inst, obj, $t.data('unit'), $t.val(), o.min || $t.data('min'), o.max || $t.data('max'), o.step || $t.data('step'));\n\t\t\t\t},\n\t\t\t\tvalue: function(tp_inst, obj, unit, val){\n\t\t\t\t\tvar $t = obj.children('select');\n\t\t\t\t\tif(val !== undefined){\n\t\t\t\t\t\treturn $t.val(val);\n\t\t\t\t\t}\n\t\t\t\t\treturn $t.val();\n\t\t\t\t}\n\t\t\t}\n\t\t} // end _controls\n\n\t});\n\n\t$.fn.extend({\n\t\t/*\n\t\t* shorthand just to use timepicker..\n\t\t*/\n\t\ttimepicker: function(o) {\n\t\t\to = o || {};\n\t\t\tvar tmp_args = Array.prototype.slice.call(arguments);\n\n\t\t\tif (typeof o == 'object') {\n\t\t\t\ttmp_args[0] = $.extend(o, {\n\t\t\t\t\ttimeOnly: true\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn $(this).each(function() {\n\t\t\t\t$.fn.datetimepicker.apply($(this), tmp_args);\n\t\t\t});\n\t\t},\n\n\t\t/*\n\t\t* extend timepicker to datepicker\n\t\t*/\n\t\tdatetimepicker: function(o) {\n\t\t\to = o || {};\n\t\t\tvar tmp_args = arguments;\n\n\t\t\tif (typeof(o) == 'string') {\n\t\t\t\tif (o == 'getDate') {\n\t\t\t\t\treturn $.fn.datepicker.apply($(this[0]), tmp_args);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\tvar $t = $(this);\n\t\t\t\t\t\t$t.datepicker.apply($t, tmp_args);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\tvar $t = $(this);\n\t\t\t\t\t$t.datepicker($.timepicker._newInst($t, o)._defaults);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t/*\n\t* Public Utility to parse date and time\n\t*/\n\t$.datepicker.parseDateTime = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {\n\t\tvar parseRes = parseDateTimeInternal(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings);\n\t\tif (parseRes.timeObj) {\n\t\t\tvar t = parseRes.timeObj;\n\t\t\tparseRes.date.setHours(t.hour, t.minute, t.second, t.millisec);\n\t\t\tparseRes.date.setMicroseconds(t.microsec);\n\t\t}\n\n\t\treturn parseRes.date;\n\t};\n\n\t/*\n\t* Public utility to parse time\n\t*/\n\t$.datepicker.parseTime = function(timeFormat, timeString, options) {\t\t\n\t\tvar o = extendRemove(extendRemove({}, $.timepicker._defaults), options || {}),\n\t\t\tiso8601 = (timeFormat.replace(/\\'.*?\\'/g,'').indexOf('Z') !== -1);\n\n\t\t// Strict parse requires the timeString to match the timeFormat exactly\n\t\tvar strictParse = function(f, s, o){\n\n\t\t\t// pattern for standard and localized AM/PM markers\n\t\t\tvar getPatternAmpm = function(amNames, pmNames) {\n\t\t\t\tvar markers = [];\n\t\t\t\tif (amNames) {\n\t\t\t\t\t$.merge(markers, amNames);\n\t\t\t\t}\n\t\t\t\tif (pmNames) {\n\t\t\t\t\t$.merge(markers, pmNames);\n\t\t\t\t}\n\t\t\t\tmarkers = $.map(markers, function(val) {\n\t\t\t\t\treturn val.replace(/[.*+?|()\\[\\]{}\\\\]/g, '\\\\$&');\n\t\t\t\t});\n\t\t\t\treturn '(' + markers.join('|') + ')?';\n\t\t\t};\n\n\t\t\t// figure out position of time elements.. cause js cant do named captures\n\t\t\tvar getFormatPositions = function(timeFormat) {\n\t\t\t\tvar finds = timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),\n\t\t\t\t\torders = {\n\t\t\t\t\t\th: -1,\n\t\t\t\t\t\tm: -1,\n\t\t\t\t\t\ts: -1,\n\t\t\t\t\t\tl: -1,\n\t\t\t\t\t\tc: -1,\n\t\t\t\t\t\tt: -1,\n\t\t\t\t\t\tz: -1\n\t\t\t\t\t};\n\n\t\t\t\tif (finds) {\n\t\t\t\t\tfor (var i = 0; i < finds.length; i++) {\n\t\t\t\t\t\tif (orders[finds[i].toString().charAt(0)] == -1) {\n\t\t\t\t\t\t\torders[finds[i].toString().charAt(0)] = i + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn orders;\n\t\t\t};\n\n\t\t\tvar regstr = '^' + f.toString()\n\t\t\t\t\t.replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function (match) {\n\t\t\t\t\t\t\tvar ml = match.length;\n\t\t\t\t\t\t\tswitch (match.charAt(0).toLowerCase()) {\n\t\t\t\t\t\t\t\tcase 'h': return ml === 1? '(\\\\d?\\\\d)':'(\\\\d{'+ml+'})';\n\t\t\t\t\t\t\t\tcase 'm': return ml === 1? '(\\\\d?\\\\d)':'(\\\\d{'+ml+'})';\n\t\t\t\t\t\t\t\tcase 's': return ml === 1? '(\\\\d?\\\\d)':'(\\\\d{'+ml+'})';\n\t\t\t\t\t\t\t\tcase 'l': return '(\\\\d?\\\\d?\\\\d)';\n\t\t\t\t\t\t\t\tcase 'c': return '(\\\\d?\\\\d?\\\\d)';\n\t\t\t\t\t\t\t\tcase 'z': return '(z|[-+]\\\\d\\\\d:?\\\\d\\\\d|\\\\S+)?';\n\t\t\t\t\t\t\t\tcase 't': return getPatternAmpm(o.amNames, o.pmNames);\n\t\t\t\t\t\t\t\tdefault:    // literal escaped in quotes\n\t\t\t\t\t\t\t\t\treturn '(' + match.replace(/\\'/g, \"\").replace(/(\\.|\\$|\\^|\\\\|\\/|\\(|\\)|\\[|\\]|\\?|\\+|\\*)/g, function (m) { return \"\\\\\" + m; }) + ')?';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t.replace(/\\s/g, '\\\\s?') +\n\t\t\t\t\to.timeSuffix + '$',\n\t\t\t\torder = getFormatPositions(f),\n\t\t\t\tampm = '',\n\t\t\t\ttreg;\n\n\t\t\ttreg = s.match(new RegExp(regstr, 'i'));\n\n\t\t\tvar resTime = {\n\t\t\t\thour: 0,\n\t\t\t\tminute: 0,\n\t\t\t\tsecond: 0,\n\t\t\t\tmillisec: 0,\n\t\t\t\tmicrosec: 0\n\t\t\t};\n\n\t\t\tif (treg) {\n\t\t\t\tif (order.t !== -1) {\n\t\t\t\t\tif (treg[order.t] === undefined || treg[order.t].length === 0) {\n\t\t\t\t\t\tampm = '';\n\t\t\t\t\t\tresTime.ampm = '';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tampm = $.inArray(treg[order.t].toUpperCase(), o.amNames) !== -1 ? 'AM' : 'PM';\n\t\t\t\t\t\tresTime.ampm = o[ampm == 'AM' ? 'amNames' : 'pmNames'][0];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (order.h !== -1) {\n\t\t\t\t\tif (ampm == 'AM' && treg[order.h] == '12') {\n\t\t\t\t\t\tresTime.hour = 0; // 12am = 0 hour\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (ampm == 'PM' && treg[order.h] != '12') {\n\t\t\t\t\t\t\tresTime.hour = parseInt(treg[order.h], 10) + 12; // 12pm = 12 hour, any other pm = hour + 12\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresTime.hour = Number(treg[order.h]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (order.m !== -1) {\n\t\t\t\t\tresTime.minute = Number(treg[order.m]);\n\t\t\t\t}\n\t\t\t\tif (order.s !== -1) {\n\t\t\t\t\tresTime.second = Number(treg[order.s]);\n\t\t\t\t}\n\t\t\t\tif (order.l !== -1) {\n\t\t\t\t\tresTime.millisec = Number(treg[order.l]);\n\t\t\t\t}\n\t\t\t\tif (order.c !== -1) {\n\t\t\t\t\tresTime.microsec = Number(treg[order.c]);\n\t\t\t\t}\n\t\t\t\tif (order.z !== -1 && treg[order.z] !== undefined) {\n\t\t\t\t\tresTime.timezone = $.timepicker.timezoneOffsetNumber(treg[order.z]);\n\t\t\t\t}\n\n\n\t\t\t\treturn resTime;\n\t\t\t}\n\t\t\treturn false;\n\t\t};// end strictParse\n\n\t\t// First try JS Date, if that fails, use strictParse\n\t\tvar looseParse = function(f,s,o){\n\t\t\ttry{\n\t\t\t\tvar d = new Date('2012-01-01 '+ s);\n\t\t\t\tif(isNaN(d.getTime())){\n\t\t\t\t\td = new Date('2012-01-01T'+ s);\n\t\t\t\t\tif(isNaN(d.getTime())){\n\t\t\t\t\t\td = new Date('01/01/2012 '+ s);\n\t\t\t\t\t\tif(isNaN(d.getTime())){\n\t\t\t\t\t\t\tthrow \"Unable to parse time with native Date: \"+ s;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\thour: d.getHours(),\n\t\t\t\t\tminute: d.getMinutes(),\n\t\t\t\t\tsecond: d.getSeconds(),\n\t\t\t\t\tmillisec: d.getMilliseconds(),\n\t\t\t\t\tmicrosec: d.getMicroseconds(),\n\t\t\t\t\ttimezone: d.getTimezoneOffset()*-1\n\t\t\t\t};\n\t\t\t}\n\t\t\tcatch(err){\n\t\t\t\ttry{\n\t\t\t\t\treturn strictParse(f,s,o);\n\t\t\t\t}\n\t\t\t\tcatch(err2){\n\t\t\t\t\t$.timepicker.log(\"Unable to parse \\ntimeString: \"+ s +\"\\ntimeFormat: \"+ f);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\treturn false;\n\t\t}; // end looseParse\n\t\t\n\t\tif(typeof o.parse === \"function\"){\n\t\t\treturn o.parse(timeFormat, timeString, o);\n\t\t}\n\t\tif(o.parse === 'loose'){\n\t\t\treturn looseParse(timeFormat, timeString, o);\n\t\t}\n\t\treturn strictParse(timeFormat, timeString, o);\n\t};\n\n\t/*\n\t* Public utility to format the time\n\t* format = string format of the time\n\t* time = a {}, not a Date() for timezones\n\t* options = essentially the regional[].. amNames, pmNames, ampm\n\t*/\n\t$.datepicker.formatTime = function(format, time, options) {\n\t\toptions = options || {};\n\t\toptions = $.extend({}, $.timepicker._defaults, options);\n\t\ttime = $.extend({\n\t\t\thour: 0,\n\t\t\tminute: 0,\n\t\t\tsecond: 0,\n\t\t\tmillisec: 0,\n\t\t\ttimezone: 0\n\t\t}, time);\n\n\t\tvar tmptime = format,\n\t\t\tampmName = options.amNames[0],\n\t\t\thour = parseInt(time.hour, 10);\n\n\t\tif (hour > 11) {\n\t\t\tampmName = options.pmNames[0];\n\t\t}\n\n\t\ttmptime = tmptime.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|('.*?'|\".*?\"))/g, function(match) {\n\t\tswitch (match) {\n\t\t\tcase 'HH':\n\t\t\t\treturn ('0' + hour).slice(-2);\n\t\t\tcase 'H':\n\t\t\t\treturn hour;\n\t\t\tcase 'hh':\n\t\t\t\treturn ('0' + convert24to12(hour)).slice(-2);\n\t\t\tcase 'h':\n\t\t\t\treturn convert24to12(hour);\n\t\t\tcase 'mm':\n\t\t\t\treturn ('0' + time.minute).slice(-2);\n\t\t\tcase 'm':\n\t\t\t\treturn time.minute;\n\t\t\tcase 'ss':\n\t\t\t\treturn ('0' + time.second).slice(-2);\n\t\t\tcase 's':\n\t\t\t\treturn time.second;\n\t\t\tcase 'l':\n\t\t\t\treturn ('00' + time.millisec).slice(-3);\n\t\t\tcase 'c':\n\t\t\t\treturn ('00' + time.microsec).slice(-3);\n\t\t\tcase 'z':\n\t\t\t\treturn $.timepicker.timezoneOffsetString(time.timezone === null? options.timezone : time.timezone, false);\n\t\t\tcase 'Z':\n\t\t\t\treturn $.timepicker.timezoneOffsetString(time.timezone === null? options.timezone : time.timezone, true);\n\t\t\tcase 'T': \n\t\t\t\treturn ampmName.charAt(0).toUpperCase();\n\t\t\tcase 'TT': \n\t\t\t\treturn ampmName.toUpperCase();\n\t\t\tcase 't':\n\t\t\t\treturn ampmName.charAt(0).toLowerCase();\n\t\t\tcase 'tt':\n\t\t\t\treturn ampmName.toLowerCase();\n\t\t\tdefault:\n\t\t\t\treturn match.replace(/\\'/g, \"\") || \"'\";\n\t\t\t}\n\t\t});\n\n\t\ttmptime = $.trim(tmptime);\n\t\treturn tmptime;\n\t};\n\n\t/*\n\t* the bad hack :/ override datepicker so it doesnt close on select\n\t// inspired: http://stackoverflow.com/questions/1252512/jquery-datepicker-prevent-closing-picker-when-clicking-a-date/1762378#1762378\n\t*/\n\t$.datepicker._base_selectDate = $.datepicker._selectDate;\n\t$.datepicker._selectDate = function(id, dateStr) {\n\t\tvar inst = this._getInst($(id)[0]),\n\t\t\ttp_inst = this._get(inst, 'timepicker');\n\n\t\tif (tp_inst) {\n\t\t\ttp_inst._limitMinMaxDateTime(inst, true);\n\t\t\tinst.inline = inst.stay_open = true;\n\t\t\t//This way the onSelect handler called from calendarpicker get the full dateTime\n\t\t\tthis._base_selectDate(id, dateStr);\n\t\t\tinst.inline = inst.stay_open = false;\n\t\t\tthis._notifyChange(inst);\n\t\t\tthis._updateDatepicker(inst);\n\t\t} else {\n\t\t\tthis._base_selectDate(id, dateStr);\n\t\t}\n\t};\n\n\t/*\n\t* second bad hack :/ override datepicker so it triggers an event when changing the input field\n\t* and does not redraw the datepicker on every selectDate event\n\t*/\n\t$.datepicker._base_updateDatepicker = $.datepicker._updateDatepicker;\n\t$.datepicker._updateDatepicker = function(inst) {\n\n\t\t// don't popup the datepicker if there is another instance already opened\n\t\tvar input = inst.input[0];\n\t\tif ($.datepicker._curInst && $.datepicker._curInst != inst && $.datepicker._datepickerShowing && $.datepicker._lastInput != input) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof(inst.stay_open) !== 'boolean' || inst.stay_open === false) {\n\n\t\t\tthis._base_updateDatepicker(inst);\n\n\t\t\t// Reload the time control when changing something in the input text field.\n\t\t\tvar tp_inst = this._get(inst, 'timepicker');\n\t\t\tif (tp_inst) {\n\t\t\t\ttp_inst._addTimePicker(inst);\n\t\t\t}\n\t\t}\n\t};\n\n\t/*\n\t* third bad hack :/ override datepicker so it allows spaces and colon in the input field\n\t*/\n\t$.datepicker._base_doKeyPress = $.datepicker._doKeyPress;\n\t$.datepicker._doKeyPress = function(event) {\n\t\tvar inst = $.datepicker._getInst(event.target),\n\t\t\ttp_inst = $.datepicker._get(inst, 'timepicker');\n\n\t\tif (tp_inst) {\n\t\t\tif ($.datepicker._get(inst, 'constrainInput')) {\n\t\t\t\tvar ampm = tp_inst.support.ampm,\n\t\t\t\t\ttz = tp_inst._defaults.showTimezone !== null? tp_inst._defaults.showTimezone : tp_inst.support.timezone,\t\t\t\t\t\n\t\t\t\t\tdateChars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat')),\n\t\t\t\t\tdatetimeChars = tp_inst._defaults.timeFormat.toString()\n\t\t\t\t\t\t\t\t\t\t\t.replace(/[hms]/g, '')\n\t\t\t\t\t\t\t\t\t\t\t.replace(/TT/g, ampm ? 'APM' : '')\n\t\t\t\t\t\t\t\t\t\t\t.replace(/Tt/g, ampm ? 'AaPpMm' : '')\n\t\t\t\t\t\t\t\t\t\t\t.replace(/tT/g, ampm ? 'AaPpMm' : '')\n\t\t\t\t\t\t\t\t\t\t\t.replace(/T/g, ampm ? 'AP' : '')\n\t\t\t\t\t\t\t\t\t\t\t.replace(/tt/g, ampm ? 'apm' : '')\n\t\t\t\t\t\t\t\t\t\t\t.replace(/t/g, ampm ? 'ap' : '') + \n\t\t\t\t\t\t\t\t\t\t\t\" \" + tp_inst._defaults.separator + \n\t\t\t\t\t\t\t\t\t\t\ttp_inst._defaults.timeSuffix + \n\t\t\t\t\t\t\t\t\t\t\t(tz ? tp_inst._defaults.timezoneList.join('') : '') + \n\t\t\t\t\t\t\t\t\t\t\t(tp_inst._defaults.amNames.join('')) + (tp_inst._defaults.pmNames.join('')) + \n\t\t\t\t\t\t\t\t\t\t\tdateChars,\n\t\t\t\t\tchr = String.fromCharCode(event.charCode === undefined ? event.keyCode : event.charCode);\n\t\t\t\treturn event.ctrlKey || (chr < ' ' || !dateChars || datetimeChars.indexOf(chr) > -1);\n\t\t\t}\n\t\t}\n\n\t\treturn $.datepicker._base_doKeyPress(event);\n\t};\n\n\t/*\n\t* Fourth bad hack :/ override _updateAlternate function used in inline mode to init altField\n\t*/\n\t$.datepicker._base_updateAlternate = $.datepicker._updateAlternate;\n\t/* Update any alternate field to synchronise with the main field. */\n\t$.datepicker._updateAlternate = function(inst) {\n\t\tvar tp_inst = this._get(inst, 'timepicker');\n\t\tif(tp_inst){\n\t\t\tvar altField = tp_inst._defaults.altField;\n\t\t\tif (altField) { // update alternate field too\n\t\t\t\tvar altFormat = tp_inst._defaults.altFormat || tp_inst._defaults.dateFormat,\n\t\t\t\t\tdate = this._getDate(inst),\n\t\t\t\t\tformatCfg = $.datepicker._getFormatConfig(inst),\n\t\t\t\t\taltFormattedDateTime = '', \n\t\t\t\t\taltSeparator = tp_inst._defaults.altSeparator ? tp_inst._defaults.altSeparator : tp_inst._defaults.separator, \n\t\t\t\t\taltTimeSuffix = tp_inst._defaults.altTimeSuffix ? tp_inst._defaults.altTimeSuffix : tp_inst._defaults.timeSuffix,\n\t\t\t\t\taltTimeFormat = tp_inst._defaults.altTimeFormat !== null ? tp_inst._defaults.altTimeFormat : tp_inst._defaults.timeFormat;\n\t\t\t\t\n\t\t\t\taltFormattedDateTime += $.datepicker.formatTime(altTimeFormat, tp_inst, tp_inst._defaults) + altTimeSuffix;\n\t\t\t\tif(!tp_inst._defaults.timeOnly && !tp_inst._defaults.altFieldTimeOnly && date !== null){\n\t\t\t\t\tif(tp_inst._defaults.altFormat){\n\t\t\t\t\t\taltFormattedDateTime = $.datepicker.formatDate(tp_inst._defaults.altFormat, date, formatCfg) + altSeparator + altFormattedDateTime;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\taltFormattedDateTime = tp_inst.formattedDate + altSeparator + altFormattedDateTime;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$(altField).val(altFormattedDateTime);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t$.datepicker._base_updateAlternate(inst);\n\t\t}\n\t};\n\n\t/*\n\t* Override key up event to sync manual input changes.\n\t*/\n\t$.datepicker._base_doKeyUp = $.datepicker._doKeyUp;\n\t$.datepicker._doKeyUp = function(event) {\n\t\tvar inst = $.datepicker._getInst(event.target),\n\t\t\ttp_inst = $.datepicker._get(inst, 'timepicker');\n\n\t\tif (tp_inst) {\n\t\t\tif (tp_inst._defaults.timeOnly && (inst.input.val() != inst.lastVal)) {\n\t\t\t\ttry {\n\t\t\t\t\t$.datepicker._updateDatepicker(inst);\n\t\t\t\t} catch (err) {\n\t\t\t\t\t$.timepicker.log(err);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $.datepicker._base_doKeyUp(event);\n\t};\n\n\t/*\n\t* override \"Today\" button to also grab the time.\n\t*/\n\t$.datepicker._base_gotoToday = $.datepicker._gotoToday;\n\t$.datepicker._gotoToday = function(id) {\n\t\tvar inst = this._getInst($(id)[0]),\n\t\t\t$dp = inst.dpDiv;\n\t\tthis._base_gotoToday(id);\n\t\tvar tp_inst = this._get(inst, 'timepicker');\n\t\tselectLocalTimezone(tp_inst);\n\t\tvar now = new Date();\n\t\tthis._setTime(inst, now);\n\t\t$('.ui-datepicker-today', $dp).click();\n\t};\n\n\t/*\n\t* Disable & enable the Time in the datetimepicker\n\t*/\n\t$.datepicker._disableTimepickerDatepicker = function(target) {\n\t\tvar inst = this._getInst(target);\n\t\tif (!inst) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar tp_inst = this._get(inst, 'timepicker');\n\t\t$(target).datepicker('getDate'); // Init selected[Year|Month|Day]\n\t\tif (tp_inst) {\n\t\t\ttp_inst._defaults.showTimepicker = false;\n\t\t\ttp_inst._updateDateTime(inst);\n\t\t}\n\t};\n\n\t$.datepicker._enableTimepickerDatepicker = function(target) {\n\t\tvar inst = this._getInst(target);\n\t\tif (!inst) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar tp_inst = this._get(inst, 'timepicker');\n\t\t$(target).datepicker('getDate'); // Init selected[Year|Month|Day]\n\t\tif (tp_inst) {\n\t\t\ttp_inst._defaults.showTimepicker = true;\n\t\t\ttp_inst._addTimePicker(inst); // Could be disabled on page load\n\t\t\ttp_inst._updateDateTime(inst);\n\t\t}\n\t};\n\n\t/*\n\t* Create our own set time function\n\t*/\n\t$.datepicker._setTime = function(inst, date) {\n\t\tvar tp_inst = this._get(inst, 'timepicker');\n\t\tif (tp_inst) {\n\t\t\tvar defaults = tp_inst._defaults;\n\n\t\t\t// calling _setTime with no date sets time to defaults\n\t\t\ttp_inst.hour = date ? date.getHours() : defaults.hour;\n\t\t\ttp_inst.minute = date ? date.getMinutes() : defaults.minute;\n\t\t\ttp_inst.second = date ? date.getSeconds() : defaults.second;\n\t\t\ttp_inst.millisec = date ? date.getMilliseconds() : defaults.millisec;\n\t\t\ttp_inst.microsec = date ? date.getMicroseconds() : defaults.microsec;\n\n\t\t\t//check if within min/max times.. \n\t\t\ttp_inst._limitMinMaxDateTime(inst, true);\n\n\t\t\ttp_inst._onTimeChange();\n\t\t\ttp_inst._updateDateTime(inst);\n\t\t}\n\t};\n\n\t/*\n\t* Create new public method to set only time, callable as $().datepicker('setTime', date)\n\t*/\n\t$.datepicker._setTimeDatepicker = function(target, date, withDate) {\n\t\tvar inst = this._getInst(target);\n\t\tif (!inst) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar tp_inst = this._get(inst, 'timepicker');\n\n\t\tif (tp_inst) {\n\t\t\tthis._setDateFromField(inst);\n\t\t\tvar tp_date;\n\t\t\tif (date) {\n\t\t\t\tif (typeof date == \"string\") {\n\t\t\t\t\ttp_inst._parseTime(date, withDate);\n\t\t\t\t\ttp_date = new Date();\n\t\t\t\t\ttp_date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);\n\t\t\t\t\ttp_date.setMicroseconds(tp_inst.microsec);\n\t\t\t\t} else {\n\t\t\t\t\ttp_date = new Date(date.getTime());\n\t\t\t\t\ttp_date.setMicroseconds(date.getMicroseconds());\n\t\t\t\t}\n\t\t\t\tif (tp_date.toString() == 'Invalid Date') {\n\t\t\t\t\ttp_date = undefined;\n\t\t\t\t}\n\t\t\t\tthis._setTime(inst, tp_date);\n\t\t\t}\n\t\t}\n\n\t};\n\n\t/*\n\t* override setDate() to allow setting time too within Date object\n\t*/\n\t$.datepicker._base_setDateDatepicker = $.datepicker._setDateDatepicker;\n\t$.datepicker._setDateDatepicker = function(target, date) {\n\t\tvar inst = this._getInst(target);\n\t\tif (!inst) {\n\t\t\treturn;\n\t\t}\n\n\t\tif(typeof(date) === 'string'){\n\t\t\tdate = new Date(date);\n\t\t\tif(!date.getTime()){\n\t\t\t\t$.timepicker.log(\"Error creating Date object from string.\");\n\t\t\t}\n\t\t}\n\n\t\tvar tp_inst = this._get(inst, 'timepicker');\n\t\tvar tp_date;\n\t\tif (date instanceof Date) {\n\t\t\ttp_date = new Date(date.getTime());\n\t\t\ttp_date.setMicroseconds(date.getMicroseconds());\n\t\t} else {\n\t\t\ttp_date = date;\n\t\t}\n\t\t\n\t\t// This is important if you are using the timezone option, javascript's Date \n\t\t// object will only return the timezone offset for the current locale, so we \n\t\t// adjust it accordingly.  If not using timezone option this won't matter..\n\t\t// If a timezone is different in tp, keep the timezone as is\n\t\tif(tp_inst){\n\t\t\t// look out for DST if tz wasn't specified\n\t\t\tif(!tp_inst.support.timezone && tp_inst._defaults.timezone === null){\n\t\t\t\ttp_inst.timezone = tp_date.getTimezoneOffset()*-1;\n\t\t\t}\n\t\t\tdate = $.timepicker.timezoneAdjust(date, tp_inst.timezone);\n\t\t\ttp_date = $.timepicker.timezoneAdjust(tp_date, tp_inst.timezone);\n\t\t}\n\n\t\tthis._updateDatepicker(inst);\n\t\tthis._base_setDateDatepicker.apply(this, arguments);\n\t\tthis._setTimeDatepicker(target, tp_date, true);\n\t};\n\n\t/*\n\t* override getDate() to allow getting time too within Date object\n\t*/\n\t$.datepicker._base_getDateDatepicker = $.datepicker._getDateDatepicker;\n\t$.datepicker._getDateDatepicker = function(target, noDefault) {\n\t\tvar inst = this._getInst(target);\n\t\tif (!inst) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar tp_inst = this._get(inst, 'timepicker');\n\n\t\tif (tp_inst) {\n\t\t\t// if it hasn't yet been defined, grab from field\n\t\t\tif(inst.lastVal === undefined){\n\t\t\t\tthis._setDateFromField(inst, noDefault);\n\t\t\t}\n\n\t\t\tvar date = this._getDate(inst);\n\t\t\tif (date && tp_inst._parseTime($(target).val(), tp_inst.timeOnly)) {\n\t\t\t\tdate.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);\n\t\t\t\tdate.setMicroseconds(tp_inst.microsec);\n\n\t\t\t\t// This is important if you are using the timezone option, javascript's Date \n\t\t\t\t// object will only return the timezone offset for the current locale, so we \n\t\t\t\t// adjust it accordingly.  If not using timezone option this won't matter..\n\t\t\t\tif(tp_inst.timezone != null){\n\t\t\t\t\t// look out for DST if tz wasn't specified\n\t\t\t\t\tif(!tp_inst.support.timezone && tp_inst._defaults.timezone === null){\n\t\t\t\t\t\ttp_inst.timezone = date.getTimezoneOffset()*-1;\n\t\t\t\t\t}\n\t\t\t\t\tdate = $.timepicker.timezoneAdjust(date, tp_inst.timezone);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn date;\n\t\t}\n\t\treturn this._base_getDateDatepicker(target, noDefault);\n\t};\n\n\t/*\n\t* override parseDate() because UI 1.8.14 throws an error about \"Extra characters\"\n\t* An option in datapicker to ignore extra format characters would be nicer.\n\t*/\n\t$.datepicker._base_parseDate = $.datepicker.parseDate;\n\t$.datepicker.parseDate = function(format, value, settings) {\n\t\tvar date;\n\t\ttry {\n\t\t\tdate = this._base_parseDate(format, value, settings);\n\t\t} catch (err) {\n\t\t\t// Hack!  The error message ends with a colon, a space, and\n\t\t\t// the \"extra\" characters.  We rely on that instead of\n\t\t\t// attempting to perfectly reproduce the parsing algorithm.\n\t\t\tif (err.indexOf(\":\") >= 0) {\n\t\t\t\tdate = this._base_parseDate(format, value.substring(0,value.length-(err.length-err.indexOf(':')-2)), settings);\n\t\t\t\t$.timepicker.log(\"Error parsing the date string: \" + err + \"\\ndate string = \" + value + \"\\ndate format = \" + format);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\treturn date;\n\t};\n\n\t/*\n\t* override formatDate to set date with time to the input\n\t*/\n\t$.datepicker._base_formatDate = $.datepicker._formatDate;\n\t$.datepicker._formatDate = function(inst, day, month, year) {\n\t\tvar tp_inst = this._get(inst, 'timepicker');\n\t\tif (tp_inst) {\n\t\t\ttp_inst._updateDateTime(inst);\n\t\t\treturn tp_inst.$input.val();\n\t\t}\n\t\treturn this._base_formatDate(inst);\n\t};\n\n\t/*\n\t* override options setter to add time to maxDate(Time) and minDate(Time). MaxDate\n\t*/\n\t$.datepicker._base_optionDatepicker = $.datepicker._optionDatepicker;\n\t$.datepicker._optionDatepicker = function(target, name, value) {\n\t\tvar inst = this._getInst(target),\n\t        name_clone;\n\t\tif (!inst) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar tp_inst = this._get(inst, 'timepicker');\n\t\tif (tp_inst) {\n\t\t\tvar min = null,\n\t\t\t\tmax = null,\n\t\t\t\tonselect = null,\n\t\t\t\toverrides = tp_inst._defaults.evnts,\n\t\t\t\tfns = {},\n\t\t\t\tprop;\n\t\t    if (typeof name == 'string') { // if min/max was set with the string\n\t\t        if (name === 'minDate' || name === 'minDateTime') {\n\t\t            min = value;\n\t\t        } else if (name === 'maxDate' || name === 'maxDateTime') {\n\t\t            max = value;\n\t\t        } else if (name === 'onSelect') {\n\t\t            onselect = value;\n\t\t        } else if (overrides.hasOwnProperty(name)) {\n\t\t            if (typeof (value) === 'undefined') {\n\t\t                return overrides[name];\n\t\t            }\n\t\t            fns[name] = value;\n\t\t            name_clone = {}; //empty results in exiting function after overrides updated\n\t\t        }\n\t\t    } else if (typeof name == 'object') { //if min/max was set with the JSON\n\t\t        if (name.minDate) {\n\t\t            min = name.minDate;\n\t\t        } else if (name.minDateTime) {\n\t\t            min = name.minDateTime;\n\t\t        } else if (name.maxDate) {\n\t\t            max = name.maxDate;\n\t\t        } else if (name.maxDateTime) {\n\t\t            max = name.maxDateTime;\n\t\t        }\n\t\t        for (prop in overrides) {\n\t\t            if (overrides.hasOwnProperty(prop) && name[prop]) {\n\t\t                fns[prop] = name[prop];\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    for (prop in fns) {\n\t\t        if (fns.hasOwnProperty(prop)) {\n\t\t            overrides[prop] = fns[prop];\n\t\t            if (!name_clone) { name_clone = $.extend({}, name);}\n\t\t            delete name_clone[prop];\n\t\t        }\n\t\t    }\n\t\t    if (name_clone && isEmptyObject(name_clone)) { return; }\n\t\t    if (min) { //if min was set\n\t\t        if (min === 0) {\n\t\t            min = new Date();\n\t\t        } else {\n\t\t            min = new Date(min);\n\t\t        }\n\t\t        tp_inst._defaults.minDate = min;\n\t\t        tp_inst._defaults.minDateTime = min;\n\t\t    } else if (max) { //if max was set\n\t\t        if (max === 0) {\n\t\t            max = new Date();\n\t\t        } else {\n\t\t            max = new Date(max);\n\t\t        }\n\t\t        tp_inst._defaults.maxDate = max;\n\t\t        tp_inst._defaults.maxDateTime = max;\n\t\t    } else if (onselect) {\n\t\t        tp_inst._defaults.onSelect = onselect;\n\t\t    }\n\t\t}\n\t\tif (value === undefined) {\n\t\t\treturn this._base_optionDatepicker.call($.datepicker, target, name);\n\t\t}\n\t\treturn this._base_optionDatepicker.call($.datepicker, target, name_clone || name, value);\n\t};\n\t\n\t/*\n\t* jQuery isEmptyObject does not check hasOwnProperty - if someone has added to the object prototype,\n\t* it will return false for all objects\n\t*/\n\tvar isEmptyObject = function(obj) {\n\t\tvar prop;\n\t\tfor (prop in obj) {\n\t\t\tif (obj.hasOwnProperty(obj)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\n\t/*\n\t* jQuery extend now ignores nulls!\n\t*/\n\tvar extendRemove = function(target, props) {\n\t\t$.extend(target, props);\n\t\tfor (var name in props) {\n\t\t\tif (props[name] === null || props[name] === undefined) {\n\t\t\t\ttarget[name] = props[name];\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t};\n\n\t/*\n\t* Determine by the time format which units are supported\n\t* Returns an object of booleans for each unit\n\t*/\n\tvar detectSupport = function(timeFormat){\n\t\tvar tf = timeFormat.replace(/\\'.*?\\'/g,'').toLowerCase(), // removes literals\n\t\t\tisIn = function(f, t){ // does the format contain the token?\n\t\t\t\t\treturn f.indexOf(t) !== -1? true:false; \n\t\t\t\t};\n\t\treturn {\n\t\t\t\thour: isIn(tf,'h'),\n\t\t\t\tminute: isIn(tf,'m'),\n\t\t\t\tsecond: isIn(tf,'s'),\n\t\t\t\tmillisec: isIn(tf,'l'),\n\t\t\t\tmicrosec: isIn(tf,'c'),\n\t\t\t\ttimezone: isIn(tf,'z'),\n\t\t\t\tampm: isIn(tf,'t') && isIn(timeFormat,'h'),\n\t\t\t\tiso8601: isIn(timeFormat, 'Z')\n\t\t\t};\n\t};\n\n\t/*\n\t* Converts 24 hour format into 12 hour\n\t* Returns 12 hour without leading 0\n\t*/\n\tvar convert24to12 = function(hour) {\n\t\tif (hour > 12) {\n\t\t\thour = hour - 12;\n\t\t}\n\n\t\tif (hour === 0) {\n\t\t\thour = 12;\n\t\t}\n\n\t\treturn String(hour);\n\t};\n\n\t/*\n\t* Splits datetime string into date ans time substrings.\n\t* Throws exception when date can't be parsed\n\t* Returns [dateString, timeString]\n\t*/\n\tvar splitDateTime = function(dateFormat, dateTimeString, dateSettings, timeSettings) {\n\t\ttry {\n\t\t\t// The idea is to get the number separator occurances in datetime and the time format requested (since time has \n\t\t\t// fewer unknowns, mostly numbers and am/pm). We will use the time pattern to split.\n\t\t\tvar separator = timeSettings && timeSettings.separator ? timeSettings.separator : $.timepicker._defaults.separator,\n\t\t\t\tformat = timeSettings && timeSettings.timeFormat ? timeSettings.timeFormat : $.timepicker._defaults.timeFormat,\n\t\t\t\ttimeParts = format.split(separator), // how many occurances of separator may be in our format?\n\t\t\t\ttimePartsLen = timeParts.length,\n\t\t\t\tallParts = dateTimeString.split(separator),\n\t\t\t\tallPartsLen = allParts.length;\n\n\t\t\tif (allPartsLen > 1) {\n\t\t\t\treturn [\n\t\t\t\t\t\tallParts.splice(0,allPartsLen-timePartsLen).join(separator),\n\t\t\t\t\t\tallParts.splice(0,timePartsLen).join(separator)\n\t\t\t\t\t];\n\t\t\t}\n\n\t\t} catch (err) {\n\t\t\t$.timepicker.log('Could not split the date from the time. Please check the following datetimepicker options' +\n\t\t\t\t\t\"\\nthrown error: \" + err +\n\t\t\t\t\t\"\\ndateTimeString\" + dateTimeString +\n\t\t\t\t\t\"\\ndateFormat = \" + dateFormat +\n\t\t\t\t\t\"\\nseparator = \" + timeSettings.separator +\n\t\t\t\t\t\"\\ntimeFormat = \" + timeSettings.timeFormat);\n\n\t\t\tif (err.indexOf(\":\") >= 0) {\n\t\t\t\t// Hack!  The error message ends with a colon, a space, and\n\t\t\t\t// the \"extra\" characters.  We rely on that instead of\n\t\t\t\t// attempting to perfectly reproduce the parsing algorithm.\n\t\t\t\tvar dateStringLength = dateTimeString.length - (err.length - err.indexOf(':') - 2),\n\t\t\t\t\ttimeString = dateTimeString.substring(dateStringLength);\n\n\t\t\t\treturn [$.trim(dateTimeString.substring(0, dateStringLength)), $.trim(dateTimeString.substring(dateStringLength))];\n\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\treturn [dateTimeString, ''];\n\t};\n\n\t/*\n\t* Internal function to parse datetime interval\n\t* Returns: {date: Date, timeObj: Object}, where\n\t*   date - parsed date without time (type Date)\n\t*   timeObj = {hour: , minute: , second: , millisec: , microsec: } - parsed time. Optional\n\t*/\n\tvar parseDateTimeInternal = function(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {\n\t\tvar date;\n\t\tvar splitRes = splitDateTime(dateFormat, dateTimeString, dateSettings, timeSettings);\n\t\tdate = $.datepicker._base_parseDate(dateFormat, splitRes[0], dateSettings);\n\t\tif (splitRes[1] !== '') {\n\t\t\tvar timeString = splitRes[1],\n\t\t\t\tparsedTime = $.datepicker.parseTime(timeFormat, timeString, timeSettings);\n\n\t\t\tif (parsedTime === null) {\n\t\t\t\tthrow 'Wrong time format';\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tdate: date,\n\t\t\t\ttimeObj: parsedTime\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tdate: date\n\t\t\t};\n\t\t}\n\t};\n\n\t/*\n\t* Internal function to set timezone_select to the local timezone\n\t*/\n\tvar selectLocalTimezone = function(tp_inst, date) {\n\t\tif (tp_inst && tp_inst.timezone_select) {\n\t\t\tvar now = typeof date !== 'undefined' ? date : new Date();\n\t\t\ttp_inst.timezone_select.val(now.getTimezoneOffset()*-1);\n\t\t}\n\t};\n\n\t/*\n\t* Create a Singleton Insance\n\t*/\n\t$.timepicker = new Timepicker();\n\n\t/**\n\t * Get the timezone offset as string from a date object (eg '+0530' for UTC+5.5)\n\t * @param  number if not a number this value is returned\n\t * @param boolean if true formats in accordance to iso8601 \"+12:45\"\n\t * @return string\n\t */\n\t$.timepicker.timezoneOffsetString = function(tzMinutes, iso8601) {\n\t\tif(isNaN(tzMinutes) || tzMinutes > 840){\n\t\t\treturn tzMinutes;\n\t\t}\n\n\t\tvar off = tzMinutes,\n\t\t\tminutes = off % 60,\n\t\t\thours = (off - minutes) / 60,\n\t\t\tiso = iso8601? ':':'',\n\t\t\ttz = (off >= 0 ? '+' : '-') + ('0' + (hours * 101).toString()).slice(-2) + iso + ('0' + (minutes * 101).toString()).slice(-2);\n\t\t\n\t\tif(tz == '+00:00'){\n\t\t\treturn 'Z';\n\t\t}\n\t\treturn tz;\n\t};\n\n\t/**\n\t * Get the number in minutes that represents a timezone string\n\t * @param  string formated like \"+0500\", \"-1245\"\n\t * @return number\n\t */\n\t$.timepicker.timezoneOffsetNumber = function(tzString) {\n\t\ttzString = tzString.toString().replace(':',''); // excuse any iso8601, end up with \"+1245\"\n\n\t\tif(tzString.toUpperCase() === 'Z'){ // if iso8601 with Z, its 0 minute offset\n\t\t\treturn 0;\n\t\t}\n\n\t\tif(!/^(\\-|\\+)\\d{4}$/.test(tzString)){ // possibly a user defined tz, so just give it back\n\t\t\treturn tzString;\n\t\t}\n\n\t\treturn ((tzString.substr(0,1) =='-'? -1 : 1) * // plus or minus\n\t\t\t\t\t((parseInt(tzString.substr(1,2),10)*60) + // hours (converted to minutes)\n\t\t\t\t\tparseInt(tzString.substr(3,2),10))); // minutes\n\t};\n\n\t/**\n\t * No way to set timezone in js Date, so we must adjust the minutes to compensate. (think setDate, getDate)\n\t * @param  date\n\t * @param  string formated like \"+0500\", \"-1245\"\n\t * @return date\n\t */\n\t$.timepicker.timezoneAdjust = function(date, toTimezone) {\n\t\tvar toTz = $.timepicker.timezoneOffsetNumber(toTimezone);\n\t\tif(!isNaN(toTz)){\n\t\t\tdate.setMinutes(date.getMinutes()*1 + (date.getTimezoneOffset()*-1 - toTz*1) );\n\t\t}\n\t\treturn date;\n\t};\n\n\t/**\n\t * Calls `timepicker()` on the `startTime` and `endTime` elements, and configures them to\n\t * enforce date range limits.\n\t * n.b. The input value must be correctly formatted (reformatting is not supported)\n\t * @param  Element startTime\n\t * @param  Element endTime\n\t * @param  obj options Options for the timepicker() call\n\t * @return jQuery\n\t */\n\t$.timepicker.timeRange = function(startTime, endTime, options) {\n\t\treturn $.timepicker.handleRange('timepicker', startTime, endTime, options);\n\t};\n\n\t/**\n\t * Calls `datetimepicker` on the `startTime` and `endTime` elements, and configures them to\n\t * enforce date range limits.\n\t * @param  Element startTime\n\t * @param  Element endTime\n\t * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,\n\t *   a boolean value that can be used to reformat the input values to the `dateFormat`.\n\t * @param  string method Can be used to specify the type of picker to be added\n\t * @return jQuery\n\t */\n\t$.timepicker.datetimeRange = function(startTime, endTime, options) {\n\t\t$.timepicker.handleRange('datetimepicker', startTime, endTime, options);\n\t};\n\n\t/**\n\t * Calls `method` on the `startTime` and `endTime` elements, and configures them to\n\t * enforce date range limits.\n\t * @param  Element startTime\n\t * @param  Element endTime\n\t * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,\n\t *   a boolean value that can be used to reformat the input values to the `dateFormat`.\n\t * @return jQuery\n\t */\n\t$.timepicker.dateRange = function(startTime, endTime, options) {\n\t\t$.timepicker.handleRange('datepicker', startTime, endTime, options);\n\t};\n\n\t/**\n\t * Calls `method` on the `startTime` and `endTime` elements, and configures them to\n\t * enforce date range limits.\n\t * @param  string method Can be used to specify the type of picker to be added\n\t * @param  Element startTime\n\t * @param  Element endTime\n\t * @param  obj options Options for the `timepicker()` call. Also supports `reformat`,\n\t *   a boolean value that can be used to reformat the input values to the `dateFormat`.\n\t * @return jQuery\n\t */\n\t$.timepicker.handleRange = function(method, startTime, endTime, options) {\n\t\toptions = $.extend({}, {\n\t\t\tminInterval: 0, // min allowed interval in milliseconds\n\t\t\tmaxInterval: 0, // max allowed interval in milliseconds\n\t\t\tstart: {},      // options for start picker\n\t\t\tend: {}         // options for end picker\n\t\t}, options);\n\n\t\t$.fn[method].call(startTime, $.extend({\n\t\t\tonClose: function(dateText, inst) {\n\t\t\t\tcheckDates($(this), endTime);\n\t\t\t},\n\t\t\tonSelect: function(selectedDateTime) {\n\t\t\t\tselected($(this), endTime, 'minDate');\n\t\t\t}\n\t\t}, options, options.start));\n\t\t$.fn[method].call(endTime, $.extend({\n\t\t\tonClose: function(dateText, inst) {\n\t\t\t\tcheckDates($(this), startTime);\n\t\t\t},\n\t\t\tonSelect: function(selectedDateTime) {\n\t\t\t\tselected($(this), startTime, 'maxDate');\n\t\t\t}\n\t\t}, options, options.end));\n\n\t\tcheckDates(startTime, endTime);\n\t\tselected(startTime, endTime, 'minDate');\n\t\tselected(endTime, startTime, 'maxDate');\n\n\t\tfunction checkDates(changed, other) {\n\t\t\tvar startdt = startTime[method]('getDate'),\n\t\t\t\tenddt = endTime[method]('getDate'),\n\t\t\t\tchangeddt = changed[method]('getDate');\n\n\t\t\tif(startdt !== null){\n\t\t\t\tvar minDate = new Date(startdt.getTime()),\n\t\t\t\t\tmaxDate = new Date(startdt.getTime());\n\n\t\t\t\tminDate.setMilliseconds(minDate.getMilliseconds() + options.minInterval);\n\t\t\t\tmaxDate.setMilliseconds(maxDate.getMilliseconds() + options.maxInterval);\n\n\t\t\t\tif(options.minInterval > 0 && minDate > enddt){ // minInterval check\n\t\t\t\t\tendTime[method]('setDate',minDate);\n\t\t\t\t}\n\t\t\t\telse if(options.maxInterval > 0 && maxDate < enddt){ // max interval check\n\t\t\t\t\tendTime[method]('setDate',maxDate);\n\t\t\t\t}\n\t\t\t\telse if (startdt > enddt) {\n\t\t\t\t\tother[method]('setDate',changeddt);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction selected(changed, other, option) {\n\t\t\tif (!changed.val()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar date = changed[method].call(changed, 'getDate');\n\t\t\tif(date !== null && options.minInterval > 0){\n\t\t\t\tif(option == 'minDate'){\n\t\t\t\t\tdate.setMilliseconds(date.getMilliseconds() + options.minInterval); \n\t\t\t\t}\n\t\t\t\tif(option == 'maxDate'){\n\t\t\t\t\tdate.setMilliseconds(date.getMilliseconds() - options.minInterval);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (date.getTime) {\n\t\t\t\tother[method].call(other, 'option', option, date);\n\t\t\t}\n\t\t}\n\t\treturn $([startTime.get(0), endTime.get(0)]);\n\t};\n\n\t/**\n\t * Log error or data to the console during error or debugging\n\t * @param  Object err pass any type object to log to the console during error or debugging\n\t * @return void\n\t */\n\t$.timepicker.log = function(err){\n\t\tif(window.console){\n\t\t\tconsole.log(err);\n\t\t}\n\t};\n\n\t/*\n\t* Microsecond support\n\t*/\n\tif(!Date.prototype.getMicroseconds){\n\t\tDate.prototype.microseconds = 0;\n\t\tDate.prototype.getMicroseconds = function(){ return this.microseconds; };\n\t\tDate.prototype.setMicroseconds = function(m){ \n\t\t\tthis.setMilliseconds(this.getMilliseconds() + Math.floor(m/1000));\n\t\t\tthis.microseconds = m%1000;\n\t\t\treturn this;\n\t\t};\n\t}\n\n\t/*\n\t* Keep up with the version\n\t*/\n\t$.timepicker.version = \"1.3.1\";\n\n})(jQuery);\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js?")},"../../../org/Hibachi/client/lib/angular-lazy-bootstrap/bootstrap.js":
/*!************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/lib/angular-lazy-bootstrap/bootstrap.js ***!
  \************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports){eval("(function (angular) {\n\n    'use strict';\n\n    //Generic   \n\n    function makeArray(arr) {\n        if(!arr){\n            return [];\n        }\n        return angular.isArray(arr) ? arr : [arr];\n    }\n\n    //Angular\n\n    function provideRootElement(modules, element) {\n        element = angular.element(element);\n        modules.unshift(['$provide',\n            function ($provide) {\n                $provide.value('$rootElement', element);\n            }]);\n    }\n\n    function createInjector(injectorModules, element) {\n        var modules = ['ng'].concat(makeArray(injectorModules));\n        if (element) {\n            provideRootElement(modules, element);\n        }\n        return angular.injector(modules);\n    }\n\n    function bootstrapApplication(angularApp) {\n        angular.element(document).ready(function () {\n        \ttry{\n\t        \tif(angular.isArray(angularApp)){\n\t        \t\tangular.bootstrap(document, angularApp);\n\t        \t}else{\n\t        \t\tangular.bootstrap(document, [angularApp]);\n\t        \t}\n\t        //if bootstrap fails then fall back to ui.bootstrap exclusively\n        \t}catch(e){\n        \t\tangular.bootstrap(document, ['ui.bootstrap']);\n        \t}\n        });\n    }\n\n    angular.lazy = function (app, modules) {\n\n        var injector = createInjector(modules),\n            $q = injector.get('$q'),\n            promises = [],\n            errorCallback = angular.noop,\n            loadingCallback = angular.noop,\n            doneCallback = angular.noop;\n\n        return {\n\n            resolve: function (promise) {\n                promise = $q.when(injector.instantiate(promise));\n                promises.push(promise);\n                return this;\n            },\n\n            bootstrap: function () {\n\n                loadingCallback();\n\n                return $q.all(promises)\n                    .then(function () {\n                        bootstrapApplication(app);\n                    }, errorCallback)\n                    .finally(doneCallback);\n            },\n\n            loading: function(callback){\n                loadingCallback = callback;\n                return this;\n            },\n\n            done: function(callback){\n                doneCallback = callback;\n                return this;\n            },\n\n            error: function(callback){\n                errorCallback = callback;\n                return this;\n            }\n        };\n\n    };\n\n})(angular);\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/lib/angular-lazy-bootstrap/bootstrap.js?")},"../../../org/Hibachi/client/lib/angular-ui-bootstrap/ui.bootstrap.min.js":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/lib/angular-ui-bootstrap/ui.bootstrap.min.js ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports){eval('/*\n * angular-ui-bootstrap\n * http://angular-ui.github.io/bootstrap/\n\n * Version: 0.11.2 - 2014-09-26\n * License: MIT\n */\nangular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.transition",[]).factory("$transition",["$q","$timeout","$rootScope",function(a,b,c){function d(a){for(var b in a)if(void 0!==f.style[b])return a[b]}var e=function(d,f,g){g=g||{};var h=a.defer(),i=e[g.animation?"animationEndEventName":"transitionEndEventName"],j=function(){c.$apply(function(){d.unbind(i,j),h.resolve(d)})};return i&&d.bind(i,j),b(function(){angular.isString(f)?d.addClass(f):angular.isFunction(f)?f(d):angular.isObject(f)&&d.css(f),i||h.resolve(d)}),h.promise.cancel=function(){i&&d.unbind(i,j),h.reject("Transition cancelled")},h.promise},f=document.createElement("trans"),g={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},h={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return e.transitionEndEventName=d(g),e.animationEndEventName=d(h),e}]),angular.module("ui.bootstrap.collapse",["ui.bootstrap.transition"]).directive("collapse",["$transition",function(a){return{link:function(b,c,d){function e(b){function d(){j===e&&(j=void 0)}var e=a(c,b);return j&&j.cancel(),j=e,e.then(d,d),e}function f(){k?(k=!1,g()):(c.removeClass("collapse").addClass("collapsing"),e({height:c[0].scrollHeight+"px"}).then(g))}function g(){c.removeClass("collapsing"),c.addClass("collapse in"),c.css({height:"auto"})}function h(){if(k)k=!1,i(),c.css({height:0});else{c.css({height:c[0].scrollHeight+"px"});{c[0].offsetWidth}c.removeClass("collapse in").addClass("collapsing"),e({height:0}).then(i)}}function i(){c.removeClass("collapsing"),c.addClass("collapse")}var j,k=!0;b.$watch(d.collapse,function(a){a?h():f()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(a,b,c){this.groups=[],this.closeOthers=function(d){var e=angular.isDefined(b.closeOthers)?a.$eval(b.closeOthers):c.closeOthers;e&&angular.forEach(this.groups,function(a){a!==d&&(a.isOpen=!1)})},this.addGroup=function(a){var b=this;this.groups.push(a),a.$on("$destroy",function(){b.removeGroup(a)})},this.removeGroup=function(a){var b=this.groups.indexOf(a);-1!==b&&this.groups.splice(b,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",transclude:!0,replace:!1,templateUrl:"template/accordion/accordion.html"}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/accordion/accordion-group.html",scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(a){this.heading=a}},link:function(a,b,c,d){d.addGroup(a),a.$watch("isOpen",function(b){b&&d.closeOthers(a)}),a.toggleOpen=function(){a.isDisabled||(a.isOpen=!a.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(a,b,c,d,e){d.setHeading(e(a,function(){}))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(a,b,c,d){a.$watch(function(){return d[c.accordionTransclude]},function(a){a&&(b.html(""),b.append(a))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(a,b){a.closeable="close"in b}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",templateUrl:"template/alert/alert.html",transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.bindHtml",[]).directive("bindHtmlUnsafe",function(){return function(a,b,c){b.addClass("ng-binding").data("$binding",c.bindHtmlUnsafe),a.$watch(c.bindHtmlUnsafe,function(a){b.html(a||"")})}}),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(a){this.activeClass=a.activeClass||"active",this.toggleEvent=a.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",link:function(a,b,c,d){var e=d[0],f=d[1];f.$render=function(){b.toggleClass(e.activeClass,angular.equals(f.$modelValue,a.$eval(c.btnRadio)))},b.bind(e.toggleEvent,function(){var d=b.hasClass(e.activeClass);(!d||angular.isDefined(c.uncheckable))&&a.$apply(function(){f.$setViewValue(d?null:a.$eval(c.btnRadio)),f.$render()})})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",link:function(a,b,c,d){function e(){return g(c.btnCheckboxTrue,!0)}function f(){return g(c.btnCheckboxFalse,!1)}function g(b,c){var d=a.$eval(b);return angular.isDefined(d)?d:c}var h=d[0],i=d[1];i.$render=function(){b.toggleClass(h.activeClass,angular.equals(i.$modelValue,e()))},b.bind(h.toggleEvent,function(){a.$apply(function(){i.$setViewValue(b.hasClass(h.activeClass)?f():e()),i.$render()})})}}}),angular.module("ui.bootstrap.carousel",["ui.bootstrap.transition"]).controller("CarouselController",["$scope","$timeout","$transition",function(a,b,c){function d(){e();var c=+a.interval;!isNaN(c)&&c>=0&&(g=b(f,c))}function e(){g&&(b.cancel(g),g=null)}function f(){h?(a.next(),d()):a.pause()}var g,h,i=this,j=i.slides=a.slides=[],k=-1;i.currentSlide=null;var l=!1;i.select=a.select=function(e,f){function g(){if(!l){if(i.currentSlide&&angular.isString(f)&&!a.noTransition&&e.$element){e.$element.addClass(f);{e.$element[0].offsetWidth}angular.forEach(j,function(a){angular.extend(a,{direction:"",entering:!1,leaving:!1,active:!1})}),angular.extend(e,{direction:f,active:!0,entering:!0}),angular.extend(i.currentSlide||{},{direction:f,leaving:!0}),a.$currentTransition=c(e.$element,{}),function(b,c){a.$currentTransition.then(function(){h(b,c)},function(){h(b,c)})}(e,i.currentSlide)}else h(e,i.currentSlide);i.currentSlide=e,k=m,d()}}function h(b,c){angular.extend(b,{direction:"",active:!0,leaving:!1,entering:!1}),angular.extend(c||{},{direction:"",active:!1,leaving:!1,entering:!1}),a.$currentTransition=null}var m=j.indexOf(e);void 0===f&&(f=m>k?"next":"prev"),e&&e!==i.currentSlide&&(a.$currentTransition?(a.$currentTransition.cancel(),b(g)):g())},a.$on("$destroy",function(){l=!0}),i.indexOfSlide=function(a){return j.indexOf(a)},a.next=function(){var b=(k+1)%j.length;return a.$currentTransition?void 0:i.select(j[b],"next")},a.prev=function(){var b=0>k-1?j.length-1:k-1;return a.$currentTransition?void 0:i.select(j[b],"prev")},a.isActive=function(a){return i.currentSlide===a},a.$watch("interval",d),a.$on("$destroy",e),a.play=function(){h||(h=!0,d())},a.pause=function(){a.noPause||(h=!1,e())},i.addSlide=function(b,c){b.$element=c,j.push(b),1===j.length||b.active?(i.select(j[j.length-1]),1==j.length&&a.play()):b.active=!1},i.removeSlide=function(a){var b=j.indexOf(a);j.splice(b,1),j.length>0&&a.active?i.select(b>=j.length?j[b-1]:j[b]):k>b&&k--}}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",require:"carousel",templateUrl:"template/carousel/carousel.html",scope:{interval:"=",noTransition:"=",noPause:"="}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/carousel/slide.html",scope:{active:"=?"},link:function(a,b,c,d){d.addSlide(a,b),a.$on("$destroy",function(){d.removeSlide(a)}),a.$watch("active",function(b){b&&d.select(a)})}}}),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$locale","orderByFilter",function(a,b){function c(a){var c=[],d=a.split("");return angular.forEach(e,function(b,e){var f=a.indexOf(e);if(f>-1){a=a.split(""),d[f]="("+b.regex+")",a[f]="$";for(var g=f+1,h=f+e.length;h>g;g++)d[g]="",a[g]="$";a=a.join(""),c.push({index:f,apply:b.apply})}}),{regex:new RegExp("^"+d.join("")+"$"),map:b(c,"index")}}function d(a,b,c){return 1===b&&c>28?29===c&&(a%4===0&&a%100!==0||a%400===0):3===b||5===b||8===b||10===b?31>c:!0}this.parsers={};var e={yyyy:{regex:"\\\\d{4}",apply:function(a){this.year=+a}},yy:{regex:"\\\\d{2}",apply:function(a){this.year=+a+2e3}},y:{regex:"\\\\d{1,4}",apply:function(a){this.year=+a}},MMMM:{regex:a.DATETIME_FORMATS.MONTH.join("|"),apply:function(b){this.month=a.DATETIME_FORMATS.MONTH.indexOf(b)}},MMM:{regex:a.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(b){this.month=a.DATETIME_FORMATS.SHORTMONTH.indexOf(b)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(a){this.month=a-1}},M:{regex:"[1-9]|1[0-2]",apply:function(a){this.month=a-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a}},EEEE:{regex:a.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:a.DATETIME_FORMATS.SHORTDAY.join("|")}};this.parse=function(b,e){if(!angular.isString(b)||!e)return b;e=a.DATETIME_FORMATS[e]||e,this.parsers[e]||(this.parsers[e]=c(e));var f=this.parsers[e],g=f.regex,h=f.map,i=b.match(g);if(i&&i.length){for(var j,k={year:1900,month:0,date:1,hours:0},l=1,m=i.length;m>l;l++){var n=h[l-1];n.apply&&n.apply.call(k,i[l])}return d(k.year,k.month,k.date)&&(j=new Date(k.year,k.month,k.date,k.hours)),j}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(a,b){function c(a,c){return a.currentStyle?a.currentStyle[c]:b.getComputedStyle?b.getComputedStyle(a)[c]:a.style[c]}function d(a){return"static"===(c(a,"position")||"static")}var e=function(b){for(var c=a[0],e=b.offsetParent||c;e&&e!==c&&d(e);)e=e.offsetParent;return e||c};return{position:function(b){var c=this.offset(b),d={top:0,left:0},f=e(b[0]);f!=a[0]&&(d=this.offset(angular.element(f)),d.top+=f.clientTop-f.scrollTop,d.left+=f.clientLeft-f.scrollLeft);var g=b[0].getBoundingClientRect();return{width:g.width||b.prop("offsetWidth"),height:g.height||b.prop("offsetHeight"),top:c.top-d.top,left:c.left-d.left}},offset:function(c){var d=c[0].getBoundingClientRect();return{width:d.width||c.prop("offsetWidth"),height:d.height||c.prop("offsetHeight"),top:d.top+(b.pageYOffset||a[0].documentElement.scrollTop),left:d.left+(b.pageXOffset||a[0].documentElement.scrollLeft)}},positionElements:function(a,b,c,d){var e,f,g,h,i=c.split("-"),j=i[0],k=i[1]||"center";e=d?this.offset(a):this.position(a),f=b.prop("offsetWidth"),g=b.prop("offsetHeight");var l={center:function(){return e.left+e.width/2-f/2},left:function(){return e.left},right:function(){return e.left+e.width}},m={center:function(){return e.top+e.height/2-g/2},top:function(){return e.top},bottom:function(){return e.top+e.height}};switch(j){case"right":h={top:m[k](),left:l[j]()};break;case"left":h={top:m[k](),left:e.left-f};break;case"bottom":h={top:m[j](),left:l[k]()};break;default:h={top:e.top-g,left:l[k]()}}return h}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$timeout","$log","dateFilter","datepickerConfig",function(a,b,c,d,e,f,g,h){var i=this,j={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","minMode","maxMode","showWeeks","startingDay","yearRange"],function(c,e){i[c]=angular.isDefined(b[c])?8>e?d(b[c])(a.$parent):a.$parent.$eval(b[c]):h[c]}),angular.forEach(["minDate","maxDate"],function(d){b[d]?a.$parent.$watch(c(b[d]),function(a){i[d]=a?new Date(a):null,i.refreshView()}):i[d]=h[d]?new Date(h[d]):null}),a.datepickerMode=a.datepickerMode||h.datepickerMode,a.uniqueId="datepicker-"+a.$id+"-"+Math.floor(1e4*Math.random()),this.activeDate=angular.isDefined(b.initDate)?a.$parent.$eval(b.initDate):new Date,a.isActive=function(b){return 0===i.compare(b.date,i.activeDate)?(a.activeDateId=b.uid,!0):!1},this.init=function(a){j=a,j.$render=function(){i.render()}},this.render=function(){if(j.$modelValue){var a=new Date(j.$modelValue),b=!isNaN(a);b?this.activeDate=a:f.error(\'Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.\'),j.$setValidity("date",b)}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var a=j.$modelValue?new Date(j.$modelValue):null;j.$setValidity("date-disabled",!a||this.element&&!this.isDisabled(a))}},this.createDateObject=function(a,b){var c=j.$modelValue?new Date(j.$modelValue):null;return{date:a,label:g(a,b),selected:c&&0===this.compare(a,c),disabled:this.isDisabled(a),current:0===this.compare(a,new Date)}},this.isDisabled=function(c){return this.minDate&&this.compare(c,this.minDate)<0||this.maxDate&&this.compare(c,this.maxDate)>0||b.dateDisabled&&a.dateDisabled({date:c,mode:a.datepickerMode})},this.split=function(a,b){for(var c=[];a.length>0;)c.push(a.splice(0,b));return c},a.select=function(b){if(a.datepickerMode===i.minMode){var c=j.$modelValue?new Date(j.$modelValue):new Date(0,0,0,0,0,0,0);c.setFullYear(b.getFullYear(),b.getMonth(),b.getDate()),j.$setViewValue(c),j.$render()}else i.activeDate=b,a.datepickerMode=i.modes[i.modes.indexOf(a.datepickerMode)-1]},a.move=function(a){var b=i.activeDate.getFullYear()+a*(i.step.years||0),c=i.activeDate.getMonth()+a*(i.step.months||0);i.activeDate.setFullYear(b,c,1),i.refreshView()},a.toggleMode=function(b){b=b||1,a.datepickerMode===i.maxMode&&1===b||a.datepickerMode===i.minMode&&-1===b||(a.datepickerMode=i.modes[i.modes.indexOf(a.datepickerMode)+b])},a.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var k=function(){e(function(){i.element[0].focus()},0,!1)};a.$on("datepicker.focus",k),a.keydown=function(b){var c=a.keys[b.which];if(c&&!b.shiftKey&&!b.altKey)if(b.preventDefault(),b.stopPropagation(),"enter"===c||"space"===c){if(i.isDisabled(i.activeDate))return;a.select(i.activeDate),k()}else!b.ctrlKey||"up"!==c&&"down"!==c?(i.handleKeyDown(c,b),i.refreshView()):(a.toggleMode("up"===c?1:-1),k())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/datepicker.html",scope:{datepickerMode:"=?",dateDisabled:"&"},require:["datepicker","?^ngModel"],controller:"DatepickerController",link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f)}}}).directive("daypicker",["dateFilter",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(b,c,d,e){function f(a,b){return 1!==b||a%4!==0||a%100===0&&a%400!==0?i[b]:29}function g(a,b){var c=new Array(b),d=new Date(a),e=0;for(d.setHours(12);b>e;)c[e++]=new Date(d),d.setDate(d.getDate()+1);return c}function h(a){var b=new Date(a);b.setDate(b.getDate()+4-(b.getDay()||7));var c=b.getTime();return b.setMonth(0),b.setDate(1),Math.floor(Math.round((c-b)/864e5)/7)+1}b.showWeeks=e.showWeeks,e.step={months:1},e.element=c;var i=[31,28,31,30,31,30,31,31,30,31,30,31];e._refreshView=function(){var c=e.activeDate.getFullYear(),d=e.activeDate.getMonth(),f=new Date(c,d,1),i=e.startingDay-f.getDay(),j=i>0?7-i:-i,k=new Date(f);j>0&&k.setDate(-j+1);for(var l=g(k,42),m=0;42>m;m++)l[m]=angular.extend(e.createDateObject(l[m],e.formatDay),{secondary:l[m].getMonth()!==d,uid:b.uniqueId+"-"+m});b.labels=new Array(7);for(var n=0;7>n;n++)b.labels[n]={abbr:a(l[n].date,e.formatDayHeader),full:a(l[n].date,"EEEE")};if(b.title=a(e.activeDate,e.formatDayTitle),b.rows=e.split(l,7),b.showWeeks){b.weekNumbers=[];for(var o=h(b.rows[0][0].date),p=b.rows.length;b.weekNumbers.push(o++)<p;);}},e.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth(),a.getDate())-new Date(b.getFullYear(),b.getMonth(),b.getDate())},e.handleKeyDown=function(a){var b=e.activeDate.getDate();if("left"===a)b-=1;else if("up"===a)b-=7;else if("right"===a)b+=1;else if("down"===a)b+=7;else if("pageup"===a||"pagedown"===a){var c=e.activeDate.getMonth()+("pageup"===a?-1:1);e.activeDate.setMonth(c,1),b=Math.min(f(e.activeDate.getFullYear(),e.activeDate.getMonth()),b)}else"home"===a?b=1:"end"===a&&(b=f(e.activeDate.getFullYear(),e.activeDate.getMonth()));e.activeDate.setDate(b)},e.refreshView()}}}]).directive("monthpicker",["dateFilter",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(b,c,d,e){e.step={years:1},e.element=c,e._refreshView=function(){for(var c=new Array(12),d=e.activeDate.getFullYear(),f=0;12>f;f++)c[f]=angular.extend(e.createDateObject(new Date(d,f,1),e.formatMonth),{uid:b.uniqueId+"-"+f});b.title=a(e.activeDate,e.formatMonthTitle),b.rows=e.split(c,3)},e.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth())-new Date(b.getFullYear(),b.getMonth())},e.handleKeyDown=function(a){var b=e.activeDate.getMonth();if("left"===a)b-=1;else if("up"===a)b-=3;else if("right"===a)b+=1;else if("down"===a)b+=3;else if("pageup"===a||"pagedown"===a){var c=e.activeDate.getFullYear()+("pageup"===a?-1:1);e.activeDate.setFullYear(c)}else"home"===a?b=0:"end"===a&&(b=11);e.activeDate.setMonth(b)},e.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(a,b,c,d){function e(a){return parseInt((a-1)/f,10)*f+1}var f=d.yearRange;d.step={years:f},d.element=b,d._refreshView=function(){for(var b=new Array(f),c=0,g=e(d.activeDate.getFullYear());f>c;c++)b[c]=angular.extend(d.createDateObject(new Date(g+c,0,1),d.formatYear),{uid:a.uniqueId+"-"+c});a.title=[b[0].label,b[f-1].label].join(" - "),a.rows=d.split(b,5)},d.compare=function(a,b){return a.getFullYear()-b.getFullYear()},d.handleKeyDown=function(a){var b=d.activeDate.getFullYear();"left"===a?b-=1:"up"===a?b-=5:"right"===a?b+=1:"down"===a?b+=5:"pageup"===a||"pagedown"===a?b+=("pageup"===a?-1:1)*d.step.years:"home"===a?b=e(d.activeDate.getFullYear()):"end"===a&&(b=e(d.activeDate.getFullYear())+f-1),d.activeDate.setFullYear(b)},d.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0}).directive("datepickerPopup",["$compile","$parse","$document","$position","dateFilter","dateParser","datepickerPopupConfig",function(a,b,c,d,e,f,g){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&"},link:function(h,i,j,k){function l(a){return a.replace(/([A-Z])/g,function(a){return"-"+a.toLowerCase()})}function m(a){if(a){if(angular.isDate(a)&&!isNaN(a))return k.$setValidity("date",!0),a;if(angular.isString(a)){var b=f.parse(a,n)||new Date(a);return isNaN(b)?void k.$setValidity("date",!1):(k.$setValidity("date",!0),b)}return void k.$setValidity("date",!1)}return k.$setValidity("date",!0),null}var n,o=angular.isDefined(j.closeOnDateSelection)?h.$parent.$eval(j.closeOnDateSelection):g.closeOnDateSelection,p=angular.isDefined(j.datepickerAppendToBody)?h.$parent.$eval(j.datepickerAppendToBody):g.appendToBody;h.showButtonBar=angular.isDefined(j.showButtonBar)?h.$parent.$eval(j.showButtonBar):g.showButtonBar,h.getText=function(a){return h[a+"Text"]||g[a+"Text"]},j.$observe("datepickerPopup",function(a){n=a||g.datepickerPopup,k.$render()});var q=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");q.attr({"ng-model":"date","ng-change":"dateSelection()"});var r=angular.element(q.children()[0]);j.datepickerOptions&&angular.forEach(h.$parent.$eval(j.datepickerOptions),function(a,b){r.attr(l(b),a)}),h.watchData={},angular.forEach(["minDate","maxDate","datepickerMode"],function(a){if(j[a]){var c=b(j[a]);if(h.$parent.$watch(c,function(b){h.watchData[a]=b}),r.attr(l(a),"watchData."+a),"datepickerMode"===a){var d=c.assign;h.$watch("watchData."+a,function(a,b){a!==b&&d(h.$parent,a)})}}}),j.dateDisabled&&r.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),k.$parsers.unshift(m),h.dateSelection=function(a){angular.isDefined(a)&&(h.date=a),k.$setViewValue(h.date),k.$render(),o&&(h.isOpen=!1,i[0].focus())},i.bind("input change keyup",function(){h.$apply(function(){h.date=k.$modelValue})}),k.$render=function(){var a=k.$viewValue?e(k.$viewValue,n):"";i.val(a),h.date=m(k.$modelValue)};var s=function(a){h.isOpen&&a.target!==i[0]&&h.$apply(function(){h.isOpen=!1})},t=function(a){h.keydown(a)};i.bind("keydown",t),h.keydown=function(a){27===a.which?(a.preventDefault(),a.stopPropagation(),h.close()):40!==a.which||h.isOpen||(h.isOpen=!0)},h.$watch("isOpen",function(a){a?(h.$broadcast("datepicker.focus"),h.position=p?d.offset(i):d.position(i),h.position.top=h.position.top+i.prop("offsetHeight"),c.bind("click",s)):c.unbind("click",s)}),h.select=function(a){if("today"===a){var b=new Date;angular.isDate(k.$modelValue)?(a=new Date(k.$modelValue),a.setFullYear(b.getFullYear(),b.getMonth(),b.getDate())):a=new Date(b.setHours(0,0,0,0))}h.dateSelection(a)},h.close=function(){h.isOpen=!1,i[0].focus()};var u=a(q)(h);q.remove(),p?c.find("body").append(u):i.after(u),h.$on("$destroy",function(){u.remove(),i.unbind("keydown",t),c.unbind("click",s)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:"template/datepicker/popup.html",link:function(a,b){b.bind("click",function(a){a.preventDefault(),a.stopPropagation()})}}}),angular.module("ui.bootstrap.dropdown",[]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document",function(a){var b=null;this.open=function(e){b||(a.bind("click",c),a.bind("keydown",d)),b&&b!==e&&(b.isOpen=!1),b=e},this.close=function(e){b===e&&(b=null,a.unbind("click",c),a.unbind("keydown",d))};var c=function(a){var c=b.getToggleElement();a&&c&&c[0].contains(a.target)||b.$apply(function(){b.isOpen=!1})},d=function(a){27===a.which&&(b.focusToggleElement(),c())}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate",function(a,b,c,d,e,f){var g,h=this,i=a.$new(),j=d.openClass,k=angular.noop,l=b.onToggle?c(b.onToggle):angular.noop;this.init=function(d){h.$element=d,b.isOpen&&(g=c(b.isOpen),k=g.assign,a.$watch(g,function(a){i.isOpen=!!a}))},this.toggle=function(a){return i.isOpen=arguments.length?!!a:!i.isOpen},this.isOpen=function(){return i.isOpen},i.getToggleElement=function(){return h.toggleElement},i.focusToggleElement=function(){h.toggleElement&&h.toggleElement[0].focus()},i.$watch("isOpen",function(b,c){f[b?"addClass":"removeClass"](h.$element,j),b?(i.focusToggleElement(),e.open(i)):e.close(i),k(a,b),angular.isDefined(b)&&b!==c&&l(a,{open:!!b})}),a.$on("$locationChangeSuccess",function(){i.isOpen=!1}),a.$on("$destroy",function(){i.$destroy()})}]).directive("dropdown",function(){return{restrict:"CA",controller:"DropdownController",link:function(a,b,c,d){d.init(b)}}}).directive("dropdownToggle",function(){return{restrict:"CA",require:"?^dropdown",link:function(a,b,c,d){if(d){d.toggleElement=b;var e=function(e){e.preventDefault(),b.hasClass("disabled")||c.disabled||a.$apply(function(){d.toggle()})};b.bind("click",e),b.attr({"aria-haspopup":!0,"aria-expanded":!1}),a.$watch(d.isOpen,function(a){b.attr("aria-expanded",!!a)}),a.$on("$destroy",function(){b.unbind("click",e)})}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.transition"]).factory("$$stackedMap",function(){return{createNew:function(){var a=[];return{add:function(b,c){a.push({key:b,value:c})},get:function(b){for(var c=0;c<a.length;c++)if(b==a[c].key)return a[c]},keys:function(){for(var b=[],c=0;c<a.length;c++)b.push(a[c].key);return b},top:function(){return a[a.length-1]},remove:function(b){for(var c=-1,d=0;d<a.length;d++)if(b==a[d].key){c=d;break}return a.splice(c,1)[0]},removeTop:function(){return a.splice(a.length-1,1)[0]},length:function(){return a.length}}}}}).directive("modalBackdrop",["$timeout",function(a){return{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",link:function(b,c,d){b.backdropClass=d.backdropClass||"",b.animate=!1,a(function(){b.animate=!0})}}}]).directive("modalWindow",["$modalStack","$timeout",function(a,b){return{restrict:"EA",scope:{index:"@",animate:"="},replace:!0,transclude:!0,templateUrl:function(a,b){return b.templateUrl||"template/modal/window.html"},link:function(c,d,e){d.addClass(e.windowClass||""),c.size=e.size,b(function(){c.animate=!0,d[0].querySelectorAll("[autofocus]").length||d[0].focus()}),c.close=function(b){var c=a.getTop();c&&c.value.backdrop&&"static"!=c.value.backdrop&&b.target===b.currentTarget&&(b.preventDefault(),b.stopPropagation(),a.dismiss(c.key,"backdrop click"))}}}}]).directive("modalTransclude",function(){return{link:function(a,b,c,d,e){e(a.$parent,function(a){b.empty(),b.append(a)})}}}).factory("$modalStack",["$transition","$timeout","$document","$compile","$rootScope","$$stackedMap",function(a,b,c,d,e,f){function g(){for(var a=-1,b=n.keys(),c=0;c<b.length;c++)n.get(b[c]).value.backdrop&&(a=c);return a}function h(a){var b=c.find("body").eq(0),d=n.get(a).value;n.remove(a),j(d.modalDomEl,d.modalScope,300,function(){d.modalScope.$destroy(),b.toggleClass(m,n.length()>0),i()})}function i(){if(k&&-1==g()){var a=l;j(k,l,150,function(){a.$destroy(),a=null}),k=void 0,l=void 0}}function j(c,d,e,f){function g(){g.done||(g.done=!0,c.remove(),f&&f())}d.animate=!1;var h=a.transitionEndEventName;if(h){var i=b(g,e);c.bind(h,function(){b.cancel(i),g(),d.$apply()})}else b(g)}var k,l,m="modal-open",n=f.createNew(),o={};return e.$watch(g,function(a){l&&(l.index=a)}),c.bind("keydown",function(a){var b;27===a.which&&(b=n.top(),b&&b.value.keyboard&&(a.preventDefault(),e.$apply(function(){o.dismiss(b.key,"escape key press")})))}),o.open=function(a,b){n.add(a,{deferred:b.deferred,modalScope:b.scope,backdrop:b.backdrop,keyboard:b.keyboard});var f=c.find("body").eq(0),h=g();if(h>=0&&!k){l=e.$new(!0),l.index=h;var i=angular.element("<div modal-backdrop></div>");i.attr("backdrop-class",b.backdropClass),k=d(i)(l),f.append(k)}var j=angular.element("<div modal-window></div>");j.attr({"template-url":b.windowTemplateUrl,"window-class":b.windowClass,size:b.size,index:n.length()-1,animate:"animate"}).html(b.content);var o=d(j)(b.scope);n.top().value.modalDomEl=o,f.append(o),f.addClass(m)},o.close=function(a,b){var c=n.get(a);c&&(c.value.deferred.resolve(b),h(a))},o.dismiss=function(a,b){var c=n.get(a);c&&(c.value.deferred.reject(b),h(a))},o.dismissAll=function(a){for(var b=this.getTop();b;)this.dismiss(b.key,a),b=this.getTop()},o.getTop=function(){return n.top()},o}]).provider("$modal",function(){var a={options:{backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$http","$templateCache","$controller","$modalStack",function(b,c,d,e,f,g,h){function i(a){return a.template?d.when(a.template):e.get(angular.isFunction(a.templateUrl)?a.templateUrl():a.templateUrl,{cache:f}).then(function(a){return a.data})}function j(a){var c=[];return angular.forEach(a,function(a){(angular.isFunction(a)||angular.isArray(a))&&c.push(d.when(b.invoke(a)))}),c}var k={};return k.open=function(b){var e=d.defer(),f=d.defer(),k={result:e.promise,opened:f.promise,close:function(a){h.close(k,a)},dismiss:function(a){h.dismiss(k,a)}};if(b=angular.extend({},a.options,b),b.resolve=b.resolve||{},!b.template&&!b.templateUrl)throw new Error("One of template or templateUrl options is required.");var l=d.all([i(b)].concat(j(b.resolve)));return l.then(function(a){var d=(b.scope||c).$new();d.$close=k.close,d.$dismiss=k.dismiss;var f,i={},j=1;b.controller&&(i.$scope=d,i.$modalInstance=k,angular.forEach(b.resolve,function(b,c){i[c]=a[j++]}),f=g(b.controller,i),b.controllerAs&&(d[b.controllerAs]=f)),h.open(k,{scope:d,deferred:e,content:a[0],backdrop:b.backdrop,keyboard:b.keyboard,backdropClass:b.backdropClass,windowClass:b.windowClass,windowTemplateUrl:b.windowTemplateUrl,size:b.size})},function(a){e.reject(a)}),l.then(function(){f.resolve(!0)},function(){f.reject(!1)}),k},k}]};return a}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(a,b,c){var d=this,e={$setViewValue:angular.noop},f=b.numPages?c(b.numPages).assign:angular.noop;this.init=function(f,g){e=f,this.config=g,e.$render=function(){d.render()},b.itemsPerPage?a.$parent.$watch(c(b.itemsPerPage),function(b){d.itemsPerPage=parseInt(b,10),a.totalPages=d.calculateTotalPages()}):this.itemsPerPage=g.itemsPerPage},this.calculateTotalPages=function(){var b=this.itemsPerPage<1?1:Math.ceil(a.totalItems/this.itemsPerPage);return Math.max(b||0,1)},this.render=function(){a.page=parseInt(e.$viewValue,10)||1},a.selectPage=function(b){a.page!==b&&b>0&&b<=a.totalPages&&(e.$setViewValue(b),e.$render())},a.getText=function(b){return a[b+"Text"]||d.config[b+"Text"]},a.noPrevious=function(){return 1===a.page},a.noNext=function(){return a.page===a.totalPages},a.$watch("totalItems",function(){a.totalPages=d.calculateTotalPages()}),a.$watch("totalPages",function(b){f(a.$parent,b),a.page>b?a.selectPage(b):e.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(a,b){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(c,d,e,f){function g(a,b,c){return{number:a,text:b,active:c}}function h(a,b){var c=[],d=1,e=b,f=angular.isDefined(k)&&b>k;f&&(l?(d=Math.max(a-Math.floor(k/2),1),e=d+k-1,e>b&&(e=b,d=e-k+1)):(d=(Math.ceil(a/k)-1)*k+1,e=Math.min(d+k-1,b)));for(var h=d;e>=h;h++){var i=g(h,h,h===a);c.push(i)}if(f&&!l){if(d>1){var j=g(d-1,"...",!1);c.unshift(j)}if(b>e){var m=g(e+1,"...",!1);c.push(m)}}return c}var i=f[0],j=f[1];if(j){var k=angular.isDefined(e.maxSize)?c.$parent.$eval(e.maxSize):b.maxSize,l=angular.isDefined(e.rotate)?c.$parent.$eval(e.rotate):b.rotate;c.boundaryLinks=angular.isDefined(e.boundaryLinks)?c.$parent.$eval(e.boundaryLinks):b.boundaryLinks,c.directionLinks=angular.isDefined(e.directionLinks)?c.$parent.$eval(e.directionLinks):b.directionLinks,i.init(j,b),e.maxSize&&c.$parent.$watch(a(e.maxSize),function(a){k=parseInt(a,10),i.render()\n});var m=i.render;i.render=function(){m(),c.page>0&&c.page<=c.totalPages&&(c.pages=h(c.page,c.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"Â« Previous",nextText:"Next Â»",align:!0}).directive("pager",["pagerConfig",function(a){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(b,c,d,e){var f=e[0],g=e[1];g&&(b.align=angular.isDefined(d.align)?b.$parent.$eval(d.align):a.align,f.init(g,a))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function a(a){var b=/[A-Z]/g,c="-";return a.replace(b,function(a,b){return(b?c:"")+a.toLowerCase()})}var b={placement:"top",animation:!0,popupDelay:0},c={mouseenter:"mouseleave",click:"click",focus:"blur"},d={};this.options=function(a){angular.extend(d,a)},this.setTriggers=function(a){angular.extend(c,a)},this.$get=["$window","$compile","$timeout","$parse","$document","$position","$interpolate",function(e,f,g,h,i,j,k){return function(e,l,m){function n(a){var b=a||o.trigger||m,d=c[b]||b;return{show:b,hide:d}}var o=angular.extend({},b,d),p=a(e),q=k.startSymbol(),r=k.endSymbol(),s="<div "+p+\'-popup title="\'+q+"tt_title"+r+\'" content="\'+q+"tt_content"+r+\'" placement="\'+q+"tt_placement"+r+\'" animation="tt_animation" is-open="tt_isOpen"></div>\';return{restrict:"EA",scope:!0,compile:function(){var a=f(s);return function(b,c,d){function f(){b.tt_isOpen?m():k()}function k(){(!y||b.$eval(d[l+"Enable"]))&&(b.tt_popupDelay?v||(v=g(p,b.tt_popupDelay,!1),v.then(function(a){a()})):p()())}function m(){b.$apply(function(){q()})}function p(){return v=null,u&&(g.cancel(u),u=null),b.tt_content?(r(),t.css({top:0,left:0,display:"block"}),w?i.find("body").append(t):c.after(t),z(),b.tt_isOpen=!0,b.$digest(),z):angular.noop}function q(){b.tt_isOpen=!1,g.cancel(v),v=null,b.tt_animation?u||(u=g(s,500)):s()}function r(){t&&s(),t=a(b,function(){}),b.$digest()}function s(){u=null,t&&(t.remove(),t=null)}var t,u,v,w=angular.isDefined(o.appendToBody)?o.appendToBody:!1,x=n(void 0),y=angular.isDefined(d[l+"Enable"]),z=function(){var a=j.positionElements(c,t,b.tt_placement,w);a.top+="px",a.left+="px",t.css(a)};b.tt_isOpen=!1,d.$observe(e,function(a){b.tt_content=a,!a&&b.tt_isOpen&&q()}),d.$observe(l+"Title",function(a){b.tt_title=a}),d.$observe(l+"Placement",function(a){b.tt_placement=angular.isDefined(a)?a:o.placement}),d.$observe(l+"PopupDelay",function(a){var c=parseInt(a,10);b.tt_popupDelay=isNaN(c)?o.popupDelay:c});var A=function(){c.unbind(x.show,k),c.unbind(x.hide,m)};d.$observe(l+"Trigger",function(a){A(),x=n(a),x.show===x.hide?c.bind(x.show,f):(c.bind(x.show,k),c.bind(x.hide,m))});var B=b.$eval(d[l+"Animation"]);b.tt_animation=angular.isDefined(B)?!!B:o.animation,d.$observe(l+"AppendToBody",function(a){w=angular.isDefined(a)?h(a)(b):w}),w&&b.$on("$locationChangeSuccess",function(){b.tt_isOpen&&q()}),b.$on("$destroy",function(){g.cancel(u),g.cancel(v),A(),s()})}}}}}]}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(a){return a("tooltip","tooltip","mouseenter")}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).directive("tooltipHtmlUnsafe",["$tooltip",function(a){return a("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(a){return a("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(a,b,c){var d=this,e=angular.isDefined(b.animate)?a.$parent.$eval(b.animate):c.animate;this.bars=[],a.max=angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max,this.addBar=function(b,c){e||c.css({transition:"none"}),this.bars.push(b),b.$watch("value",function(c){b.percent=+(100*c/a.max).toFixed(2)}),b.$on("$destroy",function(){c=null,d.removeBar(b)})},this.removeBar=function(a){this.bars.splice(this.bars.indexOf(a),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(a,b,c,d){d.addBar(a,b)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(a,b,c,d){d.addBar(a,angular.element(b.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null}).controller("RatingController",["$scope","$attrs","ratingConfig",function(a,b,c){var d={$setViewValue:angular.noop};this.init=function(e){d=e,d.$render=this.render,this.stateOn=angular.isDefined(b.stateOn)?a.$parent.$eval(b.stateOn):c.stateOn,this.stateOff=angular.isDefined(b.stateOff)?a.$parent.$eval(b.stateOff):c.stateOff;var f=angular.isDefined(b.ratingStates)?a.$parent.$eval(b.ratingStates):new Array(angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max);a.range=this.buildTemplateObjects(f)},this.buildTemplateObjects=function(a){for(var b=0,c=a.length;c>b;b++)a[b]=angular.extend({index:b},{stateOn:this.stateOn,stateOff:this.stateOff},a[b]);return a},a.rate=function(b){!a.readonly&&b>=0&&b<=a.range.length&&(d.$setViewValue(b),d.$render())},a.enter=function(b){a.readonly||(a.value=b),a.onHover({value:b})},a.reset=function(){a.value=d.$viewValue,a.onLeave()},a.onKeydown=function(b){/(37|38|39|40)/.test(b.which)&&(b.preventDefault(),b.stopPropagation(),a.rate(a.value+(38===b.which||39===b.which?1:-1)))},this.render=function(){a.value=d.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(a){var b=this,c=b.tabs=a.tabs=[];b.select=function(a){angular.forEach(c,function(b){b.active&&b!==a&&(b.active=!1,b.onDeselect())}),a.active=!0,a.onSelect()},b.addTab=function(a){c.push(a),1===c.length?a.active=!0:a.active&&b.select(a)},b.removeTab=function(a){var d=c.indexOf(a);if(a.active&&c.length>1){var e=d==c.length-1?d-1:d+1;b.select(c[e])}c.splice(d,1)}}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(a,b,c){a.vertical=angular.isDefined(c.vertical)?a.$parent.$eval(c.vertical):!1,a.justified=angular.isDefined(c.justified)?a.$parent.$eval(c.justified):!1}}}).directive("tab",["$parse",function(a){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},compile:function(b,c,d){return function(b,c,e,f){b.$watch("active",function(a){a&&f.select(b)}),b.disabled=!1,e.disabled&&b.$parent.$watch(a(e.disabled),function(a){b.disabled=!!a}),b.select=function(){b.disabled||(b.active=!0)},f.addTab(b),b.$on("$destroy",function(){f.removeTab(b)}),b.$transcludeFn=d}}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(a,b){a.$watch("headingElement",function(a){a&&(b.html(""),b.append(a))})}}}]).directive("tabContentTransclude",function(){function a(a){return a.tagName&&(a.hasAttribute("tab-heading")||a.hasAttribute("data-tab-heading")||"tab-heading"===a.tagName.toLowerCase()||"data-tab-heading"===a.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(b,c,d){var e=b.$eval(d.tabContentTransclude);e.$transcludeFn(e.$parent,function(b){angular.forEach(b,function(b){a(b)?e.headingElement=b:c.append(b)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(a,b,c,d,e,f){function g(){var b=parseInt(a.hours,10),c=a.showMeridian?b>0&&13>b:b>=0&&24>b;return c?(a.showMeridian&&(12===b&&(b=0),a.meridian===p[1]&&(b+=12)),b):void 0}function h(){var b=parseInt(a.minutes,10);return b>=0&&60>b?b:void 0}function i(a){return angular.isDefined(a)&&a.toString().length<2?"0"+a:a}function j(a){k(),o.$setViewValue(new Date(n)),l(a)}function k(){o.$setValidity("time",!0),a.invalidHours=!1,a.invalidMinutes=!1}function l(b){var c=n.getHours(),d=n.getMinutes();a.showMeridian&&(c=0===c||12===c?12:c%12),a.hours="h"===b?c:i(c),a.minutes="m"===b?d:i(d),a.meridian=n.getHours()<12?p[0]:p[1]}function m(a){var b=new Date(n.getTime()+6e4*a);n.setHours(b.getHours(),b.getMinutes()),j()}var n=new Date,o={$setViewValue:angular.noop},p=angular.isDefined(b.meridians)?a.$parent.$eval(b.meridians):f.meridians||e.DATETIME_FORMATS.AMPMS;this.init=function(c,d){o=c,o.$render=this.render;var e=d.eq(0),g=d.eq(1),h=angular.isDefined(b.mousewheel)?a.$parent.$eval(b.mousewheel):f.mousewheel;h&&this.setupMousewheelEvents(e,g),a.readonlyInput=angular.isDefined(b.readonlyInput)?a.$parent.$eval(b.readonlyInput):f.readonlyInput,this.setupInputEvents(e,g)};var q=f.hourStep;b.hourStep&&a.$parent.$watch(c(b.hourStep),function(a){q=parseInt(a,10)});var r=f.minuteStep;b.minuteStep&&a.$parent.$watch(c(b.minuteStep),function(a){r=parseInt(a,10)}),a.showMeridian=f.showMeridian,b.showMeridian&&a.$parent.$watch(c(b.showMeridian),function(b){if(a.showMeridian=!!b,o.$error.time){var c=g(),d=h();angular.isDefined(c)&&angular.isDefined(d)&&(n.setHours(c),j())}else l()}),this.setupMousewheelEvents=function(b,c){var d=function(a){a.originalEvent&&(a=a.originalEvent);var b=a.wheelDelta?a.wheelDelta:-a.deltaY;return a.detail||b>0};b.bind("mousewheel wheel",function(b){a.$apply(d(b)?a.incrementHours():a.decrementHours()),b.preventDefault()}),c.bind("mousewheel wheel",function(b){a.$apply(d(b)?a.incrementMinutes():a.decrementMinutes()),b.preventDefault()})},this.setupInputEvents=function(b,c){if(a.readonlyInput)return a.updateHours=angular.noop,void(a.updateMinutes=angular.noop);var d=function(b,c){o.$setViewValue(null),o.$setValidity("time",!1),angular.isDefined(b)&&(a.invalidHours=b),angular.isDefined(c)&&(a.invalidMinutes=c)};a.updateHours=function(){var a=g();angular.isDefined(a)?(n.setHours(a),j("h")):d(!0)},b.bind("blur",function(){!a.invalidHours&&a.hours<10&&a.$apply(function(){a.hours=i(a.hours)})}),a.updateMinutes=function(){var a=h();angular.isDefined(a)?(n.setMinutes(a),j("m")):d(void 0,!0)},c.bind("blur",function(){!a.invalidMinutes&&a.minutes<10&&a.$apply(function(){a.minutes=i(a.minutes)})})},this.render=function(){var a=o.$modelValue?new Date(o.$modelValue):null;isNaN(a)?(o.$setValidity("time",!1),d.error(\'Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.\')):(a&&(n=a),k(),l())},a.incrementHours=function(){m(60*q)},a.decrementHours=function(){m(60*-q)},a.incrementMinutes=function(){m(r)},a.decrementMinutes=function(){m(-r)},a.toggleMeridian=function(){m(720*(n.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f,b.find("input"))}}}),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(a){var b=/^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w\\d]*))\\s+in\\s+([\\s\\S]+?)$/;return{parse:function(c){var d=c.match(b);if(!d)throw new Error(\'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "\'+c+\'".\');return{itemName:d[3],source:a(d[4]),viewMapper:a(d[2]||d[1]),modelMapper:a(d[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$position","typeaheadParser",function(a,b,c,d,e,f,g){var h=[9,13,27,38,40];return{require:"ngModel",link:function(i,j,k,l){var m,n=i.$eval(k.typeaheadMinLength)||1,o=i.$eval(k.typeaheadWaitMs)||0,p=i.$eval(k.typeaheadEditable)!==!1,q=b(k.typeaheadLoading).assign||angular.noop,r=b(k.typeaheadOnSelect),s=k.typeaheadInputFormatter?b(k.typeaheadInputFormatter):void 0,t=k.typeaheadAppendToBody?i.$eval(k.typeaheadAppendToBody):!1,u=b(k.ngModel).assign,v=g.parse(k.typeahead),w=i.$new();i.$on("$destroy",function(){w.$destroy()});var x="typeahead-"+w.$id+"-"+Math.floor(1e4*Math.random());j.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":x});var y=angular.element("<div typeahead-popup></div>");y.attr({id:x,matches:"matches",active:"activeIdx",select:"select(activeIdx)",query:"query",position:"position"}),angular.isDefined(k.typeaheadTemplateUrl)&&y.attr("template-url",k.typeaheadTemplateUrl);var z=function(){w.matches=[],w.activeIdx=-1,j.attr("aria-expanded",!1)},A=function(a){return x+"-option-"+a};w.$watch("activeIdx",function(a){0>a?j.removeAttr("aria-activedescendant"):j.attr("aria-activedescendant",A(a))});var B=function(a){var b={$viewValue:a};q(i,!0),c.when(v.source(i,b)).then(function(c){var d=a===l.$viewValue;if(d&&m)if(c.length>0){w.activeIdx=0,w.matches.length=0;for(var e=0;e<c.length;e++)b[v.itemName]=c[e],w.matches.push({id:A(e),label:v.viewMapper(w,b),model:c[e]});w.query=a,w.position=t?f.offset(j):f.position(j),w.position.top=w.position.top+j.prop("offsetHeight"),j.attr("aria-expanded",!0)}else z();d&&q(i,!1)},function(){z(),q(i,!1)})};z(),w.query=void 0;var C,D=function(a){C=d(function(){B(a)},o)},E=function(){C&&d.cancel(C)};l.$parsers.unshift(function(a){return m=!0,a&&a.length>=n?o>0?(E(),D(a)):B(a):(q(i,!1),E(),z()),p?a:a?void l.$setValidity("editable",!1):(l.$setValidity("editable",!0),a)}),l.$formatters.push(function(a){var b,c,d={};return s?(d.$model=a,s(i,d)):(d[v.itemName]=a,b=v.viewMapper(i,d),d[v.itemName]=void 0,c=v.viewMapper(i,d),b!==c?b:a)}),w.select=function(a){var b,c,e={};e[v.itemName]=c=w.matches[a].model,b=v.modelMapper(i,e),u(i,b),l.$setValidity("editable",!0),r(i,{$item:c,$model:b,$label:v.viewMapper(i,e)}),z(),d(function(){j[0].focus()},0,!1)},j.bind("keydown",function(a){0!==w.matches.length&&-1!==h.indexOf(a.which)&&(a.preventDefault(),40===a.which?(w.activeIdx=(w.activeIdx+1)%w.matches.length,w.$digest()):38===a.which?(w.activeIdx=(w.activeIdx?w.activeIdx:w.matches.length)-1,w.$digest()):13===a.which||9===a.which?w.$apply(function(){w.select(w.activeIdx)}):27===a.which&&(a.stopPropagation(),z(),w.$digest()))}),j.bind("blur",function(){m=!1});var F=function(a){j[0]!==a.target&&(z(),w.$digest())};e.bind("click",F),i.$on("$destroy",function(){e.unbind("click",F)});var G=a(y)(w);t?e.find("body").append(G):j.after(G)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(a,b,c){a.templateUrl=c.templateUrl,a.isOpen=function(){return a.matches.length>0},a.isActive=function(b){return a.active==b},a.selectActive=function(b){a.active=b},a.selectMatch=function(b){a.select({activeIdx:b})}}}}).directive("typeaheadMatch",["$http","$templateCache","$compile","$parse",function(a,b,c,d){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(e,f,g){var h=d(g.templateUrl)(e.$parent)||"template/typeahead/typeahead-match.html";a.get(h,{cache:b}).success(function(a){f.replaceWith(c(a.trim())(e))})}}}]).filter("typeaheadHighlight",function(){function a(a){return a.replace(/([.?*+^$[\\]\\\\(){}|-])/g,"\\\\$1")}return function(b,c){return c?(""+b).replace(new RegExp(a(c),"gi"),"<strong>$&</strong>"):b}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(a){a.put("template/accordion/accordion-group.html",\'<div class="panel panel-default">\\n  <div class="panel-heading">\\n    <h4 class="panel-title">\\n      <a class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\\\'text-muted\\\': isDisabled}">{{heading}}</span></a>\\n    </h4>\\n  </div>\\n  <div class="panel-collapse" collapse="!isOpen">\\n\t  <div class="panel-body" ng-transclude></div>\\n  </div>\\n</div>\')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(a){a.put("template/accordion/accordion.html",\'<div class="panel-group" ng-transclude></div>\')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(a){a.put("template/alert/alert.html",\'<div class="alert" ng-class="[\\\'alert-\\\' + (type || \\\'warning\\\'), closeable ? \\\'alert-dismissable\\\' : null]" role="alert">\\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\\n        <span aria-hidden="true">&times;</span>\\n        <span class="sr-only">Close</span>\\n    </button>\\n    <div ng-transclude></div>\\n</div>\\n\')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(a){a.put("template/carousel/carousel.html",\'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\\n    </ol>\\n    <div class="carousel-inner" ng-transclude></div>\\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\\n</div>\\n\')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(a){a.put("template/carousel/slide.html","<div ng-class=\\"{\\n    \'active\': leaving || (active && !entering),\\n    \'prev\': (next || active) && direction==\'prev\',\\n    \'next\': (next || active) && direction==\'next\',\\n    \'right\': direction==\'prev\',\\n    \'left\': direction==\'next\'\\n  }\\" class=\\"item text-center\\" ng-transclude></div>\\n")}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/datepicker.html",\'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\\n</div>\')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/day.html",\'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\\n  <thead>\\n    <tr>\\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\\n    </tr>\\n    <tr>\\n      <th ng-show="showWeeks" class="text-center"></th>\\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr ng-repeat="row in rows track by $index">\\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\\\'btn-info\\\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\\\'text-muted\\\': dt.secondary, \\\'text-info\\\': dt.current}">{{dt.label}}</span></button>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n\')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/month.html",\'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\\n  <thead>\\n    <tr>\\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr ng-repeat="row in rows track by $index">\\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\\\'btn-info\\\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\\\'text-info\\\': dt.current}">{{dt.label}}</span></button>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n\')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/popup.html",\'<ul class="dropdown-menu" ng-style="{display: (isOpen && \\\'block\\\') || \\\'none\\\', top: position.top+\\\'px\\\', left: position.left+\\\'px\\\'}" ng-keydown="keydown($event)">\\n\t<li ng-transclude></li>\\n\t<li ng-if="showButtonBar" style="padding:10px 9px 2px">\\n\t\t<span class="btn-group">\\n\t\t\t<button type="button" class="btn btn-sm btn-info" ng-click="select(\\\'today\\\')">{{ getText(\\\'current\\\') }}</button>\\n\t\t\t<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\\\'clear\\\') }}</button>\\n\t\t</span>\\n\t\t<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\\\'close\\\') }}</button>\\n\t</li>\\n</ul>\\n\')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(a){a.put("template/datepicker/year.html",\'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\\n  <thead>\\n    <tr>\\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr ng-repeat="row in rows track by $index">\\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\\\'btn-info\\\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\\\'text-info\\\': dt.current}">{{dt.label}}</span></button>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n\')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(a){a.put("template/modal/backdrop.html",\'<div class="modal-backdrop fade {{ backdropClass }}"\\n     ng-class="{in: animate}"\\n     ng-style="{\\\'z-index\\\': 1040 + (index && 1 || 0) + index*10}"\\n></div>\\n\')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(a){a.put("template/modal/window.html",\'<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\\\'z-index\\\': 1050 + index*10, display: \\\'block\\\'}" ng-click="close($event)">\\n    <div class="modal-dialog" ng-class="{\\\'modal-sm\\\': size == \\\'sm\\\', \\\'modal-lg\\\': size == \\\'lg\\\'}"><div class="modal-content" modal-transclude></div></div>\\n</div>\')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(a){a.put("template/pagination/pager.html",\'<ul class="pager">\\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\\\'previous\\\')}}</a></li>\\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\\\'next\\\')}}</a></li>\\n</ul>\')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(a){a.put("template/pagination/pagination.html",\'<ul class="pagination">\\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\\\'first\\\')}}</a></li>\\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\\\'previous\\\')}}</a></li>\\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\\\'next\\\')}}</a></li>\\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\\\'last\\\')}}</a></li>\\n</ul>\')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(a){a.put("template/tooltip/tooltip-html-unsafe-popup.html",\'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\\n  <div class="tooltip-arrow"></div>\\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\\n</div>\\n\')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(a){a.put("template/tooltip/tooltip-popup.html",\'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\\n  <div class="tooltip-arrow"></div>\\n  <div class="tooltip-inner" ng-bind="content"></div>\\n</div>\\n\')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(a){a.put("template/popover/popover.html",\'<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\\n  <div class="arrow"></div>\\n\\n  <div class="popover-inner">\\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\\n      <div class="popover-content" ng-bind="content"></div>\\n  </div>\\n</div>\\n\')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/bar.html",\'<div class="progress-bar" ng-class="type && \\\'progress-bar-\\\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \\\'%\\\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/progress.html",\'<div class="progress" ng-transclude></div>\')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(a){a.put("template/progressbar/progressbar.html",\'<div class="progress">\\n  <div class="progress-bar" ng-class="type && \\\'progress-bar-\\\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \\\'%\\\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\\n</div>\')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(a){a.put("template/rating/rating.html",\'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \\\'glyphicon-star\\\') || (r.stateOff || \\\'glyphicon-star-empty\\\')">\\n        <span class="sr-only">({{ $index < value ? \\\'*\\\' : \\\' \\\' }})</span>\\n    </i>\\n</span>\')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tab.html",\'<li ng-class="{active: active, disabled: disabled}">\\n  <a ng-click="select()" tab-heading-transclude>{{heading}}</a>\\n</li>\\n\')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(a){a.put("template/tabs/tabset.html",\'<div>\\n  <ul class="nav nav-{{type || \\\'tabs\\\'}}" ng-class="{\\\'nav-stacked\\\': vertical, \\\'nav-justified\\\': justified}" ng-transclude></ul>\\n  <div class="tab-content">\\n    <div class="tab-pane" \\n         ng-repeat="tab in tabs" \\n         ng-class="{active: tab.active}"\\n         tab-content-transclude="tab">\\n    </div>\\n  </div>\\n</div>\\n\')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(a){a.put("template/timepicker/timepicker.html",\'<table>\\n\t<tbody>\\n\t\t<tr class="text-center">\\n\t\t\t<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\\n\t\t\t<td>&nbsp;</td>\\n\t\t\t<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\\n\t\t\t<td ng-show="showMeridian"></td>\\n\t\t</tr>\\n\t\t<tr>\\n\t\t\t<td style="width:50px;" class="form-group" ng-class="{\\\'has-error\\\': invalidHours}">\\n\t\t\t\t<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\\n\t\t\t</td>\\n\t\t\t<td>:</td>\\n\t\t\t<td style="width:50px;" class="form-group" ng-class="{\\\'has-error\\\': invalidMinutes}">\\n\t\t\t\t<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\\n\t\t\t</td>\\n\t\t\t<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\\n\t\t</tr>\\n\t\t<tr class="text-center">\\n\t\t\t<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\\n\t\t\t<td>&nbsp;</td>\\n\t\t\t<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\\n\t\t\t<td ng-show="showMeridian"></td>\\n\t\t</tr>\\n\t</tbody>\\n</table>\\n\')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(a){a.put("template/typeahead/typeahead-match.html",\'<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>\')\n}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(a){a.put("template/typeahead/typeahead-popup.html",\'<ul class="dropdown-menu" ng-show="isOpen()" ng-style="{top: position.top+\\\'px\\\', left: position.left+\\\'px\\\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\\n    </li>\\n</ul>\\n\')}]);\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/lib/angular-ui-bootstrap/ui.bootstrap.min.js?')},"../../../org/Hibachi/client/lib/angularjs-datetime-picker/angularjs-datetime-picker.js":
/*!*******************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/lib/angularjs-datetime-picker/angularjs-datetime-picker.js ***!
  \*******************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports){eval("(function() {\n    'use strict'; \n\n    angular.module('angularjs-datetime-picker', []);\n\n    var getTimezoneOffset = function(date) {\n        (typeof date == 'string')  && (date = new Date(date));\n        var jan = new Date(date.getFullYear(), 0, 1);\n        var jul = new Date(date.getFullYear(), 6, 1);\n        var stdTimezoneOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n        var isDST = date.getTimezoneOffset() < stdTimezoneOffset;\n        var offset = isDST ? stdTimezoneOffset - 60 : stdTimezoneOffset;\n        var diff = offset >=0 ? '-' : '+';\n        return diff +\n            (\"0\"+ (offset / 60)).slice(-2) + ':' +\n            (\"0\"+ (offset % 60)).slice(-2);\n    };\n\n    var DatetimePicker = function($compile, $document, $controller){\n        var datetimePickerCtrl = $controller('DatetimePickerCtrl'); //directive controller\n        return {\n            open: function(options) {\n                datetimePickerCtrl.openDatetimePicker(options);\n            },\n            close: function() {\n                datetimePickerCtrl.closeDatetimePicker();\n            }\n        };\n    };\n    DatetimePicker.$inject = ['$compile', '$document', '$controller'];\n    angular.module('angularjs-datetime-picker').factory('DatetimePicker', DatetimePicker);\n\n    var DatetimePickerCtrl = function($compile, $document) {\n        var datetimePickerEl;\n        var _this = this;\n        var removeEl = function(el) {\n            el && el.remove();\n            $document[0].body.removeEventListener('click', _this.closeDatetimePicker);\n        };\n\n        this.openDatetimePicker = function(options) {\n            this.closeDatetimePicker();\n            var div = angular.element('<div datetime-picker-popup ng-cloak></div>');\n            options.dateFormat && div.attr('date-format', options.dateFormat);\n            options.ngModel  && div.attr('ng-model', options.ngModel);\n            options.year     && div.attr('year', parseInt(options.year));\n            options.month    && div.attr('month', parseInt(options.month));\n            options.day      && div.attr('day', parseInt(options.day));\n            options.hour     && div.attr('hour', parseInt(options.hour));\n            options.minute   && div.attr('minute', parseInt(options.minute));\n            if (options.dateOnly) {\n                div.attr('date-only', 'true');\n            }\n            if (options.timeOnly) {\n\n                div.attr('time-only', 'true');\n            }\n            if (options.closeOnSelect === 'false') {\n                div.attr('close-on-select', 'false');\n            }\n\n            var triggerEl = options.triggerEl;\n            options.scope = options.scope || angular.element(triggerEl).scope();\n            datetimePickerEl = $compile(div)(options.scope)[0];\n            datetimePickerEl.triggerEl = options.triggerEl;\n\n            $document[0].body.appendChild(datetimePickerEl);\n\n            //show datetimePicker below triggerEl\n            var bcr = triggerEl.getBoundingClientRect();\n\n\n            options.scope.$apply();\n\n            var datePickerElBcr = datetimePickerEl.getBoundingClientRect();\n\n            datetimePickerEl.style.position='absolute';\n            if(bcr.width > datePickerElBcr.width){\n                datetimePickerEl.style.left= (bcr.left + bcr.width - datePickerElBcr.width + window.scrollX) + 'px';\n            } else {\n                datetimePickerEl.style.left= (bcr.left + window.scrollX) + 'px';\n            }\n\n            if (bcr.top < 300 || window.innerHeight - bcr.bottom > 300) {\n                datetimePickerEl.style.top = (bcr.bottom + window.scrollY) + 'px';\n            } else {\n                datetimePickerEl.style.top = (bcr.top - datePickerElBcr.height + window.scrollY) + 'px';\n            }\n\n            $document[0].body.addEventListener('click', this.closeDatetimePicker);\n        };\n\n        this.closeDatetimePicker = function(evt) {\n            var target = evt && evt.target;\n            var popupEl = $document[0].querySelector('div[datetime-picker-popup]');\n            if (evt && target) {\n                if (target.hasAttribute('datetime-picker')) {  // element with datetimePicker behaviour\n                    // do nothing\n                } else if (popupEl && popupEl.contains(target)) { // datetimePicker itself\n                    // do nothing\n                } else {\n                    removeEl(popupEl);\n                }\n            } else {\n                removeEl(popupEl);\n            }\n        }\n    };\n    DatetimePickerCtrl.$inject = ['$compile', '$document'];\n    angular.module('angularjs-datetime-picker').controller('DatetimePickerCtrl', DatetimePickerCtrl);\n\n    var tmpl = [\n        '<div class=\"angularjs-datetime-picker\">' ,\n        '  <div class=\"adp-month\">',\n        '    <button type=\"button\" class=\"adp-prev\" ng-click=\"addMonth(-1)\">&laquo;</button>',\n        '    <span title=\"{{months[mv.month].fullName}}\">{{months[mv.month].shortName}}</span> {{mv.year}}',\n        '    <button type=\"button\" class=\"adp-next\" ng-click=\"addMonth(1)\">&raquo;</button>',\n        '  </div>',\n        '  <div class=\"adp-days\" ng-click=\"setDate($event)\">',\n        '    <div class=\"adp-day-of-week\" ng-repeat=\"dayOfWeek in ::daysOfWeek\" title=\"{{dayOfWeek.fullName}}\">{{::dayOfWeek.firstLetter}}</div>',\n        '    <div class=\"adp-day\" ng-show=\"mv.leadingDays.length < 7\" ng-repeat=\"day in mv.leadingDays\">{{::day}}</div>',\n        '    <div class=\"adp-day selectable\" ng-repeat=\"day in mv.days\" ',\n        '      today=\"{{today}}\" d2=\"{{mv.year + \\'-\\' + (mv.month + 1) + \\'-\\' + day}}\"',\n        '      ng-class=\"{',\n        '        selected: (day == selectedDay),',\n        '        today: (today == (mv.year + \\'-\\' + (mv.month + 1) + \\'-\\' + day)),',\n        '        weekend: (mv.leadingDays.length + day)%7 == 1 || (mv.leadingDays.length + day)%7 == 0',\n        '      }\">',\n        '      {{::day}}',\n        '    </div>',\n        '    <div class=\"adp-day\" ng-show=\"mv.trailingDays.length < 7\" ng-repeat=\"day in mv.trailingDays\">{{::day}}</div>',\n        '  </div>',\n        '  <div class=\"adp-days\" id=\"adp-time\"> ',\n        '    <label class=\"timeLabel\">Time:</label> <span class=\"timeValue\">{{(\"0\"+inputHour).slice(-2)}} : {{(\"0\"+inputMinute).slice(-2)}}</span><br/>',\n        '    <label class=\"hourLabel\">Hour:</label> <input class=\"hourInput\" type=\"range\" min=\"0\" max=\"23\" ng-model=\"inputHour\" ng-change=\"updateNgModel()\" />',\n        '    <label class=\"minutesLabel\">Min:</label> <input class=\"minutesInput\" type=\"range\" min=\"0\" max=\"59\" ng-model=\"inputMinute\"  ng-change=\"updateNgModel()\"/> ',\n        '  </div> ',\n        '</div>'].join(\"\\n\");\n\n    var datetimePickerPopup = function($locale, dateFilter){\n        var days, months, daysOfWeek, firstDayOfWeek;\n\n        var initVars = function() {\n            days =[], months=[]; daysOfWeek=[], firstDayOfWeek=0;\n            for (var i = 1; i <= 31; i++) {\n                days.push(i);\n            }\n\n            for (var i = 0; i < 12; i++) { //jshint ignore:line\n                months.push({\n                    fullName: $locale.DATETIME_FORMATS.MONTH[i],\n                    shortName: $locale.DATETIME_FORMATS.SHORTMONTH[i]\n                });\n            }\n\n            for (var i = 0; i < 7; i++) { //jshint ignore:line\n                var day = $locale.DATETIME_FORMATS.DAY[(i + firstDayOfWeek) % 7];\n\n                daysOfWeek.push({\n                    fullName: day,\n                    firstLetter: day.substr(0, 1)\n                });\n            }\n            firstDayOfWeek = 0;\n        };\n\n        var getMonthView = function(year, month) {\n            if (month>11) {\n                year++;\n            } else if (month < 0) {\n                year--;\n            }\n            month = (month + 12) % 12;\n            var firstDayOfMonth = new Date(year, month, 1),\n                lastDayOfMonth = new Date(year, month + 1, 0),\n                lastDayOfPreviousMonth = new Date(year, month, 0),\n                daysInMonth = lastDayOfMonth.getDate(),\n                daysInLastMonth = lastDayOfPreviousMonth.getDate(),\n                dayOfWeek = firstDayOfMonth.getDay(),\n                leadingDays = (dayOfWeek - firstDayOfWeek + 7) % 7 || 7, // Ensure there are always leading days to give context\n                trailingDays = days.slice(0, 6 * 7 - (leadingDays + daysInMonth));\n            if (trailingDays.length > 7) {\n                trailingDays = trailingDays.slice(0, trailingDays.length-7);\n            }\n\n            return {\n                year: year,\n                month: month,\n                days: days.slice(0, daysInMonth),\n                leadingDays: days.slice(- leadingDays - (31 - daysInLastMonth), daysInLastMonth),\n                trailingDays: trailingDays\n            };\n        };\n\n        var linkFunc = function(scope, element, attrs, ctrl) { //jshint ignore:line\n            initVars(); //initialize days, months, daysOfWeek, and firstDayOfWeek;\n            var dateFormat = attrs.dateFormat || 'short';\n            scope.months = months;\n            scope.daysOfWeek = daysOfWeek;\n            scope.inputHour;\n            scope.inputMinute;\n\n            if (scope.dateOnly === true){\n                element[0].querySelector('#adp-time').style.display = 'none';\n            }\n\n            if (scope.timeOnly === true){\n                element[0].querySelector('.adp-month').style.display = 'none';\n                element[0].querySelector('.adp-days').style.display = 'none';\n            }\n\n            scope.$applyAsync( function() {\n                ctrl.triggerEl = angular.element(element[0].triggerEl);\n                if (attrs.ngModel) { // need to parse date string\n                    var dateStr = ''+ctrl.triggerEl.scope().$eval(attrs.ngModel);\n                    if (dateStr) {\n                        if (!dateStr.match(/[0-9]{2}:/)) {  // if no time is given, add 00:00:00 at the end\n                            dateStr += \" 00:00:00\";\n                        }\n                        dateStr = dateStr.replace(/([0-9]{2}-[0-9]{2})-([0-9]{4})/,'$2-$1');      //mm-dd-yyyy to yyyy-mm-dd\n                        dateStr = dateStr.replace(/([\\/-][0-9]{2,4})\\ ([0-9]{2}\\:[0-9]{2}\\:)/,'$1T$2'); //reformat for FF\n                        dateStr = dateStr.replace(/EDT|EST|CDT|CST|MDT|PDT|PST|UT|GMT/g,''); //remove timezone\n                        dateStr = dateStr.replace(/\\s*\\(\\)\\s*/,'');                          //remove timezone\n                        dateStr = dateStr.replace(/[\\-\\+][0-9]{2}:?[0-9]{2}$/,'');           //remove timezone\n                        dateStr += getTimezoneOffset(dateStr);\n                        var d = new Date(dateStr);\n                        scope.selectedDate = new Date(\n                            d.getFullYear(),\n                            d.getMonth(),\n                            d.getDate(),\n                            d.getHours(),\n                            d.getMinutes(),\n                            d.getSeconds()\n                        );\n                    }\n                }\n\n                if (!scope.selectedDate || isNaN(scope.selectedDate.getTime())) { // no predefined date\n                    var today = new Date();\n                    var year = scope.year || today.getFullYear();\n                    var month = scope.month ? (scope.month-1) : today.getMonth();\n                    var day = scope.day || today.getDate();\n                    var hour = scope.hour || today.getHours();\n                    var minute = scope.minute || today.getMinutes();\n                    scope.selectedDate = new Date(year, month, day, hour, minute, 0);\n                }\n                scope.inputHour   = scope.selectedDate.getHours();\n                scope.inputMinute = scope.selectedDate.getMinutes();\n\n                // Default to current year and month\n                scope.mv = getMonthView(scope.selectedDate.getFullYear(), scope.selectedDate.getMonth());\n                scope.today = dateFilter(new Date(), 'yyyy-M-d');\n                if (scope.mv.year == scope.selectedDate.getFullYear() && scope.mv.month == scope.selectedDate.getMonth()) {\n                    scope.selectedDay = scope.selectedDate.getDate();\n                } else {\n                    scope.selectedDay = null;\n                }\n            });\n\n            scope.addMonth = function (amount) {\n                scope.mv = getMonthView(scope.mv.year, scope.mv.month + amount);\n            };\n\n            scope.setDate = function (evt) {\n                var target = angular.element(evt.target)[0];\n                if (target.className.indexOf('selectable') !== -1) {\n                    scope.updateNgModel(parseInt(target.innerHTML));\n                    if (scope.closeOnSelect !== false) {\n                        ctrl.closeDatetimePicker();\n                    }\n                }\n            };\n\n            scope.updateNgModel = function(day) {\n                day = day ? day : scope.selectedDate.getDate();\n                scope.selectedDate = new Date(\n                    scope.mv.year, scope.mv.month, day, scope.inputHour, scope.inputMinute, 0\n                );\n                scope.selectedDay = scope.selectedDate.getDate();\n                if (attrs.ngModel) {\n                    var elScope = ctrl.triggerEl.scope(), dateValue;\n                    if (elScope.$eval(attrs.ngModel) && elScope.$eval(attrs.ngModel).constructor.name === 'Date') {\n                        dateValue = new Date(dateFilter(scope.selectedDate, dateFormat));\n                    } else {\n                        dateValue = dateFilter(scope.selectedDate, dateFormat);\n                    }\n                    elScope.$eval(attrs.ngModel + '= date', {date: dateValue});\n                }\n            };\n\n            scope.$on('$destroy', ctrl.closeDatetimePicker);\n        };\n\n        return {\n            restrict: 'A',\n            template: tmpl,\n            controller: 'DatetimePickerCtrl',\n            replace: true,\n            scope: {\n                year: '=',\n                month: '=',\n                day: '=',\n                hour: '=',\n                minute: '=',\n                dateOnly: '=',\n                timeOnly: '=',\n                closeOnSelect: '='\n            },\n            link: linkFunc\n        };\n    };\n    datetimePickerPopup.$inject = ['$locale', 'dateFilter'];\n    angular.module('angularjs-datetime-picker').directive('datetimePickerPopup', datetimePickerPopup);\n\n    var datetimePicker  = function($parse, DatetimePicker) {\n        return {\n            // An ngModel is required to get the controller argument\n            require: 'ngModel',\n            link: function(scope, element, attrs, ctrl) {\n                // Attach validation watcher\n                scope.$watch(attrs.ngModel, function(value) {\n                    if( !value || value == '' ){\n                        return;\n                    }\n                    // The value has already been cleaned by the above code\n                    var date = new Date(value);\n                    ctrl.$setValidity('date', !date? false : true);\n                    var now = new Date();\n                    if( attrs.hasOwnProperty('futureOnly') ){\n                        ctrl.$setValidity('future-only', date < now? false : true);\n                    }\n                });\n\n                element[0].addEventListener('click', function() {\n                    DatetimePicker.open({\n                        triggerEl: element[0],\n                        dateFormat: attrs.dateFormat,\n                        ngModel: attrs.ngModel,\n                        year: attrs.year,\n                        month: attrs.month,\n                        day: attrs.day,\n                        hour: attrs.hour,\n                        minute: attrs.minute,\n                        dateOnly: attrs.dateOnly,\n                        timeOnly: attrs.timeOnly,\n                        futureOnly: attrs.futureOnly,\n                        closeOnSelect: attrs.closeOnSelect\n                    });\n                });\n            }\n        };\n    };\n    datetimePicker.$inject=['$parse', 'DatetimePicker'];\n    angular.module('angularjs-datetime-picker').directive('datetimePicker', datetimePicker);\n\n})();\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/lib/angularjs-datetime-picker/angularjs-datetime-picker.js?")},"../../../org/Hibachi/client/lib/metismenu/metismenu.js":
/*!***********************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/lib/metismenu/metismenu.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports){eval(';(function($, window, document, undefined) {\n\n    var pluginName = "metisMenu",\n        defaults = {\n            toggle: true,\n            doubleTapToGo: false\n        };\n\n    function Plugin(element, options) {\n        this.element = $(element);\n        this.settings = $.extend({}, defaults, options);\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    Plugin.prototype = {\n        init: function() {\n\n            var $this = this.element,\n                $toggle = this.settings.toggle,\n                obj = this;\n\n            if (this.isIE() <= 9) {\n                $this.find("li.active").has("ul").children("ul").collapse("show");\n                $this.find("li").not(".active").has("ul").children("ul").collapse("hide");\n            } else {\n                $this.find("li.active").has("ul").children("ul").addClass("collapse in");\n                $this.find("li").not(".active").has("ul").children("ul").addClass("collapse");\n            }\n\n            //add the "doubleTapToGo" class to active items if needed\n            if (obj.settings.doubleTapToGo) {\n                $this.find("li.active").has("ul").children("a").addClass("doubleTapToGo");\n            }\n\n            $this.find("li").has("ul").children("a").on("click" + "." + pluginName, function(e) {\n                e.preventDefault();\n\n                //Do we need to enable the double tap\n                if (obj.settings.doubleTapToGo) {\n\n                    //if we hit a second time on the link and the href is valid, navigate to that url\n                    if (obj.doubleTapToGo($(this)) && $(this).attr("href") !== "#" && $(this).attr("href") !== "") {\n                        e.stopPropagation();\n                        document.location = $(this).attr("href");\n                        return;\n                    }\n                }\n\n                $(this).parent("li").toggleClass("active").children("ul").collapse("toggle");\n\n                if ($toggle) {\n                    $(this).parent("li").siblings().removeClass("active").children("ul.in").collapse("hide");\n                    $(this).find(\'.fa-angle-left\').toggleClass(\'s-rotate\');\n                }\n\n            });\n        },\n\n        isIE: function() { //https://gist.github.com/padolsey/527683\n            var undef,\n                v = 3,\n                div = document.createElement("div"),\n                all = div.getElementsByTagName("i");\n\n            while (\n                div.innerHTML = "\x3c!--[if gt IE " + (++v) + "]><i></i><![endif]--\x3e",\n                all[0]\n            ) {\n                return v > 4 ? v : undef;\n            }\n        },\n\n        //Enable the link on the second click.\n        doubleTapToGo: function(elem) {\n            var $this = this.element;\n\n            //if the class "doubleTapToGo" exists, remove it and return\n            if (elem.hasClass("doubleTapToGo")) {\n                elem.removeClass("doubleTapToGo");\n                return true;\n            }\n\n            //does not exists, add a new class and return false\n            if (elem.parent().children("ul").length) {\n                 //first remove all other class\n                $this.find(".doubleTapToGo").removeClass("doubleTapToGo");\n                //add the class on the current element\n                elem.addClass("doubleTapToGo");\n                return false;\n            }\n        },\n\n        remove: function() {\n            this.element.off("." + pluginName);\n            this.element.removeData(pluginName);\n        }\n\n    };\n\n    $.fn[pluginName] = function(options) {\n        this.each(function () {\n            var el = $(this);\n            if (el.data(pluginName)) {\n                el.data(pluginName).remove();\n            }\n            el.data(pluginName, new Plugin(this, options));\n        });\n        return this;\n    };\n\n})(jQuery, window, document);\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/lib/metismenu/metismenu.js?')},"../../../org/Hibachi/client/src/alert/alert.module.ts":
/*!**********************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/alert/alert.module.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//controllers\nvar alertcontroller_1 = __webpack_require__(/*! ./controllers/alertcontroller */ \"../../../org/Hibachi/client/src/alert/controllers/alertcontroller.ts\");\n//services\nvar alertservice_1 = __webpack_require__(/*! ./service/alertservice */ \"../../../org/Hibachi/client/src/alert/service/alertservice.ts\");\nvar alertmodule = angular.module('hibachi.alert', [])\n    //controllers\n    .controller('alertController', alertcontroller_1.AlertController)\n    //services\n    .service('alertService', alertservice_1.AlertService);\nexports.alertmodule = alertmodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/alert/alert.module.ts?")},"../../../org/Hibachi/client/src/alert/controllers/alertcontroller.ts":
/*!*************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/alert/controllers/alertcontroller.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar AlertController = /** @class */ (function () {\n    //@ngInject\n    function AlertController($scope, alertService) {\n        $scope.$id = \"alertController\";\n        $scope.alerts = alertService.getAlerts();\n    }\n    return AlertController;\n}());\nexports.AlertController = AlertController;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/alert/controllers/alertcontroller.ts?")},"../../../org/Hibachi/client/src/alert/model/alert.ts":
/*!*********************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/alert/model/alert.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//model\nvar Alert = /** @class */ (function () {\n    function Alert(msg, type, fade, dismissable) {\n        this.fade = false;\n        this.dismissable = false;\n        this.msg = msg;\n        this.type = type;\n        this.fade = fade;\n        this.dismissable = dismissable;\n    }\n    return Alert;\n}());\nexports.Alert = Alert;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/alert/model/alert.ts?")},"../../../org/Hibachi/client/src/alert/service/alertservice.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/alert/service/alertservice.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//import Alert = require('../model/alert');\nvar alert_1 = __webpack_require__(/*! ../model/alert */ \"../../../org/Hibachi/client/src/alert/model/alert.ts\");\nvar AlertService = /** @class */ (function () {\n    function AlertService($timeout, alerts) {\n        var _this = this;\n        this.$timeout = $timeout;\n        this.alerts = alerts;\n        this.newAlert = function () {\n            return new alert_1.Alert();\n        };\n        this.get = function () {\n            return _this.alerts || [];\n        };\n        this.addAlert = function (alert) {\n            if (alert.msg) {\n                _this.alerts.push(alert);\n                _this.$timeout(function () {\n                    if (!alert.dismissable) {\n                        _this.removeAlert(alert);\n                    }\n                }, 3500);\n            }\n        };\n        this.addAlerts = function (alerts) {\n            angular.forEach(alerts, function (alert) {\n                _this.addAlert(alert);\n            });\n        };\n        this.removeAlert = function (alert) {\n            var index = _this.alerts.indexOf(alert, 0);\n            if (index != undefined) {\n                _this.alerts.splice(index, 1);\n            }\n        };\n        this.getAlerts = function () {\n            return _this.alerts;\n        };\n        this.formatMessagesToAlerts = function (messages) {\n            var alerts = [];\n            if (messages && messages.length) {\n                for (var message in messages) {\n                    var alert = new alert_1.Alert(messages[message].message, messages[message].messageType);\n                    alerts.push(alert);\n                    if (alert.type === 'success' || alert.type === 'error') {\n                        _this.$timeout(function () {\n                            alert.fade = true;\n                        }, 3500);\n                        alert.dismissable = false;\n                    }\n                    else {\n                        alert.fade = false;\n                        alert.dismissable = true;\n                    }\n                }\n            }\n            return alerts;\n        };\n        this.removeOldestAlert = function () {\n            _this.alerts.splice(0, 1);\n        };\n        this.alerts = [];\n    }\n    AlertService.$inject = [\n        '$timeout'\n    ];\n    return AlertService;\n}());\nexports.AlertService = AlertService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/alert/service/alertservice.ts?")},"../../../org/Hibachi/client/src/basebootstrap.ts":
/*!*****************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/basebootstrap.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../typings/hibachiTypescript.d.ts' />\n/// <reference path='../typings/tsd.d.ts' />\n__webpack_require__(/*! angular */ \"../../../node_modules/angular/index.js\");\n__webpack_require__(/*! ../lib//angular-lazy-bootstrap/bootstrap.js */ \"../../../org/Hibachi/client/lib/angular-lazy-bootstrap/bootstrap.js\");\n__webpack_require__(/*! ../lib/angular-ui-bootstrap/ui.bootstrap.min.js */ \"../../../org/Hibachi/client/lib/angular-ui-bootstrap/ui.bootstrap.min.js\");\n__webpack_require__(/*! angular-resource */ \"../../../node_modules/angular-resource/index.js\");\n__webpack_require__(/*! angular-cookies */ \"../../../node_modules/angular-cookies/index.js\");\n__webpack_require__(/*! angular-route */ \"../../../node_modules/angular-route/index.js\");\n__webpack_require__(/*! angular-animate */ \"../../../node_modules/angular-animate/index.js\");\n__webpack_require__(/*! angular-sanitize */ \"../../../node_modules/angular-sanitize/index.js\");\n__webpack_require__(/*! ../lib/metismenu/metismenu.js */ \"../../../org/Hibachi/client/lib/metismenu/metismenu.js\");\n__webpack_require__(/*! ../lib/angularjs-datetime-picker/angularjs-datetime-picker.js */ \"../../../org/Hibachi/client/lib/angularjs-datetime-picker/angularjs-datetime-picker.js\");\n__webpack_require__(/*! ../..//HibachiAssets/js/jquery-typewatch-2.0.js */ \"../../../org/Hibachi/HibachiAssets/js/jquery-typewatch-2.0.js\");\n__webpack_require__(/*! ../..//HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js */ \"../../../org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js\");\nvar core_module_1 = __webpack_require__(/*! ./core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\nvar md5 = __webpack_require__(/*! md5 */ \"../../../node_modules/md5/md5.js\");\n//generic bootstrapper\nvar BaseBootStrapper = /** @class */ (function () {\n    function BaseBootStrapper(myApplication) {\n        var _this = this;\n        this._resourceBundle = {};\n        this.isPrivateMode = function () {\n            return new Promise(function (resolve) {\n                var on = function () { return resolve(true); }; // is in private mode\n                var off = function () { return resolve(false); }; // not private mode\n                var testLocalStorage = function () {\n                    try {\n                        if (localStorage.length)\n                            off();\n                        else {\n                            localStorage.setItem('x', '1');\n                            localStorage.removeItem('x');\n                            off();\n                        }\n                    }\n                    catch (e) {\n                        // Safari only enables cookie in private mode\n                        // if cookie is disabled then all client side storage is disabled\n                        // if all client side storage is disabled, then there is no point\n                        // in using private mode\n                        navigator.cookieEnabled ? on() : off();\n                    }\n                };\n                // Chrome & Opera\n                if (window.webkitRequestFileSystem) {\n                    return void window.webkitRequestFileSystem(0, 0, off, on);\n                }\n                // Firefox\n                if ('MozAppearance' in document.documentElement.style) {\n                    var db = indexedDB.open('test');\n                    db.onerror = on;\n                    db.onsuccess = off;\n                    return void 0;\n                }\n                // Safari\n                if (/constructor/i.test(window.HTMLElement)) {\n                    return testLocalStorage();\n                }\n                // IE10+ & Edge\n                if (!window.indexedDB && (window.PointerEvent || window.MSPointerEvent)) {\n                    return on();\n                }\n                // others\n                return off();\n            });\n        };\n        this.getInstantiationKey = function (baseURL) {\n            return _this.$q(function (resolve, reject) {\n                if (hibachiConfig.instantiationKey) {\n                    resolve(hibachiConfig.instantiationKey);\n                }\n                else {\n                    _this.$http.get(baseURL + '?' + hibachiConfig.action + '=api:main.getInstantiationKey').then(function (resp) { return resolve(resp.data.data.instantiationKey); });\n                }\n            });\n        };\n        this.getData = function (invalidCache) {\n            var promises = {};\n            for (var i in invalidCache) {\n                var invalidCacheName = invalidCache[i];\n                var functionName = invalidCacheName.charAt(0).toUpperCase() + invalidCacheName.slice(1);\n                promises[invalidCacheName] = _this['get' + functionName + 'Data']();\n            }\n            return _this.$q.all(promises);\n        };\n        this.getAttributeCacheKeyData = function () {\n            var urlString = \"\";\n            if (!hibachiConfig) {\n                hibachiConfig = {};\n            }\n            if (!hibachiConfig.baseURL) {\n                hibachiConfig.baseURL = '';\n            }\n            urlString += hibachiConfig.baseURL;\n            if (urlString.length && urlString.slice(-1) !== '/') {\n                urlString += '/';\n            }\n            return _this.$http.get(urlString + '?' + hibachiConfig.action + '=api:main.getAttributeModel')\n                .then(function (resp) {\n                core_module_1.coremodule.constant('attributeMetaData', resp.data.data);\n                //for safari private mode which has no localStorage\n                try {\n                    localStorage.setItem('attributeMetaData', JSON.stringify(resp.data.data));\n                    localStorage.setItem('attributeChecksum', md5(JSON.stringify(resp.data.data)));\n                    // NOTE: at this point attributeChecksum == hibachiConfig.attributeCacheKey\n                    // Keeps localStorage appConfig.attributeCacheKey consistent after attributeChecksum updates (even though it is not referenced apparently)\n                    _this.appConfig.attributeCacheKey = localStorage.getItem('attributeChecksum').toUpperCase();\n                    localStorage.setItem('appConfig', JSON.stringify(_this.appConfig));\n                }\n                catch (e) { }\n                _this.attributeMetaData = resp.data.data;\n            });\n        };\n        this.getInstantiationKeyData = function () {\n            if (!_this.instantiationKey) {\n                var d = new Date();\n                var n = d.getTime();\n                _this.instantiationKey = n.toString();\n            }\n            var urlString = \"\";\n            if (!hibachiConfig) {\n                hibachiConfig = {};\n            }\n            if (!hibachiConfig.baseURL) {\n                hibachiConfig.baseURL = '';\n            }\n            urlString += hibachiConfig.baseURL;\n            if (hibachiConfig.baseURL.length && hibachiConfig.baseURL.charAt(hibachiConfig.baseURL.length - 1) != '/') {\n                urlString += '/';\n            }\n            return _this.$http.get(urlString + '/custom/system/config.json?instantiationKey=' + _this.instantiationKey)\n                .then(function (resp) {\n                var appConfig = resp.data.data;\n                if (hibachiConfig.baseURL.length) {\n                    appConfig.baseURL = urlString;\n                }\n                core_module_1.coremodule.constant('appConfig', appConfig);\n                try {\n                    if (!_this.isPrivate) {\n                        localStorage.setItem('appConfig', JSON.stringify(resp.data.data));\n                    }\n                }\n                catch (e) { }\n                _this.appConfig = appConfig;\n                return _this.getResourceBundles();\n            });\n        };\n        this.getResourceBundle = function (locale) {\n            var deferred = _this.$q.defer();\n            var locale = locale || _this.appConfig.rbLocale;\n            if (_this._resourceBundle[locale]) {\n                return _this._resourceBundle[locale];\n            }\n            var urlString = _this.appConfig.baseURL + '/custom/system/resourceBundles/' + locale + '.json?instantiationKey=' + _this.appConfig.instantiationKey;\n            _this.$http({\n                url: urlString,\n                method: \"GET\"\n            }).success(function (response, status, headersGetter) {\n                _this._resourceBundle[locale] = response;\n                deferred.resolve(response);\n            }).error(function (response, status) {\n                if (status === 404) {\n                    _this._resourceBundle[locale] = {};\n                    deferred.resolve(response);\n                }\n                else {\n                    deferred.reject(response);\n                }\n            });\n            return deferred.promise;\n        };\n        this.getResourceBundles = function () {\n            var localeListArray = _this.appConfig.rbLocale.split('_');\n            var rbPromise;\n            var rbPromises = [];\n            rbPromise = _this.getResourceBundle(_this.appConfig.rbLocale);\n            rbPromises.push(rbPromise);\n            if (localeListArray.length === 2) {\n                rbPromise = _this.getResourceBundle(localeListArray[0]);\n                rbPromises.push(rbPromise);\n            }\n            if (localeListArray[0] !== 'en') {\n                //this.getResourceBundle('en_us');\n                _this.getResourceBundle('en');\n            }\n            return _this.$q.all(rbPromises).then(function (data) {\n                core_module_1.coremodule.constant('resourceBundles', _this._resourceBundle);\n            }, function (error) {\n                //can enter here due to 404\n                core_module_1.coremodule.constant('resourceBundles', _this._resourceBundle);\n            });\n        };\n        this.myApplication = myApplication;\n        return angular.lazy(this.myApplication).resolve(['$http', '$q', function ($http, $q) {\n                _this.$http = $http;\n                _this.$q = $q;\n                var baseURL = hibachiConfig.baseURL;\n                if (!baseURL) {\n                    baseURL = '';\n                }\n                if (baseURL.length && baseURL.slice(-1) !== '/') {\n                    baseURL += '/';\n                }\n                return _this.getInstantiationKey(baseURL).then(function (instantiationKey) {\n                    _this.instantiationKey = instantiationKey;\n                    var invalidCache = [];\n                    return _this.isPrivateMode().then(function (isPrivate) {\n                        if (!isPrivate) {\n                            _this.isPrivate = true;\n                        }\n                        // Inspecting attribute model metadata in local storage (retreived from slatAction=api:main.getAttributeModel)\n                        try {\n                            var hashedData = localStorage.getItem('attributeChecksum');\n                            // attributeMetaData is valid and can be restored from local storage cache\n                            if (hashedData !== null && hibachiConfig.attributeCacheKey === hashedData.toUpperCase()) {\n                                core_module_1.coremodule.constant('attributeMetaData', JSON.parse(localStorage.getItem('attributeMetaData')));\n                                // attributeMetaData is invalid and needs to be refreshed\n                            }\n                            else {\n                                invalidCache.push('attributeCacheKey');\n                            }\n                            // attributeMetaData is invalid and needs to be refreshed\n                        }\n                        catch (e) {\n                            invalidCache.push('attributeCacheKey');\n                        }\n                        // Inspecting app config/model metadata in local storage (retreived from /custom/system/config.json)\n                        try {\n                            if (!isPrivate) {\n                                _this.appConfig = JSON.parse(localStorage.getItem('appConfig'));\n                            }\n                            else {\n                                _this.appConfig = {\n                                    instantiationKey: undefined\n                                };\n                            }\n                            // appConfig instantiation key is valid (but attribute model may need to be refreshed)\n                            if (hibachiConfig.instantiationKey\n                                && _this.appConfig.instantiationKey\n                                && hibachiConfig.instantiationKey === _this.appConfig.instantiationKey) {\n                                // NOTE: Return a promise so bootstrapping process will wait to continue executing until after the last step of loading the resourceBundles\n                                core_module_1.coremodule.constant('appConfig', _this.appConfig);\n                                // If invalidCache, that indicates a need to refresh attribute metadata prior to retrieving resourceBundles\n                                if (invalidCache.length) {\n                                    var deferred_1 = $q.defer();\n                                    _this.getData(invalidCache).then(function (resp) {\n                                        _this.getResourceBundles().then(function (resp) {\n                                            deferred_1.resolve(resp);\n                                        });\n                                    });\n                                    // Ends bootstrapping the process\n                                    return deferred_1.promise;\n                                }\n                                // All appConfig and attribute model valid, nothing to refresh prior, ends the bootstrapping process\n                                return _this.getResourceBundles();\n                                // Entire app config needs to be refreshed\n                            }\n                            else {\n                                invalidCache.push('instantiationKey');\n                            }\n                            // Entire app config needs to be refreshed\n                        }\n                        catch (e) {\n                            invalidCache.push('instantiationKey');\n                        }\n                        // NOTE: If invalidCache array does not contain 'instantiationKey' this will not work because getResourceBundles will not be in the promise chain when the bootstrapping process ends\n                        return _this.getData(invalidCache);\n                    });\n                });\n            }]);\n    }\n    return BaseBootStrapper;\n}());\nexports.BaseBootStrapper = BaseBootStrapper;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/basebootstrap.ts?")},"../../../org/Hibachi/client/src/card/card.module.ts":
/*!********************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/card.module.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path="../../typings/tsd.d.ts" />\n/// <reference path="../../typings/hibachiTypescript.d.ts" />\nObject.defineProperty(exports, "__esModule", { value: true });\n//modules\nvar core_module_1 = __webpack_require__(/*! ../core/core.module */ "../../../org/Hibachi/client/src/core/core.module.ts");\n//services\n//components\nvar swcardlayout_1 = __webpack_require__(/*! ./components/swcardlayout */ "../../../org/Hibachi/client/src/card/components/swcardlayout.ts");\nvar swcardview_1 = __webpack_require__(/*! ./components/swcardview */ "../../../org/Hibachi/client/src/card/components/swcardview.ts");\nvar swcardheader_1 = __webpack_require__(/*! ./components/swcardheader */ "../../../org/Hibachi/client/src/card/components/swcardheader.ts");\nvar swcardbody_1 = __webpack_require__(/*! ./components/swcardbody */ "../../../org/Hibachi/client/src/card/components/swcardbody.ts");\nvar swcardicon_1 = __webpack_require__(/*! ./components/swcardicon */ "../../../org/Hibachi/client/src/card/components/swcardicon.ts");\nvar swcardprogressbar_1 = __webpack_require__(/*! ./components/swcardprogressbar */ "../../../org/Hibachi/client/src/card/components/swcardprogressbar.ts");\nvar swcardlistitem_1 = __webpack_require__(/*! ./components/swcardlistitem */ "../../../org/Hibachi/client/src/card/components/swcardlistitem.ts");\nvar cardmodule = angular.module(\'hibachi.card\', [core_module_1.coremodule.name])\n    .config([function () {\n    }]).run([function () {\n    }])\n    //constants\n    .constant(\'cardPartialsPath\', \'card/components/\')\n    //components\n    .directive(\'swCardLayout\', swcardlayout_1.SWCardLayout.Factory())\n    .directive(\'swCardView\', swcardview_1.SWCardView.Factory())\n    .directive(\'swCardHeader\', swcardheader_1.SWCardHeader.Factory())\n    .directive(\'swCardBody\', swcardbody_1.SWCardBody.Factory())\n    .directive(\'swCardIcon\', swcardicon_1.SWCardIcon.Factory())\n    .directive(\'swCardProgressBar\', swcardprogressbar_1.SWCardProgressBar.Factory())\n    .directive(\'swCardListItem\', swcardlistitem_1.SWCardListItem.Factory());\nexports.cardmodule = cardmodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/card.module.ts?')},"../../../org/Hibachi/client/src/card/components/swcardbody.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardbody.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWCardBodyController = /** @class */ (function () {\n    //@ngInject\n    function SWCardBodyController($log) {\n        this.$log = $log;\n        this.$onInit = function () {\n        };\n    }\n    return SWCardBodyController;\n}());\nexports.SWCardBodyController = SWCardBodyController;\nvar SWCardBody = /** @class */ (function () {\n    //@ngInject\n    function SWCardBody(cardPartialsPath, hibachiPathBuilder) {\n        this.controller = SWCardBodyController;\n        this.controllerAs = 'SwCardBodyController';\n        this.scope = {};\n        this.bindToController = {};\n        this.transclude = true;\n        this.require = \"^SWCardView\";\n        /**\n         * This is a wrapper class for the card components that allow you to define the columns.\n         */\n        this.templateUrl = \"\";\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardbody.html');\n    }\n    /**\n     * Handles injecting the partials path into this class\n     */\n    SWCardBody.Factory = function () {\n        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardBody(cardPartialsPath, hibachiPathBuilder); };\n        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];\n        return component;\n    };\n    return SWCardBody;\n}());\nexports.SWCardBody = SWCardBody;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardbody.ts?")},"../../../org/Hibachi/client/src/card/components/swcardheader.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardheader.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWCardHeaderController = /** @class */ (function () {\n    //@ngInject\n    function SWCardHeaderController($log) {\n        this.$log = $log;\n        this.$onInit = function () {\n        };\n    }\n    return SWCardHeaderController;\n}());\nexports.SWCardHeaderController = SWCardHeaderController;\nvar SWCardHeader = /** @class */ (function () {\n    //@ngInject\n    function SWCardHeader(cardPartialsPath, hibachiPathBuilder) {\n        this.controller = SWCardHeaderController;\n        this.controllerAs = 'SwCardHeaderController';\n        this.scope = {};\n        this.bindToController = {\n            addBorder: '@?'\n        };\n        this.transclude = true;\n        this.require = \"^SWCardView\";\n        /**\n         * This is a wrapper class for the card components that allow you to define the columns.\n         */\n        this.templateUrl = \"\";\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardheader.html');\n    }\n    /**\n     * Handles injecting the partials path into this class\n     */\n    SWCardHeader.Factory = function () {\n        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardHeader(cardPartialsPath, hibachiPathBuilder); };\n        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];\n        return component;\n    };\n    return SWCardHeader;\n}());\nexports.SWCardHeader = SWCardHeader;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardheader.ts?")},"../../../org/Hibachi/client/src/card/components/swcardicon.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardicon.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWCardIconController = /** @class */ (function () {\n    //@ngInject\n    function SWCardIconController($log) {\n        this.$log = $log;\n        this.iconMultiplier = \"1x\";\n        this.$onInit = function () {\n        };\n    }\n    return SWCardIconController;\n}());\nexports.SWCardIconController = SWCardIconController;\nvar SWCardIcon = /** @class */ (function () {\n    //@ngInject\n    function SWCardIcon(cardPartialsPath, hibachiPathBuilder) {\n        this.controller = SWCardIconController;\n        this.controllerAs = 'SwCardIconController';\n        this.scope = {};\n        this.bindToController = {\n            iconName: \"@?\",\n            iconMultiplier: \"@?\"\n        };\n        this.transclude = true;\n        this.require = \"^SWCardView\";\n        /**\n         * This is a wrapper class for the card components that allow you to define the columns.\n         */\n        this.templateUrl = \"\";\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardicon.html');\n    }\n    /**\n     * Handles injecting the partials path into this class\n     */\n    SWCardIcon.Factory = function () {\n        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardIcon(cardPartialsPath, hibachiPathBuilder); };\n        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];\n        return component;\n    };\n    return SWCardIcon;\n}());\nexports.SWCardIcon = SWCardIcon;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardicon.ts?")},"../../../org/Hibachi/client/src/card/components/swcardlayout.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardlayout.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWCardLayoutController = /** @class */ (function () {\n    //@ngInject\n    function SWCardLayoutController($log) {\n        this.$log = $log;\n        this.$onInit = function () {\n        };\n        console.log(\"This card class\", this.cardClass);\n    }\n    return SWCardLayoutController;\n}());\nexports.SWCardLayoutController = SWCardLayoutController;\nvar SWCardLayout = /** @class */ (function () {\n    //@ngInject\n    function SWCardLayout(cardPartialsPath, hibachiPathBuilder) {\n        this.controller = SWCardLayoutController;\n        this.controllerAs = 'SwCardLayoutController';\n        this.scope = {};\n        this.bindToController = {\n            cardClass: \"@?\"\n        };\n        this.transclude = {\n            cardView: '?swCardView',\n        };\n        /**\n         * This is a wrapper class for the card components that allow you to define the columns.\n         */\n        this.templateUrl = \"\";\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardlayout.html');\n    }\n    /**\n     * Handles injecting the partials path into this class\n     */\n    SWCardLayout.Factory = function () {\n        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardLayout(cardPartialsPath, hibachiPathBuilder); };\n        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];\n        return component;\n    };\n    return SWCardLayout;\n}());\nexports.SWCardLayout = SWCardLayout;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardlayout.ts?")},"../../../org/Hibachi/client/src/card/components/swcardlistitem.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardlistitem.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWCardListItemController = /** @class */ (function () {\n    //@ngInject\n    function SWCardListItemController($log) {\n        this.$log = $log;\n        this.strong = 'false';\n        this.style = 'padding-top:5px;padding-bottom:5px';\n        this.$onInit = function () { };\n    }\n    return SWCardListItemController;\n}());\nexports.SWCardListItemController = SWCardListItemController;\nvar SWCardListItem = /** @class */ (function () {\n    //@ngInject\n    function SWCardListItem(cardPartialsPath, hibachiPathBuilder) {\n        this.controller = SWCardListItemController;\n        this.controllerAs = 'SwCardListItemController';\n        this.scope = {};\n        this.bindToController = {\n            title: \"@?\",\n            value: \"@?\",\n            strong: \"@?\",\n            style: \"@?\"\n        };\n        this.transclude = true;\n        this.require = \"^SWCardView\";\n        /**\n         * This is a wrapper class for the card components that allow you to define the columns.\n         */\n        this.templateUrl = \"\";\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardlistitem.html');\n    }\n    /**\n     * Handles injecting the partials path into this class\n     */\n    SWCardListItem.Factory = function () {\n        console.log(\"Getting new list item\");\n        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardListItem(cardPartialsPath, hibachiPathBuilder); };\n        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];\n        return component;\n    };\n    return SWCardListItem;\n}());\nexports.SWCardListItem = SWCardListItem;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardlistitem.ts?")},"../../../org/Hibachi/client/src/card/components/swcardprogressbar.ts":
/*!*************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardprogressbar.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWCardProgressBarController = /** @class */ (function () {\n    //@ngInject\n    function SWCardProgressBarController($log) {\n        this.$log = $log;\n        this.valueMin = 0;\n        this.valueMax = 100;\n        this.valueNow = 0;\n        this.$onInit = function () { };\n    }\n    return SWCardProgressBarController;\n}());\nexports.SWCardProgressBarController = SWCardProgressBarController;\nvar SWCardProgressBar = /** @class */ (function () {\n    //@ngInject\n    function SWCardProgressBar(cardPartialsPath, hibachiPathBuilder) {\n        this.controller = SWCardProgressBarController;\n        this.scope = {};\n        this.controllerAs = 'SwCardProgressBarController';\n        this.bindToController = {\n            valueMin: \"@?\",\n            valueMax: \"@?\",\n            valueNow: \"@?\"\n        };\n        this.transclude = true;\n        this.require = \"^SWCardView\";\n        /**\n         * This is a wrapper class for the card components that allow you to define the columns.\n         */\n        this.templateUrl = \"\";\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardprogressbar.html');\n    }\n    /**\n     * Handles injecting the partials path into this class\n     */\n    SWCardProgressBar.Factory = function () {\n        var component = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardProgressBar(cardPartialsPath, hibachiPathBuilder); };\n        component.$inject = ['cardPartialsPath', 'hibachiPathBuilder'];\n        return component;\n    };\n    return SWCardProgressBar;\n}());\nexports.SWCardProgressBar = SWCardProgressBar;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardprogressbar.ts?")},"../../../org/Hibachi/client/src/card/components/swcardview.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardview.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWCardViewController = /** @class */ (function () {\n    //@ngInject\n    function SWCardViewController($log) {\n        this.$log = $log;\n        this.cardSize = 'md';\n    }\n    return SWCardViewController;\n}());\nexports.SWCardViewController = SWCardViewController;\nvar SWCardView = /** @class */ (function () {\n    //@ngInject\n    function SWCardView(cardPartialsPath, hibachiPathBuilder) {\n        this.controller = SWCardViewController;\n        this.scope = {};\n        this.controllerAs = 'SwCardViewController';\n        this.bindToController = {\n            cardTitle: \"@?\",\n            cardBody: \"@?\",\n            cardSize: \"@?\" //sm, md, lg\n        };\n        this.transclude = {\n            cardIcon: '?swCardIcon',\n            cardHeader: '?swCardHeader',\n            cardBody: '?swCardBody',\n            listItem: '?swCardListItem',\n            progressBar: '?swCardProgressBar'\n        };\n        this.templateUrl = \"\";\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(cardPartialsPath + '/cardview.html');\n    }\n    /**\n     * Handles injecting the partials path into this class\n     */\n    SWCardView.Factory = function () {\n        var directive = function (cardPartialsPath, hibachiPathBuilder) { return new SWCardView(cardPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\"cardPartialsPath\", 'hibachiPathBuilder'];\n        return directive;\n    };\n    return SWCardView;\n}());\nexports.SWCardView = SWCardView;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/card/components/swcardview.ts?")},"../../../org/Hibachi/client/src/collection/collection.module.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/collection.module.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//modules\nvar core_module_1 = __webpack_require__(/*! ../core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//services\nvar collectionconfigservice_1 = __webpack_require__(/*! ./services/collectionconfigservice */ \"../../../org/Hibachi/client/src/collection/services/collectionconfigservice.ts\");\nvar collectionservice_1 = __webpack_require__(/*! ./services/collectionservice */ \"../../../org/Hibachi/client/src/collection/services/collectionservice.ts\");\n//controllers\nvar collections_1 = __webpack_require__(/*! ./controllers/collections */ \"../../../org/Hibachi/client/src/collection/controllers/collections.ts\");\nvar createcollection_1 = __webpack_require__(/*! ./controllers/createcollection */ \"../../../org/Hibachi/client/src/collection/controllers/createcollection.ts\");\nvar confirmationcontroller_1 = __webpack_require__(/*! ./controllers/confirmationcontroller */ \"../../../org/Hibachi/client/src/collection/controllers/confirmationcontroller.ts\");\nvar entity_createcollection_1 = __webpack_require__(/*! ./controllers/entity_createcollection */ \"../../../org/Hibachi/client/src/collection/controllers/entity_createcollection.ts\");\n//directives\nvar swcollection_1 = __webpack_require__(/*! ./components/swcollection */ \"../../../org/Hibachi/client/src/collection/components/swcollection.ts\");\nvar swaddfilterbuttons_1 = __webpack_require__(/*! ./components/swaddfilterbuttons */ \"../../../org/Hibachi/client/src/collection/components/swaddfilterbuttons.ts\");\nvar swdisplayoptions_1 = __webpack_require__(/*! ./components/swdisplayoptions */ \"../../../org/Hibachi/client/src/collection/components/swdisplayoptions.ts\");\nvar swdisplayitem_1 = __webpack_require__(/*! ./components/swdisplayitem */ \"../../../org/Hibachi/client/src/collection/components/swdisplayitem.ts\");\nvar swdisplayitemaggregate_1 = __webpack_require__(/*! ./components/swdisplayitemaggregate */ \"../../../org/Hibachi/client/src/collection/components/swdisplayitemaggregate.ts\");\nvar swcollectiontable_1 = __webpack_require__(/*! ./components/swcollectiontable */ \"../../../org/Hibachi/client/src/collection/components/swcollectiontable.ts\");\nvar swcolumnitem_1 = __webpack_require__(/*! ./components/swcolumnitem */ \"../../../org/Hibachi/client/src/collection/components/swcolumnitem.ts\");\nvar swconditioncriteria_1 = __webpack_require__(/*! ./components/swconditioncriteria */ \"../../../org/Hibachi/client/src/collection/components/swconditioncriteria.ts\");\nvar swcriteria_1 = __webpack_require__(/*! ./components/swcriteria */ \"../../../org/Hibachi/client/src/collection/components/swcriteria.ts\");\nvar swcriteriaboolean_1 = __webpack_require__(/*! ./components/swcriteriaboolean */ \"../../../org/Hibachi/client/src/collection/components/swcriteriaboolean.ts\");\nvar swcriteriadate_1 = __webpack_require__(/*! ./components/swcriteriadate */ \"../../../org/Hibachi/client/src/collection/components/swcriteriadate.ts\");\nvar swcriteriamanytomany_1 = __webpack_require__(/*! ./components/swcriteriamanytomany */ \"../../../org/Hibachi/client/src/collection/components/swcriteriamanytomany.ts\");\nvar swcriteriamanytoone_1 = __webpack_require__(/*! ./components/swcriteriamanytoone */ \"../../../org/Hibachi/client/src/collection/components/swcriteriamanytoone.ts\");\nvar swcriterianumber_1 = __webpack_require__(/*! ./components/swcriterianumber */ \"../../../org/Hibachi/client/src/collection/components/swcriterianumber.ts\");\nvar swcriteriaonetomany_1 = __webpack_require__(/*! ./components/swcriteriaonetomany */ \"../../../org/Hibachi/client/src/collection/components/swcriteriaonetomany.ts\");\nvar swcriteriarelatedobject_1 = __webpack_require__(/*! ./components/swcriteriarelatedobject */ \"../../../org/Hibachi/client/src/collection/components/swcriteriarelatedobject.ts\");\nvar swcriteriastring_1 = __webpack_require__(/*! ./components/swcriteriastring */ \"../../../org/Hibachi/client/src/collection/components/swcriteriastring.ts\");\nvar sweditfilteritem_1 = __webpack_require__(/*! ./components/sweditfilteritem */ \"../../../org/Hibachi/client/src/collection/components/sweditfilteritem.ts\");\nvar swfiltergroups_1 = __webpack_require__(/*! ./components/swfiltergroups */ \"../../../org/Hibachi/client/src/collection/components/swfiltergroups.ts\");\nvar swfilteritem_1 = __webpack_require__(/*! ./components/swfilteritem */ \"../../../org/Hibachi/client/src/collection/components/swfilteritem.ts\");\nvar swfiltergroupitem_1 = __webpack_require__(/*! ./components/swfiltergroupitem */ \"../../../org/Hibachi/client/src/collection/components/swfiltergroupitem.ts\");\nvar swrestrictionconfig_1 = __webpack_require__(/*! ./components/swrestrictionconfig */ \"../../../org/Hibachi/client/src/collection/components/swrestrictionconfig.ts\");\n//filters\nvar aggregatefilter_1 = __webpack_require__(/*! ./filters/aggregatefilter */ \"../../../org/Hibachi/client/src/collection/filters/aggregatefilter.ts\");\nvar collectionmodule = angular.module('hibachi.collection', [core_module_1.coremodule.name])\n    .config([function () {\n    }]).run([function () {\n    }])\n    //constants\n    .constant('collectionPartialsPath', 'collection/components/')\n    //controllers\n    .controller('collections', collections_1.CollectionController)\n    .controller('confirmationController', confirmationcontroller_1.ConfirmationController)\n    .controller('createCollection', createcollection_1.CreateCollection)\n    .controller('entity_createcollection', entity_createcollection_1.CollectionCreateController)\n    //services\n    .factory('collectionConfigService', ['rbkeyService', '$hibachi', 'utilityService', 'observerService', function (rbkeyService, $hibachi, utilityService, observerService) { return new collectionconfigservice_1.CollectionConfig(rbkeyService, $hibachi, utilityService, observerService); }])\n    .service('collectionService', collectionservice_1.CollectionService)\n    //directives\n    .directive('swRestrictionConfig', swrestrictionconfig_1.SWRestrictionConfig.Factory())\n    .directive('swCollection', swcollection_1.SWCollection.Factory())\n    .directive('swAddFilterButtons', swaddfilterbuttons_1.SWAddFilterButtons.Factory())\n    .directive('swDisplayOptions', swdisplayoptions_1.SWDisplayOptions.Factory())\n    .directive('swDisplayItem', swdisplayitem_1.SWDisplayItem.Factory())\n    .directive('swDisplayItemAggregate', swdisplayitemaggregate_1.SWDisplayItemAggregate.Factory())\n    .directive('swCollectionTable', swcollectiontable_1.SWCollectionTable.Factory())\n    .directive('swColumnItem', swcolumnitem_1.SWColumnItem.Factory())\n    .directive('swConditionCriteria', swconditioncriteria_1.SWConditionCriteria.Factory())\n    .directive('swCriteria', swcriteria_1.SWCriteria.Factory())\n    .directive('swCriteriaBoolean', swcriteriaboolean_1.SWCriteriaBoolean.Factory())\n    .directive('swCriteriaDate', swcriteriadate_1.SWCriteriaDate.Factory())\n    .directive('swCriteriaManyToMany', swcriteriamanytomany_1.SWCriteriaManyToMany.Factory())\n    .directive('swCriteriaManyToOne', swcriteriamanytoone_1.SWCriteriaManyToOne.Factory())\n    .directive('swCriteriaNumber', swcriterianumber_1.SWCriteriaNumber.Factory())\n    .directive('swCriteriaOneToMany', swcriteriaonetomany_1.SWCriteriaOneToMany.Factory())\n    .directive('swCriteriaRelatedObject', swcriteriarelatedobject_1.SWCriteriaRelatedObject.Factory())\n    .directive('swCriteriaString', swcriteriastring_1.SWCriteriaString.Factory())\n    .directive('swEditFilterItem', sweditfilteritem_1.SWEditFilterItem.Factory())\n    .directive('swFilterGroups', swfiltergroups_1.SWFilterGroups.Factory())\n    .directive('swFilterItem', swfilteritem_1.SWFilterItem.Factory())\n    .directive('swFilterGroupItem', swfiltergroupitem_1.SWFilterGroupItem.Factory())\n    //filters\n    .filter('aggregateFilter', ['$filter', aggregatefilter_1.AggregateFilter.Factory]);\nexports.collectionmodule = collectionmodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/collection.module.ts?")},"../../../org/Hibachi/client/src/collection/components/swaddfilterbuttons.ts":
/*!********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swaddfilterbuttons.ts ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWAddFilterButtons = /** @class */ (function () {\n    //@ngInject\n    function SWAddFilterButtons(collectionService, collectionPartialsPath, hibachiPathBuilder) {\n        return {\n            require: '^swFilterGroups',\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \"addfilterbuttons.html\",\n            scope: {\n                itemInUse: \"=\",\n                readOnly: \"=\"\n            },\n            link: function (scope, element, attrs, filterGroupsController) {\n                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();\n                scope.addFilterItem = function () {\n                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse);\n                };\n                scope.addFilterGroupItem = function () {\n                    collectionService.newFilterItem(filterGroupsController.getFilterGroupItem(), filterGroupsController.setItemInUse, true);\n                };\n            }\n        };\n    }\n    SWAddFilterButtons.Factory = function () {\n        var directive = function (collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWAddFilterButtons(collectionService, collectionPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            'collectionService',\n            'collectionPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWAddFilterButtons;\n}());\nexports.SWAddFilterButtons = SWAddFilterButtons;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swaddfilterbuttons.ts?")},"../../../org/Hibachi/client/src/collection/components/swcollection.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcollection.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWCollection = /** @class */ (function () {\n    //@ngInject\n    function SWCollection(hibachiPathBuilder, collectionPartialsPath) {\n        return {\n            restrict: 'A',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \"collection.html\",\n            link: function (scope, $element, $attrs) {\n                scope.tabsUniqueID = Math.floor(Math.random() * 999);\n                scope.toggleCogOpen = $attrs.toggleoption;\n                //Toggles open/close of filters and display options\n                scope.toggleFiltersAndOptions = function () {\n                    if (scope.toggleCogOpen === false) {\n                        scope.toggleCogOpen = true;\n                    }\n                    else {\n                        scope.toggleCogOpen = false;\n                    }\n                };\n            }\n        };\n    }\n    SWCollection.Factory = function () {\n        var directive = function (hibachiPathBuilder, collectionPartialsPath) { return new SWCollection(hibachiPathBuilder, collectionPartialsPath); };\n        directive.$inject = [\n            'hibachiPathBuilder',\n            'collectionPartialsPath'\n        ];\n        return directive;\n    };\n    return SWCollection;\n}());\nexports.SWCollection = SWCollection;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcollection.ts?")},"../../../org/Hibachi/client/src/collection/components/swcollectiontable.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcollectiontable.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWCollectionTable = /** @class */ (function () {\n    //@ngInject\n    function SWCollectionTable($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi, $filter, $injector) {\n        return {\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \"collectiontable.html\",\n            scope: {\n                collection: \"=\",\n                collectionConfig: \"=\",\n                isRadio: \"=?\",\n                //angularLink:true || false\n                angularLinks: \"=?\"\n            },\n            link: function (scope, element, attrs) {\n                if (angular.isUndefined(scope.angularLinks)) {\n                    scope.angularLinks = false;\n                }\n                if (scope.collection.collectionObject) {\n                    scope.collectionObject = $hibachi['new' + scope.collection.collectionObject]();\n                }\n                else if (scope.collectionConfig.baseEntityName) {\n                    scope.collectionObject = scope.collectionConfig.baseEntityName;\n                }\n                var escapeRegExp = function (str) {\n                    return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n                };\n                scope.replaceAll = function (str, find, replace) {\n                    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n                };\n                /*\n                 * Handles setting the key on the data.\n                 * */\n                angular.forEach(scope.collectionConfig.columns, function (column) {\n                    $log.debug(\"Config Key : \" + column);\n                    column.key = column.propertyIdentifier.replace(/\\./g, '_').replace(scope.collectionConfig.baseEntityAlias + '_', '');\n                });\n                scope.addSelection = function (selectionid, selection) {\n                    selectionService.addSelection(selectionid, selection);\n                };\n                scope.getCellValue = function (pageRecord, column) {\n                    var value = '';\n                    if (angular.isDefined(column.aggregate)) {\n                        value = pageRecord[column.aggregate.aggregateAlias];\n                    }\n                    else if (column.propertyIdentifier.replace(scope.collectionConfig.baseEntityAlias, '').charAt(0) == '.') {\n                        value = pageRecord[column.propertyIdentifier.replace(scope.collectionConfig.baseEntityAlias + '.', '')];\n                    }\n                    else {\n                        value = pageRecord[column.propertyIdentifier.replace(scope.collectionConfig.baseEntityAlias + '_', '').replace(/\\./g, '_')];\n                    }\n                    var type = 'none';\n                    if (angular.isDefined(column.type) && column.type != 'none') {\n                        type = column.type;\n                    }\n                    if (type == 'none' && angular.isDefined(column.ormtype) && column.ormtype != 'none') {\n                        type = column.ormtype;\n                    }\n                    if (type != 'none' && $injector.has(type + 'Filter')) {\n                        return $filter(type)(value);\n                    }\n                    else {\n                        return value;\n                    }\n                };\n            }\n        };\n    }\n    SWCollectionTable.Factory = function () {\n        var directive = function ($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi, $filter, $injector) { return new SWCollectionTable($log, hibachiPathBuilder, collectionPartialsPath, selectionService, $hibachi, $filter, $injector); };\n        directive.$inject = [\n            '$log',\n            'hibachiPathBuilder',\n            'collectionPartialsPath',\n            'selectionService',\n            '$hibachi',\n            '$filter',\n            '$injector'\n        ];\n        return directive;\n    };\n    return SWCollectionTable;\n}());\nexports.SWCollectionTable = SWCollectionTable;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcollectiontable.ts?")},"../../../org/Hibachi/client/src/collection/components/swcolumnitem.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcolumnitem.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWColumnItem = /** @class */ (function () {\n    //@ngInject\n    function SWColumnItem($log, hibachiPathBuilder, collectionPartialsPath, observerService) {\n        return {\n            restrict: 'A',\n            require: {\n                swDisplayOptions: \"?^swDisplayOptions\",\n                swListingControls: \"?^swListingControls\",\n                swListingDisplay: \"?^swListingDisplay\"\n            },\n            scope: {\n                column: \"=\",\n                columns: \"=\",\n                columnIndex: \"=\",\n                saveCollection: \"&?\",\n                propertiesList: \"<\",\n                orderBy: \"=\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \"columnitem.html\",\n            link: function (scope, element, attrs, controller, observerService) {\n                scope.getReportLabelColor = function (chart) {\n                    if (scope.column.aggregate && chart.config.data.datasets) {\n                        for (var i = 0; i < chart.config.data.datasets.length; i++) {\n                            var dataset = chart.config.data.datasets[i];\n                            if (dataset.label == scope.column.title) {\n                                var color = '#FF0000';\n                                console.log(dataset);\n                                color = dataset.backgroundColor;\n                                scope.column.style = {\n                                    display: 'inline-block',\n                                    width: '40px',\n                                    height: '10px',\n                                    'background-color': color,\n                                    margin: '0 20px',\n                                    'border-radius': '6px',\n                                    'margin-top': '15px',\n                                    'margin-left': '40px'\n                                };\n                                break;\n                            }\n                        }\n                    }\n                };\n                controller.swListingDisplay.observerService.attach(scope.getReportLabelColor, 'swListingReport_DrawChart', controller.swListingDisplay.tableID);\n                if (!scope.saveCollection && controller.swListingControls) {\n                    scope.saveCollection = function () {\n                        controller.swListingControls.collectionConfig.columns = scope.columns;\n                        controller.swDisplayOptions.columns = scope.columns;\n                        controller.swListingControls.saveCollection();\n                    };\n                }\n                scope.editingDisplayTitle = false;\n                scope.editDisplayTitle = function () {\n                    if (angular.isUndefined(scope.column.displayTitle) || !scope.column.displayTitle.length) {\n                        scope.column.displayTitle = scope.column.title;\n                    }\n                    scope.previousDisplayTitle = scope.column.displayTitle;\n                    scope.editingDisplayTitle = true;\n                };\n                scope.saveDisplayTitle = function () {\n                    scope.saveCollection();\n                    scope.editingDisplayTitle = false;\n                };\n                scope.cancelDisplayTitle = function () {\n                    scope.column.displayTitle = scope.previousDisplayTitle;\n                    scope.editingDisplayTitle = false;\n                };\n                if (angular.isUndefined(scope.column.sorting)) {\n                    scope.column.sorting = {\n                        active: false,\n                        sortOrder: 'asc',\n                        priority: 0\n                    };\n                }\n                scope.toggleVisible = function (column) {\n                    if (angular.isUndefined(column.isVisible)) {\n                        column.isVisible = false;\n                    }\n                    column.isVisible = !column.isVisible;\n                    scope.saveCollection();\n                };\n                scope.toggleSearchable = function (column) {\n                    if (angular.isUndefined(column.isSearchable)) {\n                        column.isSearchable = false;\n                    }\n                    column.isSearchable = !column.isSearchable;\n                    scope.saveCollection();\n                };\n                scope.toggleExportable = function (column) {\n                    $log.debug('toggle exporable');\n                    if (angular.isUndefined(column.isExportable)) {\n                        column.isExportable = false;\n                    }\n                    column.isExportable = !column.isExportable;\n                    scope.saveCollection();\n                };\n                var compareByPriority = function (a, b) {\n                    if (a.sorting && b.sorting && angular.isDefined(a.sorting) && angular.isDefined(a.sorting.priority)) {\n                        if (a.sorting.priority < b.sorting.priority) {\n                            return -1;\n                        }\n                        if (a.sorting.priority > b.sorting.priority) {\n                            return 1;\n                        }\n                    }\n                    return 0;\n                };\n                var updateOrderBy = function () {\n                    if (angular.isDefined(scope.columns)) {\n                        var columnsCopy = angular.copy(scope.columns);\n                        columnsCopy.sort(compareByPriority);\n                        scope.orderBy = [];\n                        angular.forEach(columnsCopy, function (column) {\n                            if (angular.isDefined(column.sorting) && column.sorting.active === true) {\n                                var orderBy = {\n                                    propertyIdentifier: column.propertyIdentifier,\n                                    direction: column.sorting.sortOrder\n                                };\n                                if (column.aggregate && column.aggregate.aggregateFunction) {\n                                    var aggregateFunction = column.aggregate.aggregateFunction.toUpperCase();\n                                    if (aggregateFunction == 'AVERAGE') {\n                                        aggregateFunction = 'AVG';\n                                    }\n                                    orderBy.propertyIdentifier = aggregateFunction + '(' + column.propertyIdentifier + ')';\n                                }\n                                scope.orderBy.push(orderBy);\n                            }\n                        });\n                    }\n                };\n                scope.toggleSortable = function (column) {\n                    $log.debug('toggle sortable');\n                    if (angular.isUndefined(column.sorting)) {\n                        column.sorting = {\n                            active: true,\n                            sortOrder: 'asc',\n                            priority: 0\n                        };\n                    }\n                    if (column.sorting.active === true) {\n                        if (column.sorting.sortOrder === 'asc') {\n                            column.sorting.sortOrder = 'desc';\n                        }\n                        else {\n                            removeSorting(column);\n                            column.sorting.active = false;\n                        }\n                    }\n                    else {\n                        column.sorting.active = true;\n                        column.sorting.sortOrder = 'asc';\n                        column.sorting.priority = getActivelySorting().length;\n                    }\n                    updateOrderBy();\n                    scope.saveCollection();\n                };\n                var removeSorting = function (column, saving) {\n                    if (column.sorting.active === true) {\n                        for (var i in scope.columns) {\n                            if (scope.columns[i].sorting.active === true && scope.columns[i].sorting.priority > column.sorting.priority) {\n                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority - 1;\n                            }\n                        }\n                        column.sorting.priority = 0;\n                    }\n                    if (!saving) {\n                        updateOrderBy();\n                        scope.saveCollection();\n                    }\n                };\n                scope.prioritize = function (column) {\n                    if (column.sorting.priority === 1) {\n                        var activelySorting = getActivelySorting();\n                        for (var i in scope.columns) {\n                            if (scope.columns[i].sorting.active === true) {\n                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority - 1;\n                            }\n                        }\n                        column.sorting.priority = activelySorting.length;\n                    }\n                    else {\n                        for (var i in scope.columns) {\n                            if (scope.columns[i].sorting.active === true && scope.columns[i].sorting.priority === column.sorting.priority - 1) {\n                                scope.columns[i].sorting.priority = scope.columns[i].sorting.priority + 1;\n                            }\n                        }\n                        column.sorting.priority -= 1;\n                    }\n                    updateOrderBy();\n                    scope.saveCollection();\n                };\n                var getActivelySorting = function () {\n                    var activelySorting = [];\n                    for (var i in scope.columns) {\n                        if (scope.columns[i].sorting.active === true) {\n                            activelySorting.push(scope.columns[i]);\n                        }\n                    }\n                    return activelySorting;\n                };\n                scope.removeColumn = function (columnIndex) {\n                    if (scope.columns[columnIndex].isDeletable) {\n                        removeSorting(scope.columns[columnIndex], true);\n                        controller.swDisplayOptions.removeColumn(columnIndex);\n                        updateOrderBy();\n                        scope.saveCollection();\n                    }\n                };\n            }\n        };\n    }\n    SWColumnItem.Factory = function () {\n        var directive = function ($log, hibachiPathBuilder, collectionPartialsPath, observerService) { return new SWColumnItem($log, hibachiPathBuilder, collectionPartialsPath, observerService); };\n        directive.$inject = [\n            '$log',\n            'hibachiPathBuilder',\n            'collectionPartialsPath',\n            'observerService'\n        ];\n        return directive;\n    };\n    return SWColumnItem;\n}());\nexports.SWColumnItem = SWColumnItem;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcolumnitem.ts?")},"../../../org/Hibachi/client/src/collection/components/swconditioncriteria.ts":
/*!*********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swconditioncriteria.ts ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWConditionCriteria = /** @class */ (function () {\n    //@ngInject\n    function SWConditionCriteria($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder) {\n        /* Template info begin*/\n        var getTemplate = function (selectedFilterProperty) {\n            var template = \'\';\n            var templatePath = \'\';\n            if (angular.isUndefined(selectedFilterProperty.ormtype) && angular.isUndefined(selectedFilterProperty.fieldtype)) {\n                templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteria.html";\n            }\n            else {\n                var criteriaormtype = selectedFilterProperty.ormtype;\n                var criteriafieldtype = selectedFilterProperty.fieldtype;\n                /*TODO: convert all switches to object literals*/\n                switch (criteriaormtype) {\n                    case \'boolean\':\n                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriaboolean.html";\n                        break;\n                    case \'string\':\n                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriastring.html";\n                        break;\n                    case \'timestamp\':\n                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriadate.html";\n                        break;\n                    case \'big_decimal\':\n                    case \'integer\':\n                    case \'float\':\n                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criterianumber.html";\n                        break;\n                }\n                switch (criteriafieldtype) {\n                    case "many-to-one":\n                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriamanytoone.html";\n                        break;\n                    case "many-to-many":\n                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriamanytomany.html";\n                        break;\n                    case "one-to-many":\n                        templatePath = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "criteriaonetomany.html";\n                        break;\n                }\n            }\n            var templateLoader = $http.get(templatePath, { cache: $templateCache });\n            return templateLoader;\n        };\n        /* Template info end*/\n        /* Options info begin */\n        var getStringOptions = function (type) {\n            var stringOptions = [];\n            if (angular.isUndefined(type)) {\n                type = \'filter\';\n            }\n            if (type == \'filter\') {\n                stringOptions = [\n                    {\n                        display: "Equals",\n                        comparisonOperator: "="\n                    },\n                    {\n                        display: "Doesn\'t Equal",\n                        comparisonOperator: "<>"\n                    },\n                    {\n                        display: "Contains",\n                        comparisonOperator: "like",\n                        pattern: "%w%"\n                    },\n                    {\n                        display: "Doesn\'t Contain",\n                        comparisonOperator: "not like",\n                        pattern: "%w%"\n                    },\n                    {\n                        display: "Starts With",\n                        comparisonOperator: "like",\n                        pattern: "w%"\n                    },\n                    {\n                        display: "Doesn\'t Start With",\n                        comparisonOperator: "not like",\n                        pattern: "w%"\n                    },\n                    {\n                        display: "Ends With",\n                        comparisonOperator: "like",\n                        pattern: "%w"\n                    },\n                    {\n                        display: "Doesn\'t End With",\n                        comparisonOperator: "not like",\n                        pattern: "%w"\n                    },\n                    {\n                        display: "In List",\n                        comparisonOperator: "in"\n                    },\n                    {\n                        display: "Not In List",\n                        comparisonOperator: "not in"\n                    },\n                    {\n                        display: "Defined",\n                        comparisonOperator: "is not",\n                        value: "null"\n                    },\n                    {\n                        display: "Not Defined",\n                        comparisonOperator: "is",\n                        value: "null"\n                    }\n                ];\n                if (type === \'condition\') {\n                    stringOptions = [\n                        {\n                            display: "Equals",\n                            comparisonOperator: "="\n                        },\n                        {\n                            display: "In List",\n                            comparisonOperator: "in"\n                        },\n                        {\n                            display: "Defined",\n                            comparisonOperator: "is not",\n                            value: "null"\n                        },\n                        {\n                            display: "Not Defined",\n                            comparisonOperator: "is",\n                            value: "null"\n                        }\n                    ];\n                }\n            }\n            return stringOptions;\n        };\n        var getBooleanOptions = function (type) {\n            var booleanOptions = [];\n            if (angular.isUndefined(type)) {\n                type = \'filter\';\n            }\n            if (type === \'filter\' || type === \'condition\') {\n                booleanOptions = [\n                    {\n                        display: "True",\n                        comparisonOperator: "=",\n                        value: "True"\n                    },\n                    {\n                        display: "False",\n                        comparisonOperator: "=",\n                        value: "False"\n                    },\n                    {\n                        display: "Defined",\n                        comparisonOperator: "is not",\n                        value: "null"\n                    },\n                    {\n                        display: "Not Defined",\n                        comparisonOperator: "is",\n                        value: "null"\n                    }\n                ];\n            }\n            return booleanOptions;\n        };\n        var getDateOptions = function (type) {\n            var dateOptions = [];\n            if (angular.isUndefined(type)) {\n                type = \'filter\';\n            }\n            if (type === \'filter\') {\n                dateOptions = [\n                    {\n                        display: "Date",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'exactDate\',\n                        }\n                    },\n                    {\n                        display: "In Range",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'range\'\n                        }\n                    },\n                    {\n                        display: "Not In Range",\n                        comparisonOperator: "not between",\n                        dateInfo: {\n                            type: \'range\'\n                        }\n                    },\n                    {\n                        display: "Today",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'d\',\n                            measureCount: 0,\n                            behavior: \'toDate\'\n                        }\n                    },\n                    {\n                        display: "Yesterday",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'d\',\n                            measureCount: -1,\n                            behavior: \'toDate\'\n                        }\n                    },\n                    {\n                        display: "This Week",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'w\',\n                            behavior: \'toDate\'\n                        }\n                    },\n                    {\n                        display: "This Month",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'m\',\n                            behavior: \'toDate\'\n                        }\n                    },\n                    {\n                        display: "This Quarter",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'q\',\n                            behavior: \'toDate\'\n                        }\n                    },\n                    {\n                        display: "This Year",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'y\',\n                            behavior: \'toDate\'\n                        }\n                    },\n                    {\n                        display: "Last N Hour(s)",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'h\',\n                            measureTypeDisplay: \'Hours\'\n                        }\n                    },\n                    {\n                        display: "Last N Day(s)",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'d\',\n                            measureTypeDisplay: \'Days\'\n                        }\n                    },\n                    {\n                        display: "Last N Week(s)",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'w\',\n                            measureTypeDisplay: \'Weeks\'\n                        }\n                    },\n                    {\n                        display: "Last N Month(s)",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'m\',\n                            measureTypeDisplay: \'Months\'\n                        }\n                    },\n                    {\n                        display: "Last N Quarter(s)",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'q\',\n                            measureTypeDisplay: \'Quarters\'\n                        }\n                    },\n                    {\n                        display: "Last N Year(s)",\n                        comparisonOperator: "between",\n                        dateInfo: {\n                            type: \'calculation\',\n                            measureType: \'y\',\n                            measureTypeDisplay: \'Years\'\n                        }\n                    },\n                    {\n                        display: "Defined",\n                        comparisonOperator: "is not",\n                        value: "null"\n                    },\n                    {\n                        display: "Not Defined",\n                        comparisonOperator: "is",\n                        value: "null"\n                    }\n                ];\n            }\n            if (type === \'condition\') {\n                dateOptions = [\n                    {\n                        display: "Defined",\n                        comparisonOperator: "is not",\n                        value: "null"\n                    },\n                    {\n                        display: "Not Defined",\n                        comparisonOperator: "is",\n                        value: "null"\n                    }\n                ];\n            }\n            return dateOptions;\n        };\n        var getNumberOptions = function (type) {\n            var numberOptions = [];\n            if (angular.isUndefined(type)) {\n                type = \'filter\';\n            }\n            if (type == \'filter\') {\n                numberOptions = [\n                    {\n                        display: "Equals",\n                        comparisonOperator: "="\n                    },\n                    {\n                        display: "Doesn\'t Equal",\n                        comparisonOperator: "<>"\n                    },\n                    {\n                        display: "In Range",\n                        comparisonOperator: "between",\n                        type: "range"\n                    },\n                    {\n                        display: "Not In Range",\n                        comparisonOperator: "not between",\n                        type: "range"\n                    },\n                    {\n                        display: "Greater Than",\n                        comparisonOperator: ">"\n                    },\n                    {\n                        display: "Greater Than Or Equal",\n                        comparisonOperator: ">="\n                    },\n                    {\n                        display: "Less Than",\n                        comparisonOperator: "<"\n                    },\n                    {\n                        display: "Less Than Or Equal",\n                        comparisonOperator: "<="\n                    },\n                    {\n                        display: "In List",\n                        comparisonOperator: "in"\n                    },\n                    {\n                        display: "Not In List",\n                        comparisonOperator: "not in"\n                    },\n                    {\n                        display: "Defined",\n                        comparisonOperator: "is not",\n                        value: "null"\n                    },\n                    {\n                        display: "Not Defined",\n                        comparisonOperator: "is",\n                        value: "null"\n                    }\n                ];\n            }\n            if (type === \'condition\') {\n                numberOptions = [\n                    {\n                        display: "Equals",\n                        comparisonOperator: "="\n                    },\n                    {\n                        display: "Doesn\'t Equal",\n                        comparisonOperator: "<>"\n                    },\n                    {\n                        display: "Greater Than",\n                        comparisonOperator: ">"\n                    },\n                    {\n                        display: "Greater Than Or Equal",\n                        comparisonOperator: ">="\n                    },\n                    {\n                        display: "Less Than",\n                        comparisonOperator: "<"\n                    },\n                    {\n                        display: "Less Than Or Equal",\n                        comparisonOperator: "<="\n                    },\n                    {\n                        display: "In List",\n                        comparisonOperator: "in"\n                    },\n                    {\n                        display: "Defined",\n                        comparisonOperator: "is not",\n                        value: "null"\n                    },\n                    {\n                        display: "Not Defined",\n                        comparisonOperator: "is",\n                        value: "null"\n                    }\n                ];\n            }\n            return numberOptions;\n        };\n        var getOneToManyOptions = function (type) {\n            var oneToManyOptions = [];\n            if (angular.isUndefined(type)) {\n                type = \'filter\';\n            }\n            if (type == \'filter\') {\n                oneToManyOptions = [\n                    {\n                        display: "All Exist In Collection",\n                        comparisonOperator: "All"\n                    },\n                    {\n                        display: "None Exist In Collection",\n                        comparisonOperator: "None"\n                    },\n                    {\n                        display: "Some Exist In Collection",\n                        comparisonOperator: "One"\n                    }\n                ];\n            }\n            if (type === \'condition\') {\n                oneToManyOptions = [];\n            }\n            return oneToManyOptions;\n        };\n        var getManyToManyOptions = function (type) {\n            var manyToManyOptions = [];\n            if (angular.isUndefined(type)) {\n                type = \'filter\';\n            }\n            if (type == \'filter\') {\n                manyToManyOptions = [\n                    {\n                        display: "All Exist In Collection",\n                        comparisonOperator: "All"\n                    },\n                    {\n                        display: "None Exist In Collection",\n                        comparisonOperator: "None"\n                    },\n                    {\n                        display: "Some Exist In Collection",\n                        comparisonOperator: "One"\n                    },\n                    {\n                        display: "Empty",\n                        comparisonOperator: "is",\n                        value: "null"\n                    },\n                    {\n                        display: "Not Empty",\n                        comparisonOperator: "is not",\n                        value: "null"\n                    }\n                ];\n            }\n            if (type === \'condition\') {\n                manyToManyOptions = [\n                    {\n                        display: "Empty",\n                        comparisonOperator: "is",\n                        value: "null"\n                    },\n                    {\n                        display: "Not Empty",\n                        comparisonOperator: "is not",\n                        value: "null"\n                    }\n                ];\n            }\n            return manyToManyOptions;\n        };\n        var getManyToOneOptions = function (type) {\n            var manyToOneOptions = [];\n            if (angular.isUndefined(type)) {\n                type = \'filter\';\n            }\n            if (type == \'filter\') {\n                manyToOneOptions = {\n                    drillEntity: {},\n                    hasEntity: {\n                        display: "Defined",\n                        comparisonOperator: "is not",\n                        value: "null"\n                    },\n                    notHasEntity: {\n                        display: "Not Defined",\n                        comparisonOperator: "is",\n                        value: "null"\n                    }\n                };\n            }\n            return manyToOneOptions;\n        };\n        /* Options info end */\n        var linker = function (scope, element, attrs) {\n            /*show the user the value without % symbols as these are reserved*/\n            scope.$watch(\'selectedFilterProperty.criteriaValue\', function (criteriaValue) {\n                if (angular.isDefined(criteriaValue)) {\n                    scope.selectedFilterProperty.criteriaValue = $filter(\'likeFilter\')(criteriaValue);\n                }\n            });\n            scope.$watch(\'selectedFilterProperty\', function (selectedFilterProperty) {\n                if (angular.isDefined(selectedFilterProperty)) {\n                    $log.debug(\'watchSelectedFilterProperty\');\n                    $log.debug(scope.selectedFilterProperty);\n                    /*prepopulate if we have a comparison operator and value*/\n                    if (selectedFilterProperty === null) {\n                        return;\n                    }\n                    if (angular.isDefined(selectedFilterProperty.ormtype)) {\n                        switch (scope.selectedFilterProperty.ormtype) {\n                            case "boolean":\n                                scope.conditionOptions = getBooleanOptions();\n                                break;\n                            case "string":\n                                scope.conditionOptions = getStringOptions();\n                                scope.selectedConditionChanged = function (selectedFilterProperty) {\n                                    //scope.selectedFilterProperty.criteriaValue = \'\';\n                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {\n                                        selectedFilterProperty.showCriteriaValue = false;\n                                    }\n                                    else {\n                                        selectedFilterProperty.showCriteriaValue = true;\n                                    }\n                                };\n                                break;\n                            case "timestamp":\n                                scope.conditionOptions = getDateOptions();\n                                scope.today = function () {\n                                    if (angular.isDefined(scope.selectedFilterProperty)) {\n                                        scope.selectedFilterProperty.criteriaRangeStart = new Date().getTime();\n                                        scope.selectedFilterProperty.criteriaRangeEnd = new Date().getTime();\n                                    }\n                                };\n                                scope.clear = function () {\n                                    scope.selectedFilterProperty.criteriaRangeStart = null;\n                                    scope.selectedFilterProperty.criteriaRangeEnd = null;\n                                };\n                                scope.openCalendarStart = function ($event) {\n                                    $event.preventDefault();\n                                    $event.stopPropagation();\n                                    scope.openedCalendarStart = true;\n                                };\n                                scope.openCalendarEnd = function ($event) {\n                                    $event.preventDefault();\n                                    $event.stopPropagation();\n                                    scope.openedCalendarEnd = true;\n                                };\n                                scope.formats = [\n                                    \'dd-MMMM-yyyy\',\n                                    \'yyyy/MM/dd\',\n                                    \'dd.MM.yyyy\',\n                                    \'shortDate\'\n                                ];\n                                scope.format = scope.formats[1];\n                                scope.selectedConditionChanged = function (selectedFilterProperty) {\n                                    $log.debug(\'selectedConditionChanged Begin\');\n                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;\n                                    //check whether condition is checking for null values in date\n                                    if (angular.isDefined(selectedCondition.dateInfo)) {\n                                        //is condition a calculation\n                                        if (selectedCondition.dateInfo.type === \'calculation\') {\n                                            selectedCondition.showCriteriaStart = true;\n                                            selectedCondition.showCriteriaEnd = true;\n                                            selectedCondition.disableCriteriaStart = true;\n                                            selectedCondition.disableCriteriaEnd = true;\n                                            //if item is a calculation of an N number of measure display the measure and number input\n                                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {\n                                                $log.debug(\'Not toDate\');\n                                                selectedCondition.showNumberOf = true;\n                                                selectedCondition.conditionDisplay = \'Number of \' + selectedCondition.dateInfo.measureTypeDisplay + \' :\';\n                                            }\n                                            else {\n                                                $log.debug(\'toDate\');\n                                                var today = Date.parse(\'today\');\n                                                var todayEOD = today.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = todayEOD;\n                                                //get this Measure to date\n                                                switch (selectedCondition.dateInfo.measureType) {\n                                                    case \'d\':\n                                                        var dateBOD = Date.parse(\'today\').add(selectedCondition.dateInfo.measureCount).days();\n                                                        dateBOD.setHours(0, 0, 0, 0);\n                                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();\n                                                        break;\n                                                    case \'w\':\n                                                        var firstDayOfWeek = Date.today().last().monday();\n                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();\n                                                        break;\n                                                    case \'m\':\n                                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();\n                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();\n                                                        break;\n                                                    case \'q\':\n                                                        var month = Date.parse(\'today\').toString(\'MM\');\n                                                        var year = Date.parse(\'today\').toString(\'yyyy\');\n                                                        var quarterMonth = (Math.floor(month / 3) * 3);\n                                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);\n                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();\n                                                        break;\n                                                    case \'y\':\n                                                        var year = Date.parse(\'today\').toString(\'yyyy\');\n                                                        var firstDayOfYear = new Date(year, 0, 1);\n                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();\n                                                        break;\n                                                }\n                                            }\n                                        }\n                                        if (selectedCondition.dateInfo.type === \'range\') {\n                                            selectedCondition.showCriteriaStart = true;\n                                            selectedCondition.showCriteriaEnd = true;\n                                            selectedCondition.disableCriteriaStart = false;\n                                            selectedCondition.disableCriteriaEnd = false;\n                                            selectedCondition.showNumberOf = false;\n                                        }\n                                        if (selectedCondition.dateInfo.type === \'exactDate\') {\n                                            selectedCondition.showCriteriaEnd = false;\n                                            selectedCondition.disableCriteriaStart = false;\n                                            selectedCondition.disableCriteriaEnd = true;\n                                            if (!selectedCondition.dateInfo.measureType) {\n                                                selectedCondition.conditionDisplay = \'\';\n                                                selectedCondition.showCriteriaStart = true;\n                                                selectedCondition.showNumberOf = false;\n                                                selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);\n                                                selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);\n                                            }\n                                            else {\n                                                selectedCondition.conditionDisplay = \'How many \' + selectedCondition.dateInfo.measureTypeDisplay + \' ago?\';\n                                                selectedCondition.showCriteriaStart = false;\n                                                selectedCondition.showNumberOf = true;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        selectedCondition.showCriteriaStart = false;\n                                        selectedCondition.showCriteriaEnd = false;\n                                        selectedCondition.showNumberOf = false;\n                                        selectedCondition.conditionDisplay = \'\';\n                                    }\n                                    $log.debug(\'selectedConditionChanged End\');\n                                    $log.debug(\'selectedConditionChanged Result\');\n                                    $log.debug(selectedCondition);\n                                    $log.debug(selectedFilterProperty);\n                                };\n                                scope.criteriaRangeChanged = function (selectedFilterProperty) {\n                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;\n                                    if (selectedCondition.dateInfo.type === \'calculation\') {\n                                        var measureCount = selectedFilterProperty.criteriaNumberOf;\n                                        switch (selectedCondition.dateInfo.measureType) {\n                                            case \'h\':\n                                                var today = Date.parse(\'today\');\n                                                selectedFilterProperty.criteriaRangeEnd = today.getTime();\n                                                var todayXHoursAgo = Date.parse(\'today\').add(-(measureCount)).hours();\n                                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();\n                                                break;\n                                            case \'d\':\n                                                var lastFullDay = Date.parse(\'today\').add(-1).days();\n                                                lastFullDay.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();\n                                                var lastXDaysAgo = Date.parse(\'today\').add(-(measureCount)).days();\n                                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();\n                                                break;\n                                            case \'w\':\n                                                var lastFullWeekEnd = Date.today().last().sunday();\n                                                lastFullWeekEnd.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();\n                                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();\n                                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();\n                                                break;\n                                            case \'m\':\n                                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();\n                                                lastFullMonthEnd.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();\n                                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();\n                                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();\n                                                break;\n                                            case \'q\':\n                                                var currentQuarter = Math.floor((Date.parse(\'today\').getMonth() / 3));\n                                                var firstDayOfCurrentQuarter = new Date(Date.parse(\'today\').getFullYear(), currentQuarter * 3, 1);\n                                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();\n                                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();\n                                                var lastXQuartersAgo = new Date(Date.parse(\'today\').getFullYear(), currentQuarter * 3, 1);\n                                                lastXQuartersAgo.add(-(measureCount * 3)).months();\n                                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();\n                                                break;\n                                            case \'y\':\n                                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();\n                                                lastFullYearEnd.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();\n                                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();\n                                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();\n                                                break;\n                                        }\n                                    }\n                                    if (selectedCondition.dateInfo.type === \'exactDate\') {\n                                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);\n                                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);\n                                    }\n                                    if (selectedCondition.dateInfo.type === \'range\') {\n                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {\n                                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);\n                                        }\n                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd)) {\n                                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);\n                                        }\n                                    }\n                                    $log.debug(\'criteriaRangeChanged\');\n                                    $log.debug(selectedCondition);\n                                    $log.debug(selectedFilterProperty);\n                                };\n                                break;\n                            case "big_decimal":\n                            case "integer":\n                            case "float":\n                                scope.conditionOptions = getNumberOptions();\n                                scope.criteriaRangeChanged = function (selectedFilterProperty) {\n                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;\n                                };\n                                scope.selectedConditionChanged = function (selectedFilterProperty) {\n                                    selectedFilterProperty.showCriteriaValue = true;\n                                    //check whether the type is a range\n                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.type)) {\n                                        selectedFilterProperty.showCriteriaValue = false;\n                                        selectedFilterProperty.selectedCriteriaType.showCriteriaStart = true;\n                                        selectedFilterProperty.selectedCriteriaType.showCriteriaEnd = true;\n                                    }\n                                    //is null or is not null\n                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {\n                                        selectedFilterProperty.showCriteriaValue = false;\n                                    }\n                                };\n                                break;\n                        }\n                    }\n                    if (angular.isDefined(scope.selectedFilterProperty.fieldtype)) {\n                        switch (scope.selectedFilterProperty.fieldtype) {\n                            case "many-to-one":\n                                scope.conditionOptions = getManyToOneOptions(scope.comparisonType);\n                                $log.debug(\'many-to-one\');\n                                $log.debug(scope.selectedFilterProperty);\n                                $log.debug(scope.filterPropertiesList);\n                                if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {\n                                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.selectedFilterProperty.cfc);\n                                    filterPropertiesPromise.then(function (value) {\n                                        scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;\n                                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);\n                                    }, function (reason) {\n                                    });\n                                }\n                                break;\n                            case "many-to-many":\n                            case "one-to-many":\n                                scope.manyToManyOptions = getManyToManyOptions();\n                                scope.oneToManyOptions = getOneToManyOptions();\n                                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(selectedFilterProperty.cfc);\n                                existingCollectionsPromise.then(function (value) {\n                                    scope.collectionOptions = value.data;\n                                    if (angular.isDefined(scope.workflowCondition.collectionID)) {\n                                        for (var i in scope.collectionOptions) {\n                                            if (scope.collectionOptions[i].collectionID === scope.workflowCondition.collectionID) {\n                                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];\n                                            }\n                                        }\n                                        for (var i in scope.oneToManyOptions) {\n                                            if (scope.oneToManyOptions[i].comparisonOperator === scope.workflowCondition.criteria) {\n                                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];\n                                            }\n                                        }\n                                    }\n                                });\n                                break;\n                        }\n                    }\n                    $log.debug(\'workflowCondition\');\n                    $log.debug(scope.workflowCondition);\n                    angular.forEach(scope.conditionOptions, function (conditionOption) {\n                        if (conditionOption.display == scope.workflowCondition.conditionDisplay) {\n                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;\n                            scope.selectedFilterProperty.criteriaValue = scope.workflowCondition.value;\n                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo)\n                                && angular.isDefined(scope.workflowCondition.value)\n                                && scope.workflowCondition.value.length) {\n                                var dateRangeArray = scope.workflowCondition.value.split("-");\n                                scope.selectedFilterProperty.criteriaRangeStart = new Date(parseInt(dateRangeArray[0]));\n                                scope.selectedFilterProperty.criteriaRangeEnd = new Date(parseInt(dateRangeArray[1]));\n                            }\n                            if (angular.isDefined(scope.workflowCondition.criteriaNumberOf)) {\n                                scope.selectedFilterProperty.criteriaNumberOf = scope.workflowCondition.criteriaNumberOf;\n                            }\n                            if (angular.isDefined(scope.selectedConditionChanged)) {\n                                scope.selectedConditionChanged(scope.selectedFilterProperty);\n                            }\n                        }\n                    });\n                    $log.debug(\'templateLoader\');\n                    $log.debug(selectedFilterProperty);\n                    var templateLoader = getTemplate(selectedFilterProperty);\n                    var promise = templateLoader.success(function (html) {\n                        element.html(html);\n                        $compile(element.contents())(scope);\n                    });\n                }\n            });\n            scope.selectedCriteriaChanged = function (selectedCriteria) {\n                $log.debug(selectedCriteria);\n                //update breadcrumbs as array of filterpropertylist keys\n                $log.debug(scope.selectedFilterProperty);\n                var breadCrumb = {\n                    entityAlias: scope.selectedFilterProperty.name,\n                    cfc: scope.selectedFilterProperty.cfc,\n                    propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier\n                };\n                scope.workflowCondition.breadCrumbs.push(breadCrumb);\n                //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key\n                scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });\n                //update criteria to display the condition of the new critera we have selected\n            };\n        };\n        return {\n            restrict: \'A\',\n            scope: {\n                workflowCondition: "=",\n                selectedFilterProperty: "=",\n                filterPropertiesList: "=",\n                selectedFilterPropertyChanged: "&"\n            },\n            link: linker\n        };\n    }\n    SWConditionCriteria.Factory = function () {\n        var directive = function ($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWConditionCriteria($http, $compile, $templateCache, $log, $hibachi, $filter, collectionPartialsPath, metadataService, hibachiPathBuilder); };\n        directive.$inject = [\n            \'$http\',\n            \'$compile\',\n            \'$templateCache\',\n            \'$log\',\n            \'$hibachi\',\n            \'$filter\',\n            \'collectionPartialsPath\',\n            \'metadataService\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWConditionCriteria;\n}());\nexports.SWConditionCriteria = SWConditionCriteria;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swconditioncriteria.ts?')},"../../../org/Hibachi/client/src/collection/components/swcriteria.ts":
/*!************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteria.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWCriteria = /** @class */ (function () {\n    function SWCriteria(collectionPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: \'E\',\n            scope: {\n                filterItem: "=",\n                selectedFilterProperty: "=",\n                filterPropertiesList: "=",\n                selectedFilterPropertyChanged: "&",\n                comparisonType: "=",\n                collectionConfig: "="\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \'criteria.html\',\n            link: function (scope, element, attrs) {\n            }\n        };\n    }\n    SWCriteria.Factory = function () {\n        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteria(collectionPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            \'collectionPartialsPath\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWCriteria;\n}());\nexports.SWCriteria = SWCriteria;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteria.ts?')},"../../../org/Hibachi/client/src/collection/components/swcriteriaboolean.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriaboolean.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWCriteriaBoolean = /** @class */ (function () {\n    function SWCriteriaBoolean(collectionPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: \'E\',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \'criteriaboolean.html\',\n            link: function (scope, element, attrs) {\n                var getBooleanOptions = function (type) {\n                    if (angular.isUndefined(type)) {\n                        type = \'filter\';\n                    }\n                    var booleanOptions = [];\n                    if (type === \'filter\') {\n                        booleanOptions = [\n                            {\n                                display: "True",\n                                comparisonOperator: "=",\n                                value: "True"\n                            },\n                            {\n                                display: "False",\n                                comparisonOperator: "=",\n                                value: "False"\n                            },\n                            {\n                                display: "Defined",\n                                comparisonOperator: "is not",\n                                value: "null"\n                            },\n                            {\n                                display: "Not Defined",\n                                comparisonOperator: "is",\n                                value: "null"\n                            }\n                        ];\n                    }\n                    else if (type === \'condition\') {\n                        booleanOptions = [\n                            {\n                                display: "True",\n                                comparisonOperator: "eq",\n                                value: "True"\n                            },\n                            {\n                                display: "False",\n                                comparisonOperator: "eq",\n                                value: "False"\n                            },\n                            {\n                                display: "Defined",\n                                comparisonOperator: "null",\n                                value: "False"\n                            },\n                            {\n                                display: "Not Defined",\n                                comparisonOperator: "null",\n                                value: "True"\n                            }\n                        ];\n                    }\n                    return booleanOptions;\n                };\n                scope.conditionOptions = getBooleanOptions(scope.comparisonType);\n                angular.forEach(scope.conditionOptions, function (conditionOption) {\n                    if (conditionOption.display == scope.filterItem.conditionDisplay) {\n                        scope.selectedFilterProperty.selectedCriteriaType = conditionOption;\n                        scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;\n                        if (angular.isDefined(scope.selectedConditionChanged)) {\n                            scope.selectedConditionChanged(scope.selectedFilterProperty);\n                        }\n                    }\n                });\n            }\n        };\n    }\n    SWCriteriaBoolean.Factory = function () {\n        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaBoolean(collectionPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            \'collectionPartialsPath\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWCriteriaBoolean;\n}());\nexports.SWCriteriaBoolean = SWCriteriaBoolean;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriaboolean.ts?')},"../../../org/Hibachi/client/src/collection/components/swcriteriadate.ts":
/*!****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriadate.ts ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWCriteriaDate = /** @class */ (function () {\n    function SWCriteriaDate($log, collectionPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriadate.html',\n            link: function (scope, element, attrs) {\n                var getDateOptions = function (type) {\n                    if (angular.isUndefined(type)) {\n                        type = 'filter';\n                    }\n                    var dateOptions = [];\n                    if (type === 'filter') {\n                        dateOptions = [\n                            {\n                                display: \"Date\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'exactDate',\n                                }\n                            },\n                            {\n                                display: \"In Range\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'range'\n                                }\n                            },\n                            {\n                                display: \"Not In Range\",\n                                comparisonOperator: \"not between\",\n                                dateInfo: {\n                                    type: 'range'\n                                }\n                            },\n                            {\n                                display: \"Today\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'd',\n                                    measureCount: 0,\n                                    behavior: 'toDate'\n                                }\n                            },\n                            {\n                                display: \"Yesterday\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'd',\n                                    measureCount: -1,\n                                    behavior: 'toDate'\n                                }\n                            },\n                            {\n                                display: \"This Week\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'w',\n                                    behavior: 'toDate'\n                                }\n                            },\n                            {\n                                display: \"This Month\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'm',\n                                    behavior: 'toDate'\n                                }\n                            },\n                            {\n                                display: \"This Quarter\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'q',\n                                    behavior: 'toDate'\n                                }\n                            },\n                            {\n                                display: \"This Year\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'y',\n                                    behavior: 'toDate'\n                                }\n                            },\n                            {\n                                display: \"Last N Hour(s)\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'h',\n                                    measureTypeDisplay: 'Hours'\n                                }\n                            },\n                            {\n                                display: \"Last N Day(s)\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'd',\n                                    measureTypeDisplay: 'Days'\n                                }\n                            },\n                            {\n                                display: \"Last N Week(s)\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'w',\n                                    measureTypeDisplay: 'Weeks'\n                                }\n                            },\n                            {\n                                display: \"Last N Month(s)\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'm',\n                                    measureTypeDisplay: 'Months'\n                                }\n                            },\n                            {\n                                display: \"Last N Quarter(s)\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'q',\n                                    measureTypeDisplay: 'Quarters'\n                                }\n                            },\n                            {\n                                display: \"Last N Year(s)\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'calculation',\n                                    measureType: 'y',\n                                    measureTypeDisplay: 'Years'\n                                }\n                            },\n                            {\n                                display: \"Exact N Day(s) Ago\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'exactDate',\n                                    measureType: 'd',\n                                    measureTypeDisplay: 'Days'\n                                }\n                            },\n                            {\n                                display: \"Exact N Month(s) Ago\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'exactDate',\n                                    measureType: 'm',\n                                    measureTypeDisplay: 'Months'\n                                }\n                            },\n                            {\n                                display: \"Exact N Year(s) Ago\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'exactDate',\n                                    measureType: 'y',\n                                    measureTypeDisplay: 'Years'\n                                }\n                            },\n                            {\n                                display: \"Exact N Day(s) Ago\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'exactDate',\n                                    measureType: 'd',\n                                    measureTypeDisplay: 'Days'\n                                }\n                            },\n                            {\n                                display: \"Exact N Month(s) Ago\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'exactDate',\n                                    measureType: 'm',\n                                    measureTypeDisplay: 'Months'\n                                }\n                            },\n                            {\n                                display: \"Exact N Year(s) Ago\",\n                                comparisonOperator: \"between\",\n                                dateInfo: {\n                                    type: 'exactDate',\n                                    measureType: 'y',\n                                    measureTypeDisplay: 'Years'\n                                }\n                            },\n                            {\n                                display: \"Defined\",\n                                comparisonOperator: \"is not\",\n                                value: \"null\"\n                            },\n                            {\n                                display: \"Not Defined\",\n                                comparisonOperator: \"is\",\n                                value: \"null\"\n                            }\n                        ];\n                    }\n                    else if (type === 'condition') {\n                        dateOptions = [\n                            {\n                                display: \"Equals\",\n                                comparisonOperator: \"eq\"\n                            },\n                            {\n                                display: \"Doesn't Equal\",\n                                comparisonOperator: \"neq\"\n                            },\n                            {\n                                display: \"Defined\",\n                                comparisonOperator: \"null\",\n                                value: \"False\"\n                            },\n                            {\n                                display: \"Not Defined\",\n                                comparisonOperator: \"null\",\n                                value: \"True\"\n                            }\n                        ];\n                    }\n                    return dateOptions;\n                };\n                scope.conditionOptions = getDateOptions(scope.comparisonType);\n                scope.today = function () {\n                    if (angular.isDefined(scope.selectedFilterProperty)) {\n                        scope.selectedFilterProperty.criteriaRangeStart = new Date().getTime();\n                        scope.selectedFilterProperty.criteriaRangeEnd = new Date().getTime();\n                    }\n                };\n                scope.clear = function () {\n                    scope.selectedFilterProperty.criteriaRangeStart = null;\n                    scope.selectedFilterProperty.criteriaRangeEnd = null;\n                };\n                scope.openCalendarStart = function ($event) {\n                    $event.preventDefault();\n                    $event.stopPropagation();\n                    scope.openedCalendarStart = true;\n                };\n                scope.openCalendarEnd = function ($event) {\n                    $event.preventDefault();\n                    $event.stopPropagation();\n                    scope.openedCalendarEnd = true;\n                };\n                scope.formats = [\n                    'dd-MMMM-yyyy',\n                    'yyyy/MM/dd',\n                    'dd.MM.yyyy',\n                    'shortDate'\n                ];\n                scope.format = scope.formats[1];\n                scope.selectedConditionChanged = function (selectedFilterProperty) {\n                    $log.debug('selectedConditionChanged Begin');\n                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;\n                    //check whether condition is checking for null values in date\n                    if (angular.isDefined(selectedCondition.dateInfo)) {\n                        //is condition a calculation\n                        if (selectedCondition.dateInfo.type === 'calculation') {\n                            selectedCondition.showCriteriaStart = true;\n                            selectedCondition.showCriteriaEnd = true;\n                            selectedCondition.disableCriteriaStart = true;\n                            selectedCondition.disableCriteriaEnd = true;\n                            //if item is a calculation of an N number of measure display the measure and number input\n                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {\n                                $log.debug('Not toDate');\n                                selectedCondition.showNumberOf = true;\n                                selectedCondition.conditionDisplay = 'Number of ' + selectedCondition.dateInfo.measureTypeDisplay + ' :';\n                            }\n                            else {\n                                $log.debug('toDate');\n                                var today = Date.parse('today');\n                                var todayEOD = today.setHours(23, 59, 59, 999);\n                                selectedFilterProperty.criteriaRangeEnd = todayEOD;\n                                //get this Measure to date\n                                switch (selectedCondition.dateInfo.measureType) {\n                                    case 'd':\n                                        var dateBOD = Date.parse('today').add(selectedCondition.dateInfo.measureCount).days();\n                                        dateBOD.setHours(0, 0, 0, 0);\n                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();\n                                        break;\n                                    case 'w':\n                                        var firstDayOfWeek = Date.today().last().monday();\n                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();\n                                        break;\n                                    case 'm':\n                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();\n                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();\n                                        break;\n                                    case 'q':\n                                        var month = Date.parse('today').toString('MM');\n                                        var year = Date.parse('today').toString('yyyy');\n                                        var quarterMonth = (Math.floor(month / 3) * 3);\n                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);\n                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();\n                                        break;\n                                    case 'y':\n                                        var year = Date.parse('today').toString('yyyy');\n                                        var firstDayOfYear = new Date(year, 0, 1);\n                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();\n                                        break;\n                                }\n                            }\n                        }\n                        if (selectedCondition.dateInfo.type === 'range') {\n                            selectedCondition.showCriteriaStart = true;\n                            selectedCondition.showCriteriaEnd = true;\n                            selectedCondition.disableCriteriaStart = false;\n                            selectedCondition.disableCriteriaEnd = false;\n                            selectedCondition.showNumberOf = false;\n                        }\n                        if (selectedCondition.dateInfo.type === 'exactDate') {\n                            selectedCondition.showCriteriaStart = true;\n                            selectedCondition.showCriteriaEnd = false;\n                            selectedCondition.disableCriteriaStart = false;\n                            selectedCondition.disableCriteriaEnd = true;\n                            if (!selectedCondition.dateInfo.measureType) {\n                                selectedCondition.conditionDisplay = '';\n                                selectedCondition.showCriteriaStart = true;\n                                selectedCondition.showNumberOf = false;\n                                selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);\n                                selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);\n                            }\n                            else {\n                                selectedCondition.conditionDisplay = 'How many ' + selectedCondition.dateInfo.measureTypeDisplay + ' ago?';\n                                selectedCondition.showCriteriaStart = false;\n                                selectedCondition.showNumberOf = true;\n                            }\n                        }\n                    }\n                    else {\n                        selectedCondition.showCriteriaStart = false;\n                        selectedCondition.showCriteriaEnd = false;\n                        selectedCondition.showNumberOf = false;\n                        selectedCondition.conditionDisplay = '';\n                    }\n                    $log.debug('selectedConditionChanged End');\n                    $log.debug('selectedConditionChanged Result');\n                    $log.debug(selectedCondition);\n                    $log.debug(selectedFilterProperty);\n                };\n                scope.criteriaRangeChanged = function (selectedFilterProperty) {\n                    $log.debug('criteriaRangeChanged');\n                    $log.debug(selectedFilterProperty);\n                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;\n                    if (selectedCondition.dateInfo.type === 'calculation') {\n                        var measureCount = selectedFilterProperty.criteriaNumberOf;\n                        switch (selectedCondition.dateInfo.measureType) {\n                            case 'h':\n                                var today = Date.parse('today');\n                                selectedFilterProperty.criteriaRangeEnd = today.getTime();\n                                var todayXHoursAgo = Date.parse('today').add(-(measureCount)).hours();\n                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();\n                                break;\n                            case 'd':\n                                var lastFullDay = Date.parse('today').add(-1).days();\n                                lastFullDay.setHours(23, 59, 59, 999);\n                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();\n                                var lastXDaysAgo = Date.parse('today').add(-(measureCount)).days();\n                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();\n                                break;\n                            case 'w':\n                                var lastFullWeekEnd = Date.today().last().sunday();\n                                lastFullWeekEnd.setHours(23, 59, 59, 999);\n                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();\n                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();\n                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();\n                                break;\n                            case 'm':\n                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();\n                                lastFullMonthEnd.setHours(23, 59, 59, 999);\n                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();\n                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();\n                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();\n                                break;\n                            case 'q':\n                                var currentQuarter = Math.floor((Date.parse('today').getMonth() / 3));\n                                var firstDayOfCurrentQuarter = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);\n                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();\n                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);\n                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();\n                                var lastXQuartersAgo = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);\n                                lastXQuartersAgo.add(-(measureCount * 3)).months();\n                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();\n                                break;\n                            case 'y':\n                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();\n                                lastFullYearEnd.setHours(23, 59, 59, 999);\n                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();\n                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();\n                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();\n                                break;\n                        }\n                    }\n                    if (selectedCondition.dateInfo.type === 'exactDate' && angular.isDefined(selectedFilterProperty.criteriaRangeStart) && angular.isDefined(selectedFilterProperty.criteriaRangeStart.setHours)) {\n                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);\n                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);\n                    }\n                    if (selectedCondition.dateInfo.type === 'range') {\n                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart) && angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {\n                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);\n                        }\n                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd) && angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {\n                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);\n                        }\n                    }\n                    $log.debug('criteriaRangeChanged');\n                    $log.debug(selectedCondition);\n                    $log.debug(selectedFilterProperty);\n                };\n                if (angular.isUndefined(scope.filterItem.$$isNew) || scope.filterItem.$$isNew === false) {\n                    angular.forEach(scope.conditionOptions, function (conditionOption) {\n                        if (conditionOption.display == scope.filterItem.conditionDisplay) {\n                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;\n                            scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;\n                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo)\n                                && angular.isDefined(scope.filterItem.value)\n                                && scope.filterItem.value.length) {\n                                var dateRangeArray = scope.filterItem.value.split(\"-\");\n                                var rangeStart = new Date(parseInt(dateRangeArray[0])).toUTCString();\n                                rangeStart = rangeStart.split(' ').slice(0, 5).join(' ');\n                                var rangeEnd = new Date(parseInt(dateRangeArray[1])).toUTCString();\n                                rangeEnd = rangeEnd.split(' ').slice(0, 5).join(' ');\n                                scope.selectedFilterProperty.criteriaRangeStart = rangeStart;\n                                scope.selectedFilterProperty.criteriaRangeEnd = rangeEnd;\n                            }\n                            if (angular.isDefined(scope.selectedConditionChanged)) {\n                                scope.selectedConditionChanged(scope.selectedFilterProperty);\n                            }\n                        }\n                    });\n                }\n                else {\n                    scope.selectedFilterProperty.criteriaValue = '';\n                    scope.selectedFilterProperty.criteriaRangeStart = '';\n                    scope.selectedFilterProperty.criteriaRangeEnd = '';\n                }\n            }\n        };\n    }\n    SWCriteriaDate.Factory = function () {\n        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaDate($log, collectionPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$log',\n            'collectionPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWCriteriaDate;\n}());\nexports.SWCriteriaDate = SWCriteriaDate;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriadate.ts?")},"../../../org/Hibachi/client/src/collection/components/swcriteriamanytomany.ts":
/*!**********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriamanytomany.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWCriteriaManyToMany = /** @class */ (function () {\n    function SWCriteriaManyToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) {\n        return {\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriamanytomany.html',\n            link: function (scope, element, attrs) {\n                scope.data = {};\n                scope.collectionOptionsOpen = false;\n                scope.toggleCollectionOptions = function (flag) {\n                    scope.collectionOptionsOpen = (!angular.isUndefined(flag)) ? flag : !scope.collectionOptionsOpen;\n                };\n                scope.selectCollection = function (collection) {\n                    scope.toggleCollectionOptions();\n                    scope.selectedFilterProperty.selectedCollection = collection;\n                    scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[2];\n                };\n                scope.cleanSelection = function () {\n                    scope.toggleCollectionOptions(false);\n                    scope.data.collectionName = \"\";\n                    scope.selectedFilterProperty.selectedCollection = null;\n                };\n                var getManyToManyOptions = function (type) {\n                    if (angular.isUndefined(type)) {\n                        type = 'filter';\n                    }\n                    $log.debug('type', type);\n                    var manyToManyOptions = [];\n                    if (type == 'filter') {\n                        manyToManyOptions = [\n                            {\n                                display: \"All Exist In Collection\",\n                                comparisonOperator: \"All\"\n                            },\n                            {\n                                display: \"None Exist In Collection\",\n                                comparisonOperator: \"None\"\n                            },\n                            {\n                                display: \"Some Exist In Collection\",\n                                comparisonOperator: \"One\"\n                            },\n                            {\n                                display: \"Empty\",\n                                comparisonOperator: \"is\",\n                                value: \"null\"\n                            },\n                            {\n                                display: \"Not Empty\",\n                                comparisonOperator: \"is not\",\n                                value: \"null\"\n                            }\n                        ];\n                    }\n                    else if (type === 'condition') {\n                        manyToManyOptions = [];\n                    }\n                    return manyToManyOptions;\n                };\n                scope.manyToManyOptions = getManyToManyOptions(scope.comparisonType);\n                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(scope.selectedFilterProperty.cfc);\n                existingCollectionsPromise.then(function (value) {\n                    scope.collectionOptions = value.data;\n                    if (angular.isDefined(scope.filterItem.collectionID)) {\n                        for (var i in scope.collectionOptions) {\n                            if (scope.collectionOptions[i].collectionID === scope.filterItem.collectionID) {\n                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];\n                            }\n                        }\n                        for (var i in scope.manyToManyOptions) {\n                            if (scope.manyToManyOptions[i].comparisonOperator === scope.filterItem.criteria) {\n                                scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[i];\n                            }\n                        }\n                    }\n                });\n                function populateUI(collection) {\n                    scope.collectionOptions.push(collection);\n                    scope.selectedFilterProperty.selectedCollection = collection;\n                    scope.selectedFilterProperty.selectedCriteriaType = scope.manyToManyOptions[2];\n                }\n                observerService.attach(populateUI, 'addCollection', 'addCollection');\n                scope.selectedCriteriaChanged = function (selectedCriteria) {\n                    $log.debug(selectedCriteria);\n                    //update breadcrumbs as array of filterpropertylist keys\n                    $log.debug(scope.selectedFilterProperty);\n                    var breadCrumb = {\n                        entityAlias: scope.selectedFilterProperty.name,\n                        cfc: scope.selectedFilterProperty.cfc,\n                        propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,\n                        rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))\n                    };\n                    scope.filterItem.breadCrumbs.push(breadCrumb);\n                    //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key\n                    scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });\n                    //update criteria to display the condition of the new critera we have selected\n                };\n                scope.addNewCollection = function () {\n                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {\n                        entityName: scope.selectedFilterProperty.cfc,\n                        collectionName: scope.data.collectionName,\n                        parentEntity: scope.collectionConfig.baseEntityName\n                    });\n                    scope.cleanSelection();\n                };\n                scope.viewSelectedCollection = function () {\n                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {\n                        entityName: 'collection',\n                        entityId: scope.selectedFilterProperty.selectedCollection.collectionID,\n                        parentEntity: scope.collectionConfig.baseEntityName\n                    });\n                };\n            }\n        };\n    }\n    SWCriteriaManyToMany.Factory = function () {\n        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, dialogService, observerService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaManyToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService); };\n        directive.$inject = [\n            '$log',\n            '$hibachi',\n            'collectionPartialsPath',\n            'dialogService',\n            'observerService',\n            'hibachiPathBuilder',\n            'rbkeyService',\n        ];\n        return directive;\n    };\n    return SWCriteriaManyToMany;\n}());\nexports.SWCriteriaManyToMany = SWCriteriaManyToMany;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriamanytomany.ts?")},"../../../org/Hibachi/client/src/collection/components/swcriteriamanytoone.ts":
/*!*********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriamanytoone.ts ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWCriteriaManyToOne = /** @class */ (function () {\n    function SWCriteriaManyToOne($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService) {\n        return {\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriamanytoone.html',\n            link: function (scope, element, attrs) {\n                var getManyToOneOptions = function () {\n                    var manyToOneOptions = {\n                        drillEntity: {},\n                        hasEntity: {\n                            display: \"Defined\",\n                            comparisonOperator: \"is not\",\n                            value: \"null\"\n                        },\n                        notHasEntity: {\n                            display: \"Not Defined\",\n                            comparisonOperator: \"is\",\n                            value: \"null\"\n                        }\n                    };\n                    return manyToOneOptions;\n                };\n                scope.manyToOneOptions = getManyToOneOptions();\n                scope.conditionOptions = getManyToOneOptions();\n                $log.debug('many-to-one');\n                $log.debug(scope.selectedFilterProperty);\n                $log.debug(scope.filterPropertiesList);\n                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {\n                    if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {\n                        var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);\n                        filterPropertiesPromise.then(function (value) {\n                            scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;\n                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);\n                        }, function (reason) {\n                        });\n                    }\n                    scope.selectedCriteriaChanged = function (selectedCriteria) {\n                        $log.debug(selectedCriteria);\n                        $log.debug('changed');\n                        //update breadcrumbs as array of filterpropertylist keys\n                        $log.debug(scope.selectedFilterProperty);\n                        var breadCrumb = {\n                            entityAlias: scope.selectedFilterProperty.name,\n                            cfc: scope.selectedFilterProperty.cfc,\n                            propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,\n                            rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))\n                        };\n                        $log.debug('breadcrumb');\n                        $log.debug(breadCrumb);\n                        $log.debug(scope.filterItem.breadCrumbs);\n                        scope.filterItem.breadCrumbs.push(breadCrumb);\n                        //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key\n                        scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });\n                        //update criteria to display the condition of the new critera we have selected\n                        $log.debug(scope.selectedFilterProperty);\n                    };\n                });\n            }\n        };\n    }\n    SWCriteriaManyToOne.Factory = function () {\n        var directive = function ($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaManyToOne($log, $hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder, rbkeyService); };\n        directive.$inject = [\n            '$log',\n            '$hibachi',\n            'collectionPartialsPath',\n            'metadataService',\n            'hibachiPathBuilder',\n            'rbkeyService'\n        ];\n        return directive;\n    };\n    return SWCriteriaManyToOne;\n}());\nexports.SWCriteriaManyToOne = SWCriteriaManyToOne;\n// 'use strict';\n// angular.module('slatwalladmin')\n// .directive('swCriteriaManyToOne', [\n// \t'$log',\n// \t'$hibachi',\n// \t'$filter',\n// \t'collectionPartialsPath',\n// \t'collectionService',\n// \t'metadataService',\n// \tfunction(\n// \t\t$log,\n// \t\t$hibachi,\n// \t\t$filter,\n// \t\tcollectionPartialsPath,\n// \t\tcollectionService,\n// \t\tmetadataService\n// \t){\n// \t\treturn {\n// \t\t\trestrict: 'E',\n// \t\t\ttemplateUrl:collectionPartialsPath+'criteriamanytoone.html',\n// \t\t\tlink: function(scope, element, attrs){\n// \t\t\t\tvar getManyToOneOptions = function(){\n// \t\t\t    \tvar manyToOneOptions = {\n// \t\t\t            drillEntity:{},\n// \t\t\t\t\t\thasEntity:{\n// \t\t\t\t\t\t\tdisplay:\"Defined\",\n// \t\t\t\t\t\t\tcomparisonOperator:\"is not\",\n// \t\t\t\t\t\t\tvalue:\"null\"\n// \t\t\t\t\t\t},\n// \t\t\t\t\t\tnotHasEntity:{\n// \t\t\t\t\t\t\tdisplay:\"Not Defined\",\n// \t\t\t\t\t\t\tcomparisonOperator:\"is\",\n// \t\t\t\t\t\t\tvalue:\"null\"\n// \t\t\t\t\t\t}\n// \t\t\t    \t};\n// \t\t\t    \treturn manyToOneOptions;\n// \t\t\t    };\n// \t\t\t    scope.manyToOneOptions = getManyToOneOptions();\n// \t\t\t    scope.conditionOptions = getManyToOneOptions();\n// \t\t\t\t$log.debug('many-to-one');\n// \t\t\t\t$log.debug(scope.selectedFilterProperty);\n// \t\t\t\t$log.debug(scope.filterPropertiesList);\n// \t\t\t\tscope.$watch('selectedFilterProperty',function(selectedFilterProperty){\n// \t\t\t\t\tif(angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])){\n// \t\t\t\t\t\tvar filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);\n// \t\t\t\t\t\tfilterPropertiesPromise.then(function(value){\n// \t\t\t\t\t\t\tscope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;\n// \t\t\t\t\t\t\tmetadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier],scope.selectedFilterProperty.propertyIdentifier);\n// \t\t\t\t\t\t}, function(reason){\n// \t\t\t\t\t\t});\n// \t\t\t\t\t}\n// \t\t\t\t\tscope.selectedCriteriaChanged = function(selectedCriteria){\n// \t\t\t\t\t\t$log.debug(selectedCriteria);\n// \t\t\t\t\t\t$log.debug('changed');\n// \t\t\t\t\t\t//update breadcrumbs as array of filterpropertylist keys\n// \t\t\t\t\t\t$log.debug(scope.selectedFilterProperty);\n// \t\t\t\t\t\tvar breadCrumb = {\n// \t\t\t\t\t\t\t\tentityAlias:scope.selectedFilterProperty.name,\n// \t\t\t\t\t\t\t\tcfc:scope.selectedFilterProperty.cfc,\n// \t\t\t\t\t\t\t\tpropertyIdentifier:scope.selectedFilterProperty.propertyIdentifier,\n// \t\t\t\t\t\t\t\trbKey:rbkeyService.getRBKey('entity.'+scope.selectedFilterProperty.cfc.replace('_',''))\n// \t\t\t\t\t\t};\n// \t\t\t\t\t\t$log.debug('breadcrumb');\n// \t\t\t\t\t\t$log.debug(breadCrumb);\n// \t\t\t\t\t\t$log.debug(scope.filterItem.breadCrumbs);\n// \t\t\t\t\t\tscope.filterItem.breadCrumbs.push(breadCrumb);\n// \t\t\t\t\t\t//populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key\n// \t\t\t\t\t\tscope.selectedFilterPropertyChanged({selectedFilterProperty:scope.selectedFilterProperty.selectedCriteriaType});\n// \t\t\t\t\t\t//update criteria to display the condition of the new critera we have selected\n// \t\t\t\t\t\t$log.debug(scope.selectedFilterProperty);\n// \t\t\t\t\t};\n// \t\t\t\t});\n// \t\t\t}\n// \t\t};\n// \t}\n// ]);\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriamanytoone.ts?")},"../../../org/Hibachi/client/src/collection/components/swcriterianumber.ts":
/*!******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriterianumber.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWCriteriaNumber = /** @class */ (function () {\n    function SWCriteriaNumber(collectionPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: \'E\',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \'criterianumber.html\',\n            link: function (scope, element, attrs) {\n                var getNumberOptions = function (type) {\n                    if (angular.isUndefined(type)) {\n                        type = \'filter\';\n                    }\n                    var numberOptions = [];\n                    if (type === \'filter\') {\n                        numberOptions = [\n                            {\n                                display: "Equals",\n                                comparisonOperator: "="\n                            },\n                            {\n                                display: "Doesn\'t Equal",\n                                comparisonOperator: "<>"\n                            },\n                            {\n                                display: "In Range",\n                                comparisonOperator: "between",\n                                type: "range"\n                            },\n                            {\n                                display: "Not In Range",\n                                comparisonOperator: "not between",\n                                type: "range"\n                            },\n                            {\n                                display: "Greater Than",\n                                comparisonOperator: ">"\n                            },\n                            {\n                                display: "Greater Than Or Equal",\n                                comparisonOperator: ">="\n                            },\n                            {\n                                display: "Less Than",\n                                comparisonOperator: "<"\n                            },\n                            {\n                                display: "Less Than Or Equal",\n                                comparisonOperator: "<="\n                            },\n                            {\n                                display: "In List",\n                                comparisonOperator: "in"\n                            },\n                            {\n                                display: "Not In List",\n                                comparisonOperator: "not in"\n                            },\n                            {\n                                display: "Defined",\n                                comparisonOperator: "is not",\n                                value: "null"\n                            },\n                            {\n                                display: "Not Defined",\n                                comparisonOperator: "is",\n                                value: "null"\n                            }\n                        ];\n                    }\n                    else if (type === \'condition\') {\n                        numberOptions = [\n                            {\n                                display: "Equals",\n                                comparisonOperator: "eq"\n                            },\n                            {\n                                display: "Greater Than",\n                                comparisonOperator: "gt"\n                            },\n                            {\n                                display: "Greater Than Or Equal",\n                                comparisonOperator: "gte"\n                            },\n                            {\n                                display: "Less Than",\n                                comparisonOperator: "lt"\n                            },\n                            {\n                                display: "Less Than Or Equal",\n                                comparisonOperator: "lte"\n                            },\n                            {\n                                display: "Doesn\'t Equal",\n                                comparisonOperator: "neq"\n                            },\n                            {\n                                display: "Defined",\n                                comparisonOperator: "null",\n                                value: "False"\n                            },\n                            {\n                                display: "Not Defined",\n                                comparisonOperator: "null",\n                                value: "True"\n                            }\n                        ];\n                    }\n                    return numberOptions;\n                };\n                //initialize values\n                scope.conditionOptions = getNumberOptions(scope.comparisonType);\n                scope.inListArray = [];\n                if (angular.isDefined(scope.filterItem.value)) {\n                    scope.inListArray = scope.filterItem.value.toString().split(\',\');\n                }\n                scope.newListItem = \'\';\n                //declare functions\n                scope.addToValueInListFormat = function (inListItem) {\n                    // Adds item into array\n                    scope.inListArray.push(inListItem);\n                    //set value field to the user generated list\n                    scope.filterItem.value = scope.inListArray.toString();\n                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, \', \');\n                    scope.newListItem = \'\';\n                };\n                scope.removelistItem = function (argListIndex) {\n                    scope.inListArray.splice(argListIndex, 1);\n                    scope.filterItem.value = scope.inListArray.toString();\n                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, \', \');\n                };\n                scope.clearField = function () {\n                    scope.newListItem = \'\';\n                };\n                scope.selectedConditionChanged = function (selectedFilterProperty) {\n                    //scope.selectedFilterProperty.criteriaValue = \'\';\n                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {\n                        selectedFilterProperty.showCriteriaValue = false;\n                    }\n                    else {\n                        if (selectedFilterProperty.selectedCriteriaType.comparisonOperator === \'in\' || selectedFilterProperty.selectedCriteriaType.comparisonOperator === \'not in\') {\n                            selectedFilterProperty.showCriteriaValue = false;\n                            scope.comparisonOperatorInAndNotInFlag = true;\n                        }\n                        else {\n                            selectedFilterProperty.showCriteriaValue = true;\n                        }\n                    }\n                };\n                scope.$watch(\'filterItem.value\', function (criteriaValue) {\n                    //remove percents for like values\n                    if (angular.isDefined(scope.filterItem) && angular.isDefined(scope.filterItem.value)) {\n                        scope.filterItem.value = scope.filterItem.value.replace(\'%\', \'\');\n                    }\n                });\n                scope.$watch(\'selectedFilterProperty\', function (selectedFilterProperty) {\n                    if (angular.isDefined(selectedFilterProperty)) {\n                        angular.forEach(scope.conditionOptions, function (conditionOption) {\n                            if (conditionOption.display == scope.filterItem.conditionDisplay) {\n                                scope.selectedFilterProperty.selectedCriteriaType = conditionOption;\n                                scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;\n                                if (angular.isDefined(scope.selectedConditionChanged)) {\n                                    scope.selectedConditionChanged(scope.selectedFilterProperty);\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        };\n    }\n    SWCriteriaNumber.Factory = function () {\n        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaNumber(collectionPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            \'collectionPartialsPath\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWCriteriaNumber;\n}());\nexports.SWCriteriaNumber = SWCriteriaNumber;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriterianumber.ts?')},"../../../org/Hibachi/client/src/collection/components/swcriteriaonetomany.ts":
/*!*********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriaonetomany.ts ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWCriteriaOneToMany = /** @class */ (function () {\n    function SWCriteriaOneToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) {\n        return {\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriaonetomany.html',\n            link: function (scope, element, attrs) {\n                scope.data = {};\n                scope.collectionOptionsOpen = false;\n                scope.toggleCollectionOptions = function (flag) {\n                    scope.collectionOptionsOpen = (!angular.isUndefined(flag)) ? flag : !scope.collectionOptionsOpen;\n                };\n                scope.selectCollection = function (collection) {\n                    scope.toggleCollectionOptions();\n                    scope.selectedFilterProperty.selectedCollection = collection;\n                    scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[2];\n                };\n                scope.cleanSelection = function () {\n                    scope.toggleCollectionOptions(false);\n                    scope.data.collectionName = \"\";\n                    scope.selectedFilterProperty.selectedCollection = null;\n                };\n                var getOneToManyOptions = function (type) {\n                    if (angular.isUndefined(type)) {\n                        type = 'filter';\n                    }\n                    var oneToManyOptions = [];\n                    if (type == 'filter') {\n                        oneToManyOptions = [\n                            {\n                                display: \"All Exist In Collection\",\n                                comparisonOperator: \"All\"\n                            },\n                            {\n                                display: \"None Exist In Collection\",\n                                comparisonOperator: \"None\"\n                            },\n                            {\n                                display: \"Some Exist In Collection\",\n                                comparisonOperator: \"One\"\n                            }\n                            /*,\n                             {\n                             display:\"Empty\",\n                             comparisonOperator:\"is\",\n                             value:\"null\"\n                             },\n                             {\n                             display:\"Not Empty\",\n                             comparisonOperator:\"is not\",\n                             value:\"null\"\n                             }*/\n                        ];\n                    }\n                    else if (type === 'condition') {\n                        oneToManyOptions = [];\n                    }\n                    return oneToManyOptions;\n                };\n                $log.debug('onetomany');\n                $log.debug(scope.selectedFilterProperty);\n                scope.oneToManyOptions = getOneToManyOptions(scope.comparisonType);\n                var existingCollectionsPromise = $hibachi.getExistingCollectionsByBaseEntity(scope.selectedFilterProperty.cfc);\n                existingCollectionsPromise.then(function (value) {\n                    scope.collectionOptions = value.data;\n                    if (angular.isDefined(scope.filterItem.collectionID)) {\n                        for (var i in scope.collectionOptions) {\n                            if (scope.collectionOptions[i].collectionID === scope.filterItem.collectionID) {\n                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];\n                            }\n                        }\n                        for (var i in scope.oneToManyOptions) {\n                            if (scope.oneToManyOptions[i].comparisonOperator === scope.filterItem.criteria) {\n                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];\n                            }\n                        }\n                    }\n                });\n                function populateUI(collection) {\n                    scope.collectionOptions.push(collection);\n                    scope.selectedFilterProperty.selectedCollection = collection;\n                    scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[2];\n                }\n                observerService.attach(populateUI, 'addCollection', 'addCollection');\n                scope.selectedCriteriaChanged = function (selectedCriteria) {\n                    $log.debug(selectedCriteria);\n                    //update breadcrumbs as array of filterpropertylist keys\n                    $log.debug(scope.selectedFilterProperty);\n                    var breadCrumb = {\n                        entityAlias: scope.selectedFilterProperty.name,\n                        cfc: scope.selectedFilterProperty.cfc,\n                        propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,\n                        rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', '')),\n                        filterProperty: scope.selectedFilterProperty\n                    };\n                    scope.filterItem.breadCrumbs.push(breadCrumb);\n                    $log.debug('criteriaChanged');\n                    //$log.debug(selectedFilterPropertyChanged);\n                    $log.debug(scope.selectedFilterProperty);\n                    //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key\n                    scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });\n                    //update criteria to display the condition of the new critera we have selected\n                };\n                scope.addNewCollection = function () {\n                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {\n                        entityName: scope.selectedFilterProperty.cfc,\n                        collectionName: scope.data.collectionName,\n                        parentEntity: scope.collectionConfig.baseEntityName\n                    });\n                    scope.cleanSelection();\n                };\n                scope.viewSelectedCollection = function () {\n                    scope.toggleCollectionOptions();\n                    dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {\n                        entityName: 'collection',\n                        entityId: scope.selectedFilterProperty.selectedCollection.collectionID,\n                        parentEntity: scope.collectionConfig.baseEntityName\n                    });\n                };\n            }\n        };\n    }\n    SWCriteriaOneToMany.Factory = function () {\n        var directive = function ($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaOneToMany($log, $hibachi, collectionPartialsPath, dialogService, observerService, hibachiPathBuilder, rbkeyService); };\n        directive.$inject = [\n            '$log',\n            '$hibachi',\n            'collectionPartialsPath',\n            'dialogService',\n            'observerService',\n            'hibachiPathBuilder',\n            'rbkeyService'\n        ];\n        return directive;\n    };\n    return SWCriteriaOneToMany;\n}());\nexports.SWCriteriaOneToMany = SWCriteriaOneToMany;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriaonetomany.ts?")},"../../../org/Hibachi/client/src/collection/components/swcriteriarelatedobject.ts":
/*!*************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriarelatedobject.ts ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWCriteriaRelatedObject = /** @class */ (function () {\n    function SWCriteriaRelatedObject($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) {\n        return {\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'criteriarelatedobject.html',\n            link: function (scope, element, attrs) {\n                var getRelatedObjectOptions = function () {\n                    var relatedObjectOptions = {\n                        drillEntity: null,\n                        hasEntity: {\n                            display: \"Defined\",\n                            comparisonOperator: \"is not\",\n                            value: \"null\"\n                        },\n                        notHasEntity: {\n                            display: \"Not Defined\",\n                            comparisonOperator: \"is\",\n                            value: \"null\"\n                        },\n                        aggregate: {\n                            aggregate: \"\"\n                        }\n                    };\n                    return relatedObjectOptions;\n                };\n                scope.aggregate = {};\n                scope.aggregate.selectedAggregate = '';\n                scope.aggregateOptions = ['Average', 'Count', 'Sum', 'Min', 'Max'];\n                scope.selectAggregate = function (aggregate) {\n                    scope.selectedFilterProperty.selectedCriteriaType.aggregate = aggregate;\n                };\n                scope.relatedObjectOptions = getRelatedObjectOptions();\n                scope.conditionOptions = getRelatedObjectOptions();\n                $log.debug('many-to-one');\n                $log.debug(scope.selectedFilterProperty);\n                $log.debug(scope.filterPropertiesList);\n                scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {\n                    if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {\n                        var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedFilterProperty.cfc);\n                        filterPropertiesPromise.then(function (value) {\n                            scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;\n                            metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);\n                        }, function (reason) {\n                        });\n                    }\n                    scope.selectedCriteriaChanged = function (selectedCriteria, selectedAggregate) {\n                        var breadCrumb = {\n                            entityAlias: scope.selectedFilterProperty.name,\n                            cfc: scope.selectedFilterProperty.cfc,\n                            propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier,\n                            rbKey: rbkeyService.getRBKey('entity.' + scope.selectedFilterProperty.cfc.replace('_', ''))\n                        };\n                        $log.debug('breadcrumb');\n                        $log.debug(breadCrumb);\n                        $log.debug(scope.filterItem.breadCrumbs);\n                        scope.filterItem.breadCrumbs.push(breadCrumb);\n                        if (selectedAggregate) {\n                            scope.selectedFilterProperty.selectedCriteriaType.ormtype = 'integer';\n                            scope.selectedFilterProperty.selectedCriteriaType.aggregate = selectedAggregate;\n                        }\n                        //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key\n                        scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });\n                        //update criteria to display the condition of the new critera we have selected\n                        $log.debug(scope.selectedFilterProperty);\n                    };\n                });\n            }\n        };\n    }\n    SWCriteriaRelatedObject.Factory = function () {\n        var directive = function ($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService) { return new SWCriteriaRelatedObject($log, $hibachi, $filter, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService); };\n        directive.$inject = [\n            '$log',\n            '$hibachi',\n            '$filter',\n            'collectionPartialsPath',\n            'collectionService',\n            'metadataService',\n            'hibachiPathBuilder',\n            'rbkeyService'\n        ];\n        return directive;\n    };\n    return SWCriteriaRelatedObject;\n}());\nexports.SWCriteriaRelatedObject = SWCriteriaRelatedObject;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriarelatedobject.ts?")},"../../../org/Hibachi/client/src/collection/components/swcriteriastring.ts":
/*!******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriastring.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWCriteriaString = /** @class */ (function () {\n    function SWCriteriaString(collectionPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: \'E\',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \'criteriastring.html\',\n            link: function (scope, element, attrs) {\n                var getStringOptions = function (type) {\n                    if (angular.isUndefined(type)) {\n                        type = \'filter\';\n                    }\n                    var stringOptions = [];\n                    if (type === \'filter\') {\n                        stringOptions = [\n                            {\n                                display: "Equals",\n                                comparisonOperator: "="\n                            },\n                            {\n                                display: "Doesn\'t Equal",\n                                comparisonOperator: "<>"\n                            },\n                            {\n                                display: "Contains",\n                                comparisonOperator: "like",\n                                pattern: "%w%"\n                            },\n                            {\n                                display: "Doesn\'t Contain",\n                                comparisonOperator: "not like",\n                                pattern: "%w%"\n                            },\n                            {\n                                display: "Starts With",\n                                comparisonOperator: "like",\n                                pattern: "w%"\n                            },\n                            {\n                                display: "Doesn\'t Start With",\n                                comparisonOperator: "not like",\n                                pattern: "w%"\n                            },\n                            {\n                                display: "Ends With",\n                                comparisonOperator: "like",\n                                pattern: "%w"\n                            },\n                            {\n                                display: "Doesn\'t End With",\n                                comparisonOperator: "not like",\n                                pattern: "%w"\n                            },\n                            {\n                                display: "In List",\n                                comparisonOperator: "in"\n                            },\n                            {\n                                display: "Not In List",\n                                comparisonOperator: "not in"\n                            },\n                            {\n                                display: "Defined",\n                                comparisonOperator: "is not",\n                                value: "null"\n                            },\n                            {\n                                display: "Not Defined",\n                                comparisonOperator: "is",\n                                value: "null"\n                            }\n                        ];\n                    }\n                    else if (type === \'condition\') {\n                        stringOptions = [\n                            {\n                                display: "Equals",\n                                comparisonOperator: "eq"\n                            },\n                            {\n                                display: "Doesn\'t Equal",\n                                comparisonOperator: "neq"\n                            },\n                            {\n                                display: "Defined",\n                                comparisonOperator: "null",\n                                value: "False"\n                            },\n                            {\n                                display: "Not Defined",\n                                comparisonOperator: "null",\n                                value: "True"\n                            }\n                        ];\n                    }\n                    return stringOptions;\n                };\n                //initialize values\n                scope.conditionOptions = getStringOptions(scope.comparisonType);\n                scope.inListArray = [];\n                if (angular.isDefined(scope.filterItem.value)) {\n                    scope.inListArray = scope.filterItem.value.toString().split(\',\');\n                }\n                scope.newListItem = \'\';\n                //declare functions\n                scope.addToValueInListFormat = function (inListItem) {\n                    // Adds item into array\n                    scope.inListArray.push(inListItem);\n                    //set value field to the user generated list\n                    scope.filterItem.value = scope.inListArray.toString();\n                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, \', \');\n                    scope.newListItem = \'\';\n                };\n                scope.removelistItem = function (argListIndex) {\n                    scope.inListArray.splice(argListIndex, 1);\n                    scope.filterItem.value = scope.inListArray.toString();\n                    scope.filterItem.displayValue = scope.inListArray.toString().replace(/,/g, \', \');\n                };\n                scope.clearField = function () {\n                    scope.newListItem = \'\';\n                };\n                scope.selectedConditionChanged = function (selectedFilterProperty) {\n                    //scope.selectedFilterProperty.criteriaValue = \'\';\n                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {\n                        selectedFilterProperty.showCriteriaValue = false;\n                    }\n                    else {\n                        if (selectedFilterProperty.selectedCriteriaType.comparisonOperator === \'in\' || selectedFilterProperty.selectedCriteriaType.comparisonOperator === \'not in\') {\n                            selectedFilterProperty.showCriteriaValue = false;\n                            scope.comparisonOperatorInAndNotInFlag = true;\n                        }\n                        else {\n                            selectedFilterProperty.showCriteriaValue = true;\n                        }\n                    }\n                };\n                scope.$watch(\'filterItem.value\', function (criteriaValue) {\n                    //remove percents for like values\n                    if (angular.isDefined(scope.filterItem) && angular.isDefined(scope.filterItem.value)) {\n                        scope.filterItem.value = scope.filterItem.value.replace(\'%\', \'\');\n                    }\n                });\n                scope.$watch(\'selectedFilterProperty\', function (selectedFilterProperty) {\n                    if (angular.isDefined(selectedFilterProperty)) {\n                        angular.forEach(scope.conditionOptions, function (conditionOption) {\n                            if (conditionOption.display == scope.filterItem.conditionDisplay) {\n                                scope.selectedFilterProperty.selectedCriteriaType = conditionOption;\n                                scope.selectedFilterProperty.criteriaValue = scope.filterItem.value;\n                                if (angular.isDefined(scope.selectedConditionChanged)) {\n                                    scope.selectedConditionChanged(scope.selectedFilterProperty);\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        };\n    }\n    SWCriteriaString.Factory = function () {\n        var directive = function (collectionPartialsPath, hibachiPathBuilder) { return new SWCriteriaString(collectionPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            \'collectionPartialsPath\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWCriteriaString;\n}());\nexports.SWCriteriaString = SWCriteriaString;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swcriteriastring.ts?')},"../../../org/Hibachi/client/src/collection/components/swdisplayitem.ts":
/*!***************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swdisplayitem.ts ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWDisplayItem = /** @class */ (function () {\n    //@ngInject\n    function SWDisplayItem($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) {\n        return {\n            require: '?^swDisplayOptions',\n            restrict: 'A',\n            scope: {\n                selectedProperty: \"=\",\n                propertiesList: \"=\",\n                breadCrumbs: \"=\",\n                selectedPropertyChanged: \"&\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \"displayitem.html\",\n            link: function (scope, element, attrs, displayOptionsController) {\n                scope.showDisplayItem = false;\n                scope.selectedDisplayOptionChanged = function (selectedDisplayOption) {\n                    var breadCrumb = {\n                        entityAlias: scope.selectedProperty.name,\n                        cfc: scope.selectedProperty.cfc,\n                        propertyIdentifier: scope.selectedProperty.propertyIdentifier\n                    };\n                    scope.breadCrumbs.push(breadCrumb);\n                    scope.selectedPropertyChanged({ selectedProperty: selectedDisplayOption });\n                };\n                scope.$watch('selectedProperty', function (selectedProperty) {\n                    if (angular.isDefined(selectedProperty)) {\n                        if (angular.isUndefined(scope.propertiesList[selectedProperty.propertyIdentifier])) {\n                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedProperty.cfc);\n                            filterPropertiesPromise.then(function (value) {\n                                metadataService.setPropertiesList(value, selectedProperty.propertyIdentifier);\n                                scope.propertiesList[selectedProperty.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(selectedProperty.propertyIdentifier);\n                                metadataService.formatPropertiesList(scope.propertiesList[selectedProperty.propertyIdentifier], selectedProperty.propertyIdentifier);\n                            }, function (reason) {\n                            });\n                        }\n                    }\n                });\n            }\n        };\n    }\n    SWDisplayItem.Factory = function () {\n        var directive = function ($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWDisplayItem($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder); };\n        directive.$inject = [\n            '$hibachi',\n            'collectionPartialsPath',\n            'metadataService',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWDisplayItem;\n}());\nexports.SWDisplayItem = SWDisplayItem;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swdisplayitem.ts?")},"../../../org/Hibachi/client/src/collection/components/swdisplayitemaggregate.ts":
/*!************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swdisplayitemaggregate.ts ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWDisplayItemAggregate = /** @class */ (function () {\n    //@ngInject\n    function SWDisplayItemAggregate($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) {\n        return {\n            require: '^swDisplayOptions',\n            restrict: 'A',\n            scope: {\n                selectedProperty: \"=\",\n                propertiesList: \"=\",\n                breadCrumbs: \"=\",\n                selectedPropertyChanged: \"&\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \"displayitemaggregate.html\",\n            link: function (scope, element, attrs, displayOptionsController) {\n                scope.showDisplayItem = false;\n                scope.aggregate = {};\n                scope.aggregate.selectedAggregate = '';\n                scope.aggregateOptions = [\n                    { id: 'average', value: 'Average' },\n                    { id: 'count', value: 'Count' },\n                    { id: 'sum', value: 'Sum' },\n                    { id: 'min', value: 'Min' },\n                    { id: 'max', value: 'Max' }\n                ];\n                scope.selectAggregate = function (aggregate) {\n                    if (aggregate == 'count' || scope.selectedProperty.ormtype) {\n                        scope.selectedProperty.aggregate = aggregate;\n                        scope.selectedPropertyChanged({ selectedProperty: scope.selectedProperty });\n                    }\n                    else {\n                        scope.aggregate.currentObject = scope.selectedProperty.cfc;\n                    }\n                };\n                scope.selectedDisplayOptionChanged = function (selectedDisplayOption) {\n                    selectedDisplayOption.aggregate = scope.aggregate.selectedAggregate;\n                    selectedDisplayOption.aggregateObject = scope.aggregate.currentObject;\n                    scope.selectedPropertyChanged({ selectedProperty: selectedDisplayOption });\n                };\n                scope.$watch('selectedProperty', function (selectedProperty) {\n                    if (angular.isDefined(selectedProperty) && !selectedProperty.ormtype) {\n                        if (angular.isUndefined(scope.propertiesList[selectedProperty.propertyIdentifier])) {\n                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(selectedProperty.cfc);\n                            filterPropertiesPromise.then(function (value) {\n                                metadataService.setPropertiesList(value, selectedProperty.propertyIdentifier);\n                                scope.propertiesList[selectedProperty.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(selectedProperty.propertyIdentifier);\n                                metadataService.formatPropertiesList(scope.propertiesList[selectedProperty.propertyIdentifier], selectedProperty.propertyIdentifier);\n                            }, function (reason) {\n                            });\n                        }\n                        scope.showDisplayItem = true;\n                    }\n                });\n            }\n        };\n    }\n    SWDisplayItemAggregate.Factory = function () {\n        var directive = function ($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder) { return new SWDisplayItemAggregate($hibachi, collectionPartialsPath, metadataService, hibachiPathBuilder); };\n        directive.$inject = [\n            '$hibachi',\n            'collectionPartialsPath',\n            'metadataService',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWDisplayItemAggregate;\n}());\nexports.SWDisplayItemAggregate = SWDisplayItemAggregate;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swdisplayitemaggregate.ts?")},"../../../org/Hibachi/client/src/collection/components/swdisplayoptions.ts":
/*!******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swdisplayoptions.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWDisplayOptions = /** @class */ (function () {\n    //@ngInject\n    function SWDisplayOptions($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService) {\n        return {\n            restrict: 'E',\n            require: {\n                swListingDisplay: \"?^swListingDisplay\",\n                swListingControls: \"?^swListingControls\"\n            },\n            transclude: true,\n            scope: {\n                orderBy: \"<\",\n                columns: '=',\n                joins: \"<\",\n                groupBys: \"<\",\n                propertiesList: \"<\",\n                saveCollection: \"&?\",\n                baseEntityAlias: \"<?\",\n                baseEntityName: \"<?\",\n                listingName: \"@?\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \"displayoptions.html\",\n            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n                    this.removeColumn = function (columnIndex) {\n                        if ($scope.columns.length) {\n                            $scope.columns.splice(columnIndex, 1);\n                        }\n                    };\n                }],\n            link: function (scope, element, $attrs, controllers, observerService) {\n                scope.breadCrumbs = [{\n                        entityAlias: scope.baseEntityAlias,\n                        cfc: scope.baseEntityAlias,\n                        propertyIdentifier: scope.baseEntityAlias\n                    }];\n                scope.getPropertiesList = function () {\n                    return scope.propertiesList;\n                };\n                scope.addDisplayDialog = {\n                    isOpen: false,\n                    toggleDisplayDialog: function () {\n                        scope.addDisplayDialog.isOpen = !scope.addDisplayDialog.isOpen;\n                    }\n                };\n                var getTitleFromProperty = function (selectedProperty) {\n                    var baseEntityCfcName = scope.baseEntityName.replace('Slatwall', '').charAt(0).toLowerCase() + scope.baseEntityName.replace('Slatwall', '').slice(1);\n                    var propertyIdentifier = selectedProperty.propertyIdentifier;\n                    var title = '';\n                    var propertyIdentifierArray = propertyIdentifier.replace(/^_/, '').split(/[._]+/);\n                    var actualPropertyIdentifier = propertyIdentifierArray.slice(1, propertyIdentifierArray.length).join('.');\n                    var currentEntity;\n                    var currentEntityInstance;\n                    var prefix = 'entity.';\n                    if (selectedProperty.$$group == \"attribute\") {\n                        return selectedProperty.displayPropertyIdentifier;\n                    }\n                    //if is aggregate of an object\n                    if (selectedProperty.aggregate && selectedProperty.cfc) {\n                        var lastEntityName = $hibachi.getLastEntityNameInPropertyIdentifier(baseEntityCfcName, actualPropertyIdentifier);\n                        title = rbkeyService.getRBKey(prefix + lastEntityName + '_plural');\n                        return title;\n                    }\n                    angular.forEach(propertyIdentifierArray, function (propertyIdentifierItem, key) {\n                        //pass over the initial item\n                        if (key !== 0) {\n                            if (key === 1) {\n                                currentEntityInstance = $hibachi['new' + scope.baseEntityName.replace('Slatwall', '')]();\n                                currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];\n                                title += rbkeyService.getRBKey(prefix + baseEntityCfcName + '.' + propertyIdentifierItem);\n                            }\n                            else {\n                                var currentEntityInstance = $hibachi['new' + currentEntity.cfc.charAt(0).toUpperCase() + currentEntity.cfc.slice(1)]();\n                                currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];\n                                title += rbkeyService.getRBKey(prefix + currentEntityInstance.metaData.className + '.' + currentEntity.name);\n                            }\n                            if (key < propertyIdentifierArray.length - 1) {\n                                title += ' | ';\n                            }\n                        }\n                    });\n                    return title;\n                };\n                scope.addColumn = function (closeDialog) {\n                    var selectedProperty = scope.selectedProperty;\n                    if (angular.isDefined(scope.selectedAggregate)) {\n                        selectedProperty = scope.selectedAggregate;\n                    }\n                    if (selectedProperty.$$group === 'simple' || 'attribute' || 'compareCollections') {\n                        $log.debug(scope.columns);\n                        if (angular.isDefined(selectedProperty)) {\n                            var column = {\n                                title: getTitleFromProperty(selectedProperty),\n                                propertyIdentifier: selectedProperty.propertyIdentifier,\n                                isVisible: true,\n                                isDeletable: true,\n                                isSearchable: true,\n                                isExportable: true\n                            };\n                            //only add attributeid if the selectedProperty is attributeid\n                            if (angular.isDefined(selectedProperty.attributeID)) {\n                                column['attributeID'] = selectedProperty.attributeID;\n                                column['attributeSetObject'] = selectedProperty.attributeSetObject;\n                            }\n                            if (angular.isDefined(selectedProperty.ormtype)) {\n                                column['ormtype'] = selectedProperty.ormtype;\n                            }\n                            if ((!column['type'] || column['type'] == 'none') && selectedProperty.hb_formattype) {\n                                column['type'] = selectedProperty.hb_formattype;\n                            }\n                            else {\n                                column['type'] = 'none';\n                            }\n                            if (angular.isDefined(selectedProperty.aggregate)) {\n                                column['ormtype'] = 'string';\n                                column['aggregate'] = {\n                                    aggregateFunction: selectedProperty.aggregate.toUpperCase(),\n                                    aggregateAlias: selectedProperty.propertyIdentifier.split(/[._]+/).pop() + selectedProperty.aggregate.charAt(0).toUpperCase() + selectedProperty.aggregate.slice(1)\n                                };\n                                column['title'] += ' ' + rbkeyService.getRBKey('define.' + column['aggregate']['aggregateFunction']);\n                            }\n                            scope.columns.push(column);\n                            if ((selectedProperty.propertyIdentifier.match(/_/g) || []).length > 1) {\n                                var PIlimit = selectedProperty.propertyIdentifier.length;\n                                if (selectedProperty.propertyIdentifier.indexOf('.') != -1) {\n                                    PIlimit = selectedProperty.propertyIdentifier.indexOf('.');\n                                }\n                                var propertyIdentifierJoins = selectedProperty.propertyIdentifier.substring(1, PIlimit);\n                                var propertyIdentifierParts = propertyIdentifierJoins.split('_');\n                                var current_collection = $hibachi.getEntityExample(scope.baseEntityName);\n                                var _propertyIdentifier = '';\n                                var joins = [];\n                                if (angular.isDefined(scope.joins)) {\n                                    joins = scope.joins;\n                                }\n                                for (var i = 1; i < propertyIdentifierParts.length; i++) {\n                                    if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {\n                                        current_collection = $hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);\n                                        _propertyIdentifier += '_' + propertyIdentifierParts[i];\n                                        var newJoin = {\n                                            associationName: _propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1),\n                                            alias: '_' + propertyIdentifierParts[0] + _propertyIdentifier\n                                        };\n                                        var joinFound = false;\n                                        for (var j = 0; j < joins.length; j++) {\n                                            if (joins[j].alias === newJoin.alias) {\n                                                joinFound = true;\n                                                break;\n                                            }\n                                        }\n                                        if (!joinFound) {\n                                            joins.push(newJoin);\n                                        }\n                                    }\n                                }\n                                scope.joins = joins;\n                                if (angular.isUndefined(scope.groupBys) || scope.groupBys.split(',').length != scope.columns.length) {\n                                    var groupbyArray = angular.isUndefined(scope.groupBys) ? [] : scope.groupBys.split(',');\n                                    for (var col = 0; col < scope.columns.length; col++) {\n                                        if ('attributeID' in scope.columns[col])\n                                            continue;\n                                        if (groupbyArray.indexOf(scope.columns[col].propertyIdentifier) == -1) {\n                                            groupbyArray.push(scope.columns[col].propertyIdentifier);\n                                        }\n                                    }\n                                    scope.groupBys = groupbyArray.join(',');\n                                }\n                            }\n                            if (controllers.swListingControls) {\n                                controllers.swListingControls.columnIsControllableMap[column.propertyIdentifier] = true;\n                            }\n                            scope.saveCollection();\n                            if (angular.isDefined(closeDialog) && closeDialog === true) {\n                                scope.addDisplayDialog.toggleDisplayDialog();\n                                scope.selectBreadCrumb(0);\n                            }\n                        }\n                    }\n                };\n                scope.selectBreadCrumb = function (breadCrumbIndex) {\n                    //splice out array items above index\n                    var removeCount = scope.breadCrumbs.length - 1 - breadCrumbIndex;\n                    scope.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);\n                    scope.selectedPropertyChanged(null);\n                };\n                var unbindBaseEntityAlias = scope.$watch('baseEntityAlias', function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        scope.breadCrumbs = [{\n                                entityAlias: scope.baseEntityAlias,\n                                cfc: scope.baseEntityAlias,\n                                propertyIdentifier: scope.baseEntityAlias\n                            }];\n                        unbindBaseEntityAlias();\n                    }\n                });\n                scope.selectedPropertyChanged = function (selectedProperty, aggregate) {\n                    // drill down or select field?\n                    if (!aggregate) {\n                        scope.selectedProperty = selectedProperty;\n                        scope.selectedAggregate = undefined;\n                    }\n                    else {\n                        scope.selectedAggregate = selectedProperty;\n                    }\n                };\n                jQuery(function ($) {\n                    var panelList = angular.element(element).children('ul');\n                    panelList.sortable({\n                        // Only make the .panel-heading child elements support dragging.\n                        // Omit this to make then entire <li>...</li> draggable.\n                        handle: '.s-pannel-name',\n                        update: function (event, ui) {\n                            var tempColumnsArray = [];\n                            $('.s-pannel-name', panelList).each(function (index, elem) {\n                                var newIndex = $(elem).attr('j-column-index');\n                                var columnItem = scope.columns[newIndex];\n                                tempColumnsArray.push(columnItem);\n                            });\n                            scope.columns = tempColumnsArray;\n                            scope.saveCollection();\n                        }\n                    });\n                });\n                if (!scope.saveCollection && controllers.swListingControls) {\n                    scope.saveCollection = function () {\n                        controllers.swListingControls.collectionConfig.columns = scope.columns;\n                        if (controllers.swListingDisplay) {\n                            controllers.swListingDisplay.columns = scope.columns;\n                        }\n                        controllers.swListingControls.saveCollection();\n                    };\n                }\n                if (controllers.swListingDisplay) {\n                    scope.getCollection = controllers.swListingDisplay.getCollection;\n                }\n                /*var unbindBaseEntityAlaisWatchListener = scope.$watch('baseEntityAlias',function(){\n                 $(\"select\").selectBoxIt();\n                 unbindBaseEntityAlaisWatchListener();\n                 });*/\n            }\n        };\n    }\n    SWDisplayOptions.Factory = function () {\n        var directive = function ($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService) { return new SWDisplayOptions($log, $hibachi, hibachiPathBuilder, collectionPartialsPath, rbkeyService); };\n        directive.$inject = [\n            '$log',\n            '$hibachi',\n            'hibachiPathBuilder',\n            'collectionPartialsPath',\n            'rbkeyService'\n        ];\n        return directive;\n    };\n    return SWDisplayOptions;\n}());\nexports.SWDisplayOptions = SWDisplayOptions;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swdisplayoptions.ts?")},"../../../org/Hibachi/client/src/collection/components/sweditfilteritem.ts":
/*!******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/sweditfilteritem.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWEditFilterItem = /** @class */ (function () {\n    function SWEditFilterItem($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService) {\n        return {\n            require: {\n                swFilterGroups: '^swFilterGroups',\n                swListingControls: '?^swListingControls'\n            },\n            restrict: 'E',\n            scope: {\n                collectionConfig: \"=\",\n                filterItem: \"=\",\n                filterPropertiesList: \"=\",\n                saveCollection: \"&?\",\n                removeFilterItem: \"&\",\n                filterItemIndex: \"=\",\n                comparisonType: \"=\",\n                simple: \"=\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \"editfilteritem.html\",\n            link: function (scope, element, attrs, filterGroupsController) {\n                if (!scope.saveCollection && filterGroupsController.swListingControls) {\n                    scope.saveCollection = function () {\n                        filterGroupsController.swListingControls.collectionConfig = scope.collectionConfig;\n                        filterGroupsController.swListingControls.saveCollection();\n                    };\n                }\n                function daysBetween(first, second) {\n                    // Copy date parts of the timestamps, discarding the time parts.\n                    var one = new Date(first.getFullYear(), first.getMonth(), first.getDate());\n                    var two = new Date(second.getFullYear(), second.getMonth(), second.getDate());\n                    // Do the math.\n                    var millisecondsPerDay = 1000 * 60 * 60 * 24;\n                    var millisBetween = two.getTime() - one.getTime();\n                    var days = millisBetween / millisecondsPerDay;\n                    // Round down.\n                    return Math.floor(days);\n                }\n                if (angular.isUndefined(scope.filterItem.breadCrumbs)) {\n                    scope.filterItem.breadCrumbs = [];\n                    if (scope.filterItem.propertyIdentifier === \"\") {\n                        scope.filterItem.breadCrumbs = [\n                            {\n                                rbKey: rbkeyService.getRBKey('entity.' + scope.collectionConfig.baseEntityAlias.replace('_', '')),\n                                entityAlias: scope.collectionConfig.baseEntityAlias,\n                                cfc: scope.collectionConfig.baseEntityName,\n                                propertyIdentifier: scope.collectionConfig.baseEntityAlias\n                            }\n                        ];\n                    }\n                    else {\n                        var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');\n                        entityAliasArrayFromString.pop();\n                        for (var i in entityAliasArrayFromString) {\n                            var breadCrumb = {\n                                rbKey: rbkeyService.getRBKey('entity.' + scope.collectionConfig.baseEntityAlias.replace('_', '')),\n                                entityAlias: entityAliasArrayFromString[i],\n                                cfc: entityAliasArrayFromString[i],\n                                propertyIdentifier: entityAliasArrayFromString[i]\n                            };\n                            scope.filterItem.breadCrumbs.push(breadCrumb);\n                        }\n                    }\n                }\n                else {\n                    angular.forEach(scope.filterItem.breadCrumbs, function (breadCrumb, key) {\n                        if (angular.isUndefined(scope.filterPropertiesList[breadCrumb.propertyIdentifier])) {\n                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(breadCrumb.cfc);\n                            filterPropertiesPromise.then(function (value) {\n                                metadataService.setPropertiesList(value, breadCrumb.propertyIdentifier);\n                                scope.filterPropertiesList[breadCrumb.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(breadCrumb.propertyIdentifier);\n                                metadataService.formatPropertiesList(scope.filterPropertiesList[breadCrumb.propertyIdentifier], breadCrumb.propertyIdentifier);\n                                var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');\n                                entityAliasArrayFromString.pop();\n                                entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();\n                                if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {\n                                    for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {\n                                        var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];\n                                        if (filterProperty.propertyIdentifier === scope.filterItem.propertyIdentifier) {\n                                            //selectItem from drop down\n                                            scope.selectedFilterProperty = filterProperty;\n                                            //decorate with value and comparison Operator so we can use it in the Condition section\n                                            scope.selectedFilterProperty.value = scope.filterItem.value;\n                                            scope.selectedFilterProperty.comparisonOperator = scope.filterItem.comparisonOperator;\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                        else {\n                            var entityAliasArrayFromString = scope.filterItem.propertyIdentifier.split('.');\n                            entityAliasArrayFromString.pop();\n                            entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();\n                            if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {\n                                for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {\n                                    var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];\n                                    if (filterProperty.propertyIdentifier === scope.filterItem.propertyIdentifier) {\n                                        //selectItem from drop down\n                                        scope.selectedFilterProperty = filterProperty;\n                                        //decorate with value and comparison Operator so we can use it in the Condition section\n                                        scope.selectedFilterProperty.value = scope.filterItem.value;\n                                        scope.selectedFilterProperty.comparisonOperator = scope.filterItem.comparisonOperator;\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n                if (angular.isUndefined(scope.filterItem.$$isClosed)) {\n                    scope.filterItem.$$isClosed = true;\n                }\n                scope.filterGroupItem = filterGroupsController.swFilterGroups.getFilterGroupItem();\n                scope.togglePrepareForFilterGroup = function () {\n                    scope.filterItem.$$prepareForFilterGroup = !scope.filterItem.$$prepareForFilterGroup;\n                };\n                //public functions\n                scope.selectBreadCrumb = function (breadCrumbIndex) {\n                    //splice out array items above index\n                    var removeCount = scope.filterItem.breadCrumbs.length - 1 - breadCrumbIndex;\n                    scope.filterItem.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);\n                    $log.debug('selectBreadCrumb');\n                    $log.debug(scope.selectedFilterProperty);\n                    //scope.selectedFilterPropertyChanged(scope.filterItem.breadCrumbs[scope.filterItem.breadCrumbs.length -1].filterProperty);\n                    scope.selectedFilterPropertyChanged(null);\n                };\n                scope.selectedFilterPropertyChanged = function (selectedFilterProperty) {\n                    $log.debug('selectedFilterProperty');\n                    $log.debug(selectedFilterProperty);\n                    if (angular.isDefined(scope.selectedFilterProperty) && scope.selectedFilterProperty === null) {\n                        scope.selectedFilterProperty = {};\n                    }\n                    if (angular.isDefined(scope.selectedFilterProperty) && angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType)) {\n                        delete scope.selectedFilterProperty.selectedCriteriaType;\n                    }\n                    if (angular.isDefined(scope.filterItem.value)) {\n                        delete scope.filterItem.value;\n                    }\n                    scope.selectedFilterProperty.showCriteriaValue = false;\n                    scope.selectedFilterProperty = selectedFilterProperty;\n                };\n                scope.addFilterItem = function () {\n                    collectionService.newFilterItem(filterGroupsController.swFilterGroups.getFilterGroupItem(), filterGroupsController.swFilterGroups.setItemInUse);\n                    this.observerService.notify('collectionConfigUpdated', {\n                        collectionConfig: collectionService\n                    });\n                };\n                scope.cancelFilterItem = function () {\n                    $log.debug('cancelFilterItem');\n                    $log.debug(scope.filterItemIndex);\n                    //scope.deselectItems(scope.filterGroupItem[filterItemIndex]);\n                    scope.filterItem.setItemInUse(false);\n                    scope.filterItem.$$isClosed = true;\n                    for (var siblingIndex in scope.filterItem.$$siblingItems) {\n                        scope.filterItem.$$siblingItems[siblingIndex].$$disabled = false;\n                    }\n                    if (scope.filterItem.$$isNew === true) {\n                        observerService.notify('filterItemAction', { action: 'remove', filterItemIndex: scope.filterItemIndex });\n                        scope.removeFilterItem({ filterItemIndex: scope.filterItemIndex });\n                    }\n                    else {\n                        observerService.notify('filterItemAction', { action: 'close', filterItemIndex: scope.filterItemIndex });\n                    }\n                };\n                scope.saveFilter = function (selectedFilterProperty, filterItem, callback) {\n                    var _this = this;\n                    $log.debug('saveFilter begin');\n                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType) && angular.equals({}, selectedFilterProperty.selectedCriteriaType)) {\n                        return;\n                    }\n                    if ((selectedFilterProperty.propertyIdentifier.match(/_/g) || []).length > 1) {\n                        var propertyIdentifierStart = (selectedFilterProperty.propertyIdentifier.charAt(0) == '_') ? 1 : 0;\n                        var propertyIdentifierEnd = (selectedFilterProperty.propertyIdentifier.indexOf('.') == -1) ? selectedFilterProperty.propertyIdentifier.length : selectedFilterProperty.propertyIdentifier.indexOf('.');\n                        var propertyIdentifierJoins = selectedFilterProperty.propertyIdentifier.substring(propertyIdentifierStart, propertyIdentifierEnd);\n                        var propertyIdentifierParts = propertyIdentifierJoins.split('_');\n                        var current_collection = $hibachi.getEntityExample(scope.collectionConfig.baseEntityName);\n                        var _propertyIdentifier = '';\n                        var joins = [];\n                        if (angular.isDefined(scope.collectionConfig.joins)) {\n                            joins = scope.collectionConfig.joins;\n                        }\n                        for (var i = 1; i < propertyIdentifierParts.length; i++) {\n                            if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {\n                                current_collection = $hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);\n                                _propertyIdentifier += '_' + propertyIdentifierParts[i];\n                                var newJoin = {\n                                    associationName: _propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1),\n                                    alias: '_' + propertyIdentifierParts[0] + _propertyIdentifier\n                                };\n                                var joinFound = false;\n                                for (var j = 0; j < joins.length; j++) {\n                                    if (joins[j].alias === newJoin.alias) {\n                                        joinFound = true;\n                                        break;\n                                    }\n                                }\n                                if (!joinFound) {\n                                    joins.push(newJoin);\n                                }\n                            }\n                        }\n                        scope.collectionConfig.joins = joins;\n                        if (angular.isDefined(scope.collectionConfig.columns) && (angular.isUndefined(scope.collectionConfig.groupBys) || scope.collectionConfig.groupBys.split(',').length != scope.collectionConfig.columns.length)) {\n                            var groupbyArray = angular.isUndefined(scope.collectionConfig.groupBys) ? [] : scope.collectionConfig.groupBys.split(',');\n                            for (var column = 0; column < scope.collectionConfig.columns.length; column++) {\n                                if (groupbyArray.indexOf(scope.collectionConfig.columns[column].propertyIdentifier) == -1) {\n                                    groupbyArray.push(scope.collectionConfig.columns[column].propertyIdentifier);\n                                }\n                            }\n                            scope.collectionConfig.groupBys = groupbyArray.join(',');\n                        }\n                    }\n                    if (angular.isDefined(selectedFilterProperty) && angular.isDefined(selectedFilterProperty.selectedCriteriaType)) {\n                        //populate filterItem with selectedFilterProperty values\n                        filterItem.$$isNew = false;\n                        filterItem.propertyIdentifier = selectedFilterProperty.propertyIdentifier;\n                        filterItem.displayPropertyIdentifier = selectedFilterProperty.displayPropertyIdentifier;\n                        switch (selectedFilterProperty.ormtype) {\n                            case 'boolean':\n                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;\n                                filterItem.value = selectedFilterProperty.selectedCriteriaType.value;\n                                filterItem.displayValue = filterItem.value;\n                                break;\n                            case 'string':\n                            case 'big_decimal':\n                            case 'integer':\n                            case 'float':\n                                if (angular.isDefined(selectedFilterProperty.attributeID)) {\n                                    filterItem.attributeID = selectedFilterProperty.attributeID;\n                                    filterItem.attributeSetObject = selectedFilterProperty.attributeSetObject;\n                                }\n                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;\n                                //retrieving implied value or user input | ex. implied:prop is null, user input:prop = \"Name\"\n                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {\n                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value.toString();\n                                    //if has a pattern then we need to evaluate where to add % for like statement\n                                }\n                                else if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.pattern)) {\n                                    filterItem.pattern = selectedFilterProperty.selectedCriteriaType.pattern;\n                                }\n                                filterItem.displayValue = filterItem.value;\n                                break;\n                            //TODO:simplify timestamp and big decimal to leverage reusable function for null, range, and value\n                            case 'timestamp':\n                                //retrieving implied value or user input | ex. implied:prop is null, user input:prop = \"Name\"\n                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;\n                                //is it null or a range\n                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {\n                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;\n                                    filterItem.displayValue = filterItem.value;\n                                }\n                                else {\n                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.dateInfo.type) && selectedFilterProperty.selectedCriteriaType.dateInfo.type === 'calculation') {\n                                        var _daysBetween = daysBetween(new Date(selectedFilterProperty.criteriaRangeStart), new Date(selectedFilterProperty.criteriaRangeEnd));\n                                        filterItem.value = _daysBetween;\n                                        filterItem.displayValue = selectedFilterProperty.selectedCriteriaType.display;\n                                        if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {\n                                            filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;\n                                        }\n                                    }\n                                    else if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.dateInfo.type) && selectedFilterProperty.selectedCriteriaType.dateInfo.type === 'exactDate') {\n                                        if (angular.isUndefined(selectedFilterProperty.selectedCriteriaType.dateInfo.measureType)) {\n                                            filterItem.value = selectedFilterProperty.criteriaRangeStart + '-' + selectedFilterProperty.criteriaRangeEnd;\n                                            filterItem.displayValue = $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeStart), 'MM/dd/yyyy @ h:mma') + '-' + $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeEnd), 'MM/dd/yyyy @ h:mma');\n                                        }\n                                        else {\n                                            filterItem.measureType = selectedFilterProperty.selectedCriteriaType.dateInfo.measureType;\n                                            filterItem.measureCriteria = selectedFilterProperty.selectedCriteriaType.dateInfo.type;\n                                            filterItem.criteriaNumberOf = \"0\";\n                                            if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {\n                                                filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;\n                                            }\n                                            filterItem.value = filterItem.criteriaNumberOf;\n                                            filterItem.displayValue = filterItem.criteriaNumberOf;\n                                            switch (filterItem.measureType) {\n                                                case 'd':\n                                                    filterItem.displayValue += ' Day';\n                                                    break;\n                                                case 'm':\n                                                    filterItem.displayValue += ' Month';\n                                                    break;\n                                                case 'y':\n                                                    filterItem.displayValue += ' Year';\n                                                    break;\n                                            }\n                                            filterItem.displayValue += ((filterItem.criteriaNumberOf > 1) ? 's' : '') + ' Ago';\n                                        }\n                                    }\n                                    else {\n                                        var dateValueString = utilityService.removeTimeOffset(selectedFilterProperty.criteriaRangeStart) + '-' + utilityService.removeTimeOffset(selectedFilterProperty.criteriaRangeEnd);\n                                        filterItem.value = dateValueString;\n                                        var formattedDateValueString = $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeStart), 'MM/dd/yyyy @ h:mma') + '-' + $filter('date')(angular.copy(selectedFilterProperty.criteriaRangeEnd), 'MM/dd/yyyy @ h:mma');\n                                        filterItem.displayValue = formattedDateValueString;\n                                        if (angular.isDefined(selectedFilterProperty.criteriaNumberOf)) {\n                                            filterItem.criteriaNumberOf = selectedFilterProperty.criteriaNumberOf;\n                                        }\n                                    }\n                                }\n                                break;\n                        }\n                        switch (selectedFilterProperty.fieldtype) {\n                            case 'one-to-many':\n                            case 'many-to-many':\n                            case 'many-to-one':\n                                filterItem.comparisonOperator = selectedFilterProperty.selectedCriteriaType.comparisonOperator;\n                                //is null, is not null\n                                if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {\n                                    filterItem.value = selectedFilterProperty.selectedCriteriaType.value;\n                                }\n                                filterItem.displayValue = filterItem.value;\n                                break;\n                            //case 'one-to-many':\n                            //\n                            //case 'many-to-many':\n                            //    filterItem.collectionID = selectedFilterProperty.selectedCollection.collectionID;\n                            //    filterItem.displayValue = selectedFilterProperty.selectedCollection.collectionName;\n                            //    filterItem.criteria = selectedFilterProperty.selectedCriteriaType.comparisonOperator;\n                            //\n                            //    break;\n                        }\n                        if (angular.isUndefined(filterItem.displayValue)) {\n                            filterItem.displayValue = filterItem.value;\n                        }\n                        if (angular.isDefined(selectedFilterProperty.ormtype)) {\n                            filterItem.ormtype = selectedFilterProperty.ormtype;\n                        }\n                        if (angular.isDefined(selectedFilterProperty.fieldtype)) {\n                            filterItem.fieldtype = selectedFilterProperty.fieldtype;\n                        }\n                        for (var siblingIndex in filterItem.$$siblingItems) {\n                            filterItem.$$siblingItems[siblingIndex].$$disabled = false;\n                        }\n                        filterItem.conditionDisplay = selectedFilterProperty.selectedCriteriaType.display;\n                        //if the add to New group checkbox has been checked then we need to transplant the filter item into a filter group\n                        if (filterItem.$$prepareForFilterGroup === true) {\n                            collectionService.transplantFilterItemIntoFilterGroup(filterGroupsController.swFilterGroups.getFilterGroupItem(), filterItem);\n                        }\n                        //persist Config and\n                        scope.saveCollection();\n                        $log.debug(selectedFilterProperty);\n                        $log.debug(filterItem);\n                        var timeoutpromise = $timeout(function () {\n                            callback();\n                        });\n                        timeoutpromise.then(function () {\n                            observerService.notify('filterItemAction', { action: 'add', filterItemIndex: scope.filterItemIndex, collectionConfig: _this.collectionConfig });\n                        });\n                        $log.debug('saveFilter end');\n                    }\n                };\n            }\n        };\n    }\n    SWEditFilterItem.Factory = function () {\n        var directive = function ($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService) { return new SWEditFilterItem($log, $filter, $timeout, $hibachi, collectionPartialsPath, collectionService, metadataService, hibachiPathBuilder, rbkeyService, observerService, utilityService); };\n        directive.$inject = [\n            '$log',\n            '$filter',\n            '$timeout',\n            '$hibachi',\n            'collectionPartialsPath',\n            'collectionService',\n            'metadataService',\n            'hibachiPathBuilder',\n            'rbkeyService',\n            'observerService',\n            'utilityService'\n        ];\n        return directive;\n    };\n    return SWEditFilterItem;\n}());\nexports.SWEditFilterItem = SWEditFilterItem;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/sweditfilteritem.ts?")},"../../../org/Hibachi/client/src/collection/components/swfiltergroupitem.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swfiltergroupitem.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWFilterGroupItem = /** @class */ (function () {\n    function SWFilterGroupItem($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'A',\n            require: \"^swFilterGroups\",\n            scope: {\n                collectionConfig: \"=\",\n                filterGroupItem: \"=\",\n                siblingItems: \"=\",\n                filterPropertiesList: \"=\",\n                filterGroupItemIndex: \"=\",\n                saveCollection: \"&\",\n                comparisonType: \"=\"\n            },\n            link: function (scope, element, attrs, filterGroupsController) {\n                var Partial = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \"filtergroupitem.html\";\n                var templateLoader = $http.get(Partial, { cache: $templateCache });\n                var promise = templateLoader.success(function (html) {\n                    element.html(html);\n                }).then(function (response) {\n                    element.replaceWith($compile(element.html())(scope));\n                });\n                //for(item in filterGroupItem){}\n                scope.filterGroupItem.setItemInUse = filterGroupsController.setItemInUse;\n                scope.filterGroupItem.$$index = scope.filterGroupItemIndex;\n                scope.removeFilterGroupItem = function () {\n                    filterGroupsController.removeFilterGroupItem(scope.filterGroupItemIndex);\n                };\n                scope.filterGroupItem.removeFilterGroupItem = scope.removeFilterGroupItem;\n                scope.filterGroupItem.$$disabled = false;\n                if (angular.isUndefined(scope.filterGroupItem.$$isClosed)) {\n                    scope.filterGroupItem.$$isClosed = true;\n                }\n                scope.filterGroupItem.$$siblingItems = scope.siblingItems;\n                scope.selectFilterGroupItem = function (filterGroupItem) {\n                    collectionService.selectFilterGroupItem(filterGroupItem);\n                };\n                scope.logicalOperatorChanged = function (logicalOperatorValue) {\n                    $log.debug('logicalOperatorChanged');\n                    $log.debug(logicalOperatorValue);\n                    scope.filterGroupItem.logicalOperator = logicalOperatorValue;\n                    filterGroupsController.saveCollection();\n                };\n            }\n        };\n    }\n    SWFilterGroupItem.Factory = function () {\n        var directive = function ($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterGroupItem($http, $compile, $templateCache, $log, collectionService, collectionPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$http',\n            '$compile',\n            '$templateCache',\n            '$log',\n            'collectionService',\n            'collectionPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWFilterGroupItem;\n}());\nexports.SWFilterGroupItem = SWFilterGroupItem;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swfiltergroupitem.ts?")},"../../../org/Hibachi/client/src/collection/components/swfiltergroups.ts":
/*!****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swfiltergroups.ts ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWFilterGroups = /** @class */ (function () {\n    function SWFilterGroups($log, collectionPartialsPath, hibachiPathBuilder, observerService) {\n        return {\n            restrict: 'EA',\n            scope: {\n                collectionConfig: \"=?\",\n                filterGroupItem: \"=?\",\n                filterPropertiesList: \"=?\",\n                saveCollection: \"&\",\n                filterGroup: \"=?\",\n                comparisonType: \"=?\",\n                simple: \"=\",\n                readOnly: \"=\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + \"filtergroups.html\",\n            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n                    //if the filter group comparisontype is not specified, then assume we are doing filters\n                    if (!angular.isDefined($scope.comparisonType)) {\n                        $scope.comparisonType = 'filter';\n                    }\n                    $scope.itemInUse = false;\n                    $log.debug('collectionConfig');\n                    $log.debug($scope.collectionConfig);\n                    this.getFilterGroup = function () {\n                        return $scope.filterGroup;\n                    };\n                    this.getFilterGroupItem = function () {\n                        return $scope.filterGroupItem;\n                    };\n                    this.setItemInUse = function (booleanValue) {\n                        $scope.itemInUse = booleanValue;\n                    };\n                    this.getItemInUse = function () {\n                        return $scope.itemInUse;\n                    };\n                    this.saveCollection = function () {\n                        $scope.saveCollection();\n                    };\n                    $scope.deselectItems = function (filterItem) {\n                        for (var i in filterItem.$$siblingItems) {\n                            filterItem.$$siblingItems[i].$$disabled = false;\n                        }\n                    };\n                    this.removeFilterItem = function (filterItemIndex) {\n                        if (angular.isDefined(filterItemIndex)) {\n                            $scope.deselectItems($scope.filterGroupItem[filterItemIndex]);\n                            $scope.filterGroupItem[filterItemIndex].setItemInUse(false);\n                            //remove item\n                            $log.debug('removeFilterItem');\n                            $log.debug(filterItemIndex);\n                            $scope.filterGroupItem.splice(filterItemIndex, 1);\n                            //make sure first item has no logical operator if it exists\n                            if ($scope.filterGroupItem.length) {\n                                delete $scope.filterGroupItem[0].logicalOperator;\n                            }\n                            $log.debug('removeFilterItem');\n                            $log.debug(filterItemIndex);\n                            $scope.saveCollection();\n                        }\n                    };\n                    this.removeFilterGroupItem = function (filterGroupItemIndex) {\n                        //remove Item\n                        $scope.deselectItems($scope.filterGroupItem[filterGroupItemIndex]);\n                        $scope.filterGroupItem[filterGroupItemIndex].setItemInUse(false);\n                        $scope.filterGroupItem.splice(filterGroupItemIndex, 1);\n                        //make sure first item has no logical operator if it exists\n                        if ($scope.filterGroupItem.length) {\n                            delete $scope.filterGroupItem[0].logicalOperator;\n                        }\n                        $log.debug('removeFilterGroupItem');\n                        $log.debug(filterGroupItemIndex);\n                        $scope.saveCollection();\n                    };\n                }]\n        };\n    }\n    SWFilterGroups.Factory = function () {\n        var directive = function ($log, collectionPartialsPath, hibachiPathBuilder, observerService) { return new SWFilterGroups($log, collectionPartialsPath, hibachiPathBuilder, observerService); };\n        directive.$inject = [\n            '$log',\n            'collectionPartialsPath',\n            'hibachiPathBuilder',\n            'observerService'\n        ];\n        return directive;\n    };\n    return SWFilterGroups;\n}());\nexports.SWFilterGroups = SWFilterGroups;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swfiltergroups.ts?")},"../../../org/Hibachi/client/src/collection/components/swfilteritem.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swfilteritem.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWFilterItem = /** @class */ (function () {\n    function SWFilterItem($log, collectionService, collectionPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: \'A\',\n            require: \'^swFilterGroups\',\n            scope: {\n                collectionConfig: "=",\n                filterItem: "=",\n                siblingItems: "=",\n                filterPropertiesList: "=",\n                filterItemIndex: "=",\n                saveCollection: "&",\n                comparisonType: "=",\n                simple: "="\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + "filteritem.html",\n            link: function (scope, element, attrs, filterGroupsController) {\n                scope.baseEntityAlias = scope.collectionConfig.baseEntityAlias;\n                if (angular.isUndefined(scope.filterItem.$$isClosed)) {\n                    scope.filterItem.$$isClosed = true;\n                }\n                if (angular.isUndefined(scope.filterItem.$$disabled)) {\n                    scope.filterItem.$$disabled = false;\n                }\n                if (angular.isUndefined(scope.filterItem.siblingItems)) {\n                    scope.filterItem.$$siblingItems = scope.siblingItems;\n                }\n                scope.filterItem.setItemInUse = filterGroupsController.setItemInUse;\n                scope.selectFilterItem = function (filterItem) {\n                    collectionService.selectFilterItem(filterItem);\n                };\n                scope.removeFilterItem = function () {\n                    filterGroupsController.removeFilterItem(scope.filterItemIndex, filterGroupsController.getFilterGroupItem());\n                };\n                scope.filterGroupItem = filterGroupsController.getFilterGroupItem();\n                scope.logicalOperatorChanged = function (logicalOperatorValue) {\n                    $log.debug(\'logicalOperatorChanged\');\n                    $log.debug(logicalOperatorValue);\n                    scope.filterItem.logicalOperator = logicalOperatorValue;\n                    filterGroupsController.saveCollection();\n                };\n            }\n        };\n    }\n    SWFilterItem.Factory = function () {\n        var directive = function ($log, collectionService, collectionPartialsPath, hibachiPathBuilder) { return new SWFilterItem($log, collectionService, collectionPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            \'$log\',\n            \'collectionService\',\n            \'collectionPartialsPath\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWFilterItem;\n}());\nexports.SWFilterItem = SWFilterItem;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swfilteritem.ts?')},"../../../org/Hibachi/client/src/collection/components/swrestrictionconfig.ts":
/*!*********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swrestrictionconfig.ts ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWRestrictionConfigController = /** @class */ (function () {\n    //@ngInject\n    function SWRestrictionConfigController($timeout, collectionConfigService, $hibachi, observerService) {\n        var _this = this;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.$hibachi = $hibachi;\n        this.observerService = observerService;\n        this.$onDestroy = function () {\n            _this.observerService.detachByEvent('saveCollection');\n        };\n        this.setCollectionConfig = function (payload) {\n            _this.permissionRecordRestriction.data.collectionConfig = angular.toJson(payload.collectionConfig.getCollectionConfig());\n            _this.permissionRecordRestriction.forms['permissionRecordRestrictionForm'].collectionConfig.$setViewValue(payload.collectionConfig.getCollectionConfig());\n            _this.permissionRecordRestriction.forms['permissionRecordRestrictionForm'].$setDirty(true);\n            _this.permissionRecordRestriction.$$save();\n        };\n        var permissionRecordRestrictionRequest = this.$hibachi.getPermissionRecordRestriction(this.permissionRecordRestrictionId);\n        permissionRecordRestrictionRequest.promise.then(function () {\n            var collectionConfig = _this.collectionConfigService.newCollectionConfig();\n            _this.permissionRecordRestriction = permissionRecordRestrictionRequest.value;\n            collectionConfig.loadJson(_this.permissionRecordRestriction.collectionConfig);\n            _this.collectionConfig = collectionConfig;\n        });\n        observerService.attach(this.setCollectionConfig, 'saveCollection');\n    }\n    return SWRestrictionConfigController;\n}());\nvar SWRestrictionConfig = /** @class */ (function () {\n    //@ngInject\n    function SWRestrictionConfig(hibachiPathBuilder, collectionPartialsPath) {\n        this.restrict = 'E';\n        this.scope = {};\n        this.bindToController = {\n            permissionRecordRestrictionId: \"@?\"\n        };\n        this.controller = SWRestrictionConfigController;\n        this.controllerAs = \"swRestrictionConfig\";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(collectionPartialsPath) + 'restrictionconfig.html';\n    }\n    SWRestrictionConfig.Factory = function () {\n        var directive = function (hibachiPathBuilder, collectionPartialsPath) { return new SWRestrictionConfig(hibachiPathBuilder, collectionPartialsPath); };\n        directive.$inject = ['hibachiPathBuilder', 'collectionPartialsPath'];\n        return directive;\n    };\n    return SWRestrictionConfig;\n}());\nexports.SWRestrictionConfig = SWRestrictionConfig;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/components/swrestrictionconfig.ts?")},"../../../org/Hibachi/client/src/collection/controllers/collections.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/controllers/collections.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CollectionController = /** @class */ (function () {\n    //@ngInject\n    function CollectionController($scope, $attrs, $log, $timeout, $hibachi, collectionService, metadataService, selectionService, paginationService, collectionConfigService, appConfig, observerService) {\n        $scope.saveCollection = function (collectionData) {\n            var data = {\n                collectionID: $attrs.collectionId,\n                collectionConfig: collectionData.collectionConfig\n            };\n            var saveCollectionPromise = $hibachi.saveEntity('Collection', $attrs.collectionId, data, 'save');\n            saveCollectionPromise.then(function (value) {\n            }, function (reason) {\n            });\n        };\n        observerService.attach($scope.saveCollection, 'swPaginationUpdate', $attrs.tableId);\n    }\n    return CollectionController;\n}());\nexports.CollectionController = CollectionController;\n// 'use strict';\n// angular.module('slatwalladmin')\n// //using $location to get url params, this will probably change to using routes eventually\n// .controller('collections', [\n// \t'$scope',\n// '$location',\n// '$log',\n// '$timeout',\n// '$hibachi',\n// 'collectionService',\n// 'metadataService',\n// 'selectionService',\n// 'paginationService',\n// \tfunction(\n// \t\t$scope,\n// $location,\n// $log,\n// $timeout,\n// $hibachi,\n// collectionService,\n// metadataService,\n// selectionService,\n// paginationService\n// \t){\n//\n// \t}\n// ]);\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/controllers/collections.ts?")},"../../../org/Hibachi/client/src/collection/controllers/confirmationcontroller.ts":
/*!*************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/controllers/confirmationcontroller.ts ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar ConfirmationController = /** @class */ (function () {\n    //@ngInject\n    function ConfirmationController($scope, $log, $modalInstance) {\n        $scope.deleteEntity = function (entity) {\n            $log.debug("Deleting an entity.");\n            $log.debug($scope.entity);\n            this.close();\n        };\n        $scope.fireCallback = function (callbackFunction) {\n            callbackFunction();\n            this.close();\n        };\n        /**\n        * Closes the modal window\n        */\n        $scope.close = function () {\n            $modalInstance.close();\n        };\n        /**\n        * Cancels the modal window\n        */\n        $scope.cancel = function () {\n            $modalInstance.dismiss("cancel");\n        };\n    }\n    return ConfirmationController;\n}());\nexports.ConfirmationController = ConfirmationController;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/controllers/confirmationcontroller.ts?')},"../../../org/Hibachi/client/src/collection/controllers/createcollection.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/controllers/createcollection.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CreateCollection = /** @class */ (function () {\n    //@ngInject\n    function CreateCollection($scope, $log, $timeout, $hibachi, collectionService, metadataService, paginationService, dialogService, observerService, selectionService, collectionConfigService, rbkeyService, $window) {\n        $window.scrollTo(0, 0);\n        $scope.params = dialogService.getCurrentDialog().params;\n        $scope.readOnly = angular.isDefined($scope.params.readOnly) && $scope.params.readOnly == true;\n        $scope.myCollection = collectionConfigService.newCollectionConfig($scope.params.entityName);\n        var hibachiConfig = $hibachi.getConfig();\n        if ($scope.params.entityName == 'Type' && angular.isUndefined($scope.params.entityId) && angular.isDefined($scope.params.parentEntity)) {\n            $scope.params.parentEntity = $scope.params.parentEntity.replace(new RegExp('^' + hibachiConfig.applicationKey, 'i'), '');\n            var systemCode = $scope.params.parentEntity.charAt(0).toLowerCase() + $scope.params.parentEntity.slice(1) + 'Type';\n            $scope.myCollection.addFilter('parentType.systemCode', systemCode);\n        }\n        $scope.keywords = '';\n        $scope.paginator = paginationService.createPagination();\n        //$scope.isRadio = true;\n        $scope.hideEditView = true;\n        //$scope.closeSaving = true;\n        $scope.hasSelection = selectionService.getSelectionCount;\n        $scope.idsSelected = selectionService.getSelections;\n        $scope.unselectAll = function () {\n            selectionService.clearSelections('collectionSelection');\n            $scope.getCollection();\n        };\n        $scope.newCollection = $hibachi.newCollection();\n        $scope.newCollection.data.collectionCode = $scope.params.entityName + \"-\" + new Date().valueOf();\n        $scope.newCollection.data.collectionObject = $scope.params.entityName;\n        if (angular.isDefined($scope.params.entityId)) {\n            $scope.newCollection.data.collectionID = $scope.params.entityId;\n            $timeout(function () {\n                $scope.newCollection.forms['form.createCollection'].$setDirty();\n            });\n        }\n        if (angular.isDefined($scope.params.collectionName)) {\n            $scope.newCollection.data.collectionName = $scope.params.collectionName;\n            $timeout(function () {\n                $scope.newCollection.forms['form.createCollection'].$setDirty();\n            });\n        }\n        $scope.saveCollection = function () {\n            $scope.myCollection.loadJson($scope.collectionConfig);\n            $scope.getCollection();\n        };\n        $scope.getCollection = function () {\n            $scope.closeSaving = true;\n            $scope.myCollection.setPageShow($scope.paginator.getPageShow());\n            $scope.myCollection.setCurrentPage($scope.paginator.getCurrentPage());\n            $scope.myCollection.setKeywords($scope.keywords);\n            var collectionOptions;\n            if (angular.isDefined($scope.params.entityId)) {\n                collectionOptions = {\n                    id: $scope.params.entityId,\n                    currentPage: $scope.paginator.getCurrentPage(),\n                    pageShow: $scope.paginator.getPageShow(),\n                    keywords: $scope.keywords\n                };\n            }\n            else {\n                collectionOptions = $scope.myCollection.getOptions();\n            }\n            $log.debug($scope.myCollection.getOptions());\n            var collectionListingPromise = $hibachi.getEntity($scope.myCollection.getEntityName(), collectionOptions);\n            collectionListingPromise.then(function (value) {\n                if (angular.isDefined($scope.params.entityId)) {\n                    $scope.newCollection.data.collectionName = value.collectionName;\n                }\n                $scope.collection = value;\n                $scope.collection.collectionObject = $scope.myCollection.baseEntityName;\n                $scope.collectionInitial = angular.copy($scope.collection);\n                $scope.paginator.setRecordsCount($scope.collection.recordsCount);\n                $scope.paginator.setPageRecordsInfo($scope.collection);\n                if (angular.isUndefined($scope.myCollection.columns)) {\n                    var colConfig = angular.fromJson(value.collectionConfig);\n                    colConfig.baseEntityName = colConfig.baseEntityName.replace(new RegExp('^' + hibachiConfig.applicationKey, 'i'), '');\n                    $scope.myCollection.loadJson(colConfig);\n                }\n                if (angular.isUndefined($scope.collectionConfig)) {\n                    var tempCollectionConfig = collectionConfigService.newCollectionConfig();\n                    tempCollectionConfig.loadJson(value.collectionConfig);\n                    $scope.collectionConfig = tempCollectionConfig.getCollectionConfig();\n                }\n                if (angular.isUndefined($scope.collectionConfig.filterGroups) || !$scope.collectionConfig.filterGroups.length) {\n                    $scope.collectionConfig.filterGroups = [\n                        {\n                            filterGroup: []\n                        }\n                    ];\n                }\n                collectionService.setFilterCount(filterItemCounter());\n                $scope.loadingCollection = false;\n                $scope.closeSaving = false;\n            }, function (reason) {\n            });\n            return collectionListingPromise;\n        };\n        $scope.paginator.collection = $scope.newCollection;\n        $scope.paginator.getCollection = $scope.getCollection;\n        var unbindCollectionObserver = $scope.$watch('collection', function (newValue, oldValue) {\n            if (newValue !== oldValue) {\n                if (angular.isUndefined($scope.filterPropertiesList)) {\n                    $scope.filterPropertiesList = {};\n                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName($scope.collectionConfig.baseEntityAlias);\n                    filterPropertiesPromise.then(function (value) {\n                        metadataService.setPropertiesList(value, $scope.collectionConfig.baseEntityAlias);\n                        $scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias($scope.collectionConfig.baseEntityAlias);\n                        metadataService.formatPropertiesList($scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias], $scope.collectionConfig.baseEntityAlias);\n                    });\n                }\n                unbindCollectionObserver();\n            }\n        });\n        var filterItemCounter = function (filterGroupArray) {\n            var filterItemCount = 0;\n            if (!angular.isDefined(filterGroupArray)) {\n                filterGroupArray = $scope.collectionConfig.filterGroups[0].filterGroup;\n            }\n            //Start out loop\n            for (var index in filterGroupArray) {\n                //If filter isn't new then increment the count\n                if (!filterGroupArray[index].$$isNew && !angular.isDefined(filterGroupArray[index].filterGroup)) {\n                    filterItemCount++;\n                    // If there are nested filter groups run introspectively\n                }\n                else if (angular.isDefined(filterGroupArray[index].filterGroup)) {\n                    //Call function recursively\n                    filterItemCount += filterItemCounter(filterGroupArray[index].filterGroup);\n                    //Otherwise make like the foo fighters and \"Break Out!\"\n                }\n                else {\n                    break;\n                }\n            }\n            return filterItemCount;\n        };\n        $scope.getCollection();\n        $scope.copyExistingCollection = function () {\n            $scope.collection.collectionConfig = $scope.selectedExistingCollection;\n        };\n        $scope.setSelectedExistingCollection = function (selectedExistingCollection) {\n            $scope.selectedExistingCollection = selectedExistingCollection;\n        };\n        $scope.setSelectedFilterProperty = function (selectedFilterProperty) {\n            $scope.selectedFilterProperty = selectedFilterProperty;\n        };\n        $scope.loadingCollection = false;\n        var searchPromise;\n        $scope.searchCollection = function () {\n            if (searchPromise) {\n                $timeout.cancel(searchPromise);\n            }\n            searchPromise = $timeout(function () {\n                //$log.debug('search with keywords');\n                //$log.debug($scope.keywords);\n                //Set current page here so that the pagination does not break when getting collection\n                $scope.paginator.setCurrentPage(1);\n                $scope.loadingCollection = true;\n            }, 500);\n        };\n        $scope.filterCount = collectionService.getFilterCount;\n        //\n        $scope.hideExport = true;\n        $scope.saveNewCollection = function ($index) {\n            if ($scope.closeSaving)\n                return;\n            $scope.closeSaving = true;\n            if (!angular.isUndefined(selectionService.getSelections('collectionSelection'))\n                && (selectionService.getSelections('collectionSelection').length > 0)) {\n                $scope.collectionConfig.filterGroups[0].filterGroup = [\n                    {\n                        \"displayPropertyIdentifier\": rbkeyService.getRBKey(\"entity.\" + $scope.myCollection.baseEntityName.toLowerCase() + \".\" + $scope.myCollection.collection.$$getIDName().toLowerCase()),\n                        \"propertyIdentifier\": $scope.myCollection.baseEntityAlias + \".\" + $scope.myCollection.collection.$$getIDName(),\n                        \"comparisonOperator\": \"in\",\n                        \"value\": selectionService.getSelections('collectionSelection').join(),\n                        \"displayValue\": selectionService.getSelections('collectionSelection').join(),\n                        \"ormtype\": \"string\",\n                        \"fieldtype\": \"id\",\n                        \"conditionDisplay\": \"In List\"\n                    }\n                ];\n            }\n            $scope.newCollection.data.collectionConfig = $scope.collectionConfig;\n            if ($scope.newCollection.data.collectionConfig.baseEntityName.lastIndexOf(hibachiConfig.applicationKey, 0) !== 0) {\n                $scope.newCollection.data.collectionConfig.baseEntityName = hibachiConfig.applicationKey + $scope.newCollection.data.collectionConfig.baseEntityName;\n            }\n            $scope.newCollection.$$save().then(function () {\n                observerService.notify('addCollection', $scope.newCollection.data);\n                selectionService.clearSelection('collectionSelection');\n                dialogService.removePageDialog($index);\n                $scope.closeSaving = false;\n            }, function () {\n                $scope.closeSaving = false;\n            });\n        };\n    }\n    return CreateCollection;\n}());\nexports.CreateCollection = CreateCollection;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/controllers/createcollection.ts?")},"../../../org/Hibachi/client/src/collection/controllers/entity_createcollection.ts":
/*!**************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/controllers/entity_createcollection.ts ***!
  \**************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CollectionCreateController = /** @class */ (function () {\n    //@ngInject\n    function CollectionCreateController($scope, collectionConfigService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.collectionConfigService = collectionConfigService;\n        this.$scope.entity_createcollectionCtrl = {};\n        this.$scope.entity_createcollectionCtrl.baseCollections = [];\n        this.collection = this.collectionConfigService.newCollectionConfig('Collection');\n        this.collection.setDisplayProperties('collectionID,collectionName');\n        this.getBaseCollections('Access');\n        //on select change get collection\n        this.$scope.entity_createcollectionCtrl.collectionObjectChanged = function () {\n            _this.getBaseCollections(_this.$scope.entity_createcollectionCtrl.selectedOption);\n        };\n    }\n    CollectionCreateController.prototype.getBaseCollections = function (baseCollectionObject) {\n        var _this = this;\n        this.collection.clearFilters();\n        this.collection.addFilter('collectionObject', baseCollectionObject);\n        this.collection.setPageShow(50);\n        this.collection.getEntity().then(function (res) {\n            _this.$scope.entity_createcollectionCtrl.baseCollections = res.pageRecords;\n        });\n    };\n    return CollectionCreateController;\n}());\nexports.CollectionCreateController = CollectionCreateController;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/controllers/entity_createcollection.ts?")},"../../../org/Hibachi/client/src/collection/filters/aggregatefilter.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/filters/aggregatefilter.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar AggregateFilter = /** @class */ (function () {\n    function AggregateFilter() {\n    }\n    //@ngInject\n    AggregateFilter.Factory = function ($filter) {\n        return function (property) {\n            return property.filter(function (item) {\n                if (item.fieldtype && item.fieldtype !== 'id') {\n                    return false;\n                }\n                if (item.ormtype && ['big_decimal', 'double', 'float', 'integer'].indexOf(item.ormtype) < 0) {\n                    return false;\n                }\n                return true;\n            });\n        };\n    };\n    return AggregateFilter;\n}());\nexports.AggregateFilter = AggregateFilter;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/filters/aggregatefilter.ts?")},"../../../org/Hibachi/client/src/collection/services/collectionconfigservice.ts":
/*!***********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/services/collectionconfigservice.ts ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar Column = /** @class */ (function () {\n    function Column(propertyIdentifier, title, isVisible, isDeletable, isSearchable, isExportable, persistent, ormtype, attributeID, attributeSetObject, type) {\n        if (isVisible === void 0) { isVisible = true; }\n        if (isDeletable === void 0) { isDeletable = true; }\n        if (isSearchable === void 0) { isSearchable = true; }\n        if (isExportable === void 0) { isExportable = true; }\n        this.propertyIdentifier = propertyIdentifier;\n        this.title = title;\n        this.isVisible = isVisible;\n        this.isDeletable = isDeletable;\n        this.isSearchable = isSearchable;\n        this.isExportable = isExportable;\n        this.persistent = persistent;\n        this.ormtype = ormtype;\n        this.attributeID = attributeID;\n        this.attributeSetObject = attributeSetObject;\n        this.type = type;\n    }\n    return Column;\n}());\nexports.Column = Column;\nvar Filter = /** @class */ (function () {\n    function Filter(propertyIdentifier, value, comparisonOperator, logicalOperator, displayPropertyIdentifier, displayValue, hidden, pattern) {\n        if (hidden === void 0) { hidden = false; }\n        this.propertyIdentifier = propertyIdentifier;\n        this.value = value;\n        this.comparisonOperator = comparisonOperator;\n        this.logicalOperator = logicalOperator;\n        this.displayPropertyIdentifier = displayPropertyIdentifier;\n        this.displayValue = displayValue;\n        this.hidden = hidden;\n        this.pattern = pattern;\n    }\n    return Filter;\n}());\nexports.Filter = Filter;\nvar CollectionFilter = /** @class */ (function () {\n    function CollectionFilter(propertyIdentifier, displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly) {\n        if (readOnly === void 0) { readOnly = false; }\n        this.propertyIdentifier = propertyIdentifier;\n        this.displayPropertyIdentifier = displayPropertyIdentifier;\n        this.displayValue = displayValue;\n        this.collectionID = collectionID;\n        this.criteria = criteria;\n        this.fieldtype = fieldtype;\n        this.readOnly = readOnly;\n    }\n    return CollectionFilter;\n}());\nexports.CollectionFilter = CollectionFilter;\nvar Join = /** @class */ (function () {\n    function Join(associationName, alias) {\n        this.associationName = associationName;\n        this.alias = alias;\n    }\n    return Join;\n}());\nexports.Join = Join;\nvar OrderBy = /** @class */ (function () {\n    function OrderBy(propertyIdentifier, direction) {\n        this.propertyIdentifier = propertyIdentifier;\n        this.direction = direction;\n    }\n    return OrderBy;\n}());\nexports.OrderBy = OrderBy;\nvar CollectionConfig = /** @class */ (function () {\n    // @ngInject\n    function CollectionConfig(rbkeyService, $hibachi, utilityService, observerService, baseEntityName, baseEntityAlias, columns, keywordColumns, useElasticSearch, filterGroups, keywordFilterGroups, joins, orderBy, groupBys, id, currentPage, pageShow, keywords, allRecords, dirtyRead, isDistinct) {\n        if (keywordColumns === void 0) { keywordColumns = []; }\n        if (useElasticSearch === void 0) { useElasticSearch = false; }\n        if (filterGroups === void 0) { filterGroups = [{ filterGroup: [] }]; }\n        if (keywordFilterGroups === void 0) { keywordFilterGroups = [{ filterGroup: [] }]; }\n        if (currentPage === void 0) { currentPage = 1; }\n        if (pageShow === void 0) { pageShow = 10; }\n        if (keywords === void 0) { keywords = ''; }\n        if (allRecords === void 0) { allRecords = false; }\n        if (dirtyRead === void 0) { dirtyRead = false; }\n        if (isDistinct === void 0) { isDistinct = false; }\n        var _this = this;\n        this.rbkeyService = rbkeyService;\n        this.$hibachi = $hibachi;\n        this.utilityService = utilityService;\n        this.observerService = observerService;\n        this.baseEntityName = baseEntityName;\n        this.baseEntityAlias = baseEntityAlias;\n        this.columns = columns;\n        this.keywordColumns = keywordColumns;\n        this.useElasticSearch = useElasticSearch;\n        this.filterGroups = filterGroups;\n        this.keywordFilterGroups = keywordFilterGroups;\n        this.joins = joins;\n        this.orderBy = orderBy;\n        this.groupBys = groupBys;\n        this.id = id;\n        this.currentPage = currentPage;\n        this.pageShow = pageShow;\n        this.keywords = keywords;\n        this.allRecords = allRecords;\n        this.dirtyRead = dirtyRead;\n        this.isDistinct = isDistinct;\n        this.filterGroupAliasMap = {};\n        this.reportFlag = false;\n        this.periodInterval = \"\";\n        this.clearFilterGroups = function () {\n            _this.filterGroups = [{ filterGroup: [] }];\n            _this.keywordFilterGroups = [{ filterGroup: [] }];\n            return _this;\n        };\n        this.newCollectionConfig = function (baseEntityName, baseEntityAlias) {\n            return new CollectionConfig(_this.rbkeyService, _this.$hibachi, _this.utilityService, _this.observerService, baseEntityName, baseEntityAlias);\n        };\n        this.setReportFlag = function (reportFlag) {\n            _this.reportFlag = reportFlag;\n        };\n        this.isReport = function () {\n            return _this.reportFlag;\n        };\n        this.setPeriodInterval = function (periodInterval) {\n            _this.periodInterval = periodInterval;\n        };\n        this.loadJson = function (jsonCollection) {\n            //if json then make a javascript object else use the javascript object\n            //if coldfusion has double encoded the json keep calling fromJson until it becomes an object\n            while (angular.isString(jsonCollection)) {\n                jsonCollection = angular.fromJson(jsonCollection);\n            }\n            if (angular.isDefined(jsonCollection['ORDERBY']) && !angular.isDefined(jsonCollection.orderBy)) {\n                jsonCollection.orderBy = jsonCollection['ORDERBY'];\n            }\n            if (angular.isDefined(jsonCollection['PERIODINTERVAL']) && !angular.isDefined(jsonCollection.periodInterval)) {\n                jsonCollection.periodInterval = jsonCollection['PERIODINTERVAL'];\n            }\n            _this.baseEntityAlias = jsonCollection.baseEntityAlias;\n            _this.baseEntityName = jsonCollection.baseEntityName;\n            _this.collection = _this.$hibachi.getEntityExample(_this.baseEntityName);\n            if (angular.isUndefined(_this.baseEntityAlias)) {\n                _this.baseEntityAlias = '_' + _this.baseEntityName.toLowerCase();\n            }\n            if (angular.isDefined(jsonCollection.filterGroups)) {\n                _this.validateFilter(jsonCollection.filterGroups);\n                //backend collections don't add displayValue and displayPropertyIdentifier to their configs\n                // so let's fix that\n                for (var _i = 0, _a = jsonCollection.filterGroups; _i < _a.length; _i++) {\n                    var filterGroup = _a[_i];\n                    for (var _b = 0, _c = filterGroup['filterGroup']; _b < _c.length; _b++) {\n                        var filter = _c[_b];\n                        if (!filter.displayPropertyIdentifier && filter.propertyIdentifier) {\n                            var convertedPropertyIdentifier = filter.propertyIdentifier.replace(/_/g, '.');\n                            if (convertedPropertyIdentifier[0] === \".\") {\n                                convertedPropertyIdentifier = convertedPropertyIdentifier.substr(1);\n                            }\n                            filter.displayPropertyIdentifier = _this.rbkeyService.getRBKey(\"entity.\" + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, convertedPropertyIdentifier) + \".\" + _this.utilityService.listLast(convertedPropertyIdentifier, '.'));\n                        }\n                        if (!filter.displayValue) {\n                            filter.displayValue = filter.value;\n                        }\n                    }\n                }\n                _this.filterGroups = jsonCollection.filterGroups;\n            }\n            _this.columns = jsonCollection.columns;\n            _this.joins = jsonCollection.joins;\n            _this.keywords = jsonCollection.keywords;\n            _this.orderBy = jsonCollection.orderBy;\n            _this.groupBys = jsonCollection.groupBys;\n            _this.pageShow = jsonCollection.pageShow;\n            _this.allRecords = jsonCollection.allRecords;\n            if (jsonCollection.dirtyRead) {\n                _this.dirtyRead = jsonCollection.dirtyRead;\n            }\n            _this.isDistinct = jsonCollection.isDistinct;\n            _this.reportFlag = jsonCollection.reportFlag;\n            _this.useElasticSearch = jsonCollection.useElasticSearch;\n            _this.periodInterval = jsonCollection.periodInterval;\n            _this.currentPage = jsonCollection.currentPage || 1;\n            _this.pageShow = jsonCollection.pageShow || 10;\n            _this.keywords = jsonCollection.keywords;\n            return _this;\n        };\n        this.clone = function () {\n            return _this.newCollectionConfig(_this.baseEntityName, _this.baseEntityAlias).loadJson(JSON.parse(angular.toJson(_this.getCollectionConfig())));\n        };\n        this.loadFilterGroups = function (filterGroupsConfig) {\n            if (filterGroupsConfig === void 0) { filterGroupsConfig = [{ filterGroup: [] }]; }\n            _this.filterGroups = filterGroupsConfig;\n            return _this;\n        };\n        this.loadColumns = function (columns) {\n            _this.columns = columns;\n            return _this;\n        };\n        this.getCollectionConfig = function (validate) {\n            if (validate === void 0) { validate = true; }\n            if (validate) {\n                _this.validateFilter(_this.filterGroups);\n            }\n            return {\n                baseEntityAlias: _this.baseEntityAlias,\n                baseEntityName: _this.baseEntityName,\n                columns: _this.columns,\n                keywordColumns: _this.keywordColumns,\n                filterGroups: _this.filterGroups,\n                joins: _this.joins,\n                groupBys: _this.groupBys,\n                currentPage: _this.currentPage,\n                pageShow: _this.pageShow,\n                keywords: _this.keywords,\n                defaultColumns: (!_this.columns || !_this.columns.length),\n                useElasticSearch: _this.useElasticSearch,\n                allRecords: _this.allRecords,\n                dirtyRead: _this.dirtyRead,\n                isDistinct: _this.isDistinct,\n                orderBy: _this.orderBy,\n                periodInterval: _this.periodInterval\n            };\n        };\n        this.getEntityName = function () {\n            return _this.baseEntityName.charAt(0).toUpperCase() + _this.baseEntityName.slice(1);\n        };\n        this.getOptions = function () {\n            _this.validateFilter(_this.filterGroups);\n            var columns = _this.columns;\n            if (_this.keywords && _this.keywords.length && _this.keywordFilterGroups[0].filterGroup.length > 0) {\n                var filters = _this.keywordFilterGroups;\n            }\n            else {\n                var filters = _this.filterGroups;\n            }\n            var options = {\n                columnsConfig: angular.toJson(columns),\n                filterGroupsConfig: angular.toJson(filters),\n                joinsConfig: angular.toJson(_this.joins),\n                orderByConfig: angular.toJson(_this.orderBy),\n                groupBysConfig: angular.toJson(_this.groupBys),\n                currentPage: _this.currentPage,\n                pageShow: _this.pageShow,\n                keywords: _this.keywords,\n                defaultColumns: (!_this.columns || !_this.columns.length),\n                useElasticSearch: _this.useElasticSearch,\n                allRecords: _this.allRecords,\n                dirtyRead: _this.dirtyRead,\n                isDistinct: _this.isDistinct,\n                isReport: _this.isReport(),\n                periodInterval: _this.periodInterval\n            };\n            if (angular.isDefined(_this.id)) {\n                options['id'] = _this.id;\n            }\n            return options;\n        };\n        this.debug = function () {\n            return _this;\n        };\n        this.formatPropertyIdentifier = function (propertyIdentifier, addJoin) {\n            if (addJoin === void 0) { addJoin = false; }\n            //if already starts with alias, strip it out\n            if (propertyIdentifier.lastIndexOf(_this.baseEntityAlias, 0) === 0) {\n                propertyIdentifier = propertyIdentifier.slice(_this.baseEntityAlias.length + 1);\n            }\n            var _propertyIdentifier = _this.baseEntityAlias;\n            if (addJoin === true) {\n                _propertyIdentifier += _this.processJoin(propertyIdentifier);\n            }\n            else {\n                _propertyIdentifier += '.' + propertyIdentifier;\n            }\n            return _propertyIdentifier;\n        };\n        this.processJoin = function (propertyIdentifier) {\n            var _propertyIdentifier = '', propertyIdentifierParts = propertyIdentifier.split('.'), current_collection = _this.collection;\n            for (var i = 0; i < propertyIdentifierParts.length; i++) {\n                if (angular.isDefined(current_collection.metaData[propertyIdentifierParts[i]]) && ('cfc' in current_collection.metaData[propertyIdentifierParts[i]])) {\n                    current_collection = _this.$hibachi.getEntityExample(current_collection.metaData[propertyIdentifierParts[i]].cfc);\n                    _propertyIdentifier += '_' + propertyIdentifierParts[i];\n                    _this.addJoin(new Join(_propertyIdentifier.replace(/_([^_]+)$/, '.$1').substring(1), _this.baseEntityAlias + _propertyIdentifier));\n                }\n                else {\n                    _propertyIdentifier += '.' + propertyIdentifierParts[i];\n                }\n            }\n            return _propertyIdentifier;\n        };\n        this.addJoin = function (join) {\n            if (!_this.joins) {\n                _this.joins = [];\n            }\n            var joinFound = false;\n            angular.forEach(_this.joins, function (configJoin) {\n                if (configJoin.alias === join.alias) {\n                    joinFound = true;\n                }\n            });\n            if (!joinFound) {\n                _this.joins.push(join);\n            }\n            return _this;\n        };\n        this.addAlias = function (propertyIdentifier) {\n            var parts = propertyIdentifier.split('.');\n            if (parts.length > 1 && parts[0] !== _this.baseEntityAlias) {\n                return _this.baseEntityAlias + '.' + propertyIdentifier;\n            }\n            return propertyIdentifier;\n        };\n        this.addColumn = function (column, title, options) {\n            if (title === void 0) { title = ''; }\n            if (options === void 0) { options = {}; }\n            if (!_this.columns || _this.isReport() || options.aggregate != null || _this.utilityService.ArrayFindByPropertyValue(_this.columns, 'propertyIdentifier', column) === -1) {\n                var isVisible = true, isDeletable = true, isSearchable = true, isExportable = true, persistent, type = 'none', ormtype = 'string', lastProperty = column.split('.').pop(), isKeywordColumn = true, isOnlyKeywordColumn = false;\n                var lastEntity = _this.$hibachi.getEntityExample(_this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, column));\n                if (angular.isUndefined(lastEntity)) {\n                    throw (\"You have passed an incorrect entity name to a collection config\");\n                }\n                if (angular.isUndefined(_this.columns)) {\n                    _this.columns = [];\n                }\n                //hide id columns\n                if (angular.isDefined(options['isVisible'])) {\n                    isVisible = options['isVisible'];\n                }\n                if (angular.isUndefined(options.isVisible) &&\n                    column.substring(column.length - 2) === \"ID\") {\n                    isVisible = false;\n                }\n                if (angular.isDefined(options['isDeletable'])) {\n                    isDeletable = options['isDeletable'];\n                }\n                if (angular.isDefined(options['isSearchable'])) {\n                    isSearchable = options['isSearchable'];\n                }\n                if (angular.isDefined(options['isExportable'])) {\n                    isExportable = options['isExportable'];\n                }\n                if (angular.isUndefined(options['isExportable']) && !isVisible) {\n                    isExportable = false;\n                }\n                if (angular.isDefined(options['ormtype'])) {\n                    ormtype = options['ormtype'];\n                }\n                else if (lastEntity.metaData[lastProperty] && lastEntity.metaData[lastProperty].ormtype) {\n                    ormtype = lastEntity.metaData[lastProperty].ormtype;\n                }\n                if (angular.isDefined(options['type']) && options['type'] != 'none') {\n                    type = options['type'];\n                }\n                else if (lastEntity.metaData[lastProperty] && lastEntity.metaData[lastProperty].hb_formattype) {\n                    type = lastEntity.metaData[lastProperty].hb_formattype;\n                }\n                if (angular.isDefined(options['isKeywordColumn'])) {\n                    isKeywordColumn = options['isKeywordColumn'];\n                }\n                if (angular.isDefined(options['isOnlyKeywordColumn'])) {\n                    isOnlyKeywordColumn = options['isOnlyKeywordColumn'];\n                }\n                if (angular.isDefined(lastEntity.metaData[lastProperty])) {\n                    persistent = lastEntity.metaData[lastProperty].persistent;\n                }\n                var columnObject = new Column(column, title, isVisible, isDeletable, isSearchable, isExportable, persistent, ormtype, options['attributeID'], options['attributeSetObject'], type);\n                //isMetric and isPeriod for reporting only reporting\n                if (options['isMetric']) {\n                    columnObject['isMetric'] = options['isMetric'];\n                }\n                if (options['isPeriod']) {\n                    columnObject['isPeriod'] = options['isPeriod'];\n                }\n                if (options['aggregate']) {\n                    columnObject['aggregate'] = options['aggregate'],\n                        columnObject['aggregateAlias'] = title;\n                }\n                //add any non-conventional options\n                for (var key in options) {\n                    if (!columnObject[key]) {\n                        columnObject[key] = options[key];\n                    }\n                }\n                if (!isOnlyKeywordColumn) {\n                    _this.columns.push(columnObject);\n                }\n                if (isKeywordColumn) {\n                    _this.keywordColumns.push(columnObject);\n                }\n            }\n            return _this;\n        };\n        this.setUseElasticSearch = function (flag) {\n            if (flag === void 0) { flag = false; }\n            _this.useElasticSearch = flag;\n            return _this;\n        };\n        this.setDisplayProperties = function (propertyIdentifier, title, options) {\n            if (title === void 0) { title = ''; }\n            if (options === void 0) { options = {}; }\n            _this.addDisplayProperty(propertyIdentifier, title, options);\n            return _this;\n        };\n        this.addDisplayAggregate = function (propertyIdentifier, aggregateFunction, aggregateAlias, options) {\n            if (angular.isUndefined(aggregateAlias)) {\n                aggregateAlias = propertyIdentifier.replace(/\\./g, '_') + aggregateFunction;\n            }\n            var column = {\n                propertyIdentifier: _this.formatPropertyIdentifier(propertyIdentifier, true),\n                title: _this.rbkeyService.getRBKey(\"entity.\" + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, propertyIdentifier) + \".\" + _this.utilityService.listLast(propertyIdentifier, '.')),\n                aggregate: {\n                    aggregateFunction: aggregateFunction,\n                    aggregateAlias: aggregateAlias\n                }\n            };\n            angular.extend(column, options);\n            //Add columns\n            _this.addColumn(column.propertyIdentifier, undefined, column);\n            return _this;\n        };\n        this.addGroupBy = function (groupByAlias) {\n            if (!_this.groupBys) {\n                _this.groupBys = '';\n            }\n            _this.groupBys = _this.utilityService.listAppendUnique(_this.groupBys, groupByAlias);\n            return _this;\n        };\n        this.addDisplayProperty = function (propertyIdentifier, title, options) {\n            if (title === void 0) { title = ''; }\n            if (options === void 0) { options = {}; }\n            var _DividedColumns = propertyIdentifier.trim().split(',');\n            var _DividedTitles = title.trim().split(',');\n            var join = propertyIdentifier.split('.').length > 1;\n            _DividedColumns.forEach(function (column, index) {\n                column = column.trim();\n                if (angular.isDefined(_DividedTitles[index]) && _DividedTitles[index].trim() != '') {\n                    title = _DividedTitles[index].trim();\n                }\n                else {\n                    title = _this.rbkeyService.getRBKey(\"entity.\" + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, column) + \".\" + _this.utilityService.listLast(column, \".\"));\n                }\n                _this.addColumn(_this.formatPropertyIdentifier(column, join), title, options);\n            });\n            return _this;\n        };\n        this.addFilter = function (propertyIdentifier, value, comparisonOperator, logicalOperator, hidden, isKeywordFilter, isOnlyKeywordFilter, filterGroupAlias, filterGroupLogicalOperator) {\n            if (comparisonOperator === void 0) { comparisonOperator = '='; }\n            if (hidden === void 0) { hidden = false; }\n            if (isKeywordFilter === void 0) { isKeywordFilter = true; }\n            if (isOnlyKeywordFilter === void 0) { isOnlyKeywordFilter = false; }\n            if (filterGroupLogicalOperator === void 0) { filterGroupLogicalOperator = 'AND'; }\n            if (!_this.filterGroups[0].filterGroup.length) {\n                logicalOperator = undefined;\n            }\n            if (propertyIdentifier.split('.').length > 1) {\n                _this.processJoin(propertyIdentifier);\n            }\n            //create filter\n            var filter = _this.createFilter(propertyIdentifier, value, comparisonOperator, logicalOperator, hidden);\n            var filterGroupIndex = 0;\n            var filterGroup = _this.filterGroups[0].filterGroup;\n            if (filterGroupAlias) {\n                filterGroup = _this.addFilterGroupWithAlias(filterGroupAlias, filterGroupLogicalOperator);\n                _this.filterGroupAliasMap[filterGroupAlias] = _this.filterGroups[0].filterGroup.length - 1;\n                filterGroupIndex = _this.filterGroups[0].filterGroup.length - 1;\n            }\n            if (filterGroup.filterGroup) {\n                filterGroup.filterGroup.push(filter);\n            }\n            else {\n                filterGroup.push(filter);\n            }\n            _this.notify('collectionConfigUpdated', {\n                collectionConfig: _this\n            });\n            return _this;\n        };\n        this.addLikeFilter = function (propertyIdentifier, value, pattern, logicalOperator, displayPropertyIdentifier, hidden) {\n            if (pattern === void 0) { pattern = '%w%'; }\n            if (hidden === void 0) { hidden = false; }\n            //if filterGroups does not exists then set a default\n            if (!_this.filterGroups) {\n                _this.filterGroups = [{ filterGroup: [] }];\n            }\n            //if filterGroups is longer than 0 then we at least need to default the logical Operator to AND\n            if (_this.filterGroups[0].filterGroup.length && !logicalOperator)\n                logicalOperator = 'AND';\n            var join = propertyIdentifier.split('.').length > 1;\n            if (angular.isUndefined(displayPropertyIdentifier)) {\n                displayPropertyIdentifier = _this.rbkeyService.getRBKey(\"entity.\" + _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.baseEntityName, propertyIdentifier) + \".\" + _this.utilityService.listLast(propertyIdentifier));\n            }\n            //create filter group\n            var filter = new Filter(_this.formatPropertyIdentifier(propertyIdentifier, join), value, 'like', logicalOperator, displayPropertyIdentifier, value, hidden, pattern);\n            _this.filterGroups[0].filterGroup.push(filter);\n            _this.notify('collectionConfigUpdated', {\n                collectionConfig: _this\n            });\n            return _this;\n        };\n        this.createFilter = function (propertyIdentifier, value, comparisonOperator, logicalOperator, hidden) {\n            if (comparisonOperator === void 0) { comparisonOperator = '='; }\n            if (hidden === void 0) { hidden = false; }\n            //if filterGroups does not exists then set a default\n            if (!_this.filterGroups) {\n                _this.filterGroups = [{ filterGroup: [] }];\n            }\n            //if filterGroups is longer than 0 then we at least need to default the logical Operator to AND\n            if (_this.filterGroups[0].filterGroup.length && !logicalOperator)\n                logicalOperator = 'AND';\n            var join = propertyIdentifier.split('.').length > 1;\n            //create filter group\n            var filter = new Filter(_this.formatPropertyIdentifier(propertyIdentifier, join), value, comparisonOperator, logicalOperator, propertyIdentifier.split('.').pop(), value, hidden);\n            return filter;\n        };\n        this.addFilterGroup = function (filterGroup) {\n            var group = {\n                filterGroup: [],\n                logicalOperator: 'AND'\n            };\n            for (var i = 0; i <= filterGroup.length - 1; i++) {\n                var filter = _this.createFilter(filterGroup[i].propertyIdentifier, filterGroup[i].comparisonValue, filterGroup[i].comparisonOperator, filterGroup[i].logicalOperator, filterGroup[i].hidden);\n                group.filterGroup.push(filter);\n            }\n            _this.filterGroups[0].filterGroup.push(group);\n            _this.notify('collectionConfigUpdated', {\n                collectionConfig: _this\n            });\n            return _this;\n        };\n        this.formatFilterGroup = function (filterGroup, filterGroupLogicalOperator) {\n            var group = {\n                filterGroup: []\n            };\n            if (angular.isDefined(filterGroupLogicalOperator) && filterGroupLogicalOperator.length > 0) {\n                group[\"logicalOperator\"] = filterGroupLogicalOperator;\n            }\n            for (var i = 0; i < filterGroup.length; i++) {\n                var filter = _this.createFilter(filterGroup[i].propertyIdentifier, filterGroup[i].comparisonValue, filterGroup[i].comparisonOperator, filterGroup[i].logicalOperator, filterGroup[i].hidden);\n                group.filterGroup.push(filter);\n            }\n            return group;\n        };\n        this.removeFilterGroupByFilterGroupAlias = function (filterGroupAlias) {\n            for (var i in _this.filterGroups[0].filterGroup) {\n                if (_this.filterGroups[0].filterGroup[i].filterGroupAlias\n                    && _this.filterGroups[0].filterGroup[i].filterGroupAlias == filterGroupAlias) {\n                    _this.filterGroups[0].filterGroup.splice(i, 1);\n                    break;\n                }\n            }\n        };\n        this.getFilterGroupIndexByFilterGroupAlias = function (filterGroupAlias, filterGroupLogicalOperator) {\n            if (!_this.filterGroups) {\n                _this.filterGroups = [{ filterGroup: [] }];\n            }\n            return _this.filterGroupAliasMap[filterGroupAlias];\n        };\n        this.addFilterGroupWithAlias = function (filterGroupAlias, filterGroupLogicalOperator) {\n            for (var i in _this.filterGroups[0].filterGroup) {\n                if (_this.filterGroups[0].filterGroup[i].filterGroupAlias) {\n                    return _this.filterGroups[0].filterGroup[i];\n                }\n            }\n            var newFilterGroup = { \"filterGroup\": [] };\n            if (angular.isDefined(filterGroupLogicalOperator) && filterGroupLogicalOperator.length > 0 && _this.filterGroups[0].filterGroup.length > 0) {\n                newFilterGroup[\"logicalOperator\"] = filterGroupLogicalOperator;\n            }\n            else if (_this.filterGroups[0].filterGroup.length > 0) {\n                newFilterGroup[\"logicalOperator\"] = \"AND\";\n            }\n            newFilterGroup['filterGroupAlias'] = filterGroupAlias;\n            _this.filterGroups[0].filterGroup.push(newFilterGroup);\n            return newFilterGroup;\n        };\n        this.upsertFilterGroup = function (filterGroupName, filterGroup) {\n            var filterGroupIndex = _this.getFilterGroupIndexByFilterGroupAlias(filterGroupName);\n            var logicalOperator = \"\";\n            if (_this.filterGroups[0].filterGroup[filterGroupIndex].logicalOperator) {\n                logicalOperator = _this.filterGroups[0].filterGroup[filterGroupIndex].logicalOperator;\n            }\n            _this.filterGroups[0].filterGroup[filterGroupIndex] = _this.formatFilterGroup(filterGroup, logicalOperator);\n            return _this;\n        };\n        this.removeFilter = function (propertyIdentifier, value, comparisonOperator) {\n            if (comparisonOperator === void 0) { comparisonOperator = '='; }\n            _this.removeFilterHelper(_this.filterGroups, propertyIdentifier, value, comparisonOperator);\n            _this.notify('collectionConfigUpdated', {\n                collectionConfig: _this\n            });\n            return _this;\n        };\n        this.removeFilterByDisplayPropertyIdentifier = function (displayPropertyIdentifier) {\n            _this.removeFromFilterGroupsByPropertyIdentifier(_this.filterGroups, displayPropertyIdentifier);\n            _this.removeFromFilterGroupsByPropertyIdentifier(_this.keywordFilterGroups, displayPropertyIdentifier);\n        };\n        this.removeFromFilterGroupsByPropertyIdentifier = function (filterGroups, displayPropertyIdentifier) {\n            for (var j = 0; j < filterGroups.length; j++) {\n                var filterGroup = filterGroups[j].filterGroup;\n                for (var i = 0; i < filterGroup.length; i++) {\n                    var filter = filterGroup[i];\n                    if (filter.displayPropertyIdentifier == displayPropertyIdentifier) {\n                        filterGroup.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        };\n        this.removeFilterHelper = function (filter, propertyIdentifier, value, comparisonOperator, currentGroup) {\n            if (angular.isUndefined(currentGroup)) {\n                currentGroup = filter;\n            }\n            if (angular.isArray(filter)) {\n                angular.forEach(filter, function (key) {\n                    _this.removeFilterHelper(key, propertyIdentifier, value, comparisonOperator, filter);\n                });\n            }\n            else if (angular.isArray(filter.filterGroup)) {\n                _this.removeFilterHelper(filter.filterGroup, propertyIdentifier, value, comparisonOperator, filter.filterGroup);\n            }\n            else {\n                if (filter.propertyIdentifier == propertyIdentifier && filter.value == value && filter.comparisonOperator == comparisonOperator) {\n                    currentGroup.splice(currentGroup.indexOf(filter), 1);\n                }\n            }\n        };\n        this.addCollectionFilter = function (propertyIdentifier, displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly) {\n            if (criteria === void 0) { criteria = 'One'; }\n            if (readOnly === void 0) { readOnly = false; }\n            _this.filterGroups[0].filterGroup.push(new CollectionFilter(_this.formatPropertyIdentifier(propertyIdentifier), displayPropertyIdentifier, displayValue, collectionID, criteria, fieldtype, readOnly));\n            _this.notify('collectionConfigUpdated', {\n                collectionConfig: _this\n            });\n            return _this;\n        };\n        //orderByList in this form: \"property|direction\" concrete: \"skuName|ASC\"\n        this.setOrderBy = function (orderByList) {\n            var orderBys = orderByList.split(',');\n            angular.forEach(orderBys, function (orderBy) {\n                _this.addOrderBy(orderBy);\n            });\n            return _this;\n        };\n        this.clearOrderBy = function () {\n            _this.orderBy = [];\n        };\n        this.addOrderBy = function (orderByString, formatPropertyIdentifier) {\n            if (formatPropertyIdentifier === void 0) { formatPropertyIdentifier = true; }\n            if (!_this.orderBy) {\n                _this.orderBy = [];\n            }\n            var propertyIdentifier = _this.utilityService.listFirst(orderByString, '|');\n            if (formatPropertyIdentifier) {\n                propertyIdentifier = _this.formatPropertyIdentifier(propertyIdentifier);\n            }\n            var direction = _this.utilityService.listLast(orderByString, '|');\n            var orderBy = {\n                propertyIdentifier: propertyIdentifier,\n                direction: direction\n            };\n            _this.orderBy.push(orderBy);\n        };\n        this.toggleOrderBy = function (formattedPropertyIdentifier, singleColumn) {\n            if (singleColumn === void 0) { singleColumn = false; }\n            if (!_this.orderBy) {\n                _this.orderBy = [];\n            }\n            var found = false;\n            for (var i = _this.orderBy.length - 1; i >= 0; i--) {\n                if (_this.orderBy[i].propertyIdentifier == formattedPropertyIdentifier) {\n                    found = true;\n                    if (_this.orderBy[i].direction.toUpperCase() == \"DESC\") {\n                        _this.orderBy[i].direction = \"ASC\";\n                    }\n                    else if (_this.orderBy[i].direction.toUpperCase() == \"ASC\") {\n                        _this.orderBy.splice(i, 1);\n                    }\n                    break;\n                }\n            }\n            var direction = 'desc';\n            if (singleColumn) {\n                _this.orderBy = [];\n                for (var i = 0; i < _this.columns.length; i++) {\n                    if (!_this.columns[i][\"sorting\"]) {\n                        _this.columns[i][\"sorting\"] = {};\n                    }\n                    if (angular.isUndefined(_this.columns[i][\"sorting\"][\"active\"])) {\n                        _this.columns[i][\"sorting\"][\"active\"] = false;\n                    }\n                    if (_this.columns[i]['propertyIdentifier'] == formattedPropertyIdentifier) {\n                        _this.columns[i][\"sorting\"][\"active\"] = true;\n                        _this.columns[i][\"sorting\"][\"priority\"] = 1;\n                        if (!_this.columns[i][\"sorting\"][\"sortOrder\"] || _this.columns[i][\"sorting\"][\"sortOrder\"] === 'desc') {\n                            _this.columns[i][\"sorting\"][\"sortOrder\"] = 'asc';\n                            direction = 'asc';\n                        }\n                        else {\n                            _this.columns[i][\"sorting\"][\"sortOrder\"] = 'desc';\n                            direction = 'desc';\n                        }\n                    }\n                    else if (_this.columns[i][\"sorting\"] && _this.columns[i][\"sorting\"][\"active\"]) {\n                        _this.columns[i][\"sorting\"][\"active\"] = false;\n                        _this.columns[i][\"sorting\"][\"sortOrder\"] = 'asc';\n                    }\n                }\n            }\n            _this.addOrderBy(formattedPropertyIdentifier + '|' + direction, false);\n            _this.notify('swPaginationAction', { type: 'setCurrentPage', payload: 1 });\n        };\n        this.removeOrderBy = function (formattedPropertyIdentifier) {\n            angular.forEach(_this.orderBy, function (orderBy, index) {\n                if (orderBy.propertyIdentifier == formattedPropertyIdentifier) {\n                    _this.orderBy.splice(index, 1);\n                    return true;\n                }\n            });\n            return false;\n        };\n        this.setCurrentPage = function (pageNumber) {\n            _this.currentPage = pageNumber;\n            return _this;\n        };\n        this.getCurrentPage = function () {\n            return _this.currentPage;\n        };\n        this.setPageShow = function (NumberOfPages) {\n            _this.pageShow = NumberOfPages;\n            return _this;\n        };\n        this.getPageShow = function () {\n            return _this.pageShow;\n        };\n        this.setAllRecords = function (allFlag) {\n            if (allFlag === void 0) { allFlag = false; }\n            _this.allRecords = allFlag;\n            return _this;\n        };\n        this.setDistinct = function (flag) {\n            if (flag === void 0) { flag = true; }\n            _this.isDistinct = flag;\n            return _this;\n        };\n        this.setDirtyRead = function (flag) {\n            if (flag === void 0) { flag = false; }\n            _this.dirtyRead = flag;\n            return _this;\n        };\n        this.setKeywords = function (keyword) {\n            _this.keywords = keyword;\n            return _this;\n        };\n        this.setId = function (id) {\n            _this.id = id;\n            return _this;\n        };\n        this.setEventID = function (eventID) {\n            _this.eventID = eventID;\n            return _this;\n        };\n        this.hasFilters = function () {\n            return (_this.filterGroups.length && _this.filterGroups[0].filterGroup.length);\n        };\n        this.hasColumns = function () {\n            return _this.columns != null && _this.columns.length > 0;\n        };\n        this.clearFilters = function () {\n            _this.filterGroups = [{ filterGroup: [] }];\n            return _this;\n        };\n        this.getEntity = function (id) {\n            if (angular.isDefined(id)) {\n                _this.setId(id);\n            }\n            if (_this.baseEntityNameType) {\n                return _this.$hibachi.getEntity(_this.baseEntityNameType, _this.getOptions());\n            }\n            else {\n                return _this.$hibachi.getEntity(_this.baseEntityName, _this.getOptions());\n            }\n        };\n        this.validateFilter = function (filter, currentGroup) {\n            if (angular.isUndefined(currentGroup)) {\n                currentGroup = filter;\n            }\n            if (angular.isArray(filter)) {\n                angular.forEach(filter, function (key) {\n                    _this.validateFilter(key, filter);\n                });\n            }\n            else if (angular.isArray(filter.filterGroup)) {\n                _this.validateFilter(filter.filterGroup, filter.filterGroup);\n            }\n            else {\n                if (((!filter.comparisonOperator || !filter.comparisonOperator.length)\n                    && (!filter.propertyIdentifier || !filter.propertyIdentifier.length))) {\n                    var index = currentGroup.indexOf(filter);\n                    if (index > -1) {\n                        _this.notify('filterItemAction', {\n                            action: 'remove',\n                            filterItemIndex: index\n                        });\n                        currentGroup.splice(index, 1);\n                    }\n                }\n            }\n        };\n        this.getColumns = function () {\n            if (!_this.columns) {\n                _this.columns = [];\n            }\n            return _this.columns;\n        };\n        this.setColumns = function (columns) {\n            _this.columns = columns;\n            return _this;\n        };\n        this.$hibachi = $hibachi;\n        this.rbkeyService = rbkeyService;\n        if (angular.isDefined(this.baseEntityName)) {\n            this.collection = this.$hibachi.getEntityExample(this.baseEntityName);\n            if (angular.isUndefined(this.baseEntityAlias)) {\n                this.baseEntityAlias = '_' + this.baseEntityName.toLowerCase();\n            }\n        }\n    }\n    Object.defineProperty(CollectionConfig.prototype, \"collectionConfigString\", {\n        get: function () {\n            return angular.toJson(this.getCollectionConfig(false));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionConfig.prototype.hasPeriodColumnFromColumns = function (columns) {\n        for (var i in columns) {\n            var column = columns[i];\n            if (column.isPeriod) {\n                return true;\n            }\n        }\n        return false;\n    };\n    CollectionConfig.prototype.removePeriodColumnFromColumns = function (columns) {\n        for (var i in columns) {\n            var column = columns[i];\n            if (column.isPeriod) {\n                columns.splice(i, 1);\n                return;\n            }\n        }\n        return;\n    };\n    CollectionConfig.prototype.getPeriodColumnFromColumns = function (columns) {\n        for (var i in columns) {\n            var column = columns[i];\n            if (column.isPeriod) {\n                return column;\n            }\n        }\n    };\n    CollectionConfig.prototype.notify = function (name, data) {\n        if (angular.isDefined(this.eventID)) {\n            this.observerService.notifyById(name, this.eventID, data);\n        }\n        else {\n            this.observerService.notify(name, data);\n        }\n    };\n    return CollectionConfig;\n}());\nexports.CollectionConfig = CollectionConfig;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/services/collectionconfigservice.ts?")},"../../../org/Hibachi/client/src/collection/services/collectionservice.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/services/collectionservice.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseentityservice_1 = __webpack_require__(/*! ../../core/services/baseentityservice */ \"../../../org/Hibachi/client/src/core/services/baseentityservice.ts\");\nvar CollectionService = /** @class */ (function (_super) {\n    __extends(CollectionService, _super);\n    //@ngInject\n    function CollectionService($injector, $hibachi, utilityService, $filter, $log) {\n        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Collection') || this;\n        _this.$injector = $injector;\n        _this.$hibachi = $hibachi;\n        _this.utilityService = utilityService;\n        _this.$filter = $filter;\n        _this.$log = $log;\n        _this.get = function () {\n            return _this._pageDialogs || [];\n        };\n        //test\n        _this.setFilterCount = function (count) {\n            _this.$log.debug('incrementFilterCount');\n            _this._filterCount = count;\n        };\n        _this.getFilterCount = function () {\n            return _this._filterCount;\n        };\n        _this.getColumns = function () {\n            return _this._collection.collectionConfig.columns;\n        };\n        _this.getFilterPropertiesList = function () {\n            return _this._filterPropertiesList;\n        };\n        _this.getFilterPropertiesListByBaseEntityAlias = function (baseEntityAlias) {\n            return _this._filterPropertiesList[baseEntityAlias];\n        };\n        _this.setFilterPropertiesList = function (value, key) {\n            if (angular.isUndefined(_this._filterPropertiesList[key])) {\n                _this._filterPropertiesList[key] = value;\n            }\n        };\n        _this.stringifyJSON = function (jsonObject) {\n            var jsonString = angular.toJson(jsonObject);\n            return jsonString;\n        };\n        _this.removeFilterItem = function (filterItem, filterGroup) {\n            filterGroup.pop(filterGroup.indexOf(filterItem));\n        };\n        _this.selectFilterItem = function (filterItem) {\n            if (filterItem.$$isClosed) {\n                for (var i in filterItem.$$siblingItems) {\n                    filterItem.$$siblingItems[i].$$isClosed = true;\n                    filterItem.$$siblingItems[i].$$disabled = true;\n                }\n                filterItem.$$isClosed = false;\n                filterItem.$$disabled = false;\n                filterItem.setItemInUse(true);\n            }\n            else {\n                for (var i in filterItem.$$siblingItems) {\n                    filterItem.$$siblingItems[i].$$disabled = false;\n                }\n                filterItem.$$isClosed = true;\n                filterItem.setItemInUse(false);\n            }\n        };\n        _this.selectFilterGroupItem = function (filterGroupItem) {\n            if (filterGroupItem.$$isClosed) {\n                for (var i in filterGroupItem.$$siblingItems) {\n                    filterGroupItem.$$siblingItems[i].$$disabled = true;\n                }\n                filterGroupItem.$$isClosed = false;\n                filterGroupItem.$$disabled = false;\n            }\n            else {\n                for (var i in filterGroupItem.$$siblingItems) {\n                    filterGroupItem.$$siblingItems[i].$$disabled = false;\n                }\n                filterGroupItem.$$isClosed = true;\n            }\n            filterGroupItem.setItemInUse(!filterGroupItem.$$isClosed);\n        };\n        _this.newFilterItem = function (filterItemGroup, setItemInUse, prepareForFilterGroup) {\n            if (angular.isUndefined(prepareForFilterGroup)) {\n                prepareForFilterGroup = false;\n            }\n            var filterItem = {\n                displayPropertyIdentifier: \"\",\n                propertyIdentifier: \"\",\n                comparisonOperator: \"\",\n                value: \"\",\n                $$disabled: false,\n                $$isClosed: true,\n                $$isNew: true,\n                $$siblingItems: filterItemGroup,\n                setItemInUse: setItemInUse\n            };\n            if (filterItemGroup.length !== 0) {\n                filterItem.logicalOperator = \"AND\";\n            }\n            if (prepareForFilterGroup === true) {\n                filterItem.$$prepareForFilterGroup = true;\n            }\n            filterItemGroup.push(filterItem);\n            _this.selectFilterItem(filterItem);\n            return (filterItemGroup.length - 1);\n        };\n        _this.newFilterGroupItem = function (filterItemGroup, setItemInUse) {\n            var filterGroupItem = {\n                filterGroup: [],\n                $$disabled: \"false\",\n                $$isClosed: \"true\",\n                $$siblingItems: filterItemGroup,\n                $$isNew: \"true\",\n                setItemInUse: setItemInUse\n            };\n            if (filterItemGroup.length !== 0) {\n                filterGroupItem.logicalOperator = \"AND\";\n            }\n            filterItemGroup.push(filterGroupItem);\n            _this.selectFilterGroupItem(filterGroupItem);\n            _this.newFilterItem(filterGroupItem.filterGroup, setItemInUse, undefined);\n        };\n        _this.transplantFilterItemIntoFilterGroup = function (filterGroup, filterItem) {\n            var filterGroupItem = {\n                filterGroup: [],\n                $$disabled: \"false\",\n                $$isClosed: \"true\",\n                $$isNew: \"true\"\n            };\n            if (angular.isDefined(filterItem.logicalOperator)) {\n                filterGroupItem.logicalOperator = filterItem.logicalOperator;\n                delete filterItem.logicalOperator;\n            }\n            filterGroupItem.setItemInUse = filterItem.setItemInUse;\n            filterGroupItem.$$siblingItems = filterItem.$$siblingItems;\n            filterItem.$$siblingItems = [];\n            filterGroup.pop(filterGroup.indexOf(filterItem));\n            filterItem.$$prepareForFilterGroup = false;\n            filterGroupItem.filterGroup.push(filterItem);\n            filterGroup.push(filterGroupItem);\n        };\n        _this.formatFilterPropertiesList = function (filterPropertiesList, propertyIdentifier) {\n            _this.$log.debug('format Filter Properties List arguments 2');\n            _this.$log.debug(filterPropertiesList);\n            _this.$log.debug(propertyIdentifier);\n            var simpleGroup = {\n                $$group: 'simple',\n                displayPropertyIdentifier: '-----------------'\n            };\n            filterPropertiesList.data.push(simpleGroup);\n            var drillDownGroup = {\n                $$group: 'drilldown',\n                displayPropertyIdentifier: '-----------------'\n            };\n            filterPropertiesList.data.push(drillDownGroup);\n            var compareCollections = {\n                $$group: 'compareCollections',\n                displayPropertyIdentifier: '-----------------'\n            };\n            filterPropertiesList.data.push(compareCollections);\n            var attributeCollections = {\n                $$group: 'attribute',\n                displayPropertyIdentifier: '-----------------'\n            };\n            filterPropertiesList.data.push(attributeCollections);\n            for (var i in filterPropertiesList.data) {\n                if (angular.isDefined(filterPropertiesList.data[i].ormtype)) {\n                    if (angular.isDefined(filterPropertiesList.data[i].attributeID)) {\n                        filterPropertiesList.data[i].$$group = 'attribute';\n                    }\n                    else {\n                        filterPropertiesList.data[i].$$group = 'simple';\n                    }\n                }\n                if (angular.isDefined(filterPropertiesList.data[i].fieldtype)) {\n                    if (filterPropertiesList.data[i].fieldtype === 'id') {\n                        filterPropertiesList.data[i].$$group = 'simple';\n                    }\n                    if (filterPropertiesList.data[i].fieldtype === 'many-to-one') {\n                        filterPropertiesList.data[i].$$group = 'drilldown';\n                    }\n                    if (filterPropertiesList.data[i].fieldtype === 'many-to-many' || filterPropertiesList.data[i].fieldtype === 'one-to-many') {\n                        filterPropertiesList.data[i].$$group = 'compareCollections';\n                    }\n                }\n                filterPropertiesList.data[i].propertyIdentifier = propertyIdentifier + '.' + filterPropertiesList.data[i].name;\n            }\n            filterPropertiesList.data = _this._orderBy(filterPropertiesList.data, ['-$$group', 'propertyIdentifier'], false);\n        };\n        _this.orderBy = function (propertiesList, predicate, reverse) {\n            return _this._orderBy(propertiesList, predicate, reverse);\n        };\n        _this.$filter = $filter;\n        _this.$log = $log;\n        _this._collection = null;\n        _this._collectionConfig = null;\n        _this._filterPropertiesList = {};\n        _this._filterCount = 0;\n        _this._orderBy = $filter('orderBy');\n        return _this;\n    }\n    return CollectionService;\n}(baseentityservice_1.BaseEntityService));\nexports.CollectionService = CollectionService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/collection/services/collectionservice.ts?")},"../../../org/Hibachi/client/src/core/components/swactioncaller.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swactioncaller.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWActionCallerController = /** @class */ (function () {\n    //@ngInject\n    function SWActionCallerController($scope, $element, $templateRequest, $compile, $timeout, corePartialsPath, utilityService, observerService, $hibachi, rbkeyService, hibachiPathBuilder) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$templateRequest = $templateRequest;\n        this.$compile = $compile;\n        this.$timeout = $timeout;\n        this.corePartialsPath = corePartialsPath;\n        this.utilityService = utilityService;\n        this.observerService = observerService;\n        this.$hibachi = $hibachi;\n        this.rbkeyService = rbkeyService;\n        this.$onInit = function () {\n            //Check if is NOT a ngRouter\n            if (angular.isUndefined(_this.isAngularRoute)) {\n                _this.isAngularRoute = _this.utilityService.isAngularRoute();\n            }\n            if (!_this.isAngularRoute) {\n                _this.actionUrl = _this.$hibachi.buildUrl(_this.action, _this.queryString);\n            }\n            else {\n                _this.actionUrl = '#!/entity/' + _this.action + '/' + _this.queryString.split('=')[1];\n            }\n            //            this.class = this.utilityService.replaceAll(this.utilityService.replaceAll(this.getAction(),':',''),'.','') + ' ' + this.class;\n            _this.type = _this.type || 'link';\n            if (angular.isDefined(_this.titleRbKey)) {\n                _this.title = _this.rbkeyService.getRBKey(_this.titleRbKey);\n            }\n            if (angular.isUndefined(_this.text)) {\n                _this.text = _this.title;\n            }\n            if (_this.type == \"button\") {\n                //handle submit.\n                /** in order to attach the correct controller to local vm, we need a watch to bind */\n                var unbindWatcher = _this.$scope.$watch(function () { return _this.formController; }, function (newValue, oldValue) {\n                    if (newValue !== undefined) {\n                        _this.formController = newValue;\n                    }\n                    unbindWatcher();\n                });\n            }\n            //            this.actionItem = this.getActionItem();\n            //            this.actionItemEntityName = this.getActionItemEntityName();\n            //            this.text = this.getText();\n            //            if(this.getDisabled()){\n            //                this.getDisabledText();\n            //            }else if(this.getConfirm()){\n            //                this.getConfirmText();\n            //            }\n            //\n            //            if(this.modalFullWidth && !this.getDisabled()){\n            //                this.class = this.class + \" modalload-fullwidth\";\n            //            }\n            //\n            //            if(this.modal && !this.getDisabled() && !this.modalFullWidth){\n            //                this.class = this.class + \" modalload\";\n            //            }\n            /*need authentication lookup by api to disable\n            <cfif not attributes.hibachiScope.authenticateAction(action=attributes.action)>\n                <cfset attributes.class &= \" disabled\" />\n            </cfif>\n            */\n            if (_this.eventListeners) {\n                for (var key in _this.eventListeners) {\n                    _this.observerService.attach(_this.eventListeners[key], key);\n                }\n            }\n        };\n        this.submit = function () {\n            _this.$timeout(function () {\n                if (!_this.form) {\n                    _this.$scope.$root.slatwall.doAction(_this.action);\n                }\n                else if (_this.form.$valid) {\n                    _this.formController.submit(_this.action);\n                }\n            });\n        };\n        this.getAction = function () {\n            return _this.action || '';\n        };\n        this.getActionItem = function () {\n            return _this.utilityService.listLast(_this.getAction(), '.');\n        };\n        this.getActionItemEntityName = function () {\n            var firstFourLetters = _this.utilityService.left(_this.actionItem, 4);\n            var firstSixLetters = _this.utilityService.left(_this.actionItem, 6);\n            var minus4letters = _this.utilityService.right(_this.actionItem, 4);\n            var minus6letters = _this.utilityService.right(_this.actionItem, 6);\n            var actionItemEntityName = \"\";\n            if (firstFourLetters === 'list' && _this.actionItem.length > 4) {\n                actionItemEntityName = minus4letters;\n            }\n            else if (firstFourLetters === 'edit' && _this.actionItem.length > 4) {\n                actionItemEntityName = minus4letters;\n            }\n            else if (firstFourLetters === 'save' && _this.actionItem.length > 4) {\n                actionItemEntityName = minus4letters;\n            }\n            else if (firstSixLetters === 'create' && _this.actionItem.length > 6) {\n                actionItemEntityName = minus6letters;\n            }\n            else if (firstSixLetters === 'detail' && _this.actionItem.length > 6) {\n                actionItemEntityName = minus6letters;\n            }\n            else if (firstSixLetters === 'delete' && _this.actionItem.length > 6) {\n                actionItemEntityName = minus6letters;\n            }\n            return actionItemEntityName;\n        };\n        this.getTitle = function () {\n            //if title is undefined then use text\n            if (angular.isUndefined(_this.title) || !_this.title.length) {\n                _this.title = _this.getText();\n            }\n            return _this.title;\n        };\n        this.getTextByRBKeyByAction = function (actionItemType, plural) {\n            if (plural === void 0) { plural = false; }\n            var navRBKey = _this.rbkeyService.getRBKey('admin.define.' + actionItemType + '_nav');\n            var entityRBKey = '';\n            var replaceKey = '';\n            if (plural) {\n                entityRBKey = _this.rbkeyService.getRBKey('entity.' + _this.actionItemEntityName + '_plural');\n                replaceKey = '${itemEntityNamePlural}';\n            }\n            else {\n                entityRBKey = _this.rbkeyService.getRBKey('entity.' + _this.actionItemEntityName);\n                replaceKey = '${itemEntityName}';\n            }\n            return _this.utilityService.replaceAll(navRBKey, replaceKey, entityRBKey);\n        };\n        this.getText = function () {\n            //if we don't have text then make it up based on rbkeys\n            if (angular.isUndefined(_this.text) || (angular.isDefined(_this.text) && !_this.text.length)) {\n                _this.text = _this.rbkeyService.getRBKey(_this.utilityService.replaceAll(_this.getAction(), \":\", \".\") + '_nav');\n                var minus8letters = _this.utilityService.right(_this.text, 8);\n                //if rbkey is still missing. then can we infer it\n                if (minus8letters === '_missing') {\n                    var firstFourLetters = _this.utilityService.left(_this.actionItem, 4);\n                    var firstSixLetters = _this.utilityService.left(_this.actionItem, 6);\n                    var minus4letters = _this.utilityService.right(_this.actionItem, 4);\n                    var minus6letters = _this.utilityService.right(_this.actionItem, 6);\n                    if (firstFourLetters === 'list' && _this.actionItem.length > 4) {\n                        _this.text = _this.getTextByRBKeyByAction('list', true);\n                    }\n                    else if (firstFourLetters === 'edit' && _this.actionItem.length > 4) {\n                        _this.text = _this.getTextByRBKeyByAction('edit', false);\n                    }\n                    else if (firstFourLetters === 'save' && _this.actionItem.length > 4) {\n                        _this.text = _this.getTextByRBKeyByAction('save', false);\n                    }\n                    else if (firstSixLetters === 'create' && _this.actionItem.length > 6) {\n                        _this.text = _this.getTextByRBKeyByAction('create', false);\n                    }\n                    else if (firstSixLetters === 'detail' && _this.actionItem.length > 6) {\n                        _this.text = _this.getTextByRBKeyByAction('detail', false);\n                    }\n                    else if (firstSixLetters === 'delete' && _this.actionItem.length > 6) {\n                        _this.text = _this.getTextByRBKeyByAction('delete', false);\n                    }\n                }\n                if (_this.utilityService.right(_this.text, 8)) {\n                    _this.text = _this.rbkeyService.getRBKey(_this.utilityService.replaceAll(_this.getAction(), \":\", \".\"));\n                }\n            }\n            if (!_this.title || (_this.title && !_this.title.length)) {\n                _this.title = _this.text;\n            }\n            return _this.text;\n        };\n        this.getDisabled = function () {\n            //if item is disabled\n            if (angular.isDefined(_this.disabled) && _this.disabled) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n        this.getDisabledText = function () {\n            if (_this.getDisabled()) {\n                //and no disabled text specified\n                if (angular.isUndefined(_this.disabledtext) || !_this.disabledtext.length) {\n                    var disabledrbkey = _this.utilityService.replaceAll(_this.action, ':', '.') + '_disabled';\n                    _this.disabledtext = _this.rbkeyService.getRBKey(disabledrbkey);\n                }\n                //add disabled class\n                _this.class += \" btn-disabled\";\n                _this.confirm = false;\n                return _this.disabledtext;\n            }\n            return \"\";\n        };\n        this.getConfirm = function () {\n            if (angular.isDefined(_this.confirm) && _this.confirm) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n        this.getConfirmText = function () {\n            if (_this.getConfirm()) {\n                if (angular.isUndefined(_this.confirmtext) && _this.confirmtext.length) {\n                    var confirmrbkey = _this.utilityService.replaceAll(_this.action, ':', '.') + '_confirm';\n                    _this.confirmtext = _this.rbkeyService.getRBKey(confirmrbkey);\n                    /*<cfif right(attributes.confirmtext, \"8\") eq \"_missing\">\n                        <cfset attributes.confirmtext = replace(attributes.hibachiScope.rbKey(\"admin.define.delete_confirm\"),'${itemEntityName}', attributes.hibachiScope.rbKey('entity.#actionItemEntityName#'), \"all\") />\n                    </cfif>*/\n                }\n                _this.class += \" alert-confirm\";\n                return _this.confirm;\n            }\n            return \"\";\n        };\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$timeout = $timeout;\n        this.$templateRequest = $templateRequest;\n        this.$compile = $compile;\n        this.rbkeyService = rbkeyService;\n        this.$hibachi = $hibachi;\n        this.utilityService = utilityService;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.$templateRequest(this.hibachiPathBuilder.buildPartialsPath(corePartialsPath) + \"actioncaller.html\").then(function (html) {\n            var template = angular.element(html);\n            _this.$element.parent().append(template);\n            $compile(template)($scope);\n            //need to perform init after promise completes\n            //this.init();\n        });\n    }\n    return SWActionCallerController;\n}());\nexports.SWActionCallerController = SWActionCallerController;\nvar SWActionCaller = /** @class */ (function () {\n    function SWActionCaller(partialsPath, utiltiyService, $hibachi) {\n        this.partialsPath = partialsPath;\n        this.utiltiyService = utiltiyService;\n        this.$hibachi = $hibachi;\n        this.restrict = 'EA';\n        this.scope = {};\n        this.bindToController = {\n            action: \"@\",\n            text: \"@\",\n            type: \"@\",\n            queryString: \"@\",\n            title: \"@?\",\n            titleRbKey: \"@?\",\n            'class': \"@\",\n            icon: \"@\",\n            iconOnly: \"=\",\n            name: \"@\",\n            confirm: \"=\",\n            confirmtext: \"@\",\n            disabled: \"=\",\n            disabledtext: \"@\",\n            modal: \"=\",\n            modalFullWidth: \"=\",\n            id: \"@\",\n            isAngularRoute: \"=?\",\n            eventListeners: '=?'\n        };\n        this.require = { formController: \"^?swForm\", form: \"^?form\" };\n        this.controller = SWActionCallerController;\n        this.controllerAs = \"swActionCaller\";\n        this.link = function (scope, element, attrs) {\n            if (angular.isDefined(scope.swActionCaller.formController)) {\n                scope.formController = scope.swActionCaller.formController;\n            }\n        };\n    }\n    SWActionCaller.Factory = function () {\n        var directive = function (partialsPath, utiltiyService, $hibachi) { return new SWActionCaller(partialsPath, utiltiyService, $hibachi); };\n        directive.$inject = [\n            'partialsPath',\n            'utilityService',\n            '$hibachi'\n        ];\n        return directive;\n    };\n    return SWActionCaller;\n}());\nexports.SWActionCaller = SWActionCaller;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swactioncaller.ts?")},"../../../org/Hibachi/client/src/core/components/swactioncallerdropdown.ts":
/*!******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swactioncallerdropdown.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWActionCallerDropdownController = /** @class */ (function () {\n    function SWActionCallerDropdownController() {\n        this.title = this.title || '';\n        this.icon = this.icon || 'plus';\n        this.type = this.type || 'button';\n        this.dropdownClass = this.dropdownClass || '';\n        this.dropdownId = this.dropdownId || '';\n        this.buttonClass = this.buttonClass || 'btn-primary';\n    }\n    return SWActionCallerDropdownController;\n}());\nexports.SWActionCallerDropdownController = SWActionCallerDropdownController;\nvar SWActionCallerDropdown = /** @class */ (function () {\n    function SWActionCallerDropdown(corePartialsPath, hibachiPathBuilder) {\n        this.corePartialsPath = corePartialsPath;\n        this.restrict = 'E';\n        this.scope = {};\n        this.transclude = true;\n        this.bindToController = {\n            title: \"@\",\n            icon: \"@\",\n            type: \"=\",\n            dropdownClass: \"@\",\n            dropdownId: \"@\",\n            buttonClass: \"@\"\n        };\n        this.controller = SWActionCallerDropdownController;\n        this.controllerAs = \"swActionCallerDropdown\";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'actioncallerdropdown.html';\n    }\n    SWActionCallerDropdown.Factory = function () {\n        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWActionCallerDropdown(corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];\n        return directive;\n    };\n    return SWActionCallerDropdown;\n}());\nexports.SWActionCallerDropdown = SWActionCallerDropdown;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swactioncallerdropdown.ts?")},"../../../org/Hibachi/client/src/core/components/swclickoutside.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swclickoutside.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWClickOutside = /** @class */ (function () {\n    //@ngInject\n    function SWClickOutside($document, $timeout, utilityService) {\n        var _this = this;\n        this.$document = $document;\n        this.$timeout = $timeout;\n        this.utilityService = utilityService;\n        this.restrict = 'A';\n        this.scope = {\n            swClickOutside: '&'\n        };\n        this.link = function (scope, elem, attr) {\n            _this.$document.on('click', function (e) {\n                if (!e || !e.target)\n                    return;\n                //check if our element already hidden\n                if (angular.element(elem).hasClass(\"ng-hide\")) {\n                    return;\n                }\n                if (e.target !== elem && elem && elem[0] && !_this.utilityService.isDescendantElement(elem[0], e.target)) {\n                    _this.$timeout(function () {\n                        scope.swClickOutside();\n                    });\n                }\n            });\n        };\n        this.$document = $document;\n        this.$timeout = $timeout;\n        this.utilityService = utilityService;\n    }\n    SWClickOutside.Factory = function () {\n        var directive = function ($document, $timeout, utilityService) { return new SWClickOutside($document, $timeout, utilityService); };\n        directive.$inject = [\n            '$document', '$timeout', 'utilityService'\n        ];\n        return directive;\n    };\n    return SWClickOutside;\n}());\nexports.SWClickOutside = SWClickOutside;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swclickoutside.ts?")},"../../../org/Hibachi/client/src/core/components/swcollectioncolumn.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swcollectioncolumn.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWCollectionColumnController = /** @class */ (function () {\n    function SWCollectionColumnController() {\n    }\n    return SWCollectionColumnController;\n}());\nexports.SWCollectionColumnController = SWCollectionColumnController;\nvar SWCollectionColumn = /** @class */ (function () {\n    //@ngInject\n    function SWCollectionColumn(scopeService, utilityService) {\n        var _this = this;\n        this.scopeService = scopeService;\n        this.utilityService = utilityService;\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.bindToController = {\n            propertyIdentifier: "@",\n            fallbackPropertyIdentifiers: "@?",\n            isVisible: "=?",\n            isSearchable: "=?",\n            isDeletable: "=?",\n            isExportable: "=?",\n            isKeywordColumn: "=?",\n            isOnlyKeywordColumn: "=?",\n            tdclass: "@?",\n            hidden: "=?"\n        };\n        this.controller = SWCollectionColumn;\n        this.controllerAs = "swCollectionColumn";\n        this.template = "";\n        this.link = function (scope, element, attrs) {\n            if (angular.isUndefined(scope.swCollectionColumn.isKeywordColumn)) {\n                scope.swCollectionColumn.isKeywordColumn = false;\n            }\n            if (angular.isUndefined(scope.swCollectionColumn.isOnlyKeywordColumn)) {\n                scope.swCollectionColumn.isOnlyKeywordColumn = scope.swCollectionColumn.isKeywordColumn;\n            }\n            if (angular.isUndefined(scope.swCollectionColumn.isVisible)) {\n                scope.swCollectionColumn.isVisible = true;\n            }\n            if (angular.isUndefined(scope.swCollectionColumn.isSearchable)) {\n                scope.swCollectionColumn.isSearchable = false;\n            }\n            if (angular.isUndefined(scope.swCollectionColumn.isDeletable)) {\n                scope.swCollectionColumn.isDeletable = false;\n            }\n            if (angular.isUndefined(scope.swCollectionColumn.isExportable)) {\n                scope.swCollectionColumn.isExportable = true;\n            }\n            var column = {\n                propertyIdentifier: scope.swCollectionColumn.propertyIdentifier,\n                fallbackPropertyIdentifiers: scope.swCollectionColumn.fallbackPropertyIdentifiers,\n                isVisible: scope.swCollectionColumn.isVisible,\n                isSearchable: scope.swCollectionColumn.isSearchable,\n                isDeletable: scope.swCollectionColumn.isDeletable,\n                isExportable: scope.swCollectionColumn.isExportable,\n                hidden: scope.swCollectionColumn.hidden,\n                tdclass: scope.swCollectionColumn.tdclass,\n                isKeywordColumn: scope.swCollectionColumn.isKeywordColumn,\n                isOnlyKeywordColumn: scope.swCollectionColumn.isOnlyKeywordColumn\n            };\n            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");\n            if (angular.isDefined(currentScope.swCollectionConfig)) {\n                //push directly here because we\'ve already built the column object\n                currentScope.swCollectionConfig.columns.push(column);\n                currentScope.swCollectionConfig.columnsDeferred.resolve();\n            }\n            else {\n                throw ("Could not find swCollectionConfig in the parent scope from swcollectioncolumn");\n            }\n        };\n    }\n    SWCollectionColumn.Factory = function () {\n        var directive = function (scopeService, utilityService) { return new SWCollectionColumn(scopeService, utilityService); };\n        directive.$inject = [\n            \'scopeService\',\n            \'utilityService\'\n        ];\n        return directive;\n    };\n    return SWCollectionColumn;\n}());\nexports.SWCollectionColumn = SWCollectionColumn;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swcollectioncolumn.ts?')},"../../../org/Hibachi/client/src/core/components/swcollectionconfig.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swcollectionconfig.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWCollectionConfigController = /** @class */ (function () {\n    //@ngInject\n    function SWCollectionConfigController($transclude, $q, collectionConfigService) {\n        this.$transclude = $transclude;\n        this.$q = $q;\n        this.collectionConfigService = collectionConfigService;\n        this.filters = [];\n        this.columns = [];\n        this.orderBys = [];\n        this.keywordColumns = [];\n        this.columnsDeferred = this.$q.defer();\n        this.columnsPromise = this.columnsDeferred.promise;\n        this.filtersDeferred = this.$q.defer();\n        this.filtersPromise = this.filtersDeferred.promise;\n        this.orderBysDeferred = this.$q.defer();\n        this.orderBysPromise = this.columnsDeferred.promise;\n    }\n    return SWCollectionConfigController;\n}());\nexports.SWCollectionConfigController = SWCollectionConfigController;\nvar SWCollectionConfig = /** @class */ (function () {\n    // @ngInject\n    function SWCollectionConfig(collectionConfigService, listingService, scopeService, $q) {\n        var _this = this;\n        this.collectionConfigService = collectionConfigService;\n        this.listingService = listingService;\n        this.scopeService = scopeService;\n        this.$q = $q;\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.transclude = {\n            columns: "?swCollectionColumns",\n            filters: "?swCollectionFilters",\n            orderBys: "?swCollectionOrderBys"\n        };\n        this.bindToController = {\n            allRecords: "=?",\n            collectionConfigProperty: "@?",\n            distinct: "=?",\n            entityName: "@",\n            filterFlag: "=?",\n            inListingDisplay: "=?",\n            multiCollectionConfigProperty: "@?",\n            pageShow: "@?",\n            parentDirectiveControllerAsName: "@?",\n            parentDeferredProperty: "@?"\n        };\n        this.controller = SWCollectionConfigController;\n        this.controllerAs = "swCollectionConfig";\n        this.template = " \\n        <div ng-transclude=\\"columns\\"></div>\\n        <div ng-transclude=\\"filters\\"></div>\\n        <div ng-transclude=\\"orderBys\\"></div>\\n    ";\n        this.link = function (scope, element, attrs) {\n            //some automatic configuration for listing display\n            if (angular.isUndefined(scope.swCollectionConfig.inListingDisplay)) {\n                scope.swCollectionConfig.inListingDisplay = false;\n            }\n            if (scope.swCollectionConfig.inListingDisplay) {\n                scope.swCollectionConfig.parentDirectiveControllerAsName = "swListingDisplay";\n                scope.swCollectionConfig.parentDeferredProperty = "singleCollectionDeferred";\n            }\n            if (angular.isUndefined(scope.swCollectionConfig.entityName)) {\n                throw ("You must provide an entityname to swCollectionConfig");\n            }\n            if (angular.isUndefined(scope.swCollectionConfig.parentDirectiveControllerAsName) && !scope.swCollectionConfig.inListingDisplay) {\n                throw ("You must provide the parent directives Controller-As Name to swCollectionConfig");\n            }\n            if (angular.isUndefined(scope.swCollectionConfig.collectionConfigProperty)) {\n                scope.swCollectionConfig.collectionConfigProperty = "collectionConfig";\n            }\n            if (angular.isUndefined(scope.swCollectionConfig.allRecords)) {\n                scope.swCollectionConfig.allRecords = false;\n            }\n            if (angular.isUndefined(scope.swCollectionConfig.pageShow)) {\n                scope.swCollectionConfig.pageShow = 10;\n            }\n            if (angular.isUndefined(scope.swCollectionConfig.distinct)) {\n                scope.swCollectionConfig.distinct = false;\n            }\n            if (angular.isUndefined(scope.swCollectionConfig.filterFlag)) {\n                scope.swCollectionConfig.filterFlag = true; //assume there are filters\n            }\n            var allCollectionConfigPromises = [];\n            var currentScope = scope;\n            //we want to wait for all sibling scopes before pushing the collection config\n            while (angular.isDefined(currentScope)) {\n                if (angular.isDefined(currentScope.swCollectionConfig)) {\n                    allCollectionConfigPromises.push(currentScope.swCollectionConfig.columnsPromise);\n                    if (scope.swCollectionConfig.filterFlag) {\n                        allCollectionConfigPromises.push(currentScope.swCollectionConfig.filtersPromise);\n                    }\n                }\n                currentScope = currentScope.$$nextSibling;\n                if (currentScope == null) {\n                    break;\n                }\n            }\n            var newCollectionConfig = _this.collectionConfigService.newCollectionConfig(scope.swCollectionConfig.entityName);\n            newCollectionConfig.setAllRecords(scope.swCollectionConfig.allRecords);\n            newCollectionConfig.setDistinct(scope.swCollectionConfig.distinct);\n            newCollectionConfig.setPageShow(scope.swCollectionConfig.pageShow);\n            var currentScope = _this.scopeService.getRootParentScope(scope, scope.swCollectionConfig.parentDirectiveControllerAsName);\n            if (currentScope[scope.swCollectionConfig.parentDirectiveControllerAsName]) {\n                var parentDirective = currentScope[scope.swCollectionConfig.parentDirectiveControllerAsName];\n            }\n            else {\n                throw ("swCollectionConfig was unable to find a parent scope");\n            }\n            scope.swCollectionConfig.columnsPromise.then(function () {\n                angular.forEach(scope.swCollectionConfig.columns, function (column) {\n                    newCollectionConfig.addDisplayProperty(column.propertyIdentifier, \'\', column);\n                });\n            });\n            scope.swCollectionConfig.filtersPromise.then(function () {\n                angular.forEach(scope.swCollectionConfig.filters, function (filter) {\n                    newCollectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);\n                });\n            });\n            scope.swCollectionConfig.orderBysPromise.then(function () {\n                angular.forEach(scope.swCollectionConfig.orderBys, function (orderBy) {\n                    newCollectionConfig.addOrderBy(orderBy);\n                });\n            });\n            _this.$q.all(allCollectionConfigPromises).then(function () {\n                if (angular.isDefined(parentDirective)) {\n                    if (angular.isDefined(scope.swCollectionConfig.multiCollectionConfigProperty)\n                        && angular.isDefined(parentDirective[scope.swCollectionConfig.multiCollectionConfigProperty])) {\n                        parentDirective[scope.swCollectionConfig.multiCollectionConfigProperty].push(newCollectionConfig);\n                    }\n                    else if (angular.isDefined(parentDirective[scope.swCollectionConfig.collectionConfigProperty])) {\n                        parentDirective[scope.swCollectionConfig.collectionConfigProperty] = newCollectionConfig;\n                    }\n                    else {\n                        throw ("swCollectionConfig could not locate a collection config property to bind it\'s collection to");\n                    }\n                    if (angular.isDefined(parentDirective[scope.swCollectionConfig.parentDeferredProperty])) {\n                        parentDirective[scope.swCollectionConfig.parentDeferredProperty].resolve();\n                    }\n                    else {\n                        //throw("SWCollectionConfig cannot resolve rule");\n                    }\n                }\n            }, function (reason) {\n                throw ("SWCollectionConfig is having some issues.");\n            });\n        };\n    }\n    SWCollectionConfig.Factory = function () {\n        var directive = function (collectionConfigService, listingService, scopeService, $q) { return new SWCollectionConfig(collectionConfigService, listingService, scopeService, $q); };\n        directive.$inject = [\n            \'collectionConfigService\',\n            \'listingService\',\n            \'scopeService\',\n            \'$q\'\n        ];\n        return directive;\n    };\n    return SWCollectionConfig;\n}());\nexports.SWCollectionConfig = SWCollectionConfig;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swcollectionconfig.ts?')},"../../../org/Hibachi/client/src/core/components/swcollectionfilter.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swcollectionfilter.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWCollectionFilterController = /** @class */ (function () {\n    function SWCollectionFilterController() {\n    }\n    return SWCollectionFilterController;\n}());\nexports.SWCollectionFilterController = SWCollectionFilterController;\nvar SWCollectionFilter = /** @class */ (function () {\n    //@ngInject\n    function SWCollectionFilter(scopeService, utilityService) {\n        var _this = this;\n        this.scopeService = scopeService;\n        this.utilityService = utilityService;\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.bindToController = {\n            propertyIdentifier: "@",\n            comparisonOperator: "@?",\n            comparisonValue: "@?",\n            logicalOperator: "@?",\n            hidden: "@?"\n        };\n        this.controller = SWCollectionFilterController;\n        this.controllerAs = "SWCollectionFilter";\n        this.template = "";\n        this.link = function (scope, element, attrs) {\n            var filter = {\n                propertyIdentifier: scope.SWCollectionFilter.propertyIdentifier,\n                comparisonOperator: scope.SWCollectionFilter.comparisonOperator,\n                comparisonValue: scope.SWCollectionFilter.comparisonValue,\n                logicalOperator: scope.SWCollectionFilter.logicalOperator,\n                hidden: scope.SWCollectionFilter.hidden\n            };\n            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");\n            if (angular.isDefined(currentScope.swCollectionConfig)) {\n                currentScope.swCollectionConfig.filters.push(filter);\n                currentScope.swCollectionConfig.filtersDeferred.resolve();\n            }\n            else {\n                throw ("could not find swCollectionConfig in the parent scope from swcollectionfilter");\n            }\n        };\n    }\n    SWCollectionFilter.Factory = function () {\n        var directive = function (scopeService, utilityService) { return new SWCollectionFilter(scopeService, utilityService); };\n        directive.$inject = [\n            \'scopeService\',\n            \'utilityService\'\n        ];\n        return directive;\n    };\n    return SWCollectionFilter;\n}());\nexports.SWCollectionFilter = SWCollectionFilter;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swcollectionfilter.ts?')},"../../../org/Hibachi/client/src/core/components/swcollectionorderby.ts":
/*!***************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swcollectionorderby.ts ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWCollectionOrderByController = /** @class */ (function () {\n    function SWCollectionOrderByController() {\n    }\n    return SWCollectionOrderByController;\n}());\nexports.SWCollectionOrderByController = SWCollectionOrderByController;\nvar SWCollectionOrderBy = /** @class */ (function () {\n    //@ngInject\n    function SWCollectionOrderBy(scopeService) {\n        var _this = this;\n        this.scopeService = scopeService;\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.bindToController = {\n            orderBy: "@"\n        };\n        this.controller = SWCollectionOrderByController;\n        this.controllerAs = "SWCollectionOrderBy";\n        this.template = "";\n        this.link = function (scope, element, attrs) {\n            var orderBy = scope.SWCollectionOrderBy.orderBy;\n            var currentScope = _this.scopeService.getRootParentScope(scope, "swCollectionConfig");\n            if (angular.isDefined(currentScope.swCollectionConfig)) {\n                currentScope.swCollectionConfig.orderBys.push(orderBy);\n                currentScope.swCollectionConfig.orderBysDeferred.resolve();\n            }\n            else {\n                throw ("could not find swCollectionConfig in the parent scope from swcollectionorderby");\n            }\n        };\n    }\n    SWCollectionOrderBy.Factory = function () {\n        var directive = function (scopeService) { return new SWCollectionOrderBy(scopeService); };\n        directive.$inject = [\n            \'scopeService\'\n        ];\n        return directive;\n    };\n    return SWCollectionOrderBy;\n}());\nexports.SWCollectionOrderBy = SWCollectionOrderBy;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swcollectionorderby.ts?')},"../../../org/Hibachi/client/src/core/components/swcolumnsorter.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swcolumnsorter.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWColumnSorter = /** @class */ (function () {\n    //@ngInject\n    function SWColumnSorter(observerService, corePartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'AE',\n            scope: {\n                column: \"=\",\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + \"columnsorter.html\",\n            link: function (scope, element, attrs) {\n                var orderBy = {\n                    \"propertyIdentifier\": scope.column.propertyIdentifier,\n                };\n                scope.sortAsc = function () {\n                    orderBy.direction = 'Asc';\n                    this.observerService.notify('sortByColumn', orderBy);\n                };\n                scope.sortDesc = function () {\n                    orderBy.direction = 'Desc';\n                    observerService.notify('sortByColumn', orderBy);\n                };\n            }\n        };\n    }\n    SWColumnSorter.Factory = function () {\n        var directive = function (observerService, corePartialsPath, hibachiPathBuilder) { return new SWColumnSorter(observerService, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            'observerService',\n            'corePartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWColumnSorter;\n}());\nexports.SWColumnSorter = SWColumnSorter;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swcolumnsorter.ts?")},"../../../org/Hibachi/client/src/core/components/swconfirm.ts":
/*!*****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swconfirm.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\n/**\n * <------------------------------------------------------------------------------------------------------------------------------------\x3e\n *   This directive can be used to prompt the user with a confirmation dialog.\n *\n *   Example Usage 1:\n *   <a swconfirm\n *   \t\t\t\t\t\tuse-rb-key=true\n * \t\t\t\t\t\t\tyes-text="define.yes"\n * \t\t\t\t\t\t\tno-text="define.no"\n * \t\t\t\t\t\t\tconfirm-text="define.confirm"\n * \t\t\t\t\t\t\tmessage-text="define.delete.message"\n * \t\t\t\t\t\t\tcallback="someFunction()">\n *   </a>\n *   Alternate Version (No Rbkeys):\n *   <a swconfirm\n *   \t\t\t\t\t\tuse-rb-key=false\n * \t\t\t\t\t\t\tyes-text="Sure"\n * \t\t\t\t\t\t\tno-text="Not Sure!"\n * \t\t\t\t\t\t\tconfirm-text="Sure"\n * \t\t\t\t\t\t\tmessage-text="Are you sure?"\n * \t\t\t\t\t\t\tcallback="sure()">\n *   </a>\n *\n *   Note: Because the template is dynamic, the following keywords can not be used anywhere in the text for this modal as we interpolate\n *   those.\n *\n *   [yes] [no] [confirm] [message] [callback]\n *\n *   The above words in upper-case can be used - just not those words inside square brackets.\n *   Note: Your callback function on-confirm should return true;\n *<-------------------------------------------------------------------------------------------------------------------------------------\x3e\n */\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWConfirm = /** @class */ (function () {\n    //@ngInject\n    function SWConfirm($log, $modal) {\n        var buildConfirmationModal = function (simple, useRbKey, confirmText, messageText, noText, yesText) {\n            /* Keys */\n            var confirmKey = "[confirm]";\n            var messageKey = "[message]";\n            var noKey = "[no]";\n            var yesKey = "[yes]";\n            var swRbKey = "sw-rbkey=";\n            /* Values */\n            var confirmVal = "<confirm>";\n            var messageVal = "<message>";\n            var noVal = "<no>";\n            var yesVal = "<yes>";\n            /* Parse Tags */\n            var startTag = "\\"\'";\n            var endTag = "\'\\"";\n            var startParen = "\'";\n            var endParen = "\'";\n            var empty = "";\n            /* Modal String */\n            var parsedKeyString = "";\n            var finishedString = "";\n            //Figure out which version of this tag we are using\n            var templateString = "<div>" +\n                "<div class=\'modal-header\'><a class=\'close\' data-dismiss=\'modal\' ng-click=\'cancel()\'>×</a><h3 [confirm]><confirm></h3></div>" +\n                "<div class=\'modal-body\' [message]>" + "<message>" + "</div>" +\n                "<div class=\'modal-footer\'>" +\n                "<button class=\'btn btn-sm btn-default btn-inverse\' ng-click=\'cancel()\' [no]><no></button>" +\n                "<button class=\'btn btn-sm btn-default btn-primary\' ng-click=\'fireCallback(callback)\' [yes]><yes></button></div></div></div>";\n            /* Use RbKeys or Not? */\n            if (useRbKey === "true") {\n                $log.debug("Using RbKey? " + useRbKey);\n                /* Then decorate the template with the keys. */\n                confirmText = swRbKey + startTag + confirmText + endTag;\n                messageText = swRbKey + startTag + messageText + endTag;\n                yesText = swRbKey + startTag + yesText + endTag;\n                noText = swRbKey + startTag + noText + endTag;\n                parsedKeyString = templateString.replace(confirmKey, confirmText)\n                    .replace(messageText, messageText)\n                    .replace(noKey, noText)\n                    .replace(yesKey, yesText);\n                $log.debug(finishedString);\n                finishedString = parsedKeyString.replace(confirmKey, empty)\n                    .replace(messageVal, empty)\n                    .replace(noVal, empty)\n                    .replace(yesVal, empty);\n                $log.debug(finishedString);\n                return finishedString;\n            }\n            else {\n                /* Then decorate the template without the keys. */\n                $log.debug("Using RbKey? " + useRbKey);\n                parsedKeyString = templateString.replace(confirmVal, confirmText)\n                    .replace(messageVal, messageText)\n                    .replace(noVal, noText)\n                    .replace(yesVal, yesText);\n                finishedString = parsedKeyString.replace(confirmKey, empty)\n                    .replace(messageKey, empty)\n                    .replace(noKey, empty)\n                    .replace(yesKey, empty);\n                $log.debug(finishedString);\n                return finishedString;\n            }\n        };\n        return {\n            restrict: \'EA\',\n            scope: {\n                callback: "&",\n                entity: "="\n            },\n            link: function (scope, element, attr) {\n                /* Grab the template and build the modal on click */\n                $log.debug("Modal is: ");\n                $log.debug($modal);\n                element.bind(\'click\', function () {\n                    /* Default Values */\n                    var useRbKey = attr.useRbKey || "false";\n                    var simple = attr.simple || false;\n                    var yesText = attr.yesText || "define.yes";\n                    var noText = attr.noText || "define.no";\n                    var confirmText = attr.confirmText || "define.delete";\n                    var messageText = attr.messageText || "define.delete_message";\n                    var templateString = buildConfirmationModal(simple, useRbKey, confirmText, messageText, noText, yesText);\n                    var modalInstance = $modal.open({\n                        template: templateString,\n                        controller: \'confirmationController\',\n                        scope: scope\n                    });\n                    /**\n                        * Handles the result - callback or dismissed\n                        */\n                    modalInstance.result.then(function (result) {\n                        $log.debug("Result:" + result);\n                        return true;\n                    }, function () {\n                        //There was an error\n                    });\n                }); //<--end bind\n            }\n        };\n    }\n    SWConfirm.Factory = function () {\n        var directive = function ($log, $modal) { return new SWConfirm($log, $modal); };\n        directive.$inject = [\'$log\', \'$modal\'];\n        return directive;\n    };\n    return SWConfirm;\n}());\nexports.SWConfirm = SWConfirm;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swconfirm.ts?')},"../../../org/Hibachi/client/src/core/components/swdirective.ts":
/*!*******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swdirective.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWDirective = /** @class */ (function () {\n    //@ngInject\n    function SWDirective($compile, utilityService) {\n        return {\n            restrict: 'AE',\n            //replace:true,\n            scope: {\n                variables: \"=\",\n                directiveTemplate: \"=\"\n            },\n            controllerAs: \"swDirective\",\n            link: function (scope, element, attrs) {\n                var tempVariables = {};\n                angular.forEach(scope.variables, function (value, key) {\n                    if (key.toString().charAt(0) != \"$\" && value !== \" \") {\n                        tempVariables[utilityService.keyToAttributeString(key)] = value;\n                    }\n                });\n                scope.variables = tempVariables;\n                var template = '<' + scope.directiveTemplate + ' ';\n                if (angular.isDefined(scope.variables)) {\n                    angular.forEach(scope.variables, function (value, key) {\n                        if (!angular.isString(value) && !angular.isNumber(value)) {\n                            template += ' ' + key + '=\"swDirective.' + 'variables.' + key + '\" ';\n                        }\n                        else {\n                            template += ' ' + key + '=\"' + value + '\" ';\n                        }\n                    });\n                }\n                template += '>';\n                template += '</' + scope.directiveTemplate + '>';\n                // Render the template.\n                element.html($compile(template)(scope));\n            }\n        };\n    }\n    SWDirective.Factory = function () {\n        var directive = function ($compile, utilityService) { return new SWDirective($compile, utilityService); };\n        directive.$inject = [\n            '$compile',\n            'utilityService'\n        ];\n        return directive;\n    };\n    return SWDirective;\n}());\nexports.SWDirective = SWDirective;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swdirective.ts?")},"../../../org/Hibachi/client/src/core/components/swdraggable.ts":
/*!*******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swdraggable.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWDraggableController = /** @class */ (function () {\n    //@ngInject\n    function SWDraggableController() {\n        if (angular.isUndefined(this.draggable)) {\n            this.draggable = false;\n        }\n    }\n    return SWDraggableController;\n}());\nvar SWDraggable = /** @class */ (function () {\n    //@ngInject\n    function SWDraggable(corePartialsPath, utilityService, draggableService, hibachiPathBuilder) {\n        var _this = this;\n        this.corePartialsPath = corePartialsPath;\n        this.utilityService = utilityService;\n        this.draggableService = draggableService;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.bindToController = {\n            //all fields required\n            draggable: "=",\n            draggableRecord: "=",\n            draggableKey: "="\n        };\n        this.controller = SWDraggableController;\n        this.controllerAs = "swDraggable";\n        this.link = function (scope, element, attrs) {\n            scope.$watch(\'swDraggable.draggable\', function (newValue, oldValue) {\n                angular.element(element).attr("draggable", newValue);\n                var id = angular.element(element).attr("id");\n                if (!id) {\n                    id = _this.utilityService.createID(32);\n                }\n                if (newValue) {\n                    element.bind("dragstart", function (e) {\n                        e = e.originalEvent || e;\n                        e.stopPropagation();\n                        if (!scope.swDraggable.draggable)\n                            return false;\n                        element.addClass("s-dragging");\n                        scope.swDraggable.draggableRecord.draggableStartKey = scope.swDraggable.draggableKey;\n                        e.dataTransfer.setData("application/json", angular.toJson(scope.swDraggable.draggableRecord));\n                        e.dataTransfer.effectAllowed = "move";\n                        e.dataTransfer.setDragImage(element[0], 0, 0);\n                    });\n                    element.bind("dragend", function (e) {\n                        e = e.originalEvent || e;\n                        e.stopPropagation();\n                        element.removeClass("s-dragging");\n                    });\n                }\n                else {\n                    element.unbind("dragstart");\n                    element.unbind("dragged");\n                }\n            });\n        };\n    }\n    SWDraggable.Factory = function () {\n        var directive = function (corePartialsPath, utilityService, draggableService, hibachiPathBuilder) { return new SWDraggable(corePartialsPath, utilityService, draggableService, hibachiPathBuilder); };\n        directive.$inject = [\n            \'corePartialsPath\',\n            \'utilityService\',\n            \'draggableService\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWDraggable;\n}());\nexports.SWDraggable = SWDraggable;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swdraggable.ts?')},"../../../org/Hibachi/client/src/core/components/swdraggablecontainer.ts":
/*!****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swdraggablecontainer.ts ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWDraggableContainerController = /** @class */ (function () {\n    //@ngInject\n    function SWDraggableContainerController(draggableService) {\n        this.draggableService = draggableService;\n        if (angular.isUndefined(this.draggable)) {\n            this.draggable = false;\n        }\n    }\n    return SWDraggableContainerController;\n}());\nvar SWDraggableContainer = /** @class */ (function () {\n    //@ngInject\n    function SWDraggableContainer($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder) {\n        var _this = this;\n        this.$timeout = $timeout;\n        this.corePartialsPath = corePartialsPath;\n        this.utilityService = utilityService;\n        this.listingService = listingService;\n        this.observerService = observerService;\n        this.draggableService = draggableService;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.restrict = 'EA';\n        this.scope = {};\n        this.bindToController = {\n            draggable: \"=?\",\n            draggableRecords: \"=?\",\n            dropEventName: \"@?\",\n            listingId: \"@?\"\n        };\n        this.controller = SWDraggableContainerController;\n        this.controllerAs = \"swDraggableContainer\";\n        this.link = function (scope, element, attrs) {\n            scope.$watch('swDraggableContainer.draggable', function (newValue, oldValue) {\n                angular.element(element).attr(\"draggable\", newValue);\n                var placeholderElement = angular.element(\"<tr class='s-placeholder'><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td>placeholder</td><td></td></tr>\"); //temporarirly hardcoding tds so it will show up\n                var id = angular.element(element).attr(\"id\");\n                if (!id) {\n                    id = _this.utilityService.createID(32);\n                }\n                var listNode = element[0];\n                var placeholderNode = placeholderElement[0];\n                placeholderElement.remove();\n                if (newValue) {\n                    element.on('drop', function (e) {\n                        e = e.originalEvent || e;\n                        e.preventDefault();\n                        if (!_this.draggableService.isDropAllowed(e))\n                            return true;\n                        var record = e.dataTransfer.getData(\"application/json\") || e.dataTransfer.getData(\"text/plain\");\n                        var parsedRecord = JSON.parse(record);\n                        var index = Array.prototype.indexOf.call(listNode.children, placeholderNode);\n                        if (index < parsedRecord.draggableStartKey) {\n                            parsedRecord.draggableStartKey++;\n                        }\n                        _this.$timeout(function () {\n                            scope.swDraggableContainer.draggableRecords.splice(index, 0, parsedRecord);\n                            scope.swDraggableContainer.draggableRecords.splice(parsedRecord.draggableStartKey, 1);\n                        }, 0);\n                        if (angular.isDefined(scope.swDraggableContainer.listingId)) {\n                            _this.listingService.notifyListingPageRecordsUpdate(scope.swDraggableContainer.listingId);\n                        }\n                        else if (angular.isDefined(scope.swDraggableContainer.dropEventName)) {\n                            _this.observerService.notify(scope.swDraggableContainer.dropEventName);\n                        }\n                        placeholderElement.remove();\n                        e.stopPropagation();\n                        return false;\n                    });\n                    element.on('dragenter', function (e) {\n                        e = e.originalEvent || e;\n                        if (!_this.draggableService.isDropAllowed(e))\n                            return true;\n                        e.preventDefault();\n                    });\n                    element.on('dragleave', function (e) {\n                        e = e.originalEvent || e;\n                        if (e.pageX != 0 || e.pageY != 0) {\n                            return false;\n                        }\n                        return false;\n                    });\n                    element.on('dragover', function (e) {\n                        e = e.originalEvent || e;\n                        e.stopPropagation();\n                        if (placeholderNode.parentNode != listNode) {\n                            element.append(placeholderElement);\n                        }\n                        if (e.target !== listNode) {\n                            var listItemNode = e.target;\n                            while (listItemNode.parentNode !== listNode && listItemNode.parentNode) {\n                                listItemNode = listItemNode.parentNode;\n                            }\n                            if (listItemNode.parentNode === listNode && listItemNode !== placeholderNode) {\n                                if (_this.draggableService.isMouseInFirstHalf(e, listItemNode)) {\n                                    listNode.insertBefore(placeholderNode, listItemNode);\n                                }\n                                else {\n                                    listNode.insertBefore(placeholderNode, listItemNode.nextSibling);\n                                }\n                            }\n                        }\n                        element.addClass(\"s-dragged-over\");\n                        return false;\n                    });\n                }\n            });\n        };\n    }\n    SWDraggableContainer.Factory = function () {\n        var directive = function ($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder) { return new SWDraggableContainer($timeout, corePartialsPath, utilityService, listingService, observerService, draggableService, hibachiPathBuilder); };\n        directive.$inject = [\n            '$timeout',\n            'corePartialsPath',\n            'utilityService',\n            'listingService',\n            'observerService',\n            'draggableService',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWDraggableContainer;\n}());\nexports.SWDraggableContainer = SWDraggableContainer;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swdraggablecontainer.ts?")},"../../../org/Hibachi/client/src/core/components/swentityactionbar.ts":
/*!*************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swentityactionbar.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWEntityActionBarController = /** @class */ (function () {\n    //@ngInject\n    function SWEntityActionBarController(rbkeyService) {\n        var _this = this;\n        this.rbkeyService = rbkeyService;\n        this.init = function () {\n            if (angular.isDefined(_this.pageTitleRbKey)) {\n                _this.pageTitle = _this.rbkeyService.getRBKey(_this.pageTitleRbKey);\n            }\n        };\n        this.init();\n    }\n    return SWEntityActionBarController;\n}());\nvar SWEntityActionBar = /** @class */ (function () {\n    //@ngInject\n    function SWEntityActionBar(corePartialsPath, hibachiPathBuilder) {\n        this.corePartialsPath = corePartialsPath;\n        this.restrict = \'E\';\n        this.scope = {};\n        this.transclude = true;\n        this.bindToController = {\n            /*Core settings*/\n            type: "@",\n            object: "=",\n            pageTitle: "@?",\n            pageTitleRbKey: "@?",\n            edit: "=",\n            /*Action Callers (top buttons)*/\n            showcancel: "=",\n            showcreate: "=",\n            showedit: "=",\n            showdelete: "=",\n            /*Basic Action Caller Overrides*/\n            createModal: "=",\n            createAction: "=",\n            createQueryString: "=",\n            backAction: "=",\n            backQueryString: "=",\n            cancelAction: "=",\n            cancelQueryString: "=",\n            deleteAction: "=",\n            deleteQueryString: "=",\n            /*Process Specific Values*/\n            processAction: "=",\n            processContext: "="\n        };\n        this.controller = SWEntityActionBarController;\n        this.controllerAs = "swEntityActionBar";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + \'entityactionbar.html\';\n    }\n    SWEntityActionBar.Factory = function () {\n        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWEntityActionBar(corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\'corePartialsPath\', \'hibachiPathBuilder\'];\n        return directive;\n    };\n    return SWEntityActionBar;\n}());\nexports.SWEntityActionBar = SWEntityActionBar;\n//\tangular.module(\'slatwalladmin\').directive(\'swEntityActionBar\',[\'corePartialsPath\',(corePartialsPath) => new SWEntityActionBar(corePartialsPath)]);\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swentityactionbar.ts?')},"../../../org/Hibachi/client/src/core/components/swentityactionbarbuttongroup.ts":
/*!************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swentityactionbarbuttongroup.ts ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWEntityActionBarButtonGroupController = /** @class */ (function () {\n    function SWEntityActionBarButtonGroupController() {\n    }\n    return SWEntityActionBarButtonGroupController;\n}());\nvar SWEntityActionBarButtonGroup = /** @class */ (function () {\n    //@ngInject\n    function SWEntityActionBarButtonGroup(corePartialsPath, hibachiPathBuilder) {\n        this.corePartialsPath = corePartialsPath;\n        this.restrict = 'E';\n        this.scope = {};\n        this.transclude = true;\n        this.bindToController = {};\n        this.controller = SWEntityActionBarButtonGroupController;\n        this.controllerAs = \"swEntityActionBarButtonGroup\";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'entityactionbarbuttongroup.html';\n    }\n    SWEntityActionBarButtonGroup.Factory = function () {\n        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWEntityActionBarButtonGroup(corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ['corePartialsPath',\n            'hibachiPathBuilder'];\n        return directive;\n    };\n    return SWEntityActionBarButtonGroup;\n}());\nexports.SWEntityActionBarButtonGroup = SWEntityActionBarButtonGroup;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swentityactionbarbuttongroup.ts?")},"../../../org/Hibachi/client/src/core/components/swexpandablerecord.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swexpandablerecord.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWExpandableRecordController = /** @class */ (function () {\n    //@ngInject\n    function SWExpandableRecordController($timeout, $hibachi, utilityService, collectionConfigService, expandableService, listingService, observerService) {\n        var _this = this;\n        this.$timeout = $timeout;\n        this.$hibachi = $hibachi;\n        this.utilityService = utilityService;\n        this.collectionConfigService = collectionConfigService;\n        this.expandableService = expandableService;\n        this.listingService = listingService;\n        this.observerService = observerService;\n        this.childrenLoaded = false;\n        this.childrenOpen = false;\n        this.children = [];\n        this.refreshChildren = function () {\n            _this.getEntity();\n        };\n        this.setupChildCollectionConfig = function () {\n            _this.childCollectionConfig = _this.collectionConfigService.newCollectionConfig(_this.entity.metaData.className);\n            //set up parent\n            var parentName = _this.entity.metaData.hb_parentPropertyName;\n            var parentCFC = _this.entity.metaData[parentName].cfc;\n            _this.parentIDName = _this.$hibachi.getEntityExample(parentCFC).$$getIDName();\n            //set up child\n            var childName = _this.entity.metaData.hb_childPropertyName;\n            var childCFC = _this.entity.metaData[childName].cfc;\n            var childIDName = _this.$hibachi.getEntityExample(childCFC).$$getIDName();\n            _this.childCollectionConfig.clearFilterGroups();\n            _this.childCollectionConfig.collection = _this.entity;\n            _this.childCollectionConfig.addFilter(parentName + \'.\' + _this.parentIDName, _this.parentId);\n            _this.childCollectionConfig.setAllRecords(true);\n            angular.forEach(_this.collectionConfig.columns, function (column) {\n                _this.childCollectionConfig.addColumn(column.propertyIdentifier, column.title, column);\n            });\n            angular.forEach(_this.collectionConfig.joins, function (join) {\n                _this.childCollectionConfig.addJoin(join);\n            });\n            _this.childCollectionConfig.groupBys = _this.collectionConfig.groupBys;\n        };\n        this.getEntity = function () {\n            _this.collectionPromise.then(function (data) {\n                _this.collectionData = data;\n                _this.collectionData.pageRecords = _this.collectionData.pageRecords || _this.collectionData.records;\n                if (_this.collectionData.pageRecords.length) {\n                    angular.forEach(_this.collectionData.pageRecords, function (pageRecord) {\n                        _this.expandableService.addRecord(pageRecord[_this.parentIDName], true);\n                        pageRecord.dataparentID = _this.recordID;\n                        pageRecord.depth = _this.recordDepth || 0;\n                        pageRecord.depth++;\n                        //push the children into the listing display\n                        _this.children.push(pageRecord);\n                        _this.records.splice(_this.recordIndex + 1, 0, pageRecord);\n                    });\n                }\n                _this.childrenLoaded = true;\n            });\n        };\n        this.toggleChild = function () {\n            _this.$timeout(function () {\n                _this.childrenOpen = !_this.childrenOpen;\n                _this.expandableService.updateState(_this.recordID, { isOpen: _this.childrenOpen });\n                if (!_this.childrenLoaded) {\n                    if (_this.childCollectionConfig == null) {\n                        _this.setupChildCollectionConfig();\n                    }\n                    if (angular.isFunction(_this.childCollectionConfig.getEntity)) {\n                        _this.collectionPromise = _this.childCollectionConfig.getEntity();\n                    }\n                    _this.getEntity();\n                }\n                angular.forEach(_this.children, function (child) {\n                    child.dataIsVisible = _this.childrenOpen;\n                    var entityPrimaryIDName = _this.entity.$$getIDName();\n                    var idsToCheck = [];\n                    idsToCheck.push(child[entityPrimaryIDName]);\n                    _this.expandableService.updateState(child[entityPrimaryIDName], { isOpen: _this.childrenOpen });\n                    //close all children of the child if we are closing\n                    var childrenTraversed = false;\n                    var recordLength = _this.records.length;\n                    while (!childrenTraversed && idsToCheck.length > 0) {\n                        var found = false;\n                        var idToCheck = idsToCheck.pop();\n                        for (var i = 0; i < recordLength; i++) {\n                            var record = _this.records[i];\n                            if (record[\'dataparentID\'] == idToCheck) {\n                                idsToCheck.push(record[entityPrimaryIDName]);\n                                _this.expandableService.updateState(record[entityPrimaryIDName], { isOpen: _this.childrenOpen });\n                                record.dataIsVisible = _this.childrenOpen;\n                                found = true;\n                            }\n                        }\n                        if (!found) {\n                            childrenTraversed = true;\n                        }\n                    }\n                });\n            });\n        };\n        this.recordID = this.parentId; //this is what parent is initalized to in the listing display\n        expandableService.addRecord(this.recordID);\n        if (angular.isDefined(this.refreshChildrenEvent) && this.refreshChildrenEvent.length) {\n            this.observerService.attach(this.refreshChildren, this.refreshChildrenEvent);\n        }\n    }\n    return SWExpandableRecordController;\n}());\nvar SWExpandableRecord = /** @class */ (function () {\n    //@ngInject\n    function SWExpandableRecord($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder) {\n        var _this = this;\n        this.$compile = $compile;\n        this.$templateRequest = $templateRequest;\n        this.$timeout = $timeout;\n        this.corePartialsPath = corePartialsPath;\n        this.utilityService = utilityService;\n        this.expandableService = expandableService;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.bindToController = {\n            recordValue: "=",\n            link: "@",\n            expandable: "=?",\n            parentId: "=",\n            entity: "=",\n            collectionConfig: "=?",\n            childCollectionConfig: "=?",\n            refreshChildrenEvent: "=?",\n            listingId: "@?",\n            records: "=",\n            pageRecord: "=",\n            recordIndex: "=",\n            recordDepth: "=",\n            childCount: "=",\n            autoOpen: "=",\n            multiselectIdPaths: "=",\n            expandableRules: "="\n        };\n        this.controller = SWExpandableRecordController;\n        this.controllerAs = "swExpandableRecord";\n        this.link = function (scope, element, attrs) {\n            if (scope.swExpandableRecord.expandable && scope.swExpandableRecord.childCount) {\n                if (scope.swExpandableRecord.recordValue) {\n                    var id = scope.swExpandableRecord.records[scope.swExpandableRecord.recordIndex][scope.swExpandableRecord.entity.$$getIDName()];\n                    if (scope.swExpandableRecord.multiselectIdPaths && scope.swExpandableRecord.multiselectIdPaths.length) {\n                        var multiselectIdPathsArray = scope.swExpandableRecord.multiselectIdPaths.split(\',\');\n                        if (!scope.swExpandableRecord.childrenLoaded) {\n                            angular.forEach(multiselectIdPathsArray, function (multiselectIdPath) {\n                                var position = _this.utilityService.listFind(multiselectIdPath, id, \'/\');\n                                var multiSelectIDs = multiselectIdPath.split(\'/\');\n                                var multiselectPathLength = multiSelectIDs.length;\n                                if (position !== -1 && position < multiselectPathLength - 1 && !_this.expandableService.getState(id, "isOpen")) {\n                                    _this.expandableService.updateState(id, { isOpen: true });\n                                    scope.swExpandableRecord.toggleChild();\n                                }\n                            });\n                        }\n                    }\n                }\n                _this.$templateRequest(_this.hibachiPathBuilder.buildPartialsPath(_this.corePartialsPath) + "expandablerecord.html").then(function (html) {\n                    var template = angular.element(html);\n                    //get autoopen reference to ensure only the root is autoopenable\n                    var autoOpen = angular.copy(scope.swExpandableRecord.autoOpen);\n                    scope.swExpandableRecord.autoOpen = false;\n                    template = _this.$compile(template)(scope);\n                    element.html(template);\n                    element.on(\'click\', scope.swExpandableRecord.toggleChild);\n                    if (autoOpen) {\n                        scope.swExpandableRecord.toggleChild();\n                    }\n                });\n            }\n        };\n        this.$compile = $compile;\n        this.$templateRequest = $templateRequest;\n        this.corePartialsPath = corePartialsPath;\n        this.$timeout = $timeout;\n        this.utilityService = utilityService;\n        this.expandableService = expandableService;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n    }\n    SWExpandableRecord.Factory = function () {\n        var directive = function ($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder) { return new SWExpandableRecord($compile, $templateRequest, $timeout, corePartialsPath, utilityService, expandableService, hibachiPathBuilder); };\n        directive.$inject = [\n            \'$compile\',\n            \'$templateRequest\',\n            \'$timeout\',\n            \'corePartialsPath\',\n            \'utilityService\',\n            \'expandableService\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWExpandableRecord;\n}());\nexports.SWExpandableRecord = SWExpandableRecord;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swexpandablerecord.ts?')},"../../../org/Hibachi/client/src/core/components/swexpiringsessionnotifier.ts":
/*!*********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swexpiringsessionnotifier.ts ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWExpiringSessionNotifierController = /** @class */ (function () {\n    //@ngInject\n    function SWExpiringSessionNotifierController($timeout, $http, $hibachi, localStorageService) {\n        var _this = this;\n        this.$timeout = $timeout;\n        this.$http = $http;\n        this.$hibachi = $hibachi;\n        this.localStorageService = localStorageService;\n        this.startTimeout = function () {\n            _this.$timeout(function () {\n                console.warn(\"Session Is About To Expire, 3 Minutes Left\");\n                //regardless of user input as long as they respond \n                var answer = confirm(_this.confirmText);\n                _this.$http.get(_this.$hibachi.buildUrl('api:main.login')).then(function (response) {\n                    if (response.status === 200) {\n                        _this.localStorageService.setItem('token', response.data.token);\n                        _this.startTimeout();\n                    }\n                    else {\n                        alert('Unable To Login');\n                        location.reload();\n                    }\n                }, function (rejection) {\n                    throw ('Login Failed');\n                });\n            }, 720000);\n        };\n        console.warn(\"Expiring Session Notifier Constructed.\");\n        if (angular.isUndefined(this.confirmText)) {\n            this.confirmText = 'Are you still there? You are about to be logged out.';\n        }\n        this.startTimeout();\n    }\n    return SWExpiringSessionNotifierController;\n}());\nvar SWExpiringSessionNotifier = /** @class */ (function () {\n    //@ngInject\n    function SWExpiringSessionNotifier(corePartialsPath, hibachiPathBuilder) {\n        this.corePartialsPath = corePartialsPath;\n        this.restrict = 'E';\n        this.scope = {};\n        this.transclude = false;\n        this.bindToController = {\n            confirmText: '@?'\n        };\n        this.controller = SWExpiringSessionNotifierController;\n        this.controllerAs = \"swExpiringSessionNotifier\";\n        this.link = function (scope, element, attrs) {\n        };\n        this.template = '';\n    }\n    SWExpiringSessionNotifier.Factory = function () {\n        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWExpiringSessionNotifier(corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];\n        return directive;\n    };\n    return SWExpiringSessionNotifier;\n}());\nexports.SWExpiringSessionNotifier = SWExpiringSessionNotifier;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swexpiringsessionnotifier.ts?")},"../../../org/Hibachi/client/src/core/components/swexportaction.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swexportaction.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWExportAction = /** @class */ (function () {\n    //@ngInject\n    function SWExportAction($log, corePartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'A',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'exportaction.html',\n            scope: {},\n            link: function (scope, element, attrs) {\n            }\n        };\n    }\n    SWExportAction.Factory = function () {\n        var directive = function ($log, corePartialsPath, hibachiPathBuilder) { return new SWExportAction($log, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$log',\n            'corePartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWExportAction;\n}());\nexports.SWExportAction = SWExportAction;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swexportaction.ts?")},"../../../org/Hibachi/client/src/core/components/swgravatar.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swgravatar.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar md5 = __webpack_require__(/*! md5 */ "../../../node_modules/md5/md5.js");\nvar SWGravatarController = /** @class */ (function () {\n    // @ngInject\n    function SWGravatarController() {\n        this.gravatarURL = "http://www.gravatar.com/avatar/" + md5(this.emailAddress.toLowerCase().trim());\n    }\n    return SWGravatarController;\n}());\nexports.SWGravatarController = SWGravatarController;\nvar SWGravatar = /** @class */ (function () {\n    function SWGravatar() {\n        this.template = "<img src=\'{{swGravatar.gravatarURL}}\' />";\n        this.transclude = false;\n        this.restrict = "E";\n        this.scope = {};\n        this.bindToController = {\n            emailAddress: "@"\n        };\n        this.controller = SWGravatarController;\n        this.controllerAs = "swGravatar";\n        this.link = function (scope, element, attrs, controller, transclude) {\n        };\n    }\n    SWGravatar.Factory = function () {\n        var directive = function () { return new SWGravatar(); };\n        directive.$inject = [];\n        return directive;\n    };\n    SWGravatar.$inject = ["$hibachi", "$timeout", "collectionConfigService", "corePartialsPath",\n        \'hibachiPathBuilder\'];\n    return SWGravatar;\n}());\nexports.SWGravatar = SWGravatar;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swgravatar.ts?')},"../../../org/Hibachi/client/src/core/components/swhref.ts":
/*!**************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swhref.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWHref = /** @class */ (function () {\n    function SWHref() {\n        return {\n            restrict: 'A',\n            scope: {\n                swHref: \"@\"\n            },\n            link: function (scope, element, attrs) {\n                /*convert link to use hashbang*/\n                var hrefValue = attrs.swHref;\n                hrefValue = '?ng#!' + hrefValue;\n                element.attr('href', hrefValue);\n            }\n        };\n    }\n    SWHref.Factory = function () {\n        var directive = function () { return new SWHref(); };\n        directive.$inject = [];\n        return directive;\n    };\n    return SWHref;\n}());\nexports.SWHref = SWHref;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swhref.ts?")},"../../../org/Hibachi/client/src/core/components/swloading.ts":
/*!*****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swloading.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWLoading = /** @class */ (function () {\n    function SWLoading($log, corePartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'A',\n            transclude: true,\n            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + 'loading.html',\n            scope: {\n                swLoading: '='\n            },\n            link: function (scope, attrs, element) {\n            }\n        };\n    }\n    SWLoading.Factory = function () {\n        var directive = function ($log, corePartialsPath, hibachiPathBuilder) { return new SWLoading($log, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$log',\n            'corePartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWLoading;\n}());\nexports.SWLoading = SWLoading;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swloading.ts?")},"../../../org/Hibachi/client/src/core/components/swlogin.ts":
/*!***************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swlogin.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWLoginController = /** @class */ (function () {\n    //@ngInject\n    function SWLoginController($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiScope) {\n        var _this = this;\n        this.$route = $route;\n        this.$log = $log;\n        this.$window = $window;\n        this.corePartialsPath = corePartialsPath;\n        this.$hibachi = $hibachi;\n        this.dialogService = dialogService;\n        this.hibachiScope = hibachiScope;\n        this.login = function () {\n            var loginPromise = _this.$hibachi.login(_this.account_login.data.emailAddress, _this.account_login.data.password);\n            loginPromise.then(function (loginResponse) {\n                if (loginResponse && loginResponse.data && loginResponse.data.token) {\n                    _this.$window.localStorage.setItem('token', loginResponse.data.token);\n                    _this.hibachiScope.loginDisplayed = false;\n                    _this.$route.reload();\n                    _this.dialogService.removeCurrentDialog();\n                }\n            }, function (rejection) {\n            });\n        };\n        this.$hibachi = $hibachi;\n        this.$window = $window;\n        this.$route = $route;\n        this.hibachiScope = hibachiScope;\n        this.account_login = $hibachi.newEntity('Account_Login');\n    }\n    return SWLoginController;\n}());\nvar SWLogin = /** @class */ (function () {\n    //@ngInject\n    function SWLogin($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder) {\n        this.$route = $route;\n        this.$log = $log;\n        this.$window = $window;\n        this.corePartialsPath = corePartialsPath;\n        this.$hibachi = $hibachi;\n        this.dialogService = dialogService;\n        this.restrict = 'E';\n        this.scope = {};\n        this.bindToController = {};\n        this.controller = SWLoginController;\n        this.controllerAs = \"SwLogin\";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.corePartialsPath + '/login.html');\n    }\n    SWLogin.Factory = function () {\n        var directive = function ($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder) { return new SWLogin($route, $log, $window, corePartialsPath, $hibachi, dialogService, hibachiPathBuilder); };\n        directive.$inject = [\n            '$route',\n            '$log',\n            '$window',\n            'corePartialsPath',\n            '$hibachi',\n            'dialogService',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWLogin;\n}());\nexports.SWLogin = SWLogin;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swlogin.ts?")},"../../../org/Hibachi/client/src/core/components/swmodallauncher.ts":
/*!***********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swmodallauncher.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWModalLauncherController = /** @class */ (function () {\n    // @ngInject\n    function SWModalLauncherController() {\n        var _this = this;\n        this.hasSaveAction = false;\n        this.hasCancelAction = false;\n        this.hasDeleteAction = false;\n        this.launchModal = function () {\n            //activate the necessary modal\n            _this.showModal = true;\n        };\n        this.saveCallback = function () {\n            //the passed save action must return a promise\n            if (_this.hasSaveAction) {\n                var savePromise = _this.saveAction()();\n            }\n            savePromise.then(function (response) {\n                //if the action was sucessful\n                $("#" + _this.modalName).modal(\'hide\');\n            }, function (reason) {\n                //if the action failed\n            });\n        };\n        this.deleteCallback = function () {\n            //the passed save action must return a promise\n            if (_this.hasDeleteAction) {\n                var deletePromise = _this.saveAction()();\n            }\n            deletePromise.then(function (response) {\n                //if the action was sucessful\n                $("#" + _this.modalName).modal(\'hide\');\n            }, function (reason) {\n                //if the action failed\n            });\n        };\n        this.cancelCallback = function () {\n            if (_this.hasCancelAction) {\n                _this.cancelAction()();\n            }\n        };\n        if (angular.isUndefined(this.showModal)) {\n            this.showModal = false;\n        }\n        if (angular.isUndefined(this.saveActionText)) {\n            this.saveActionText = "Save";\n        }\n        if (angular.isUndefined(this.cancelActionText)) {\n            this.cancelActionText = "Cancel";\n        }\n    }\n    return SWModalLauncherController;\n}());\nexports.SWModalLauncherController = SWModalLauncherController;\nvar SWModalLauncher = /** @class */ (function () {\n    // @ngInject\n    function SWModalLauncher($compile, corePartialsPath, hibachiPathBuilder) {\n        this.$compile = $compile;\n        this.corePartialsPath = corePartialsPath;\n        this.transclude = {\n            button: \'?swModalButton\',\n            staticButton: \'?swModalStaticButton\',\n            content: \'?swModalContent\'\n        };\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            showModal: "=?",\n            modalName: "@",\n            title: "@",\n            saveAction: "&?",\n            deleteAction: "&?",\n            cancelAction: "&?",\n            saveActionText: "@?",\n            cancelActionText: "@?"\n        };\n        this.controller = SWModalLauncherController;\n        this.controllerAs = "swModalLauncher";\n        this.compile = function (element, attrs, transclude) {\n            return {\n                pre: function ($scope, element, attrs) {\n                    if (angular.isDefined(attrs.saveAction)) {\n                        $scope.swModalLauncher.hasSaveAction = true;\n                    }\n                    if (angular.isDefined(attrs.deleteAction)) {\n                        $scope.swModalLauncher.hasDeleteAction = true;\n                    }\n                    if (angular.isDefined(attrs.cancelAction)) {\n                        $scope.swModalLauncher.hasCancelAction = true;\n                    }\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "modallauncher.html";\n    }\n    SWModalLauncher.Factory = function () {\n        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWModalLauncher($compile, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["$compile", "corePartialsPath",\n            \'hibachiPathBuilder\'];\n        return directive;\n    };\n    return SWModalLauncher;\n}());\nexports.SWModalLauncher = SWModalLauncher;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swmodallauncher.ts?')},"../../../org/Hibachi/client/src/core/components/swmodalwindow.ts":
/*!*********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swmodalwindow.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWModalWindowController = /** @class */ (function () {\n    // @ngInject\n    function SWModalWindowController() {\n        if (angular.isUndefined(this.modalName)) {\n            console.warn("You did not pass a modal title to SWModalWindowController");\n            this.modalName = "";\n        }\n    }\n    return SWModalWindowController;\n}());\nexports.SWModalWindowController = SWModalWindowController;\nvar SWModalWindow = /** @class */ (function () {\n    // @ngInject\n    function SWModalWindow($compile, corePartialsPath, hibachiPathBuilder) {\n        this.$compile = $compile;\n        this.corePartialsPath = corePartialsPath;\n        this.transclude = {\n            modalBody: "?swModalBody"\n        };\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            modalName: "@",\n            title: "@",\n            hasSaveAction: "=?",\n            saveAction: "&?",\n            hasDeleteAction: "=?",\n            deleteAction: "&?",\n            hasCancelAction: "=?",\n            cancelAction: "&?",\n            saveActionText: "@",\n            cancelActionText: "@"\n        };\n        this.controller = SWModalWindowController;\n        this.controllerAs = "swModalWindow";\n        this.compile = function (element, attrs, transclude) {\n            return {\n                pre: function ($scope, element, attrs) {\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "modalwindow.html";\n    }\n    SWModalWindow.Factory = function () {\n        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWModalWindow($compile, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["$compile", "corePartialsPath",\n            \'hibachiPathBuilder\'];\n        return directive;\n    };\n    return SWModalWindow;\n}());\nexports.SWModalWindow = SWModalWindow;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swmodalwindow.ts?')},"../../../org/Hibachi/client/src/core/components/swnumbersonly.ts":
/*!*********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swnumbersonly.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWNumbersOnly = /** @class */ (function () {\n    function SWNumbersOnly() {\n        this.restrict = "A";\n        this.require = "ngModel";\n        this.scope = {\n            ngModel: \'=\',\n            minNumber: \'=?\',\n            maxNumber: \'=?\'\n        };\n        this.link = function ($scope, element, attrs, modelCtrl) {\n            modelCtrl.$parsers.unshift(function (inputValue) {\n                var modelValue = modelCtrl.$modelValue;\n                if (inputValue != "" && !isNaN(Number(inputValue))) {\n                    if (angular.isDefined($scope.minNumber)) {\n                        if (Number(inputValue) >= $scope.minNumber || !angular.isDefined($scope.minNumber)) {\n                            modelCtrl.$setValidity("minNumber", true);\n                        }\n                        else if (angular.isDefined($scope.minNumber)) {\n                            modelCtrl.$setValidity("minNumber", false);\n                        }\n                    }\n                    if (angular.isDefined($scope.maxNumber)) {\n                        if (Number(inputValue) <= $scope.maxNumber || !angular.isDefined($scope.maxNumber)) {\n                            modelCtrl.$setValidity("maxNumber", true);\n                        }\n                        else if (angular.isDefined($scope.maxNumber)) {\n                            modelCtrl.$setValidity("maxNumber", false);\n                        }\n                    }\n                    if (modelCtrl.$valid) {\n                        modelValue = Number(inputValue);\n                    }\n                    else {\n                        modelValue = $scope.minNumber;\n                    }\n                }\n                return modelValue;\n            });\n        };\n    }\n    SWNumbersOnly.Factory = function () {\n        var directive = function () { return new SWNumbersOnly(); };\n        directive.$inject = [];\n        return directive;\n    };\n    return SWNumbersOnly;\n}());\nexports.SWNumbersOnly = SWNumbersOnly;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swnumbersonly.ts?')},"../../../org/Hibachi/client/src/core/components/swoptions.ts":
/*!*****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swoptions.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWOptions = /** @class */ (function () {\n    function SWOptions($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'AE',\n            scope: {\n                objectName: '@'\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(corePartialsPath) + \"options.html\",\n            link: function (scope, element, attrs) {\n                scope.swOptions = {};\n                scope.swOptions.objectName = scope.objectName;\n                //sets up drop down options via collections\n                scope.getOptions = function () {\n                    scope.swOptions.object = $hibachi['new' + scope.swOptions.objectName]();\n                    var columnsConfig = [\n                        {\n                            \"propertyIdentifier\": scope.swOptions.objectName.charAt(0).toLowerCase() + scope.swOptions.objectName.slice(1) + 'Name'\n                        },\n                        {\n                            \"propertyIdentifier\": scope.swOptions.object.$$getIDName()\n                        }\n                    ];\n                    $hibachi.getEntity(scope.swOptions.objectName, { allRecords: true, columnsConfig: angular.toJson(columnsConfig) })\n                        .then(function (value) {\n                        scope.swOptions.options = value.records;\n                        observerService.notify('optionsLoaded');\n                    });\n                };\n                scope.getOptions();\n                var selectOption = function (option) {\n                    if (option) {\n                        scope.swOptions.selectOption(option);\n                    }\n                    else {\n                        scope.swOptions.selectOption(scope.swOptions.options[0]);\n                    }\n                };\n                observerService.attach(selectOption, 'selectOption', 'selectOption');\n                //use by ng-change to record changes\n                scope.swOptions.selectOption = function (selectedOption) {\n                    scope.swOptions.selectedOption = selectedOption;\n                    observerService.notify('optionsChanged', selectedOption);\n                };\n            }\n        };\n    }\n    SWOptions.Factory = function () {\n        var directive = function ($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder) { return new SWOptions($log, $hibachi, observerService, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$log',\n            '$hibachi',\n            'observerService',\n            'corePartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWOptions;\n}());\nexports.SWOptions = SWOptions;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swoptions.ts?")},"../../../org/Hibachi/client/src/core/components/sworderbycontrols.ts":
/*!*************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/sworderbycontrols.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWOrderByControlsController = /** @class */ (function () {\n    // @ngInject\n    function SWOrderByControlsController(listingService, observerService, utilityService) {\n        var _this = this;\n        this.listingService = listingService;\n        this.observerService = observerService;\n        this.utilityService = utilityService;\n        this.sortCode = "ASC";\n        this.updateSortOrderProperty = function () {\n            if (angular.isDefined(_this.selectedPropertyIdentifier)) {\n                _this.propertyNotChosen = false;\n            }\n            else {\n                _this.propertyNotChosen = true;\n            }\n            _this.updateOrderBy();\n        };\n        this.updateOrderBy = function () {\n            if (angular.isDefined(_this.selectedPropertyIdentifier) && _this.selectedPropertyIdentifier.length > 0) {\n                var propertyIdentifier = _this.selectedPropertyIdentifier;\n            }\n            switch (_this.sortCode) {\n                case "ASC":\n                    _this.disabled = false;\n                    if (propertyIdentifier != null) {\n                        if (angular.isDefined(_this.collectionConfig)) {\n                            _this.collectionConfig.toggleOrderBy(propertyIdentifier, true); //single column mode true\n                        }\n                        if (_this.inListingDisplay) {\n                            _this.listingService.setSingleColumnOrderBy(_this.listingId, propertyIdentifier, "ASC");\n                        }\n                    }\n                    if (_this.inListingDisplay)\n                        _this.listingService.setManualSort(_this.listingId, false);\n                    break;\n                case "DESC":\n                    _this.disabled = false;\n                    if (propertyIdentifier != null) {\n                        if (angular.isDefined(_this.collectionConfig)) {\n                            _this.collectionConfig.toggleOrderBy(propertyIdentifier, true); //single column mode true\n                        }\n                        if (_this.inListingDisplay) {\n                            _this.listingService.setSingleColumnOrderBy(_this.listingId, propertyIdentifier, "DESC");\n                        }\n                        if (_this.inListingDisplay)\n                            _this.listingService.setManualSort(_this.listingId, false);\n                    }\n                    break;\n                case "MANUAL":\n                    //flip listing\n                    _this.disabled = true;\n                    if (_this.inListingDisplay) {\n                        //this.swListingDisplay.sortable = true;\n                        _this.listingService.setManualSort(_this.listingId, true);\n                    }\n                    break;\n            }\n        };\n        this.sortAscending = function () {\n            _this.sortCode = \'ASC\';\n            _this.updateOrderBy();\n        };\n        this.sortDescending = function () {\n            _this.sortCode = \'DESC\';\n            _this.updateOrderBy();\n        };\n        this.manualSort = function () {\n            _this.sortCode = \'MANUAL\';\n            _this.updateOrderBy();\n        };\n        if (angular.isUndefined(this.edit)) {\n            this.edit = true;\n        }\n        if (angular.isDefined(this.collectionConfig)) {\n            this.columns = this.collectionConfig.columns;\n        }\n        if (angular.isDefined(this.initialSortDefaultDirection) && this.initialSortDefaultDirection.length > 0) {\n            this.sortCode = this.initialSortDefaultDirection;\n        }\n        if (angular.isDefined(this.initialSortProperty) && this.initialSortProperty.length > 0) {\n            this.selectedPropertyIdentifier = this.initialSortProperty;\n        }\n        this.id = this.utilityService.createID(32);\n    }\n    return SWOrderByControlsController;\n}());\nexports.SWOrderByControlsController = SWOrderByControlsController;\nvar SWOrderByControls = /** @class */ (function () {\n    // @ngInject\n    function SWOrderByControls($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder) {\n        var _this = this;\n        this.$compile = $compile;\n        this.scopeService = scopeService;\n        this.listingService = listingService;\n        this.corePartialsPath = corePartialsPath;\n        this.transclude = true;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            collectionConfig: "=?",\n            selectedOrderByColumn: "=?",\n            inListingDisplay: "=?",\n            toggleCollectionConfig: "=?",\n            initialSortProperty: "@?",\n            initialSortDefaultDirection: "@?",\n            sortPropertyFieldName: "@?",\n            sortDefaultDirectionFieldName: "@?",\n            edit: "=?"\n        };\n        this.require = { swListingDisplay: \'?^swListingDisplay\' };\n        this.controller = SWOrderByControlsController;\n        this.controllerAs = "swOrderByControls";\n        this.compile = function (element, attrs, transclude) {\n            return {\n                pre: function ($scope, element, attrs) {\n                    if ($scope.swOrderByControls.inListingDisplay &&\n                        _this.scopeService.hasParentScope($scope, "swListingDisplay")) {\n                        var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];\n                        $scope.swOrderByControls.listingId = listingDisplayScope.tableID;\n                        _this.listingService.attachToListingInitiated($scope.swOrderByControls.listingId, $scope.swOrderByControls.updateOrderBy);\n                        if ($scope.swOrderByControls.collectionConfig == null &&\n                            listingDisplayScope.collectionConfig != null) {\n                            $scope.swOrderByControls.collectionConfig = listingDisplayScope.collectionConfig;\n                        }\n                    }\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "orderbycontrols.html";\n    }\n    SWOrderByControls.Factory = function () {\n        var directive = function ($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder) { return new SWOrderByControls($compile, scopeService, listingService, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["$compile", "scopeService", "listingService", "corePartialsPath",\n            "hibachiPathBuilder"];\n        return directive;\n    };\n    return SWOrderByControls;\n}());\nexports.SWOrderByControls = SWOrderByControls;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/sworderbycontrols.ts?')},"../../../org/Hibachi/client/src/core/components/swprocesscaller.ts":
/*!***********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swprocesscaller.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWProcessCallerController = /** @class */ (function () {\n    //@ngInject\n    function SWProcessCallerController(rbkeyService, $templateRequest, $compile, corePartialsPath, $scope, $element, $transclude, utilityService, hibachiPathBuilder) {\n        var _this = this;\n        this.rbkeyService = rbkeyService;\n        this.$templateRequest = $templateRequest;\n        this.$compile = $compile;\n        this.corePartialsPath = corePartialsPath;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$transclude = $transclude;\n        this.$templateRequest = $templateRequest;\n        this.$compile = $compile;\n        this.corePartialsPath = corePartialsPath;\n        this.utilityService = utilityService;\n        this.type = this.type || \'link\';\n        this.queryString = this.queryString || \'\';\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$transclude = this.$transclude;\n        this.$templateRequest(hibachiPathBuilder.buildPartialsPath(this.corePartialsPath) + "processcaller.html").then(function (html) {\n            var template = angular.element(html);\n            _this.$element.parent().append(template);\n            $compile(template)(_this.$scope);\n        });\n        if (angular.isDefined(this.titleRbKey)) {\n            this.title = this.rbkeyService.getRBKey(this.titleRbKey);\n        }\n        if (angular.isUndefined(this.text)) {\n            this.text = this.title;\n        }\n    }\n    return SWProcessCallerController;\n}());\nvar SWProcessCaller = /** @class */ (function () {\n    function SWProcessCaller(corePartialsPath, utilityService) {\n        this.corePartialsPath = corePartialsPath;\n        this.utilityService = utilityService;\n        this.restrict = \'E\';\n        this.scope = {};\n        this.bindToController = {\n            action: "@",\n            entity: "@",\n            processContext: "@",\n            hideDisabled: "=",\n            type: "@",\n            queryString: "@",\n            text: "@",\n            title: "@?",\n            titleRbKey: "@?",\n            \'class\': "@",\n            icon: "=",\n            iconOnly: "=",\n            submit: "=",\n            confirm: "=",\n            disabled: "=",\n            disabledText: "@",\n            modal: "="\n        };\n        this.controller = SWProcessCallerController;\n        this.controllerAs = "swProcessCaller";\n        this.link = function (scope, element, attrs) {\n        };\n        this.corePartialsPath = corePartialsPath;\n        this.utilityService = utilityService;\n    }\n    SWProcessCaller.Factory = function () {\n        var directive = function (corePartialsPath, utilityService) { return new SWProcessCaller(corePartialsPath, utilityService); };\n        directive.$inject = [\n            \'corePartialsPath\', \'utilityService\'\n        ];\n        return directive;\n    };\n    SWProcessCaller.$inject = [\'corePartialsPath\', \'utilityService\'];\n    return SWProcessCaller;\n}());\nexports.SWProcessCaller = SWProcessCaller;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swprocesscaller.ts?')},"../../../org/Hibachi/client/src/core/components/swrbkey.ts":
/*!***************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swrbkey.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWRbKey = /** @class */ (function () {\n    function SWRbKey($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService) {\n        return {\n            restrict: 'A',\n            scope: {\n                swRbkey: \"=\"\n            },\n            link: function (scope, element, attrs) {\n                var rbKeyValue = scope.swRbkey;\n                var bindRBKey = function () {\n                    if (angular.isDefined(rbKeyValue) && angular.isString(rbKeyValue)) {\n                        element.text(rbkeyService.getRBKey(rbKeyValue));\n                    }\n                };\n                bindRBKey();\n            }\n        };\n    }\n    SWRbKey.Factory = function () {\n        var directive = function ($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService) { return new SWRbKey($hibachi, observerService, utilityService, $rootScope, $log, rbkeyService); };\n        directive.$inject = [\n            '$hibachi',\n            'observerService',\n            'utilityService',\n            '$rootScope',\n            '$log',\n            'rbkeyService'\n        ];\n        return directive;\n    };\n    return SWRbKey;\n}());\nexports.SWRbKey = SWRbKey;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swrbkey.ts?")},"../../../org/Hibachi/client/src/core/components/swscrolltrigger.ts":
/*!***********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swscrolltrigger.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWScrollTrigger = /** @class */ (function () {\n    function SWScrollTrigger($rootScope, $window, $timeout) {\n        return {\n            link: function (scope, elem, attrs) {\n                var checkWhenEnabled, handler, scrollDistance, scrollEnabled;\n                $window = angular.element($window);\n                scrollDistance = 0;\n                if (attrs.infiniteScrollDistance != null) {\n                    scope\n                        .$watch(attrs.infiniteScrollDistance, function (value) {\n                        return scrollDistance = parseInt(value, 10);\n                    });\n                }\n                scrollEnabled = true;\n                checkWhenEnabled = false;\n                if (attrs.infiniteScrollDisabled != null) {\n                    scope\n                        .$watch(attrs.infiniteScrollDisabled, function (value) {\n                        scrollEnabled = !value;\n                        if (scrollEnabled\n                            && checkWhenEnabled) {\n                            checkWhenEnabled = false;\n                            return handler();\n                        }\n                    });\n                }\n                handler = function () {\n                    var elementBottom, remaining, shouldScroll, windowBottom;\n                    windowBottom = $window.height()\n                        + $window.scrollTop();\n                    elementBottom = elem.offset().top\n                        + elem.height();\n                    remaining = elementBottom\n                        - windowBottom;\n                    shouldScroll = remaining <= $window\n                        .height()\n                        * scrollDistance;\n                    if (shouldScroll && scrollEnabled) {\n                        if ($rootScope.$$phase) {\n                            return scope\n                                .$eval(attrs.infiniteScroll);\n                        }\n                        else {\n                            return scope\n                                .$apply(attrs.infiniteScroll);\n                        }\n                    }\n                    else if (shouldScroll) {\n                        return checkWhenEnabled = true;\n                    }\n                };\n                $window.on('scroll', handler);\n                scope.$on('$destroy', function () {\n                    return $window.off('scroll', handler);\n                });\n                return $timeout((function () {\n                    if (attrs.infiniteScrollImmediateCheck) {\n                        if (scope\n                            .$eval(attrs.infiniteScrollImmediateCheck)) {\n                            return handler();\n                        }\n                    }\n                    else {\n                        return handler();\n                    }\n                }), 0);\n            }\n        };\n    }\n    SWScrollTrigger.Factory = function () {\n        var directive = function ($rootScope, $window, $timeout) { return new SWScrollTrigger($rootScope, $window, $timeout); };\n        directive.$inject = [\n            '$rootScope',\n            '$window',\n            '$timeout'\n        ];\n        return directive;\n    };\n    return SWScrollTrigger;\n}());\nexports.SWScrollTrigger = SWScrollTrigger;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swscrolltrigger.ts?")},"../../../org/Hibachi/client/src/core/components/swselection.ts":
/*!*******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swselection.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWSelectionController = /** @class */ (function () {\n    //@ngInject\n    function SWSelectionController(selectionService, observerService) {\n        var _this = this;\n        this.selectionService = selectionService;\n        this.observerService = observerService;\n        this.updateSelectValue = function (res) {\n            if (_this.isRadio && (res.action == 'check')) {\n                _this.toggleValue == _this.selection;\n            }\n            else if (res.action == 'clear') {\n                _this.toggleValue = false;\n            }\n            else if (res.action == 'selectAll') {\n                _this.toggleValue = true;\n            }\n            else if (res.selection == _this.selection) {\n                _this.toggleValue = (res.action == 'check');\n            }\n        };\n        this.toggleSelection = function (toggleValue, selectionid, selection) {\n            if (_this.isRadio) {\n                _this.selectionService.radioSelection(selectionid, selection);\n                _this.toggleValue = selection;\n            }\n            else {\n                if (toggleValue) {\n                    _this.selectionService.addSelection(selectionid, selection);\n                }\n                else {\n                    _this.selectionService.removeSelection(selectionid, selection);\n                }\n            }\n        };\n        if (angular.isUndefined(this.name)) {\n            this.name = 'selection';\n        }\n        if (selectionService.isAllSelected(this.selectionid)) {\n            this.toggleValue = !selectionService.hasSelection(this.selectionid, this.selection);\n        }\n        else {\n            this.toggleValue = selectionService.hasSelection(this.selectionid, this.selection);\n        }\n        if (this.isRadio && this.toggleValue) {\n            this.toggleValue = this.selection;\n        }\n        if (this.isRadio && this.toggleValue) {\n            this.toggleValue = this.selection;\n        }\n        //attach observer so we know when a selection occurs\n        observerService.attach(this.updateSelectValue, 'swSelectionToggleSelection' + this.selectionid);\n        if (angular.isDefined(this.initSelected) && this.initSelected) {\n            this.toggleValue = this.selection;\n            this.toggleSelection(this.toggleValue, this.selectionid, this.selection);\n        }\n    }\n    return SWSelectionController;\n}());\nvar SWSelection = /** @class */ (function () {\n    function SWSelection(collectionPartialsPath, hibachiPathBuilder) {\n        this.collectionPartialsPath = collectionPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.restrict = 'E';\n        this.scope = {};\n        this.bindToController = {\n            selection: \"=\",\n            selectionid: \"@\",\n            id: \"=\",\n            isRadio: \"=\",\n            name: \"@\",\n            disabled: \"=\",\n            initSelected: \"=\"\n        };\n        this.controller = SWSelectionController;\n        this.controllerAs = 'swSelection';\n        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + \"selection.html\";\n    }\n    SWSelection.Factory = function () {\n        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWSelection(corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ['corePartialsPath', 'hibachiPathBuilder'];\n        return directive;\n    };\n    SWSelection.$inject = ['corePartialsPath', 'hibachiPathBuilder'];\n    return SWSelection;\n}());\nexports.SWSelection = SWSelection;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swselection.ts?")},"../../../org/Hibachi/client/src/core/components/swsortable.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swsortable.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWSortable = /** @class */ (function () {\n    function SWSortable(expression, compiledElement) {\n        return function (linkElement) {\n            var scope = this;\n            linkElement.sortable({\n                placeholder: "placeholder",\n                opacity: 0.8,\n                axis: "y",\n                update: function (event, ui) {\n                    // get model\n                    var model = scope.$apply(expression);\n                    // remember its length\n                    var modelLength = model.length;\n                    // rember html nodes\n                    var items = [];\n                    // loop through items in new order\n                    linkElement.children().each(function (index) {\n                        var item = $(this);\n                        // get old item index\n                        var oldIndex = parseInt(item.attr("sw:sortable-index"), 10);\n                        // add item to the end of model\n                        model.push(model[oldIndex]);\n                        if (item.attr("sw:sortable-index")) {\n                            // items in original order to restore dom\n                            items[oldIndex] = item;\n                            // and remove item from dom\n                            item.detach();\n                        }\n                    });\n                    model.splice(0, modelLength);\n                    // restore original dom order, so angular does not get confused\n                    linkElement.append.apply(linkElement, items);\n                    // notify angular of the change\n                    scope.$digest();\n                }\n            });\n        };\n    }\n    SWSortable.Factory = function () {\n        var directive = function (expression, compiledElement) { return new SWSortable(expression, compiledElement); };\n        directive.$inject = [\'expression\', \'compiledElement\'];\n        return directive;\n    };\n    return SWSortable;\n}());\nexports.SWSortable = SWSortable;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swsortable.ts?')},"../../../org/Hibachi/client/src/core/components/swtabcontent.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtabcontent.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWTabContentController = /** @class */ (function () {\n    // @ngInject\n    function SWTabContentController($scope, $q, $transclude, $hibachi, $timeout, utilityService, rbkeyService, collectionConfigService) {\n        this.$scope = $scope;\n        this.$q = $q;\n        this.$transclude = $transclude;\n        this.$hibachi = $hibachi;\n        this.$timeout = $timeout;\n        this.utilityService = utilityService;\n        this.rbkeyService = rbkeyService;\n        this.collectionConfigService = collectionConfigService;\n        if (angular.isUndefined(this.active)) {\n            this.active = false;\n        }\n        if (angular.isUndefined(this.loaded)) {\n            this.loaded = false;\n        }\n        if (angular.isUndefined(this.hide)) {\n            this.hide = false;\n        }\n        if (angular.isUndefined(this.id)) {\n            this.id = utilityService.createID(16);\n        }\n        if (angular.isUndefined(this.name)) {\n            this.name = this.id;\n        }\n        //make a tab service? \n    }\n    return SWTabContentController;\n}());\nexports.SWTabContentController = SWTabContentController;\nvar SWTabContent = /** @class */ (function () {\n    // @ngInject\n    function SWTabContent($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder) {\n        var _this = this;\n        this.$compile = $compile;\n        this.scopeService = scopeService;\n        this.observerService = observerService;\n        this.corePartialsPath = corePartialsPath;\n        this.transclude = true;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            active: "=?",\n            loaded: "=?",\n            hide: "=?",\n            name: "@?"\n        };\n        this.controller = SWTabContentController;\n        this.controllerAs = "swTabContent";\n        this.compile = function (element, attrs, transclude) {\n            return {\n                pre: function ($scope, element, attrs) {\n                },\n                post: function ($scope, element, attrs) {\n                    var parentDirective = _this.scopeService.getRootParentScope($scope, "swTabGroup")["swTabGroup"];\n                    if (angular.isDefined(parentDirective) && angular.isDefined(parentDirective.tabs)) {\n                        parentDirective.tabs.push($scope.swTabContent);\n                        _this.observerService.notify(parentDirective.initTabEventName);\n                    }\n                }\n            };\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tabcontent.html";\n    }\n    SWTabContent.Factory = function () {\n        var directive = function ($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder) { return new SWTabContent($compile, scopeService, observerService, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["$compile",\n            "scopeService",\n            "observerService",\n            "corePartialsPath",\n            "hibachiPathBuilder"];\n        return directive;\n    };\n    return SWTabContent;\n}());\nexports.SWTabContent = SWTabContent;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtabcontent.ts?')},"../../../org/Hibachi/client/src/core/components/swtabgroup.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtabgroup.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWTabGroupController = /** @class */ (function () {\n    // @ngInject\n    function SWTabGroupController(utilityService, rbkeyService, observerService) {\n        var _this = this;\n        this.utilityService = utilityService;\n        this.rbkeyService = rbkeyService;\n        this.observerService = observerService;\n        this.hasActiveTab = false;\n        this.initTab = function () {\n            for (var i = 0; i < _this.tabs.length; i++) {\n                if (!_this.tabs[i].hide) {\n                    _this.tabs[i].active = true;\n                    _this.tabs[i].loaded = true;\n                    break;\n                }\n            }\n        };\n        this.reset = function () {\n            var defaultSelected = false;\n            for (var i = 0; i < _this.tabs.length; i++) {\n                _this.tabs[i].loaded = false;\n                if (!_this.tabs[i].hide && !defaultSelected) {\n                    _this.switchTab(_this.tabs[i]);\n                    defaultSelected = true;\n                }\n            }\n        };\n        this.switchToTab = function (tabName) {\n            _this.switchTab(_this.getTabByName(tabName));\n        };\n        this.switchTab = function (tabToActivate) {\n            _this.observerService.notify(_this.switchTabGroupEventName);\n            if (_this.switchTabEventName) {\n                _this.observerService.notify(_this.switchTabEventName, tabToActivate);\n            }\n            for (var i = 0; i < _this.tabs.length; i++) {\n                _this.tabs[i].active = false;\n            }\n            tabToActivate.active = true;\n            tabToActivate.loaded = true;\n        };\n        this.getTabByName = function (name) {\n            for (var i = 0; i < _this.tabs.length; i++) {\n                if (_this.tabs[i].name == name) {\n                    return _this.tabs[i];\n                }\n            }\n        };\n        if (angular.isUndefined(this.tabs)) {\n            this.tabs = [];\n        }\n        this.tabGroupID = "TG" + this.utilityService.createID(30);\n        this.switchTabGroupEventName = "SwitchTabGroup" + this.tabGroupID;\n        if (angular.isUndefined(this.initTabEventName)) {\n            this.initTabEventName = "InitTabForTabGroup" + this.tabGroupID;\n        }\n        if (angular.isDefined(this.resetTabEventName)) {\n            this.observerService.attach(this.reset, this.resetTabEventName);\n        }\n        if (angular.isDefined(this.switchToTabEventName)) {\n            this.observerService.attach(this.switchToTab, this.switchToTabEventName);\n        }\n        this.observerService.attach(this.initTab, this.initTabEventName);\n    }\n    return SWTabGroupController;\n}());\nexports.SWTabGroupController = SWTabGroupController;\nvar SWTabGroup = /** @class */ (function () {\n    // @ngInject\n    function SWTabGroup($compile, corePartialsPath, hibachiPathBuilder) {\n        this.$compile = $compile;\n        this.corePartialsPath = corePartialsPath;\n        this.transclude = true;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            switchTabEventName: "@?",\n            switchToTabEventName: "@?",\n            initTabEventName: "@?",\n            resetTabEventName: "@?"\n        };\n        this.controller = SWTabGroupController;\n        this.controllerAs = "swTabGroup";\n        this.compile = function (element, attrs, transclude) {\n            return {\n                pre: function ($scope, element, attrs) { },\n                post: function ($scope, element, attrs) { }\n            };\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tabgroup.html";\n    }\n    SWTabGroup.Factory = function () {\n        var directive = function ($compile, corePartialsPath, hibachiPathBuilder) { return new SWTabGroup($compile, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["$compile", "corePartialsPath",\n            \'hibachiPathBuilder\'];\n        return directive;\n    };\n    return SWTabGroup;\n}());\nexports.SWTabGroup = SWTabGroup;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtabgroup.ts?')},"../../../org/Hibachi/client/src/core/components/swtooltip.ts":
/*!*****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtooltip.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWTooltipController = /** @class */ (function () {\n    // @ngInject\n    function SWTooltipController(rbkeyService) {\n        var _this = this;\n        this.rbkeyService = rbkeyService;\n        this.showTooltip = false;\n        this.show = function () {\n            _this.showTooltip = true;\n        };\n        this.hide = function () {\n            _this.showTooltip = false;\n        };\n        if (angular.isDefined(this.rbKey)) {\n            this.text = rbkeyService.getRBKey(this.rbKey);\n        }\n        if (angular.isUndefined(this.position)) {\n            this.position = "top";\n        }\n    }\n    return SWTooltipController;\n}());\nexports.SWTooltipController = SWTooltipController;\nvar SWTooltip = /** @class */ (function () {\n    // @ngInject\n    function SWTooltip($document, corePartialsPath, hibachiPathBuilder) {\n        this.$document = $document;\n        this.corePartialsPath = corePartialsPath;\n        this.transclude = true;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            rbKey: "@?",\n            text: "@?",\n            position: "@?",\n            showTooltip: "=?"\n        };\n        this.controller = SWTooltipController;\n        this.controllerAs = "swTooltip";\n        this.link = function (scope, element, attrs, controller, transclude) {\n            var tooltip = element.find(".tooltip");\n            var elementPosition = element.position();\n            var tooltipStyle = tooltip[0].style;\n            if (attrs && attrs.position) {\n                switch (attrs.position.toLowerCase()) {\n                    case \'top\':\n                        tooltipStyle.top = "0px";\n                        tooltipStyle.left = "0px";\n                        break;\n                    case \'bottom\':\n                        //where the element is rendered to begin with\n                        break;\n                    case \'left\':\n                        tooltipStyle.top = (elementPosition.top + element[0].offsetHeight - 5) + "px";\n                        tooltipStyle.left = (-1 * (elementPosition.left + element[0].offsetLeft - 5)) + "px";\n                        element.find(".tooltip-inner")[0].style.maxWidth = "none";\n                        break;\n                    default:\n                        //right is the default\n                        tooltipStyle.top = (elementPosition.top + element[0].offsetHeight - 5) + "px";\n                        tooltipStyle.left = (elementPosition.left + element[0].offsetWidth - 5) + "px";\n                }\n            }\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "tooltip.html";\n    }\n    SWTooltip.Factory = function () {\n        var directive = function ($document, corePartialsPath, hibachiPathBuilder) { return new SWTooltip($document, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["$document", "corePartialsPath", "hibachiPathBuilder"];\n        return directive;\n    };\n    return SWTooltip;\n}());\nexports.SWTooltip = SWTooltip;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtooltip.ts?')},"../../../org/Hibachi/client/src/core/components/swtypeaheadinputfield.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtypeaheadinputfield.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWTypeaheadInputFieldController = /** @class */ (function () {\n    // @ngInject\n    function SWTypeaheadInputFieldController($scope, $transclude, collectionConfigService, typeaheadService, $rootScope, observerService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$transclude = $transclude;\n        this.collectionConfigService = collectionConfigService;\n        this.typeaheadService = typeaheadService;\n        this.$rootScope = $rootScope;\n        this.observerService = observerService;\n        this.columns = [];\n        this.filters = [];\n        this.addFunction = function (value) {\n            _this.typeaheadService.typeaheadStore.dispatch({\n                "type": "TYPEAHEAD_USER_SELECTION",\n                "payload": {\n                    name: _this.fieldName || "",\n                    data: value[_this.propertyToSave] || ""\n                }\n            });\n            _this.modelValue = value[_this.propertyToSave];\n            if (_this.action) {\n                var data = {};\n                if (_this.variables) {\n                    data = _this.variables();\n                }\n                data[\'value\'] = _this.modelValue;\n                _this.$root.slatwall.doAction(_this.action, data);\n            }\n        };\n        this.$root = $rootScope;\n        if (angular.isUndefined(this.typeaheadCollectionConfig)) {\n            if (angular.isDefined(this.entityName)) {\n                this.typeaheadCollectionConfig = collectionConfigService.newCollectionConfig(this.entityName);\n            }\n            else {\n                throw ("You did not pass the correct collection config data to swTypeaheadInputField");\n            }\n        }\n        if (angular.isUndefined(this.validateRequired)) {\n            this.validateRequired = false;\n        }\n        //get the collection config\n        this.$transclude($scope, function () { });\n        if (angular.isUndefined(this.propertyToSave)) {\n            throw ("You must select a property to save for the input field directive");\n        }\n        if (angular.isDefined(this.propertiesToLoad)) {\n            this.typeaheadCollectionConfig.addDisplayProperty(this.propertiesToLoad);\n        }\n        angular.forEach(this.columns, function (column) {\n            _this.typeaheadCollectionConfig.addDisplayProperty(column.propertyIdentifier, \'\', column);\n        });\n        angular.forEach(this.filters, function (filter) {\n            _this.typeaheadCollectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);\n        });\n        if (angular.isDefined(this.initialEntityId) && this.initialEntityId.length) {\n            this.modelValue = this.initialEntityId;\n        }\n        if (this.eventListeners) {\n            for (var key in this.eventListeners) {\n                observerService.attach(this.eventListeners[key], key);\n            }\n        }\n    }\n    return SWTypeaheadInputFieldController;\n}());\nexports.SWTypeaheadInputFieldController = SWTypeaheadInputFieldController;\nvar SWTypeaheadInputField = /** @class */ (function () {\n    // @ngInject\n    function SWTypeaheadInputField(corePartialsPath, hibachiPathBuilder) {\n        this.corePartialsPath = corePartialsPath;\n        this.transclude = true;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            fieldName: "@",\n            entityName: "@",\n            typeaheadCollectionConfig: "=?",\n            propertiesToLoad: "@?",\n            placeholderRbKey: "@?",\n            propertyToShow: "@",\n            propertyToSave: "@",\n            initialEntityId: "@",\n            allRecords: "=?",\n            validateRequired: "=?",\n            maxRecords: "@",\n            action: "@",\n            variables: \'&?\',\n            eventListeners: \'=?\',\n            placeholderText: \'@?\',\n            searchEndpoint: \'@?\',\n            titleText: \'@?\'\n        };\n        this.controller = SWTypeaheadInputFieldController;\n        this.controllerAs = "swTypeaheadInputField";\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadinputfield.html";\n    }\n    SWTypeaheadInputField.Factory = function () {\n        var directive = function (corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadInputField(corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["corePartialsPath", \'hibachiPathBuilder\'];\n        return directive;\n    };\n    return SWTypeaheadInputField;\n}());\nexports.SWTypeaheadInputField = SWTypeaheadInputField;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtypeaheadinputfield.ts?')},"../../../org/Hibachi/client/src/core/components/swtypeaheadmultiselect.ts":
/*!******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtypeaheadmultiselect.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWTypeaheadMultiselectController = /** @class */ (function () {\n    // @ngInject\n    function SWTypeaheadMultiselectController($scope, $transclude, $hibachi, listingService, typeaheadService, utilityService, collectionConfigService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$transclude = $transclude;\n        this.$hibachi = $hibachi;\n        this.listingService = listingService;\n        this.typeaheadService = typeaheadService;\n        this.utilityService = utilityService;\n        this.collectionConfigService = collectionConfigService;\n        this.addSelection = function (item) {\n            _this.typeaheadService.addSelection(_this.typeaheadDataKey, item);\n            if (_this.inListingDisplay) {\n                _this.listingService.insertListingPageRecord(_this.listingId, item);\n            }\n        };\n        this.removeSelection = function (index) {\n            var itemRemoved = _this.typeaheadService.removeSelection(_this.typeaheadDataKey, index);\n            if (_this.inListingDisplay) {\n                _this.listingService.removeListingPageRecord(_this.listingId, itemRemoved);\n            }\n        };\n        this.getSelections = function () {\n            return _this.typeaheadService.getData(_this.typeaheadDataKey);\n        };\n        this.updateSelectionList = function () {\n            _this.selectionList = _this.typeaheadService.updateSelectionList(_this.typeaheadDataKey);\n        };\n        if (angular.isUndefined(this.typeaheadDataKey)) {\n            this.typeaheadDataKey = this.utilityService.createID(32);\n        }\n        if (angular.isUndefined(this.disabled)) {\n            this.disabled = false;\n        }\n        if (angular.isUndefined(this.showSelections)) {\n            this.showSelections = false;\n        }\n        if (angular.isUndefined(this.multiselectMode)) {\n            this.multiselectMode = true;\n        }\n        if (angular.isUndefined(this.hasAddButtonFunction)) {\n            this.hasAddButtonFunction = false;\n        }\n        if (angular.isUndefined(this.hasViewFunction)) {\n            this.hasViewFunction = false;\n        }\n        if (angular.isDefined(this.selectedCollectionConfig)) {\n            this.typeaheadService.initializeSelections(this.typeaheadDataKey, this.selectedCollectionConfig);\n        }\n        this.typeaheadService.attachTypeaheadSelectionUpdateEvent(this.typeaheadDataKey, this.updateSelectionList);\n    }\n    return SWTypeaheadMultiselectController;\n}());\nexports.SWTypeaheadMultiselectController = SWTypeaheadMultiselectController;\nvar SWTypeaheadMultiselect = /** @class */ (function () {\n    // @ngInject\n    function SWTypeaheadMultiselect($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder) {\n        var _this = this;\n        this.$compile = $compile;\n        this.scopeService = scopeService;\n        this.typeaheadService = typeaheadService;\n        this.corePartialsPath = corePartialsPath;\n        this.transclude = true;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            placeholderRbKey: "@",\n            collectionConfig: "=?",\n            selectedCollectionConfig: "=?",\n            typeaheadDataKey: "@?",\n            multiselectModeOn: "=?multiselectMode",\n            showSelections: "=?",\n            dataTarget: "=?",\n            dataTargetIndex: "=?",\n            addButtonFunction: "&?",\n            viewFunction: "&?",\n            inListingDisplay: "=?",\n            listingId: "@?",\n            propertyToCompare: "@?",\n            fallbackPropertiesToCompare: "@?",\n            rightContentPropertyIdentifier: "@?",\n            selectionFieldName: "@?",\n            disabled: "=?"\n        };\n        this.controller = SWTypeaheadMultiselectController;\n        this.controllerAs = "swTypeaheadMultiselect";\n        this.compile = function (element, attrs, transclude) {\n            return {\n                pre: function ($scope, element, attrs) {\n                    //because callbacks are defined even when they\'re not passed in, this needs to be communicated to the typeahead\n                    if (angular.isDefined(attrs.addButtonFunction)) {\n                        $scope.swTypeaheadMultiselect.hasAddButtonFunction = true;\n                    }\n                    else {\n                        $scope.swTypeaheadMultiselect.hasAddButtonFunction = false;\n                    }\n                    if (angular.isDefined(attrs.viewFunction)) {\n                        $scope.swTypeaheadMultiselect.viewFunction = true;\n                    }\n                    else {\n                        $scope.swTypeaheadMultiselect.viewFunction = false;\n                    }\n                    if (angular.isUndefined($scope.swTypeaheadMultiselect.inListingDisplay)) {\n                        $scope.swTypeaheadMultiselect.inListingDisplay = false;\n                    }\n                    if ($scope.swTypeaheadMultiselect.inListingDisplay && _this.scopeService.hasParentScope($scope, "swListingDisplay")) {\n                        var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];\n                        $scope.swTypeaheadMultiselect.listingId = listingDisplayScope.tableID;\n                        listingDisplayScope.typeaheadDataKey = $scope.swTypeaheadMultiselect.typeaheadDataKey;\n                    }\n                },\n                post: function ($scope, element, attrs) {\n                    var target = element.find(".s-selected-list");\n                    var selectedItemTemplate = angular.element(\'<div class="alert s-selected-item" ng-repeat="item in swTypeaheadMultiselect.getSelections() track by $index">\');\n                    var closeButton = angular.element(\'<button ng-click="swTypeaheadMultiselect.removeSelection($index)" type="button" class="close"><span>×</span><span class="sr-only" sw-rbkey="&apos;define.close&apos;"></span></button>\');\n                    selectedItemTemplate.append(closeButton);\n                    selectedItemTemplate.append(_this.typeaheadService.stripTranscludedContent(transclude($scope, function () { })));\n                    target.append(_this.$compile(selectedItemTemplate)($scope));\n                }\n            };\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadmultiselect.html";\n    }\n    SWTypeaheadMultiselect.Factory = function () {\n        var directive = function ($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadMultiselect($compile, scopeService, typeaheadService, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["$compile", "scopeService", "typeaheadService", "corePartialsPath", \'hibachiPathBuilder\'];\n        return directive;\n    };\n    return SWTypeaheadMultiselect;\n}());\nexports.SWTypeaheadMultiselect = SWTypeaheadMultiselect;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtypeaheadmultiselect.ts?')},"../../../org/Hibachi/client/src/core/components/swtypeaheadremoveselection.ts":
/*!**********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtypeaheadremoveselection.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWTypeaheadRemoveSelectionController = /** @class */ (function () {\n    function SWTypeaheadRemoveSelectionController($scope, listingService, scopeService, typeaheadService, utilityService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.listingService = listingService;\n        this.scopeService = scopeService;\n        this.typeaheadService = typeaheadService;\n        this.utilityService = utilityService;\n        this.updatePageRecord = function () {\n            if (_this.scopeService.hasParentScope(_this.$scope, "pageRecord")) {\n                var pageRecordScope = _this.scopeService.getRootParentScope(_this.$scope, "pageRecord")["pageRecord"];\n                _this.pageRecord = pageRecordScope;\n            }\n        };\n        this.removeSelection = function () {\n            if (!_this.disabled) {\n                _this.typeaheadService.removeSelection(_this.typeaheadDataKey, undefined, _this.pageRecord);\n                _this.listingService.removeListingPageRecord(_this.listingId, _this.pageRecord);\n            }\n        };\n        this.listingService.attachToListingPageRecordsUpdate(this.listingId, this.updatePageRecord, this.utilityService.createID(32));\n        if (angular.isUndefined(this.disabled)) {\n            this.disabled = false;\n        }\n    }\n    return SWTypeaheadRemoveSelectionController;\n}());\nexports.SWTypeaheadRemoveSelectionController = SWTypeaheadRemoveSelectionController;\nvar SWTypeaheadRemoveSelection = /** @class */ (function () {\n    // @ngInject\n    function SWTypeaheadRemoveSelection(scopeService, corePartialsPath, hibachiPathBuilder) {\n        var _this = this;\n        this.scopeService = scopeService;\n        this.corePartialsPath = corePartialsPath;\n        this.transclude = true;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            typeaheadDataKey: "@?",\n            index: "@?",\n            disabled: "=?"\n        };\n        this.controller = SWTypeaheadRemoveSelectionController;\n        this.controllerAs = "swTypeaheadRemoveSelection";\n        this.link = function (scope, element, attrs) {\n            if (_this.scopeService.hasParentScope(scope, "swListingDisplay")) {\n                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay")["swListingDisplay"];\n                scope.swTypeaheadRemoveSelection.typeaheadDataKey = listingDisplayScope.typeaheadDataKey;\n                scope.swTypeaheadRemoveSelection.listingId = listingDisplayScope.tableID;\n            }\n            if (_this.scopeService.hasParentScope(scope, "pageRecord")) {\n                var pageRecordScope = _this.scopeService.getRootParentScope(scope, "pageRecord")["pageRecord"];\n                scope.swTypeaheadRemoveSelection.pageRecord = pageRecordScope;\n            }\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadremoveselection.html";\n    }\n    SWTypeaheadRemoveSelection.Factory = function () {\n        var directive = function (scopeService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadRemoveSelection(scopeService, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["scopeService", "corePartialsPath", \'hibachiPathBuilder\'];\n        return directive;\n    };\n    return SWTypeaheadRemoveSelection;\n}());\nexports.SWTypeaheadRemoveSelection = SWTypeaheadRemoveSelection;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtypeaheadremoveselection.ts?')},"../../../org/Hibachi/client/src/core/components/swtypeaheadsearch.ts":
/*!*************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtypeaheadsearch.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWTypeaheadSearchController = /** @class */ (function () {\n    // @ngInject\n    function SWTypeaheadSearchController($scope, $q, $transclude, $hibachi, $timeout, utilityService, observerService, rbkeyService, collectionConfigService, typeaheadService, $http, requestService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$q = $q;\n        this.$transclude = $transclude;\n        this.$hibachi = $hibachi;\n        this.$timeout = $timeout;\n        this.utilityService = utilityService;\n        this.observerService = observerService;\n        this.rbkeyService = rbkeyService;\n        this.collectionConfigService = collectionConfigService;\n        this.typeaheadService = typeaheadService;\n        this.$http = $http;\n        this.requestService = requestService;\n        this.results = [];\n        this.columns = [];\n        this.filters = [];\n        this.searchableColumns = [];\n        this.initialSearchableColumnsState = [];\n        this.searchableColumnSelection = \'All\';\n        this.fallbackPropertyArray = [];\n        this.clearSearch = function () {\n            _this.searchText = "";\n            _this.hideSearch = true;\n            if (angular.isDefined(_this.addFunction)) {\n                _this.addFunction()(undefined);\n            }\n        };\n        this.toggleDropdown = function () {\n            _this.dropdownOpen = !_this.dropdownOpen;\n        };\n        this.toggleOptions = function () {\n            if (_this.hideSearch && (!_this.searchText || !_this.searchText.length)) {\n                _this.search(_this.searchText, true);\n            }\n            _this.hideSearch = !_this.hideSearch;\n        };\n        /**\n         * The actionCreator function for searching.\n         */\n        this.rSearch = function (search) {\n            /**\n             * Fire off an action that a search is happening.\n             * Example action function. The dispatch takes a function, that sends data in a payload\n             * to the reducer.\n             */\n            _this.typeaheadService.typeaheadStore.dispatch({\n                "type": "TYPEAHEAD_QUERY",\n                "payload": {\n                    "searchText": search\n                }\n            });\n        };\n        this.search = function (search, allowEmptyKeyword) {\n            if (search === void 0) { search = \'\'; }\n            if (allowEmptyKeyword === void 0) { allowEmptyKeyword = false; }\n            if (!search.length && !allowEmptyKeyword) {\n                _this.closeThis();\n                return;\n            }\n            _this.rSearch(search);\n            if (_this._timeoutPromise) {\n                _this.$timeout.cancel(_this._timeoutPromise);\n                _this.loading = false;\n            }\n            _this.loading = true;\n            _this.collectionConfig.setKeywords(search);\n            if (angular.isDefined(_this.filterGroupsConfig)) {\n                //allows for filtering on search text\n                var filterConfig = _this.filterGroupsConfig.replace("replaceWithSearchString", search);\n                filterConfig = filterConfig.trim();\n                _this.collectionConfig.loadFilterGroups(JSON.parse(filterConfig));\n            }\n            _this._timeoutPromise = _this.$timeout(function () {\n                var promise;\n                if (_this.searchEndpoint) {\n                    promise = _this.requestService.newPublicRequest(\'/\' + _this.searchEndpoint, {\n                        search: search,\n                        options: _this.collectionConfig.getOptions(),\n                        entityName: _this.collectionConfig.baseEntityName\n                    }, \'post\', {\n                        \'Content-Type\': \'application/json\'\n                    }).promise;\n                }\n                else {\n                    promise = _this.collectionConfig.getEntity();\n                }\n                promise.then(function (response) {\n                    _this.results = response.pageRecords || response.records;\n                    _this.updateSelections();\n                }).finally(function () {\n                    _this.resultsDeferred.resolve();\n                    _this.hideSearch = (_this.results.length == 0);\n                    _this.loading = false;\n                });\n            }, 500);\n        };\n        this.updateSelections = function () {\n            _this.typeaheadService.updateSelections(_this.typeaheadDataKey);\n        };\n        this.updateSearchableProperties = function (column) {\n            if (angular.isString(column) && column == \'all\') {\n                angular.copy(_this.initialSearchableColumnsState, _this.searchableColumns); //need to insure that these changes are actually on the collectionconfig\n                _this.searchableColumnSelection = \'All\';\n            }\n            else {\n                angular.forEach(_this.searchableColumns, function (value, key) {\n                    value.isSearchable = false;\n                });\n                column.isSearchable = true;\n                _this.searchableColumnSelection = column.title;\n            }\n            //probably need to refetch the collection\n        };\n        this.addOrRemoveItem = function (item) {\n            var remove = item.selected || false;\n            if (!_this.hideSearch && !_this.multiselectMode) {\n                _this.hideSearch = true;\n            }\n            if (!_this.multiselectMode) {\n                if (angular.isDefined(_this.propertyToShow)) {\n                    _this.searchText = item[_this.propertyToShow];\n                }\n                else if (angular.isDefined(_this.columns) &&\n                    _this.columns.length &&\n                    angular.isDefined(_this.columns[0].propertyIdentifier)) {\n                    _this.searchText = item[_this.columns[0].propertyIdentifier];\n                }\n            }\n            if (!remove && angular.isDefined(_this.addFunction)) {\n                _this.addFunction()(item);\n            }\n            if (remove && angular.isDefined(_this.removeFunction)) {\n                _this.removeFunction()(item.selectedIndex);\n                item.selected = false;\n                item.selectedIndex = undefined;\n            }\n            _this.updateSelections();\n        };\n        this.addButtonItem = function () {\n            if (!_this.hideSearch) {\n                _this.hideSearch = true;\n            }\n            if (angular.isDefined(_this.addButtonFunction)) {\n                _this.addButtonFunction()(_this.searchText);\n            }\n        };\n        this.viewButtonClick = function () {\n            _this.viewFunction()();\n        };\n        this.closeThis = function (clickOutsideArgs) {\n            _this.hideSearch = true;\n            if (angular.isDefined(clickOutsideArgs)) {\n                for (var callBackAction in clickOutsideArgs.callBackActions) {\n                    clickOutsideArgs.callBackActions[callBackAction]();\n                }\n            }\n        };\n        this.getSelections = function () {\n            return _this.typeaheadService.getData(_this.typeaheadDataKey);\n        };\n        this.dropdownOpen = false;\n        this.requestService = requestService;\n        //populates all needed variables\n        this.$transclude($scope, function () { });\n        this.resultsDeferred = $q.defer();\n        this.resultsPromise = this.resultsDeferred.promise;\n        if (angular.isUndefined(this.typeaheadDataKey)) {\n            this.typeaheadDataKey = this.utilityService.createID(32);\n        }\n        if (angular.isUndefined(this.disabled)) {\n            this.disabled = false;\n        }\n        if (angular.isUndefined(this.multiselectMode)) {\n            this.multiselectMode = false;\n        }\n        if (angular.isUndefined(this.searchOnLoad)) {\n            this.searchOnLoad = true;\n        }\n        if (angular.isUndefined(this.searchText) || this.searchText == null) {\n            this.searchText = "";\n        }\n        else if (this.searchOnLoad) {\n            this.search(this.searchText);\n        }\n        if (angular.isUndefined(this.validateRequired)) {\n            this.validateRequired = false;\n        }\n        if (angular.isUndefined(this.hideSearch)) {\n            this.hideSearch = true;\n        }\n        if (angular.isUndefined(this.collectionConfig)) {\n            if (angular.isDefined(this.entity)) {\n                this.collectionConfig = collectionConfigService.newCollectionConfig(this.entity);\n            }\n            else {\n                throw ("You did not pass the correct collection config data to swTypeaheadSearch");\n            }\n        }\n        if (angular.isDefined(this.collectionConfig)) {\n            this.primaryIDPropertyName = $hibachi.getPrimaryIDPropertyNameByEntityName(this.collectionConfig.baseEntityName);\n        }\n        if (angular.isDefined(this.fallbackPropertiesToCompare) &&\n            this.fallbackPropertiesToCompare.length) {\n            this.fallbackPropertyArray = this.fallbackPropertiesToCompare.split(",");\n        }\n        if (angular.isDefined(this.placeholderRbKey)) {\n            this.placeholderText = this.rbkeyService.getRBKey(this.placeholderRbKey);\n        }\n        else if (angular.isUndefined(this.placeholderText)) {\n            this.placeholderText = this.rbkeyService.getRBKey(\'define.search\');\n        }\n        //init timeoutPromise for link\n        this._timeoutPromise = this.$timeout(function () { }, 500);\n        if (angular.isDefined(this.propertiesToDisplay)) {\n            this.collectionConfig.addDisplayProperty(this.propertiesToDisplay.split(","));\n        }\n        angular.forEach(this.columns, function (column) {\n            _this.collectionConfig.addDisplayProperty(column.propertyIdentifier, \'\', column);\n        });\n        angular.forEach(this.filters, function (filter) {\n            _this.collectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);\n        });\n        if (angular.isUndefined(this.allRecords)) {\n            this.allRecords = this.collectionConfig.allRecords;\n        }\n        this.collectionConfig.setAllRecords(this.allRecords);\n        if (angular.isUndefined(this.maxRecords)) {\n            this.maxRecords = 10;\n        }\n        this.collectionConfig.setPageShow(this.maxRecords);\n        if (angular.isDefined(this.initialEntityId) && this.initialEntityId.length) {\n            this.initialEntityCollectionConfig = collectionConfigService.newCollectionConfig(this.collectionConfig.baseEntityName);\n            this.initialEntityCollectionConfig.loadColumns(this.collectionConfig.columns);\n            var primaryIDProperty = $hibachi.getPrimaryIDPropertyNameByEntityName(this.initialEntityCollectionConfig.baseEntityName);\n            this.initialEntityCollectionConfig.addFilter(primaryIDProperty, this.initialEntityId, "=");\n            var promise = this.initialEntityCollectionConfig.getEntity();\n            promise.then(function (response) {\n                _this.results = response.pageRecords;\n                if (_this.results.length) {\n                    _this.addOrRemoveItem(_this.results[0]);\n                }\n            });\n        }\n        angular.forEach(this.collectionConfig.columns, function (value, key) {\n            if (value.isSearchable) {\n                _this.searchableColumns.push(value);\n            }\n        });\n        //need to insure that these changes are actually on the collectionconfig\n        angular.copy(this.searchableColumns, this.initialSearchableColumnsState);\n        this.typeaheadService.setTypeaheadState(this.typeaheadDataKey, this);\n        this.observerService.attach(this.clearSearch, this.typeaheadDataKey + \'clearSearch\');\n        this.$http = $http;\n    }\n    return SWTypeaheadSearchController;\n}());\nexports.SWTypeaheadSearchController = SWTypeaheadSearchController;\nvar SWTypeaheadSearch = /** @class */ (function () {\n    // @ngInject\n    function SWTypeaheadSearch($compile, typeaheadService, corePartialsPath, hibachiPathBuilder) {\n        var _this = this;\n        this.$compile = $compile;\n        this.typeaheadService = typeaheadService;\n        this.corePartialsPath = corePartialsPath;\n        this.transclude = true;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            collectionConfig: "=?",\n            entity: "@?",\n            properties: "@?",\n            propertiesToDisplay: "@?",\n            filterGroupsConfig: "@?",\n            placeholderText: "@?",\n            placeholderRbKey: "@?",\n            propertyToCompare: "@?",\n            fallbackPropertiesToCompare: "@?",\n            searchText: "=?",\n            searchOnLoad: "=?",\n            results: "=?",\n            addFunction: "&?",\n            removeFunction: "&?",\n            addButtonFunction: "&?",\n            viewFunction: "&?",\n            showAddButton: "=?",\n            showViewButton: "=?",\n            validateRequired: "=?",\n            uniqueResults: "<?",\n            clickOutsideArguments: "=?",\n            propertyToShow: "=?",\n            hideSearch: "=?",\n            allRecords: "=?",\n            maxRecords: "=?",\n            disabled: "=?",\n            initialEntityId: "@",\n            multiselectMode: "=?",\n            typeaheadDataKey: "@?",\n            rightContentPropertyIdentifier: "@?",\n            searchEndpoint: "@?",\n            allResultsEndpoint: "@?",\n            titleText: \'@?\',\n            urlBase: \'@?\',\n            urlProperty: \'@?\'\n        };\n        this.controller = SWTypeaheadSearchController;\n        this.controllerAs = "swTypeaheadSearch";\n        this.compile = function (element, attrs, transclude) {\n            return {\n                pre: function ($scope, element, attrs) {\n                    if (angular.isDefined(attrs.addButtonFunction) && angular.isUndefined(attrs.showAddButton)) {\n                        $scope.swTypeaheadSearch.showAddButton = true;\n                    }\n                    else if (angular.isUndefined(attrs.showAddButton)) {\n                        $scope.swTypeaheadSearch.showAddButton = false;\n                    }\n                    if (angular.isDefined(attrs.viewFunction) && angular.isUndefined(attrs.showViewButton)) {\n                        $scope.swTypeaheadSearch.showViewButton = true;\n                    }\n                    else if (angular.isUndefined(attrs.showViewButton)) {\n                        $scope.swTypeaheadSearch.showViewButton = false;\n                    }\n                },\n                post: function ($scope, element, attrs) {\n                    var target = element.find(".dropdown-menu");\n                    var uniqueFilter = \'\';\n                    if ($scope.swTypeaheadSearch.uniqueResults) {\n                        uniqueFilter = " | unique:\'" + _this.typeaheadService.getTypeaheadPrimaryIDPropertyName($scope.swTypeaheadSearch.typeaheadDataKey) + "\'";\n                    }\n                    var listItemTemplateString = "\\n                    <li ng-repeat=\\"item in swTypeaheadSearch.results" + uniqueFilter + "\\" class=\\"dropdown-item\\" ng-class=\\"{\'s-selected\':item.selected}\\"></li>\\n                ";\n                    var anchorTemplateString = "\\n                    <a \\n                ";\n                    if (angular.isDefined($scope.swTypeaheadSearch.urlBase) &&\n                        angular.isDefined($scope.swTypeaheadSearch.urlProperty)) {\n                        anchorTemplateString += \'href="\' + $scope.swTypeaheadSearch.urlBase + \'{{item.\' + $scope.swTypeaheadSearch.urlProperty + \'}}">\';\n                    }\n                    else {\n                        anchorTemplateString += \'ng-click="swTypeaheadSearch.addOrRemoveItem(item)">\';\n                    }\n                    if (angular.isDefined($scope.swTypeaheadSearch.rightContentPropertyIdentifier)) {\n                        var rightContentTemplateString = "\\n                        <span class=\\"s-right-content\\" ng-bind=\\"item[swTypeaheadSearch.rightContentPropertyIdentifier]\\"></span></a>\\n                    ";\n                    }\n                    else {\n                        var rightContentTemplateString = "</a>";\n                    }\n                    if (angular.isDefined($scope.swTypeaheadSearch.allResultsEndpoint)) {\n                        var searchAllListItemTemplate = "\\n                        <li class=\\"dropdown-item see-all-results\\" ng-if=\\"swTypeaheadSearch.results.length == swTypeaheadSearch.maxRecords\\"><a href=\\"{{swTypeaheadSearch.allResultsEndpoint}}?keywords={{swTypeaheadSearch.searchText}}\\">See All Results</a></li>\\n                    ";\n                    }\n                    anchorTemplateString = anchorTemplateString + rightContentTemplateString;\n                    var listItemTemplate = angular.element(listItemTemplateString);\n                    var anchorTemplate = angular.element(anchorTemplateString);\n                    anchorTemplate.append(_this.typeaheadService.stripTranscludedContent(transclude($scope, function () { })));\n                    listItemTemplate.append(anchorTemplate);\n                    $scope.swTypeaheadSearch.resultsPromise.then(function () {\n                        target.append(_this.$compile(listItemTemplate)($scope));\n                        if (searchAllListItemTemplate != null) {\n                            target.append(_this.$compile(searchAllListItemTemplate)($scope));\n                        }\n                    });\n                }\n            };\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(corePartialsPath) + "typeaheadsearch.html";\n    }\n    SWTypeaheadSearch.Factory = function () {\n        var directive = function ($compile, typeaheadService, corePartialsPath, hibachiPathBuilder) { return new SWTypeaheadSearch($compile, typeaheadService, corePartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["$compile", "typeaheadService", "corePartialsPath",\n            \'hibachiPathBuilder\'];\n        return directive;\n    };\n    return SWTypeaheadSearch;\n}());\nexports.SWTypeaheadSearch = SWTypeaheadSearch;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtypeaheadsearch.ts?')},"../../../org/Hibachi/client/src/core/components/swtypeaheadsearchlineitem.ts":
/*!*********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtypeaheadsearchlineitem.ts ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWTypeaheadSearchLineItemController = /** @class */ (function () {\n    function SWTypeaheadSearchLineItemController() {\n    }\n    return SWTypeaheadSearchLineItemController;\n}());\nexports.SWTypeaheadSearchLineItemController = SWTypeaheadSearchLineItemController;\nvar SWTypeaheadSearchLineItem = /** @class */ (function () {\n    //@ngInject\n    function SWTypeaheadSearchLineItem($compile) {\n        this.$compile = $compile;\n        this.restrict = 'EA';\n        this.scope = true;\n        this.bindToController = {\n            propertyIdentifier: \"@\",\n            isSearchable: \"@?\",\n        };\n        this.controller = SWTypeaheadSearchLineItemController;\n        this.controllerAs = \"swTypeaheadSearchLineItem\";\n        this.compile = function (element, attrs, transclude) {\n            return {\n                pre: function (scope, element, attrs) {\n                    var innerHTML = element[0].innerHTML;\n                    element[0].innerHTML = '';\n                    var span = '<span ng-if=\"item.' + scope.swTypeaheadSearchLineItem.propertyIdentifier + '.toString().trim().length\">' + ' ' + innerHTML + '</span> <span ng-bind=\"item.' + scope.swTypeaheadSearchLineItem.propertyIdentifier + '\"></span>';\n                    element.append(span);\n                },\n                post: function (scope, element, attrs) { }\n            };\n        };\n    }\n    SWTypeaheadSearchLineItem.Factory = function () {\n        var directive = function ($compile) { return new SWTypeaheadSearchLineItem($compile); };\n        directive.$inject = [\n            '$compile'\n        ];\n        return directive;\n    };\n    return SWTypeaheadSearchLineItem;\n}());\nexports.SWTypeaheadSearchLineItem = SWTypeaheadSearchLineItem;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/components/swtypeaheadsearchlineitem.ts?")},"../../../org/Hibachi/client/src/core/controllers/globalsearch.ts":
/*!*********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/controllers/globalsearch.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar GlobalSearchController = /** @class */ (function () {\n    //@ngInject\n    function GlobalSearchController($scope, $log, $window, $timeout, $hibachi, rbkeyService) {\n        $scope.keywords = '';\n        $scope.searchResultsOpen = false;\n        $scope.sidebarClass = 'sidebar';\n        $scope.loading = false; //Set loading wheel to false\n        $scope.resultsFound = true; // Set the results Found to true because no search has been done yet\n        $scope.searchResults = {\n            'product': {\n                'title': 'Products',\n                'resultNameFilter': function (data) {\n                    return data['productName'];\n                },\n                'results': [],\n                'id': function (data) {\n                    return data['productID'];\n                }\n            },\n            'order': {\n                'title': rbkeyService.getRBKey('entity.order_plural'),\n                'resultNameFilter': function (data) {\n                    return data['orderNumber'];\n                },\n                'results': [],\n                'id': function (data) {\n                    return data['orderID'];\n                }\n            },\n            'brand': {\n                'title': rbkeyService.getRBKey('entity.brand_plural'),\n                'resultNameFilter': function (data) {\n                    return data['brandName'];\n                },\n                'results': [],\n                'id': function (data) {\n                    return data['brandID'];\n                }\n            },\n            'account': {\n                'title': 'Accounts',\n                'resultNameFilter': function (data) {\n                    return data['firstName'] + ' ' + data['lastName'];\n                },\n                'results': [],\n                'id': function (data) {\n                    return data['accountID'];\n                }\n            },\n            'vendor': {\n                'title': 'Vendors',\n                'resultNameFilter': function (data) {\n                    return data['vendorName'];\n                },\n                'results': [],\n                'id': function (data) {\n                    return data['vendorID'];\n                }\n            }\n        };\n        var _timeoutPromise;\n        var _loadingCount = 0;\n        $scope.updateSearchResults = function () {\n            $scope.loading = true;\n            $scope.showResults();\n            if (_timeoutPromise) {\n                $timeout.cancel(_timeoutPromise);\n            }\n            _timeoutPromise = $timeout(function () {\n                // If no keywords, then set everything back to their defaults\n                if ($scope.keywords === '') {\n                    $scope.hideResults();\n                    // Otherwise performe the search\n                }\n                else {\n                    $scope.showResults();\n                    // Set the loadingCount to the number of AJAX Calls we are about to do\n                    _loadingCount = Object.keys($scope.searchResults).length;\n                    for (var entityName in $scope.searchResults) {\n                        (function (entityName) {\n                            var searchPromise = $hibachi.getEntity(entityName, { keywords: $scope.keywords, pageShow: 4, deferkey: 'global-search-' + entityName });\n                            searchPromise.then(function (data) {\n                                // Clear out the old Results\n                                $scope.searchResults[entityName].results = [];\n                                $scope.searchResults[entityName].title = rbkeyService.getRBKey('entity.' + entityName.toLowerCase() + '_plural');\n                                // push in the new results\n                                for (var i in data.pageRecords) {\n                                    $scope.searchResults[entityName].results.push({\n                                        'name': $scope.searchResults[entityName].resultNameFilter(data.pageRecords[i]),\n                                        'link': $hibachi.buildUrl('entity.detail' + entityName) + '&' + entityName + 'ID=' + $scope.searchResults[entityName].id(data.pageRecords[i]),\n                                    });\n                                }\n                                // Increment Down The Loading Count\n                                _loadingCount--;\n                                // If the loadingCount drops to 0, then we can update scope\n                                if (_loadingCount == 0) {\n                                    $scope.loading = false;\n                                    var _foundResults = false;\n                                    for (var _thisEntityName in $scope.searchResults) {\n                                        if ($scope.searchResults[_thisEntityName].results.length) {\n                                            _foundResults = true;\n                                            break;\n                                        }\n                                    }\n                                    $scope.resultsFound = _foundResults;\n                                }\n                            });\n                        })(entityName);\n                    }\n                }\n            }, 500);\n        };\n        $scope.showResults = function () {\n            $scope.searchResultsOpen = true;\n            $scope.sidebarClass = 'sidebar s-search-width';\n            $window.onclick = function (event) {\n                var _targetClassOfSearch = event.target.parentElement.offsetParent.classList.contains('sidebar');\n                if (!_targetClassOfSearch) {\n                    $scope.hideResults();\n                    $scope.$apply();\n                }\n            };\n        };\n        $scope.hideResults = function () {\n            $scope.searchResultsOpen = false;\n            $scope.sidebarClass = 'sidebar';\n            $scope.search.$setPristine();\n            $scope.keywords = \"\";\n            $window.onclick = null;\n            $scope.loading = false;\n            $scope.resultsFound = true;\n            for (var entityName in $scope.searchResults) {\n                $scope.searchResults[entityName].results = [];\n            }\n        };\n    }\n    return GlobalSearchController;\n}());\nexports.GlobalSearchController = GlobalSearchController;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/controllers/globalsearch.ts?")},"../../../org/Hibachi/client/src/core/core.module.ts":
/*!********************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/core.module.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar hibachiinterceptor_1 = __webpack_require__(/*! ./services/hibachiinterceptor */ \"../../../org/Hibachi/client/src/core/services/hibachiinterceptor.ts\");\n//constant\nvar hibachipathbuilder_1 = __webpack_require__(/*! ./services/hibachipathbuilder */ \"../../../org/Hibachi/client/src/core/services/hibachipathbuilder.ts\");\n//services\nvar cacheservice_1 = __webpack_require__(/*! ./services/cacheservice */ \"../../../org/Hibachi/client/src/core/services/cacheservice.ts\");\nvar publicservice_1 = __webpack_require__(/*! ./services/publicservice */ \"../../../org/Hibachi/client/src/core/services/publicservice.ts\");\nvar accountservice_1 = __webpack_require__(/*! ./services/accountservice */ \"../../../org/Hibachi/client/src/core/services/accountservice.ts\");\nvar accountaddressservice_1 = __webpack_require__(/*! ./services/accountaddressservice */ \"../../../org/Hibachi/client/src/core/services/accountaddressservice.ts\");\nvar cartservice_1 = __webpack_require__(/*! ./services/cartservice */ \"../../../org/Hibachi/client/src/core/services/cartservice.ts\");\nvar draggableservice_1 = __webpack_require__(/*! ./services/draggableservice */ \"../../../org/Hibachi/client/src/core/services/draggableservice.ts\");\nvar utilityservice_1 = __webpack_require__(/*! ./services/utilityservice */ \"../../../org/Hibachi/client/src/core/services/utilityservice.ts\");\nvar selectionservice_1 = __webpack_require__(/*! ./services/selectionservice */ \"../../../org/Hibachi/client/src/core/services/selectionservice.ts\");\nvar observerservice_1 = __webpack_require__(/*! ./services/observerservice */ \"../../../org/Hibachi/client/src/core/services/observerservice.ts\");\nvar orderservice_1 = __webpack_require__(/*! ./services/orderservice */ \"../../../org/Hibachi/client/src/core/services/orderservice.ts\");\nvar orderpaymentservice_1 = __webpack_require__(/*! ./services/orderpaymentservice */ \"../../../org/Hibachi/client/src/core/services/orderpaymentservice.ts\");\nvar formservice_1 = __webpack_require__(/*! ./services/formservice */ \"../../../org/Hibachi/client/src/core/services/formservice.ts\");\nvar filterservice_1 = __webpack_require__(/*! ./services/filterservice */ \"../../../org/Hibachi/client/src/core/services/filterservice.ts\");\nvar expandableservice_1 = __webpack_require__(/*! ./services/expandableservice */ \"../../../org/Hibachi/client/src/core/services/expandableservice.ts\");\nvar metadataservice_1 = __webpack_require__(/*! ./services/metadataservice */ \"../../../org/Hibachi/client/src/core/services/metadataservice.ts\");\nvar rbkeyservice_1 = __webpack_require__(/*! ./services/rbkeyservice */ \"../../../org/Hibachi/client/src/core/services/rbkeyservice.ts\");\nvar typeaheadservice_1 = __webpack_require__(/*! ./services/typeaheadservice */ \"../../../org/Hibachi/client/src/core/services/typeaheadservice.ts\");\nvar hibachiservice_1 = __webpack_require__(/*! ./services/hibachiservice */ \"../../../org/Hibachi/client/src/core/services/hibachiservice.ts\");\nvar historyservice_1 = __webpack_require__(/*! ./services/historyservice */ \"../../../org/Hibachi/client/src/core/services/historyservice.ts\");\nvar localstorageservice_1 = __webpack_require__(/*! ./services/localstorageservice */ \"../../../org/Hibachi/client/src/core/services/localstorageservice.ts\");\nvar hibachiservicedecorator_1 = __webpack_require__(/*! ./services/hibachiservicedecorator */ \"../../../org/Hibachi/client/src/core/services/hibachiservicedecorator.ts\");\nvar hibachiscope_1 = __webpack_require__(/*! ./services/hibachiscope */ \"../../../org/Hibachi/client/src/core/services/hibachiscope.ts\");\nvar requestservice_1 = __webpack_require__(/*! ./services/requestservice */ \"../../../org/Hibachi/client/src/core/services/requestservice.ts\");\nvar scopeservice_1 = __webpack_require__(/*! ./services/scopeservice */ \"../../../org/Hibachi/client/src/core/services/scopeservice.ts\");\nvar skuservice_1 = __webpack_require__(/*! ./services/skuservice */ \"../../../org/Hibachi/client/src/core/services/skuservice.ts\");\nvar hibachivalidationservice_1 = __webpack_require__(/*! ./services/hibachivalidationservice */ \"../../../org/Hibachi/client/src/core/services/hibachivalidationservice.ts\");\nvar entityservice_1 = __webpack_require__(/*! ./services/entityservice */ \"../../../org/Hibachi/client/src/core/services/entityservice.ts\");\n//controllers\nvar globalsearch_1 = __webpack_require__(/*! ./controllers/globalsearch */ \"../../../org/Hibachi/client/src/core/controllers/globalsearch.ts\");\n//filters\nvar percentage_1 = __webpack_require__(/*! ./filters/percentage */ \"../../../org/Hibachi/client/src/core/filters/percentage.ts\");\nvar entityrbkey_1 = __webpack_require__(/*! ./filters/entityrbkey */ \"../../../org/Hibachi/client/src/core/filters/entityrbkey.ts\");\nvar swtrim_1 = __webpack_require__(/*! ./filters/swtrim */ \"../../../org/Hibachi/client/src/core/filters/swtrim.ts\");\nvar swunique_1 = __webpack_require__(/*! ./filters/swunique */ \"../../../org/Hibachi/client/src/core/filters/swunique.ts\");\nvar datefilter_1 = __webpack_require__(/*! ./filters/datefilter */ \"../../../org/Hibachi/client/src/core/filters/datefilter.ts\");\n//directives\n//  components\nvar swactioncaller_1 = __webpack_require__(/*! ./components/swactioncaller */ \"../../../org/Hibachi/client/src/core/components/swactioncaller.ts\");\nvar swtypeaheadsearch_1 = __webpack_require__(/*! ./components/swtypeaheadsearch */ \"../../../org/Hibachi/client/src/core/components/swtypeaheadsearch.ts\");\nvar swtypeaheadinputfield_1 = __webpack_require__(/*! ./components/swtypeaheadinputfield */ \"../../../org/Hibachi/client/src/core/components/swtypeaheadinputfield.ts\");\nvar swtypeaheadmultiselect_1 = __webpack_require__(/*! ./components/swtypeaheadmultiselect */ \"../../../org/Hibachi/client/src/core/components/swtypeaheadmultiselect.ts\");\nvar swtypeaheadsearchlineitem_1 = __webpack_require__(/*! ./components/swtypeaheadsearchlineitem */ \"../../../org/Hibachi/client/src/core/components/swtypeaheadsearchlineitem.ts\");\nvar swtypeaheadremoveselection_1 = __webpack_require__(/*! ./components/swtypeaheadremoveselection */ \"../../../org/Hibachi/client/src/core/components/swtypeaheadremoveselection.ts\");\nvar swcollectionconfig_1 = __webpack_require__(/*! ./components/swcollectionconfig */ \"../../../org/Hibachi/client/src/core/components/swcollectionconfig.ts\");\nvar swcollectionfilter_1 = __webpack_require__(/*! ./components/swcollectionfilter */ \"../../../org/Hibachi/client/src/core/components/swcollectionfilter.ts\");\nvar swcollectionorderby_1 = __webpack_require__(/*! ./components/swcollectionorderby */ \"../../../org/Hibachi/client/src/core/components/swcollectionorderby.ts\");\nvar swcollectioncolumn_1 = __webpack_require__(/*! ./components/swcollectioncolumn */ \"../../../org/Hibachi/client/src/core/components/swcollectioncolumn.ts\");\nvar swactioncallerdropdown_1 = __webpack_require__(/*! ./components/swactioncallerdropdown */ \"../../../org/Hibachi/client/src/core/components/swactioncallerdropdown.ts\");\nvar swcolumnsorter_1 = __webpack_require__(/*! ./components/swcolumnsorter */ \"../../../org/Hibachi/client/src/core/components/swcolumnsorter.ts\");\nvar swconfirm_1 = __webpack_require__(/*! ./components/swconfirm */ \"../../../org/Hibachi/client/src/core/components/swconfirm.ts\");\nvar swdraggable_1 = __webpack_require__(/*! ./components/swdraggable */ \"../../../org/Hibachi/client/src/core/components/swdraggable.ts\");\nvar swdraggablecontainer_1 = __webpack_require__(/*! ./components/swdraggablecontainer */ \"../../../org/Hibachi/client/src/core/components/swdraggablecontainer.ts\");\nvar swentityactionbar_1 = __webpack_require__(/*! ./components/swentityactionbar */ \"../../../org/Hibachi/client/src/core/components/swentityactionbar.ts\");\nvar swentityactionbarbuttongroup_1 = __webpack_require__(/*! ./components/swentityactionbarbuttongroup */ \"../../../org/Hibachi/client/src/core/components/swentityactionbarbuttongroup.ts\");\nvar swexpandablerecord_1 = __webpack_require__(/*! ./components/swexpandablerecord */ \"../../../org/Hibachi/client/src/core/components/swexpandablerecord.ts\");\nvar swexpiringsessionnotifier_1 = __webpack_require__(/*! ./components/swexpiringsessionnotifier */ \"../../../org/Hibachi/client/src/core/components/swexpiringsessionnotifier.ts\");\nvar swgravatar_1 = __webpack_require__(/*! ./components/swgravatar */ \"../../../org/Hibachi/client/src/core/components/swgravatar.ts\");\nvar swlogin_1 = __webpack_require__(/*! ./components/swlogin */ \"../../../org/Hibachi/client/src/core/components/swlogin.ts\");\nvar swmodallauncher_1 = __webpack_require__(/*! ./components/swmodallauncher */ \"../../../org/Hibachi/client/src/core/components/swmodallauncher.ts\");\nvar swmodalwindow_1 = __webpack_require__(/*! ./components/swmodalwindow */ \"../../../org/Hibachi/client/src/core/components/swmodalwindow.ts\");\nvar swnumbersonly_1 = __webpack_require__(/*! ./components/swnumbersonly */ \"../../../org/Hibachi/client/src/core/components/swnumbersonly.ts\");\nvar swloading_1 = __webpack_require__(/*! ./components/swloading */ \"../../../org/Hibachi/client/src/core/components/swloading.ts\");\nvar swscrolltrigger_1 = __webpack_require__(/*! ./components/swscrolltrigger */ \"../../../org/Hibachi/client/src/core/components/swscrolltrigger.ts\");\nvar swtabgroup_1 = __webpack_require__(/*! ./components/swtabgroup */ \"../../../org/Hibachi/client/src/core/components/swtabgroup.ts\");\nvar swtabcontent_1 = __webpack_require__(/*! ./components/swtabcontent */ \"../../../org/Hibachi/client/src/core/components/swtabcontent.ts\");\nvar swtooltip_1 = __webpack_require__(/*! ./components/swtooltip */ \"../../../org/Hibachi/client/src/core/components/swtooltip.ts\");\nvar swrbkey_1 = __webpack_require__(/*! ./components/swrbkey */ \"../../../org/Hibachi/client/src/core/components/swrbkey.ts\");\nvar swoptions_1 = __webpack_require__(/*! ./components/swoptions */ \"../../../org/Hibachi/client/src/core/components/swoptions.ts\");\nvar swselection_1 = __webpack_require__(/*! ./components/swselection */ \"../../../org/Hibachi/client/src/core/components/swselection.ts\");\nvar swclickoutside_1 = __webpack_require__(/*! ./components/swclickoutside */ \"../../../org/Hibachi/client/src/core/components/swclickoutside.ts\");\nvar swdirective_1 = __webpack_require__(/*! ./components/swdirective */ \"../../../org/Hibachi/client/src/core/components/swdirective.ts\");\nvar swexportaction_1 = __webpack_require__(/*! ./components/swexportaction */ \"../../../org/Hibachi/client/src/core/components/swexportaction.ts\");\nvar swhref_1 = __webpack_require__(/*! ./components/swhref */ \"../../../org/Hibachi/client/src/core/components/swhref.ts\");\nvar swprocesscaller_1 = __webpack_require__(/*! ./components/swprocesscaller */ \"../../../org/Hibachi/client/src/core/components/swprocesscaller.ts\");\nvar swsortable_1 = __webpack_require__(/*! ./components/swsortable */ \"../../../org/Hibachi/client/src/core/components/swsortable.ts\");\nvar sworderbycontrols_1 = __webpack_require__(/*! ./components/sworderbycontrols */ \"../../../org/Hibachi/client/src/core/components/sworderbycontrols.ts\");\nvar alert_module_1 = __webpack_require__(/*! ../alert/alert.module */ \"../../../org/Hibachi/client/src/alert/alert.module.ts\");\nvar dialog_module_1 = __webpack_require__(/*! ../dialog/dialog.module */ \"../../../org/Hibachi/client/src/dialog/dialog.module.ts\");\nvar coremodule = angular.module('hibachi.core', [\n    //Angular Modules\n    'ngAnimate',\n    'ngRoute',\n    'ngSanitize',\n    //3rdParty modules\n    'ui.bootstrap',\n    alert_module_1.alertmodule.name,\n    dialog_module_1.dialogmodule.name\n])\n    .config(['$compileProvider', '$httpProvider', '$logProvider', '$filterProvider', '$provide', 'hibachiPathBuilder', 'appConfig', function ($compileProvider, $httpProvider, $logProvider, $filterProvider, $provide, hibachiPathBuilder, appConfig) {\n        hibachiPathBuilder.setBaseURL(appConfig.baseURL);\n        hibachiPathBuilder.setBasePartialsPath('/org/Hibachi/client/src/');\n        if (!appConfig.debugFlag) {\n            appConfig.debugFlag = false;\n        }\n        $logProvider.debugEnabled(appConfig.debugFlag);\n        $filterProvider.register('likeFilter', function () {\n            return function (text) {\n                if (angular.isDefined(text) && angular.isString(text)) {\n                    return text.replace(new RegExp('%', 'g'), '');\n                }\n            };\n        });\n        //This filter is used to shorten a string by removing the charecter count that is passed to it and ending it with \"...\"\n        $filterProvider.register('truncate', function () {\n            return function (input, chars, breakOnWord) {\n                if (isNaN(chars))\n                    return input;\n                if (chars <= 0)\n                    return '';\n                if (input && input.length > chars) {\n                    input = input.substring(0, chars);\n                    if (!breakOnWord) {\n                        var lastspace = input.lastIndexOf(' ');\n                        //get last space\n                        if (lastspace !== -1) {\n                            input = input.substr(0, lastspace);\n                        }\n                    }\n                    else {\n                        while (input.charAt(input.length - 1) === ' ') {\n                            input = input.substr(0, input.length - 1);\n                        }\n                    }\n                    return input + '...';\n                }\n                return input;\n            };\n        });\n        //This filter is used to shorten long string but unlike \"truncate\", it removes from the start of the string and prepends \"...\"\n        $filterProvider.register('pretruncate', function () {\n            return function (input, chars, breakOnWord) {\n                if (isNaN(chars))\n                    return input;\n                if (chars <= 0)\n                    return '';\n                if (input && input.length > chars) {\n                    input = input.slice('-' + chars);\n                    //  input = input.substring(0, chars);\n                    if (!breakOnWord) {\n                        var lastspace = input.lastIndexOf(' ');\n                        //get last space\n                        if (lastspace !== -1) {\n                            input = input.substr(0, lastspace);\n                        }\n                    }\n                    else {\n                        while (input.charAt(input.length - 1) === ' ') {\n                            input = input.substr(0, input.length - 1);\n                        }\n                    }\n                    return '...' + input;\n                }\n                return input;\n            };\n        });\n        hibachiPathBuilder.setBaseURL(appConfig.baseURL);\n        hibachiPathBuilder.setBasePartialsPath('/org/Hibachi/client/src/');\n        // $provide.decorator('$hibachi',\n        $httpProvider.interceptors.push('hibachiInterceptor');\n        //Pulls seperate http requests into a single digest cycle.\n        $httpProvider.useApplyAsync(true);\n    }])\n    .run(['$rootScope', '$hibachi', '$route', '$location', 'rbkeyService', function ($rootScope, $hibachi, $route, $location, rbkeyService) {\n        $rootScope.buildUrl = $hibachi.buildUrl;\n        $rootScope.rbKey = rbkeyService.rbKey;\n        var original = $location.path;\n        $location.path = function (path, reload) {\n            if (reload === false) {\n                var lastRoute = $route.current;\n                var un = $rootScope.$on('$locationChangeSuccess', function () {\n                    $route.current = lastRoute;\n                    un();\n                });\n            }\n            return original.apply($location, [path]);\n        };\n    }])\n    .constant('hibachiPathBuilder', new hibachipathbuilder_1.HibachiPathBuilder())\n    .constant('corePartialsPath', 'core/components/')\n    //services\n    .service('cacheService', cacheservice_1.CacheService)\n    .service('publicService', publicservice_1.PublicService)\n    .service('utilityService', utilityservice_1.UtilityService)\n    .service('selectionService', selectionservice_1.SelectionService)\n    .service('observerService', observerservice_1.ObserverService)\n    .service('draggableService', draggableservice_1.DraggableService)\n    .service('expandableService', expandableservice_1.ExpandableService)\n    .service('filterService', filterservice_1.FilterService)\n    .service('formService', formservice_1.FormService)\n    .service('historyService', historyservice_1.HistoryService)\n    .service('metadataService', metadataservice_1.MetaDataService)\n    .service('rbkeyService', rbkeyservice_1.RbKeyService)\n    .service('typeaheadService', typeaheadservice_1.TypeaheadService)\n    .provider('$hibachi', hibachiservice_1.$Hibachi)\n    .decorator('$hibachi', hibachiservicedecorator_1.HibachiServiceDecorator)\n    .service('hibachiInterceptor', hibachiinterceptor_1.HibachiInterceptor.Factory())\n    .service('hibachiScope', hibachiscope_1.HibachiScope)\n    .service('scopeService', scopeservice_1.ScopeService)\n    .service('skuService', skuservice_1.SkuService)\n    .service('localStorageService', localstorageservice_1.LocalStorageService)\n    .service('requestService', requestservice_1.RequestService)\n    .service('accountService', accountservice_1.AccountService)\n    .service('accountAddressService', accountaddressservice_1.AccountAddressService)\n    .service('orderService', orderservice_1.OrderService)\n    .service('orderPaymentService', orderpaymentservice_1.OrderPaymentService)\n    .service('cartService', cartservice_1.CartService)\n    .service('hibachiValidationService', hibachivalidationservice_1.HibachiValidationService)\n    .service('entityService', entityservice_1.EntityService)\n    //controllers\n    .controller('globalSearch', globalsearch_1.GlobalSearchController)\n    //filters\n    .filter('dateFilter', ['$filter', datefilter_1.DateFilter.Factory])\n    .filter('percentage', [percentage_1.PercentageFilter.Factory])\n    .filter('trim', [swtrim_1.SWTrim.Factory])\n    .filter('entityRBKey', ['rbkeyService', entityrbkey_1.EntityRBKey.Factory])\n    .filter('swdate', ['$filter', datefilter_1.DateFilter.Factory])\n    .filter('unique', [swunique_1.SWUnique.Factory])\n    //directives\n    .directive('swCollectionConfig', swcollectionconfig_1.SWCollectionConfig.Factory())\n    .directive('swCollectionColumn', swcollectioncolumn_1.SWCollectionColumn.Factory())\n    .directive('swCollectionFilter', swcollectionfilter_1.SWCollectionFilter.Factory())\n    .directive('swCollectionOrderBy', swcollectionorderby_1.SWCollectionOrderBy.Factory())\n    .directive('swTypeaheadSearch', swtypeaheadsearch_1.SWTypeaheadSearch.Factory())\n    .directive('swTypeaheadInputField', swtypeaheadinputfield_1.SWTypeaheadInputField.Factory())\n    .directive('swTypeaheadMultiselect', swtypeaheadmultiselect_1.SWTypeaheadMultiselect.Factory())\n    .directive('swTypeaheadSearchLineItem', swtypeaheadsearchlineitem_1.SWTypeaheadSearchLineItem.Factory())\n    .directive('swTypeaheadRemoveSelection', swtypeaheadremoveselection_1.SWTypeaheadRemoveSelection.Factory())\n    .directive('swActionCaller', swactioncaller_1.SWActionCaller.Factory())\n    .directive('swActionCallerDropdown', swactioncallerdropdown_1.SWActionCallerDropdown.Factory())\n    .directive('swColumnSorter', swcolumnsorter_1.SWColumnSorter.Factory())\n    .directive('swConfirm', swconfirm_1.SWConfirm.Factory())\n    .directive('swEntityActionBar', swentityactionbar_1.SWEntityActionBar.Factory())\n    .directive('swEntityActionBarButtonGroup', swentityactionbarbuttongroup_1.SWEntityActionBarButtonGroup.Factory())\n    .directive('swExpandableRecord', swexpandablerecord_1.SWExpandableRecord.Factory())\n    .directive('swExpiringSessionNotifier', swexpiringsessionnotifier_1.SWExpiringSessionNotifier.Factory())\n    .directive('swGravatar', swgravatar_1.SWGravatar.Factory())\n    .directive('swDraggable', swdraggable_1.SWDraggable.Factory())\n    .directive('swDraggableContainer', swdraggablecontainer_1.SWDraggableContainer.Factory())\n    .directive('swLogin', swlogin_1.SWLogin.Factory())\n    .directive('swModalLauncher', swmodallauncher_1.SWModalLauncher.Factory())\n    .directive('swModalWindow', swmodalwindow_1.SWModalWindow.Factory())\n    .directive('swNumbersOnly', swnumbersonly_1.SWNumbersOnly.Factory())\n    .directive('swLoading', swloading_1.SWLoading.Factory())\n    .directive('swScrollTrigger', swscrolltrigger_1.SWScrollTrigger.Factory())\n    .directive('swRbkey', swrbkey_1.SWRbKey.Factory())\n    .directive('swOptions', swoptions_1.SWOptions.Factory())\n    .directive('swSelection', swselection_1.SWSelection.Factory())\n    .directive('swTabGroup', swtabgroup_1.SWTabGroup.Factory())\n    .directive('swTabContent', swtabcontent_1.SWTabContent.Factory())\n    .directive('swTooltip', swtooltip_1.SWTooltip.Factory())\n    .directive('swClickOutside', swclickoutside_1.SWClickOutside.Factory())\n    .directive('swDirective', swdirective_1.SWDirective.Factory())\n    .directive('swExportAction', swexportaction_1.SWExportAction.Factory())\n    .directive('swHref', swhref_1.SWHref.Factory())\n    .directive('swProcessCaller', swprocesscaller_1.SWProcessCaller.Factory())\n    .directive('sw:sortable', swsortable_1.SWSortable.Factory())\n    .directive('swOrderByControls', sworderbycontrols_1.SWOrderByControls.Factory());\nexports.coremodule = coremodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/core.module.ts?")},"../../../org/Hibachi/client/src/core/filters/datefilter.ts":
/*!***************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/filters/datefilter.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar DateFilter = /** @class */ (function () {\n    function DateFilter() {\n    }\n    //@ngInject\n    DateFilter.Factory = function ($filter) {\n        return function (date, dateString) {\n            if (date.trim().length === 0) {\n                return '';\n            }\n            return $filter('date')(new Date(date), dateString);\n        };\n    };\n    return DateFilter;\n}());\nexports.DateFilter = DateFilter;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/filters/datefilter.ts?")},"../../../org/Hibachi/client/src/core/filters/entityrbkey.ts":
/*!****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/filters/entityrbkey.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EntityRBKey = /** @class */ (function () {\n    function EntityRBKey() {\n    }\n    //@ngInject\n    EntityRBKey.Factory = function (rbkeyService) {\n        return function (text) {\n            if (angular.isDefined(text) && angular.isString(text)) {\n                text = text.replace('_', '').toLowerCase();\n                text = rbkeyService.getRBKey('entity.' + text);\n            }\n            return text;\n        };\n    };\n    return EntityRBKey;\n}());\nexports.EntityRBKey = EntityRBKey;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/filters/entityrbkey.ts?")},"../../../org/Hibachi/client/src/core/filters/percentage.ts":
/*!***************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/filters/percentage.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PercentageFilter = /** @class */ (function () {\n    function PercentageFilter() {\n    }\n    PercentageFilter.Factory = function () {\n        return function (input, decimals, suffix) {\n            decimals = angular.isNumber(decimals) ? decimals : 3;\n            suffix = suffix || '%';\n            if (isNaN(input)) {\n                return '';\n            }\n            return Math.round(input * Math.pow(10, decimals + 2)) / Math.pow(10, decimals) + suffix;\n        };\n    };\n    return PercentageFilter;\n}());\nexports.PercentageFilter = PercentageFilter;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/filters/percentage.ts?")},"../../../org/Hibachi/client/src/core/filters/swtrim.ts":
/*!***********************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/filters/swtrim.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWTrim = /** @class */ (function () {\n    function SWTrim() {\n    }\n    //@ngInject\n    SWTrim.Factory = function (rbkeyService) {\n        return function (text, max, wordwise, tail) {\n            if (wordwise === void 0) { wordwise = true; }\n            if (tail === void 0) { tail = \"...\"; }\n            if (angular.isDefined(text) && angular.isString(text)) {\n                if (!text)\n                    return '';\n                max = parseInt(max, 10);\n                if (!max)\n                    return text;\n                if (text.length <= max)\n                    return text;\n                text = text.substr(0, max);\n                if (wordwise) {\n                    var lastSpace = text.lastIndexOf(' ');\n                    if (lastSpace != -1) {\n                        text = text.substr(0, lastSpace);\n                    }\n                }\n                return text + tail;\n            }\n            return text;\n        };\n    };\n    return SWTrim;\n}());\nexports.SWTrim = SWTrim;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/filters/swtrim.ts?")},"../../../org/Hibachi/client/src/core/filters/swunique.ts":
/*!*************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/filters/swunique.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWUnique = /** @class */ (function () {\n    function SWUnique() {\n    }\n    //@ngInject\n    SWUnique.Factory = function () {\n        var filterStub;\n        filterStub = function (items, filterOn) {\n            if (filterOn === false) {\n                return items;\n            }\n            if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {\n                var hashCheck = {}, newItems = [];\n                var extractValueToCompare = function (item) {\n                    if (angular.isDefined(item) && item[filterOn] != null) {\n                        return item[filterOn];\n                    }\n                    return item;\n                };\n                angular.forEach(items, function (item) {\n                    var isDuplicate = false;\n                    for (var i = 0; i < newItems.length; i++) {\n                        if (extractValueToCompare(newItems[i]) == extractValueToCompare(item)) {\n                            isDuplicate = true;\n                            break;\n                        }\n                    }\n                    if (!isDuplicate) {\n                        newItems.push(item);\n                    }\n                });\n            }\n            return newItems;\n        };\n        //filterStub.$stateful = true;\n        return filterStub;\n    };\n    return SWUnique;\n}());\nexports.SWUnique = SWUnique;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/filters/swunique.ts?")},"../../../org/Hibachi/client/src/core/model/baseobject.ts":
/*!*************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/baseobject.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseObject = /** @class */ (function () {\n    //@ngInject\n    function BaseObject($injector) {\n        var _this = this;\n        this.getService = function (serviceName) {\n            //return;\n            if (_this.$injector.has(serviceName)) {\n                //returns a generic service\n                return _this.$injector.get(serviceName);\n            }\n        };\n        this.getHibachiScope = function () {\n            return _this.getService('publicService');\n        };\n        this.getAppConfig = function () {\n            return _this.getService('appConfig');\n        };\n        this.$injector = $injector;\n        var constructorString = this.constructor.toString();\n        this.className = constructorString.match(/\\w+/g)[1];\n    }\n    return BaseObject;\n}());\nexports.BaseObject = BaseObject;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/baseobject.ts?")},"../../../org/Hibachi/client/src/core/model/entity/account.ts":
/*!*****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/account.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseentity_1 = __webpack_require__(/*! ./baseentity */ \"../../../org/Hibachi/client/src/core/model/entity/baseentity.ts\");\nvar Account = /** @class */ (function (_super) {\n    __extends(Account, _super);\n    function Account($injector) {\n        var _this = _super.call(this, $injector) || this;\n        _this.giftCards = [];\n        _this.userIsLoggedIn = function () {\n            if (_this.accountID !== '') {\n                return true;\n            }\n            return false;\n        };\n        return _this;\n    }\n    return Account;\n}(baseentity_1.BaseEntity));\nexports.Account = Account;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/account.ts?")},"../../../org/Hibachi/client/src/core/model/entity/accountaddress.ts":
/*!************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/accountaddress.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseentity_1 = __webpack_require__(/*! ./baseentity */ \"../../../org/Hibachi/client/src/core/model/entity/baseentity.ts\");\nvar AccountAddress = /** @class */ (function (_super) {\n    __extends(AccountAddress, _super);\n    function AccountAddress($injector) {\n        var _this = _super.call(this, $injector) || this;\n        _this.getSimpleRepresentation = function () {\n            return (_this.accountAddressName || '') + ' - '\n                + (_this.address.streetAddress || '')\n                + (_this.address.street2Address.trim().length ? ' ' + _this.address.street2Address : '')\n                + ' ' + (_this.address.city || '') + ','\n                + ' ' + (_this.address.stateCode || '')\n                + ' ' + (_this.address.postalCode || '')\n                + ' ' + (_this.address.countryCode || '');\n        };\n        return _this;\n    }\n    return AccountAddress;\n}(baseentity_1.BaseEntity));\nexports.AccountAddress = AccountAddress;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/accountaddress.ts?")},"../../../org/Hibachi/client/src/core/model/entity/address.ts":
/*!*****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/address.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseentity_1 = __webpack_require__(/*! ./baseentity */ \"../../../org/Hibachi/client/src/core/model/entity/baseentity.ts\");\nvar Address = /** @class */ (function (_super) {\n    __extends(Address, _super);\n    function Address($injector) {\n        return _super.call(this, $injector) || this;\n    }\n    return Address;\n}(baseentity_1.BaseEntity));\nexports.Address = Address;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/address.ts?")},"../../../org/Hibachi/client/src/core/model/entity/baseentity.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/baseentity.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar basetransient_1 = __webpack_require__(/*! ../transient/basetransient */ \"../../../org/Hibachi/client/src/core/model/transient/basetransient.ts\");\nvar BaseEntity = /** @class */ (function (_super) {\n    __extends(BaseEntity, _super);\n    function BaseEntity($injector) {\n        return _super.call(this, $injector) || this;\n    }\n    return BaseEntity;\n}(basetransient_1.BaseTransient));\nexports.BaseEntity = BaseEntity;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/baseentity.ts?")},"../../../org/Hibachi/client/src/core/model/entity/cart.ts":
/*!**************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/cart.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseentity_1 = __webpack_require__(/*! ./baseentity */ \"../../../org/Hibachi/client/src/core/model/entity/baseentity.ts\");\nvar Cart = /** @class */ (function (_super) {\n    __extends(Cart, _super);\n    //deprecated\n    function Cart($injector) {\n        var _this = _super.call(this, $injector) || this;\n        _this.orderRequirementsList = \"\";\n        _this.orderPayments = [];\n        _this.orderItems = [];\n        _this.orderFulfillments = [];\n        _this.hasShippingAddressAndMethod = function () {\n            if (_this.orderRequirementsList.indexOf('fulfillment') == -1) {\n                return true;\n            }\n            return false;\n        };\n        _this.orderRequiresAccount = function () {\n            if (_this.orderRequirementsList.indexOf('account') != -1 || !_this.account.accountID) {\n                return true;\n            }\n            return false;\n        };\n        _this.getOrderItemQuantitySum = function () {\n            var totalQuantity = 0;\n            if (angular.isDefined(_this.orderItems)) {\n                for (var orderItem in _this.orderItems) {\n                    totalQuantity = totalQuantity + _this.orderItems[orderItem].quantity;\n                }\n                return totalQuantity;\n            }\n            return totalQuantity;\n        };\n        return _this;\n    }\n    return Cart;\n}(baseentity_1.BaseEntity));\nexports.Cart = Cart;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/cart.ts?")},"../../../org/Hibachi/client/src/core/model/entity/entities.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/entities.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar account_1 = __webpack_require__(/*! ./account */ "../../../org/Hibachi/client/src/core/model/entity/account.ts");\nexports.Account = account_1.Account;\nvar address_1 = __webpack_require__(/*! ./address */ "../../../org/Hibachi/client/src/core/model/entity/address.ts");\nexports.Address = address_1.Address;\nvar cart_1 = __webpack_require__(/*! ./cart */ "../../../org/Hibachi/client/src/core/model/entity/cart.ts");\nexports.Cart = cart_1.Cart;\nvar orderitem_1 = __webpack_require__(/*! ./orderitem */ "../../../org/Hibachi/client/src/core/model/entity/orderitem.ts");\nexports.OrderItem = orderitem_1.OrderItem;\nvar orderpayment_1 = __webpack_require__(/*! ./orderpayment */ "../../../org/Hibachi/client/src/core/model/entity/orderpayment.ts");\nexports.OrderPayment = orderpayment_1.OrderPayment;\nvar sku_1 = __webpack_require__(/*! ./sku */ "../../../org/Hibachi/client/src/core/model/entity/sku.ts");\nexports.Sku = sku_1.Sku;\nvar accountaddress_1 = __webpack_require__(/*! ./accountaddress */ "../../../org/Hibachi/client/src/core/model/entity/accountaddress.ts");\nexports.AccountAddress = accountaddress_1.AccountAddress;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/entities.ts?')},"../../../org/Hibachi/client/src/core/model/entity/orderitem.ts":
/*!*******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/orderitem.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar baseentity_1 = __webpack_require__(/*! ./baseentity */ \"../../../org/Hibachi/client/src/core/model/entity/baseentity.ts\");\nvar OrderItem = /** @class */ (function (_super) {\n    __extends(OrderItem, _super);\n    function OrderItem($injector) {\n        return _super.call(this, $injector) || this;\n    }\n    return OrderItem;\n}(baseentity_1.BaseEntity));\nexports.OrderItem = OrderItem;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/orderitem.ts?")},"../../../org/Hibachi/client/src/core/model/entity/orderpayment.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/orderpayment.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar OrderPayment = /** @class */ (function () {\n    function OrderPayment() {\n    }\n    return OrderPayment;\n}());\nexports.OrderPayment = OrderPayment;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/orderpayment.ts?")},"../../../org/Hibachi/client/src/core/model/entity/sku.ts":
/*!*************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/sku.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseentity_1 = __webpack_require__(/*! ./baseentity */ \"../../../org/Hibachi/client/src/core/model/entity/baseentity.ts\");\nvar Sku = /** @class */ (function (_super) {\n    __extends(Sku, _super);\n    function Sku($injector) {\n        var _this = _super.call(this, $injector) || this;\n        _this.setNewQOH = function (value) {\n            _this.newQOH = value;\n        };\n        _this.getNewQOH = function () {\n            return _this.newQOH;\n        };\n        return _this;\n    }\n    return Sku;\n}(baseentity_1.BaseEntity));\nexports.Sku = Sku;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/entity/sku.ts?")},"../../../org/Hibachi/client/src/core/model/process/baseprocess.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/process/baseprocess.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar basetransient_1 = __webpack_require__(/*! ../transient/basetransient */ \"../../../org/Hibachi/client/src/core/model/transient/basetransient.ts\");\nvar BaseProcess = /** @class */ (function (_super) {\n    __extends(BaseProcess, _super);\n    function BaseProcess($injector) {\n        return _super.call(this, $injector) || this;\n    }\n    return BaseProcess;\n}(basetransient_1.BaseTransient));\nexports.BaseProcess = BaseProcess;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/process/baseprocess.ts?")},"../../../org/Hibachi/client/src/core/model/process/order_addorderpayment.ts":
/*!********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/process/order_addorderpayment.ts ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseprocess_1 = __webpack_require__(/*! ./baseprocess */ \"../../../org/Hibachi/client/src/core/model/process/baseprocess.ts\");\nvar Order_AddOrderPayment = /** @class */ (function (_super) {\n    __extends(Order_AddOrderPayment, _super);\n    function Order_AddOrderPayment($injector) {\n        var _this = _super.call(this, $injector) || this;\n        _this.$injector = $injector;\n        return _this;\n    }\n    return Order_AddOrderPayment;\n}(baseprocess_1.BaseProcess));\nexports.Order_AddOrderPayment = Order_AddOrderPayment;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/process/order_addorderpayment.ts?")},"../../../org/Hibachi/client/src/core/model/process/processes.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/process/processes.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar order_addorderpayment_1 = __webpack_require__(/*! ./order_addorderpayment */ \"../../../org/Hibachi/client/src/core/model/process/order_addorderpayment.ts\");\nexports.Order_AddOrderPayment = order_addorderpayment_1.Order_AddOrderPayment;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/process/processes.ts?")},"../../../org/Hibachi/client/src/core/model/transient/adminrequest.ts":
/*!*************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/transient/adminrequest.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar request_1 = __webpack_require__(/*! ./request */ \"../../../org/Hibachi/client/src/core/model/transient/request.ts\");\nvar AdminRequest = /** @class */ (function (_super) {\n    __extends(AdminRequest, _super);\n    function AdminRequest(url, data, method, headers, $injector, observerService) {\n        if (method === void 0) { method = \"post\"; }\n        if (headers === void 0) { headers = { 'Content-Type': \"application/json\" }; }\n        var _this = _super.call(this, url, data, method, headers, $injector) || this;\n        _this.observerService = observerService;\n        _this.observerService = observerService;\n        _this.promise.then(function (result) {\n            //identify that it is an object save\n            if (url.indexOf('api:main.post') != -1 && data.entityName) {\n                var eventNameBase = data.entityName + data.context.charAt(0).toUpperCase() + data.context.slice(0);\n                if (result.errors) {\n                    _this.observerService.notify(eventNameBase + 'Failure', result.data);\n                }\n                else {\n                    _this.observerService.notify(eventNameBase + 'Success', result.data);\n                }\n            }\n            _this.messages = result.messages;\n        }).catch(function (response) {\n        });\n        return _this;\n    }\n    return AdminRequest;\n}(request_1.Request));\nexports.AdminRequest = AdminRequest;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/transient/adminrequest.ts?")},"../../../org/Hibachi/client/src/core/model/transient/basetransient.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/transient/basetransient.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseobject_1 = __webpack_require__(/*! ../baseobject */ \"../../../org/Hibachi/client/src/core/model/baseobject.ts\");\nvar BaseTransient = /** @class */ (function (_super) {\n    __extends(BaseTransient, _super);\n    function BaseTransient($injector) {\n        var _this = _super.call(this, $injector) || this;\n        _this.errors = {};\n        _this.messages = {};\n        _this.populate = function (response) {\n            var data = response;\n            if (response.data) {\n                data = response.data;\n            }\n            data = _this.utilityService.nvpToObject(data);\n            var _loop_1 = function () {\n                var propertyIdentifier = key.replace(_this.className.toLowerCase() + '.', '');\n                var propertyIdentifierArray = propertyIdentifier.split('.');\n                var propertyIdentifierKey = propertyIdentifier.replace(/\\./g, '_');\n                var currentEntity = _this;\n                angular.forEach(propertyIdentifierArray, function (property, propertyKey) {\n                    if (currentEntity.metaData[property]) {\n                        //if we are on the last item in the array\n                        if (propertyKey === propertyIdentifierArray.length - 1) {\n                            //if is json\n                            //if(currentEntity.metaData[key]){\n                            //if propertyidentifier\n                            // }else{\n                            if (angular.isObject(data[key]) && currentEntity.metaData[property].fieldtype && currentEntity.metaData[property].fieldtype === 'many-to-one') {\n                                var relatedEntity = _this.entityService.newEntity(currentEntity.metaData[property].cfc);\n                                if (relatedEntity.populate) {\n                                    relatedEntity.populate(data[key]);\n                                    currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);\n                                }\n                                else {\n                                    relatedEntity.$$init(data[key]);\n                                    currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);\n                                }\n                            }\n                            else if (angular.isArray(data[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {\n                                currentEntity[property] = [];\n                                angular.forEach(data[key], function (arrayItem, propertyKey) {\n                                    var relatedEntity = _this.entityService.newEntity(currentEntity.metaData[property].cfc);\n                                    if (relatedEntity.populate) {\n                                        relatedEntity.populate(arrayItem);\n                                        var hasItem = false;\n                                        for (var item in currentEntity[property]) {\n                                            if (currentEntity[property][item].$$getID().length > 0 && currentEntity[property][item].$$getID() === relatedEntity.$$getID()) {\n                                                hasItem = true;\n                                                break;\n                                            }\n                                        }\n                                        if (!hasItem) {\n                                            currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);\n                                        }\n                                    }\n                                    else {\n                                        relatedEntity.$$init(arrayItem);\n                                        currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);\n                                    }\n                                });\n                            }\n                            else {\n                                currentEntity[property] = data[key];\n                            }\n                            //}\n                        }\n                        else {\n                            var propertyMetaData = currentEntity.metaData[property];\n                            if (angular.isUndefined(currentEntity.data[property]) || (currentEntity.data[property] && currentEntity.data[property] === null)) {\n                                if (propertyMetaData.fieldtype === 'one-to-many') {\n                                    relatedEntity = [];\n                                }\n                                else {\n                                    relatedEntity = _this.$hibachi['new' + propertyMetaData.cfc]();\n                                }\n                            }\n                            else {\n                                relatedEntity = currentEntity.data[property];\n                            }\n                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);\n                            currentEntity = relatedEntity;\n                        }\n                    }\n                    else {\n                        _this[key] = data[key];\n                    }\n                });\n            };\n            for (var key in data) {\n                _loop_1();\n            }\n            if (response.errors) {\n                _this.errors = response.errors;\n                _this.messages = response.messages;\n            }\n        };\n        _this.addError = function (errorName, errorMessage) {\n            if (!_this.errors[errorName]) {\n                _this.errors[errorName] = [];\n            }\n            if (angular.isArray(errorMessage)) {\n                _this.addErrorsByArray(errorName, errorMessage);\n            }\n            else if (angular.isObject(errorMessage)) {\n                _this.addErrorsByObject(errorName, errorMessage);\n            }\n            else {\n                _this.errors[errorName].push(errorMessage);\n            }\n        };\n        _this.addErrorsByArray = function (errorName, errorMessages) {\n            for (var i = 0; i < errorMessages.length; i++) {\n                var message = errorMessages[i];\n                _this.errors[errorName].push(message);\n            }\n        };\n        _this.addErrorsByObject = function (errorName, errorMessage) {\n            if (!_this.errors[errorName]) {\n                _this.errors[errorName] = [];\n            }\n            for (var key in errorMessage) {\n                for (var i = 0; i < errorMessage[key].length; i++) {\n                    var message = errorMessage[i];\n                    _this.errors[errorName].push(message);\n                }\n            }\n        };\n        _this.addErrors = function (errors) {\n            for (var key in errors) {\n                if (!_this.errors[key]) {\n                    _this.errors[key] = [];\n                }\n                for (var message in errors[key]) {\n                    _this.errors[key].push(message);\n                }\n            }\n        };\n        _this.getError = function (errorName) {\n            return _this.getErrorByErrorName(errorName);\n        };\n        _this.getErrorByErrorName = function (errorName) {\n            return _this.errors[errorName];\n        };\n        _this.hasError = function (errorName) {\n            return _this.hasErrorByErrorName(errorName);\n        };\n        _this.hasErrorByErrorName = function (errorName) {\n            return angular.isDefined(_this.errors[errorName]);\n        };\n        _this.hasErrors = function () {\n            return Object.keys(_this.errors).length;\n        };\n        _this.hasSuccessfulAction = function (action) {\n            return;\n        };\n        _this.$hibachi = _this.getService('$hibachi');\n        _this.hibachiValidationService = _this.getService('hibachiValidationService');\n        _this.utilityService = _this.getService('utilityService');\n        _this.entityService = _this.getService('entityService');\n        return _this;\n    }\n    return BaseTransient;\n}(baseobject_1.BaseObject));\nexports.BaseTransient = BaseTransient;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/transient/basetransient.ts?")},"../../../org/Hibachi/client/src/core/model/transient/publicrequest.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/transient/publicrequest.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../../typings/tsd.d.ts' />\nvar request_1 = __webpack_require__(/*! ./request */ \"../../../org/Hibachi/client/src/core/model/transient/request.ts\");\nvar PublicRequest = /** @class */ (function (_super) {\n    __extends(PublicRequest, _super);\n    function PublicRequest(url, data, method, headers, $injector, observerService) {\n        if (headers === void 0) { headers = { 'Content-Type': \"application/x-www-form-urlencoded\" }; }\n        var _this = _super.call(this, url, data, method, headers, $injector) || this;\n        _this.observerService = observerService;\n        _this.failureActions = [];\n        _this.successfulActions = [];\n        _this.messages = [];\n        _this.hasSuccessfulAction = function () {\n            return _this.successfulActions.length > 0;\n        };\n        _this.hasFailureAction = function () {\n            return _this.failureActions.length > 0;\n        };\n        _this.observerService = observerService;\n        _this.promise.then(function (result) {\n            _this.successfulActions = result.successfulActions;\n            for (var i in _this.successfulActions) {\n                var successfulAction = _this.successfulActions[i];\n                _this.observerService.notify(successfulAction.split('.')[1] + 'Success', result.data);\n            }\n            _this.failureActions = result.failureActions;\n            for (var i in _this.failureActions) {\n                var failureAction = _this.failureActions[i];\n                _this.observerService.notify(failureAction.split('.')[1] + 'Failure', result.data);\n            }\n            _this.messages = result.messages;\n        }).catch(function (response) {\n        });\n        return _this;\n    }\n    return PublicRequest;\n}(request_1.Request));\nexports.PublicRequest = PublicRequest;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/transient/publicrequest.ts?")},"../../../org/Hibachi/client/src/core/model/transient/request.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/transient/request.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../../typings/tsd.d.ts\' />\nvar basetransient_1 = __webpack_require__(/*! ./basetransient */ "../../../org/Hibachi/client/src/core/model/transient/basetransient.ts");\nvar Request = /** @class */ (function (_super) {\n    __extends(Request, _super);\n    function Request(url, data, method, headers, $injector) {\n        var _this = _super.call(this, $injector) || this;\n        _this.loading = true;\n        _this.errors = {};\n        _this.processResponse = function (response) {\n            _this.loading = false;\n            if (response.errors) {\n                _this.errors = response.errors;\n            }\n            if (response.messages) {\n                _this.messages = response.messages;\n            }\n        };\n        //returns hibachiAction value from url and data;\n        _this.getAction = function () {\n            var config = _this.getAppConfig();\n            //typically hibachiAction\n            var actionName = config.action;\n            var params = _this.utilityService.getQueryParamsFromUrl(_this.url);\n            if (params[actionName]) {\n                return params[actionName];\n            }\n            if (_this.data && _this.data[actionName]) {\n                return _this.data[actionName];\n            }\n            if (_this.url.indexOf(\'api/scope/\') > 0) {\n                return _this.extractPublicAction(_this.url);\n            }\n        };\n        _this.extractPublicAction = function (url) {\n            //get in between api/scope and / or ? or end of word\n            var regex = /\\api\\/scope\\/(.*?)(?=\\/|\\?|$)/;\n            var arr = regex.exec(url);\n            return arr[1];\n        };\n        _this.processSuccess = function (response) {\n            _this.processResponse(response);\n        };\n        _this.processError = function (response) {\n            _this.processResponse(response);\n        };\n        /** used to turn data into a correct format for the post */\n        _this.toFormParams = function (data) {\n            if (data) {\n                return $.param(data);\n            }\n            else {\n                return "";\n            }\n            //return data = this.serializeData(data) || "";\n        };\n        _this.serializeData = function (data) {\n            // If this is not an object, defer to native stringification.\n            if (!angular.isObject(data)) {\n                return ((data == null) ? "" : data.toString());\n            }\n            var buffer = [];\n            // Serialize each key in the object.\n            for (var name in data) {\n                if (!data.hasOwnProperty(name)) {\n                    continue;\n                }\n                var value = data[name];\n                buffer.push(encodeURIComponent(name) + "=" + encodeURIComponent((value == null) ? "" : value));\n            }\n            // Serialize the buffer and clean it up for transportation.\n            var source = buffer.join("&").replace(/%20/g, "+");\n            return (source);\n        };\n        _this.headers = headers;\n        _this.$q = _this.getService(\'$q\');\n        _this.$http = _this.getService(\'$http\');\n        _this.$window = _this.getService(\'$window\');\n        _this.url = url;\n        _this.data = data;\n        _this.method = method;\n        _this.utilityService = _this.getService(\'utilityService\');\n        if (!method) {\n            if (data == undefined) {\n                method = "get";\n            }\n            else {\n                method = "post";\n            }\n        }\n        var deferred = _this.$q.defer();\n        if (method == "post") {\n            if (_this.headers[\'Content-Type\'] !== "application/json") {\n                data = _this.toFormParams(data);\n            }\n            //post\n            var promise = _this.$http({\n                url: url, data: data, headers: _this.headers, method: \'post\'\n            })\n                .success(function (result) {\n                _this.processSuccess(result);\n                deferred.resolve(result);\n            }).error(function (response) {\n                _this.processError(response);\n                deferred.reject(response);\n            });\n            _this.promise = deferred.promise;\n        }\n        else {\n            //get\n            _this.$http({ url: url, method: \'get\' })\n                .success(function (result) {\n                _this.processSuccess(result);\n                deferred.resolve(result);\n            }).error(function (reason) {\n                _this.processError(reason);\n                deferred.reject(reason);\n            });\n            _this.promise = deferred.promise;\n        }\n        return _this;\n    }\n    return Request;\n}(basetransient_1.BaseTransient));\nexports.Request = Request;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/model/transient/request.ts?')},"../../../org/Hibachi/client/src/core/prototypes/swstore.ts":
/*!***************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/prototypes/swstore.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar rxjs_1 = __webpack_require__(/*! rxjs */ "../../../node_modules/rxjs/Rx.js");\nvar IStore = /** @class */ (function () {\n    //@ngInject\n    function IStore(initialState, reducer, middleware) {\n        var _this = this;\n        this.initialState = initialState;\n        this.reducer = reducer;\n        this.middleware = middleware;\n        this.dispatch = function (action) { return _this.actionStream$.next((action)); };\n        this.getInstance = function () {\n            return _this.store$;\n        };\n        this.actionStream$ = new rxjs_1.Subject();\n        this.store$ = this.actionStream$.startWith(initialState).scan(reducer);\n        if (middleware) {\n            this.store$;\n        }\n        return this;\n    }\n    return IStore;\n}());\nexports.IStore = IStore;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/prototypes/swstore.ts?')},"../../../org/Hibachi/client/src/core/services/accountaddressservice.ts":
/*!***************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/accountaddressservice.ts ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar baseentityservice_1 = __webpack_require__(/*! ./baseentityservice */ "../../../org/Hibachi/client/src/core/services/baseentityservice.ts");\nvar AccountAddressService = /** @class */ (function (_super) {\n    __extends(AccountAddressService, _super);\n    //@ngInject\n    function AccountAddressService($injector, $hibachi, utilityService) {\n        var _this = _super.call(this, $injector, $hibachi, utilityService, \'AccountAddress\') || this;\n        _this.$injector = $injector;\n        _this.$hibachi = $hibachi;\n        _this.utilityService = utilityService;\n        return _this;\n    }\n    return AccountAddressService;\n}(baseentityservice_1.BaseEntityService));\nexports.AccountAddressService = AccountAddressService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/accountaddressservice.ts?')},"../../../org/Hibachi/client/src/core/services/accountservice.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/accountservice.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\nvar baseentityservice_1 = __webpack_require__(/*! ./baseentityservice */ "../../../org/Hibachi/client/src/core/services/baseentityservice.ts");\nvar AccountService = /** @class */ (function (_super) {\n    __extends(AccountService, _super);\n    //@ngInject\n    function AccountService($injector, $hibachi, utilityService) {\n        var _this = _super.call(this, $injector, $hibachi, utilityService, \'Account\') || this;\n        _this.$injector = $injector;\n        _this.$hibachi = $hibachi;\n        _this.utilityService = utilityService;\n        return _this;\n    }\n    return AccountService;\n}(baseentityservice_1.BaseEntityService));\nexports.AccountService = AccountService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/accountservice.ts?')},"../../../org/Hibachi/client/src/core/services/baseentityservice.ts":
/*!***********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/baseentityservice.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar baseobject_1 = __webpack_require__(/*! ../model/baseobject */ \"../../../org/Hibachi/client/src/core/model/baseobject.ts\");\nvar Entities = __webpack_require__(/*! ../model/entity/entities */ \"../../../org/Hibachi/client/src/core/model/entity/entities.ts\");\nvar Processes = __webpack_require__(/*! ../model/process/processes */ \"../../../org/Hibachi/client/src/core/model/process/processes.ts\");\nvar BaseEntityService = /** @class */ (function (_super) {\n    __extends(BaseEntityService, _super);\n    //@ngInject\n    function BaseEntityService($injector, $hibachi, utilityService, baseObjectName, objectName) {\n        var _this = _super.call(this, $injector) || this;\n        _this.$injector = $injector;\n        _this.$hibachi = $hibachi;\n        _this.utilityService = utilityService;\n        _this.baseObjectName = baseObjectName;\n        _this.objectName = objectName;\n        _this.newEntity = function (baseObjectName, objectName) {\n            if (!objectName) {\n                objectName = baseObjectName;\n            }\n            return _this.newObject('Entity', baseObjectName, objectName);\n        };\n        _this.newProcessObject = function (baseObjectName, objectName) {\n            if (!objectName) {\n                objectName = baseObjectName;\n            }\n            return _this.newObject('Process', baseObjectName, objectName);\n        };\n        _this.newObject = function (type, baseObjectName, objectName) {\n            if (!objectName) {\n                objectName = baseObjectName;\n            }\n            var baseObject = _this.$hibachi.getEntityDefinition(baseObjectName);\n            if (baseObject) {\n                var Barrell = {};\n                if (type === 'Entity') {\n                    Barrell = Entities;\n                }\n                else if (type === 'Process') {\n                    Barrell = Processes;\n                }\n                if (Barrell[objectName.toLowerCase()]) {\n                    _this.utilityService.extend(Barrell[objectName.toLowerCase()], baseObject);\n                    var entity = new Barrell[objectName.toLowerCase()](_this.$injector);\n                }\n                else {\n                    var entity = new baseObject();\n                    //throw('need to add '+ objectName+' class');\n                }\n                return entity;\n            }\n            else {\n                return {};\n            }\n        };\n        _this.utilityService = utilityService;\n        _this.$hibachi = $hibachi;\n        _this.$injector = $injector;\n        //make case insensitive\n        for (var key in Entities) {\n            Entities[key.toLowerCase()] = Entities[key];\n        }\n        if (!_this.objectName) {\n            _this.objectName = _this.baseObjectName;\n        }\n        _this['new' + _this.objectName] = function () {\n            return _this.newEntity(_this.baseObjectName, _this.objectName);\n        };\n        return _this;\n    }\n    return BaseEntityService;\n}(baseobject_1.BaseObject));\nexports.BaseEntityService = BaseEntityService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/baseentityservice.ts?")},"../../../org/Hibachi/client/src/core/services/baseservice.ts":
/*!*****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/baseservice.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BaseService = /** @class */ (function () {\n    function BaseService() {\n    }\n    return BaseService;\n}());\nexports.BaseService = BaseService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/baseservice.ts?")},"../../../org/Hibachi/client/src/core/services/cacheservice.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/cacheservice.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar CacheService = /** @class */ (function () {\n    //@ngInject\n    function CacheService(localStorageService) {\n        var _this = this;\n        this.localStorageService = localStorageService;\n        this.cacheData = {};\n        this.saveCacheData = function () {\n            _this.localStorageService.setItem("cacheData", _this.cacheData);\n        };\n        this.hasKey = function (key) {\n            if (angular.isDefined(_this.cacheData[key])) {\n                return true;\n            }\n            return false;\n        };\n        this.dateExpired = function (key) {\n            if (_this.cacheData[key].expiresTime == "forever") {\n                return false;\n            }\n            return _this.cacheData[key].expiresTime < Date.now();\n        };\n        this.put = function (key, dataPromise, dataTarget, expiresTime) {\n            if (expiresTime === void 0) { expiresTime = "forever"; }\n            _this.cacheData[key] = {};\n            _this.cacheData[key].expiresTime = expiresTime;\n            _this.cacheData[key].dataPromise = dataPromise;\n            _this.cacheData[key].dataTarget = dataTarget;\n            dataPromise.then(function (response) {\n                _this.localStorageService.setItem(key, response[dataTarget]);\n            }, function (reason) {\n                delete _this.cacheData[key];\n            });\n            _this.saveCacheData();\n            return dataPromise;\n        };\n        this.reload = function (key, expiresTime) {\n            if (expiresTime === void 0) { expiresTime = "forever"; }\n            _this.cacheData[key].expiresTime = expiresTime;\n            _this.cacheData[key].dataPromise.then(function (response) {\n                _this.localStorageService.setItem(key, response[_this.cacheData[key].dataTarget]);\n            }, function (reason) {\n                delete _this.cacheData[key];\n            });\n            _this.saveCacheData();\n            return _this.cacheData[key].dataPromise;\n        };\n        this.fetch = function (key) {\n            if (_this.hasKey(key) && !_this.dateExpired(key)) {\n                if (_this.localStorageService.hasItem(key)) {\n                    return _this.localStorageService.getItem(key);\n                }\n                _this.put(key, _this.cacheData[key].dataPromise, _this.cacheData[key].dataTarget, _this.cacheData[key].expiresTime).finally(function () {\n                    return _this.localStorageService.getItem(key);\n                });\n            }\n        };\n        this.fetchOrReload = function (key, expiresTime) {\n            if (angular.isDefined(_this.fetch(key))) {\n                return _this.fetch(key);\n            }\n            else {\n                _this.reload(key, expiresTime).then(function (response) {\n                    return _this.fetch(key);\n                }, function (reason) {\n                    //throw\n                });\n            }\n        };\n        if (localStorageService.hasItem("cacheData")) {\n            this.cacheData = localStorageService.getItem("cacheData");\n        }\n    }\n    return CacheService;\n}());\nexports.CacheService = CacheService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/cacheservice.ts?')},"../../../org/Hibachi/client/src/core/services/cartservice.ts":
/*!*****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/cartservice.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseentityservice_1 = __webpack_require__(/*! ./baseentityservice */ \"../../../org/Hibachi/client/src/core/services/baseentityservice.ts\");\nvar CartService = /** @class */ (function (_super) {\n    __extends(CartService, _super);\n    //@ngInject\n    //@ngInject\n    function CartService($injector, $hibachi, utilityService) {\n        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Order', 'Cart') || this;\n        _this.$injector = $injector;\n        _this.$hibachi = $hibachi;\n        _this.utilityService = utilityService;\n        return _this;\n    }\n    return CartService;\n}(baseentityservice_1.BaseEntityService));\nexports.CartService = CartService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/cartservice.ts?")},"../../../org/Hibachi/client/src/core/services/draggableservice.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/draggableservice.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DraggableService = /** @class */ (function () {\n    //ngInject\n    function DraggableService() {\n        this.isDropAllowed = function (event) {\n            //todo implement\n            return true;\n        };\n        this.isMouseInFirstHalf = function (event, targetNode, relativeToParent, horizontal) {\n            var mousePointer = horizontal ? (event.offsetX || event.layerX)\n                : (event.offsetY || event.layerY);\n            var targetSize = horizontal ? targetNode.offsetWidth : targetNode.offsetHeight;\n            var targetPosition = horizontal ? targetNode.offsetLeft : targetNode.offsetTop;\n            targetPosition = relativeToParent ? targetPosition : 0;\n            return mousePointer < targetPosition + targetSize / 2;\n        };\n    }\n    return DraggableService;\n}());\nexports.DraggableService = DraggableService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/draggableservice.ts?")},"../../../org/Hibachi/client/src/core/services/entityservice.ts":
/*!*******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/entityservice.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar baseentityservice_1 = __webpack_require__(/*! ./baseentityservice */ \"../../../org/Hibachi/client/src/core/services/baseentityservice.ts\");\nvar EntityService = /** @class */ (function (_super) {\n    __extends(EntityService, _super);\n    //@ngInject\n    function EntityService($injector, $hibachi, utilityService) {\n        var _this = _super.call(this, $injector, $hibachi, utilityService) || this;\n        _this.$injector = $injector;\n        _this.$hibachi = $hibachi;\n        _this.utilityService = utilityService;\n        return _this;\n    }\n    return EntityService;\n}(baseentityservice_1.BaseEntityService));\nexports.EntityService = EntityService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/entityservice.ts?")},"../../../org/Hibachi/client/src/core/services/expandableservice.ts":
/*!***********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/expandableservice.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ExpandableService = /** @class */ (function () {\n    //ngInject\n    function ExpandableService() {\n        var _this = this;\n        this.recordStates = {};\n        this.addRecord = function (recordID, state) {\n            if (angular.isUndefined(state)) {\n                state = { isLoaded: true };\n            }\n            _this.recordStates[recordID] = state;\n        };\n        this.updateState = function (recordID, state) {\n            if (angular.isUndefined(_this.recordStates[recordID])) {\n                _this.recordStates[recordID] = {};\n            }\n            for (var key in state) {\n                _this.recordStates[recordID][key] = state[key];\n            }\n        };\n        this.getState = function (recordID, key) {\n            if (angular.isDefined(_this.recordStates[recordID]) && angular.isDefined(key)) {\n                var dataToReturn = _this.recordStates[recordID][key];\n            }\n            else {\n                var dataToReturn = _this.recordStates[recordID];\n            }\n            if (angular.isDefined(dataToReturn)) {\n                return dataToReturn;\n            }\n            return false;\n        };\n    }\n    return ExpandableService;\n}());\nexports.ExpandableService = ExpandableService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/expandableservice.ts?")},"../../../org/Hibachi/client/src/core/services/filterservice.ts":
/*!*******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/filterservice.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar FilterService = /** @class */ (function () {\n    //ngInject\n    function FilterService() {\n        this.filterMatch = function (valueToCompareAgainst, comparisonOperator, comparisonValue) {\n            switch (comparisonOperator) {\n                case "!=":\n                    if (valueToCompareAgainst != comparisonValue) {\n                        return true;\n                    }\n                    break;\n                case ">":\n                    if (valueToCompareAgainst > comparisonValue) {\n                        return true;\n                    }\n                    break;\n                case ">=":\n                    if (valueToCompareAgainst >= comparisonValue) {\n                        return true;\n                    }\n                    break;\n                case "<":\n                    if (valueToCompareAgainst < comparisonValue) {\n                        return true;\n                    }\n                    break;\n                case "<=":\n                    if (valueToCompareAgainst <= comparisonValue) {\n                        return true;\n                    }\n                    break;\n                case "is":\n                    if (valueToCompareAgainst == comparisonValue) {\n                        return true;\n                    }\n                    break;\n                case "is not":\n                    if (valueToCompareAgainst != comparisonValue) {\n                        return true;\n                    }\n                    break;\n                default:\n                    //= case\n                    if (valueToCompareAgainst == comparisonValue) {\n                        return true;\n                    }\n                    break;\n            }\n            return false;\n        };\n    }\n    return FilterService;\n}());\nexports.FilterService = FilterService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/filterservice.ts?')},"../../../org/Hibachi/client/src/core/services/formservice.ts":
/*!*****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/formservice.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Form = /** @class */ (function () {\n    //@ngInject\n    function Form(name, object, editing) {\n        this.$addControl = function (control) { };\n        this.$removeControl = function (control) { };\n        this.$setValidity = function (validationErrorKey, isValid, control) { };\n        this.$setDirty = function () { };\n        this.$setPristine = function () { };\n        this.$commitViewValue = function () { };\n        this.$rollbackViewValue = function () { };\n        this.$setSubmitted = function () { };\n        this.$setUntouched = function () { };\n        this.name = name;\n        this.object = object;\n        this.editing = editing;\n    }\n    return Form;\n}());\nvar FormService = /** @class */ (function () {\n    function FormService($log) {\n        var _this = this;\n        this.$log = $log;\n        this.setPristinePropertyValue = function (property, value) {\n            _this._pristinePropertyValue[property] = value;\n        };\n        this.getPristinePropertyValue = function (property) {\n            return _this._pristinePropertyValue[property];\n        };\n        this.setForm = function (form) {\n            _this._forms[form.name] = form;\n        };\n        this.getForm = function (formName) {\n            return _this._forms[formName];\n        };\n        this.getForms = function () {\n            return _this._forms;\n        };\n        this.getFormsByObjectName = function (objectName) {\n            var forms = [];\n            for (var f in _this._forms) {\n                if (angular.isDefined(_this._forms[f].$$swFormInfo.object) && _this._forms[f].$$swFormInfo.object.metaData.className === objectName) {\n                    forms.push(_this._forms[f]);\n                }\n            }\n            return forms;\n        };\n        this.createForm = function (name, object, editing) {\n            var _form = new Form(name, object, editing);\n            _this.setForm(_form);\n            return _form;\n        };\n        this.resetForm = function (form) {\n            _this.$log.debug('resetting form');\n            _this.$log.debug(form);\n            for (var key in form) {\n                if (angular.isDefined(form[key])\n                    && typeof form[key].$setViewValue == 'function'\n                    && angular.isDefined(form[key].$viewValue)) {\n                    _this.$log.debug(form[key]);\n                    if (angular.isDefined(_this.getPristinePropertyValue(key))) {\n                        form[key].$setViewValue(_this.getPristinePropertyValue(key));\n                    }\n                    else {\n                        form[key].$setViewValue('');\n                    }\n                    form[key].$setUntouched(true);\n                    form[key].$render();\n                    _this.$log.debug(form[key]);\n                }\n            }\n            form.$submitted = false;\n            form.$setPristine();\n            form.$setUntouched();\n        };\n        this.$log = $log;\n        this._forms = {};\n        this._pristinePropertyValue = {};\n    }\n    FormService.$inject = ['$log'];\n    return FormService;\n}());\nexports.FormService = FormService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/formservice.ts?")},"../../../org/Hibachi/client/src/core/services/hibachiinterceptor.ts":
/*!************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachiinterceptor.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar HibachiInterceptor = /** @class */ (function () {\n    //@ngInject\n    function HibachiInterceptor($location, $q, $log, $rootScope, $window, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder, observerService) {\n        var _this = this;\n        this.$location = $location;\n        this.$q = $q;\n        this.$log = $log;\n        this.$rootScope = $rootScope;\n        this.$window = $window;\n        this.$injector = $injector;\n        this.localStorageService = localStorageService;\n        this.alertService = alertService;\n        this.appConfig = appConfig;\n        this.dialogService = dialogService;\n        this.utilityService = utilityService;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.observerService = observerService;\n        this.urlParam = null;\n        this.authHeader = 'Authorization';\n        this.authPrefix = 'Bearer ';\n        this.getJWTDataFromToken = function (str) {\n            // Going backwards: from bytestream, to percent-encoding, to original string.\n            str = str.split('.')[1];\n            var decodedString = decodeURIComponent(_this.$window.atob(str).split('').map(function (c) {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }).join(''));\n            var jwtData = angular.fromJson(decodedString);\n            var now = +new Date();\n            var nowString = now.toString().substr(0, jwtData.exp.toString().length);\n            now = +nowString;\n            if (jwtData.issuer && jwtData.issuer == _this.$window.location.hostname && jwtData.exp > now) {\n                if (!_this.$rootScope.slatwall.account) {\n                    _this.$rootScope.slatwall.account = {};\n                }\n                _this.$rootScope.slatwall.account.accountID = jwtData.accountid;\n            }\n        };\n        this.request = function (config) {\n            _this.$log.debug('request');\n            //bypass interceptor rules when checking template cache\n            if (config.url.charAt(0) !== '/') {\n                return config;\n            }\n            if (config.method == 'GET' && config.url.indexOf('.html') >= 0 && config.url.indexOf('/') >= 0) {\n                //all partials are bound to instantiation key\n                config.url = config.url + '?instantiationKey=' + _this.appConfig.instantiationKey;\n                return config;\n            }\n            config.cache = true;\n            config.headers = config.headers || {};\n            if (_this.localStorageService.hasItem('token')) {\n                config.headers['Auth-Token'] = 'Bearer ' + _this.localStorageService.getItem('token');\n                _this.getJWTDataFromToken(_this.localStorageService.getItem('token'));\n            }\n            var queryParams = _this.utilityService.getQueryParamsFromUrl(config.url);\n            if (config.method == 'GET' && (queryParams[_this.appConfig.action] && queryParams[_this.appConfig.action] === 'api:main.get')) {\n                _this.$log.debug(config);\n                config.method = 'POST';\n                config.data = {};\n                var data = {};\n                if (angular.isDefined(config.params)) {\n                    data = config.params;\n                }\n                var params = {};\n                params.serializedJsonData = angular.toJson(data);\n                params.context = \"GET\";\n                config.data = $.param(params);\n                delete config.params;\n                config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n            }\n            else if ((queryParams[_this.appConfig.action] && queryParams[_this.appConfig.action].indexOf('api:main.get') !== -1)) {\n                if (queryParams && !queryParams['context']) {\n                    if (!config.data) {\n                        config.data = {};\n                    }\n                    config.data.context = 'GET';\n                }\n            }\n            return config;\n        };\n        this.requestError = function (rejection) {\n            return _this.$q.reject(rejection);\n        };\n        this.response = function (response) {\n            if (response.data.messages) {\n                var alerts = _this.alertService.formatMessagesToAlerts(response.data.messages);\n                _this.alertService.addAlerts(alerts);\n            }\n            if (response.data.hasOwnProperty('token')) {\n                _this.localStorageService.setItem('token', response.data.token);\n            }\n            return response;\n        };\n        this.responseError = function (rejection) {\n            if (angular.isDefined(rejection.status) && rejection.status !== 404 && rejection.status !== 403 && rejection.status !== 499) {\n                if (rejection.data && rejection.data.messages) {\n                    var alerts = _this.alertService.formatMessagesToAlerts(rejection.data.messages);\n                    _this.alertService.addAlerts(alerts);\n                }\n                else {\n                    var message = {\n                        msg: 'there was error retrieving data',\n                        type: 'error'\n                    };\n                    _this.alertService.addAlert(message);\n                }\n            }\n            if (rejection.status === 403 || rejection.status == 401) {\n                _this.observerService.notify('Unauthorized');\n            }\n            if (rejection.status === 499) {\n                // handle the case where the user is not authenticated\n                if (rejection.data && rejection.data.messages) {\n                    //var deferred = $q.defer();\n                    var $http = _this.$injector.get('$http');\n                    if (rejection.data.messages[0].message === 'timeout') {\n                        //open dialog\n                        _this.dialogService.addPageDialog(_this.hibachiPathBuilder.buildPartialsPath('preprocesslogin'), {});\n                    }\n                    else if (rejection.data.messages[0].message === 'invalid_token') {\n                        return $http.get(_this.baseUrl + '?' + _this.appConfig.action + '=api:main.login').then(function (loginResponse) {\n                            if (loginResponse.status === 200) {\n                                _this.localStorageService.setItem('token', loginResponse.data.token);\n                                rejection.config.headers = rejection.config.headers || {};\n                                rejection.config.headers['Auth-Token'] = 'Bearer ' + loginResponse.data.token;\n                                _this.getJWTDataFromToken(loginResponse.data.token);\n                                return $http(rejection.config).then(function (response) {\n                                    return response;\n                                });\n                            }\n                        }, function (rejection) {\n                            return rejection;\n                        });\n                    }\n                }\n            }\n            return rejection;\n        };\n        this.$location = $location;\n        this.$q = $q;\n        this.$log = $log;\n        this.$rootScope = $rootScope;\n        this.$window = $window;\n        this.$injector = $injector;\n        this.localStorageService = localStorageService;\n        this.alertService = alertService;\n        this.appConfig = appConfig;\n        this.dialogService = dialogService;\n        this.utilityService = utilityService;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.baseUrl = appConfig.baseURL;\n    }\n    HibachiInterceptor.Factory = function () {\n        var eventHandler = function ($location, $q, $log, $rootScope, $window, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder, observerService) { return new HibachiInterceptor($location, $q, $log, $rootScope, $window, $injector, localStorageService, alertService, appConfig, dialogService, utilityService, hibachiPathBuilder, observerService); };\n        eventHandler.$inject = [\n            '$location',\n            '$q',\n            '$log',\n            '$rootScope',\n            '$window',\n            '$injector',\n            'localStorageService',\n            'alertService',\n            'appConfig',\n            'dialogService',\n            'utilityService',\n            'hibachiPathBuilder',\n            'observerService'\n        ];\n        return eventHandler;\n    };\n    return HibachiInterceptor;\n}());\nexports.HibachiInterceptor = HibachiInterceptor;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachiinterceptor.ts?")},"../../../org/Hibachi/client/src/core/services/hibachipathbuilder.ts":
/*!************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachipathbuilder.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\n/*services return promises which can be handled uniquely based on success or failure by the controller*/\nvar HibachiPathBuilder = /** @class */ (function () {\n    //@ngInject\n    function HibachiPathBuilder() {\n        var _this = this;\n        this.setBaseURL = function (baseURL) {\n            _this.baseURL = baseURL;\n        };\n        this.setBasePartialsPath = function (basePartialsPath) {\n            _this.basePartialsPath = basePartialsPath;\n        };\n        this.setApiSubsystemName = function (apiSubsystemName) {\n            _this.apiSubsystemName = apiSubsystemName;\n        };\n        this.buildPartialsPath = function (componentsPath) {\n            if (angular.isDefined(_this.baseURL) && angular.isDefined(_this.basePartialsPath)) {\n                return (_this.baseURL + _this.basePartialsPath + componentsPath).replace(\"//\", \"/\");\n            }\n            else {\n                throw ('need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there');\n            }\n        };\n    }\n    return HibachiPathBuilder;\n}());\nexports.HibachiPathBuilder = HibachiPathBuilder;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachipathbuilder.ts?")},"../../../org/Hibachi/client/src/core/services/hibachiscope.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachiscope.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HibachiScope = /** @class */ (function () {\n    //@ngInject\n    function HibachiScope(appConfig) {\n        var _this = this;\n        this.loginDisplayed = false;\n        this.isValidToken = true;\n        this.setToken = function (token) {\n            _this.token = token;\n            var stringArray = token.split('.');\n            try {\n                _this.jwtInfo = angular.fromJson(window.atob(stringArray[0]).trim());\n                _this.session = angular.fromJson(window.atob(stringArray[1]).trim());\n            }\n            catch (err) {\n                _this.isValidToken = false;\n            }\n        };\n        this.config = appConfig;\n    }\n    return HibachiScope;\n}());\nexports.HibachiScope = HibachiScope;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachiscope.ts?")},"../../../org/Hibachi/client/src/core/services/hibachiservice.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachiservice.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// interface ISlatwallRootScopeService extends ng.IRootScopeService{\n//     loadedResourceBundle:boolean;\n// \tloadingResourceBundle:boolean;\n// } \nvar HibachiService = /** @class */ (function () {\n    //@ngInject\n    function HibachiService($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, $injector, requestService, utilityService, formService, rbkeyService, appConfig, _config, _jsEntities, _jsEntityInstances) {\n        var _this = this;\n        this.$window = $window;\n        this.$q = $q;\n        this.$http = $http;\n        this.$timeout = $timeout;\n        this.$log = $log;\n        this.$rootScope = $rootScope;\n        this.$location = $location;\n        this.$anchorScroll = $anchorScroll;\n        this.$injector = $injector;\n        this.requestService = requestService;\n        this.utilityService = utilityService;\n        this.formService = formService;\n        this.rbkeyService = rbkeyService;\n        this.appConfig = appConfig;\n        this._config = _config;\n        this._jsEntities = _jsEntities;\n        this._jsEntityInstances = _jsEntityInstances;\n        this._deferred = {};\n        this._resourceBundle = {};\n        this.usePublicRoutes = false;\n        this.buildUrl = function (action, queryString) {\n            //actionName example: slatAction. defined in FW1 and populated to config\n            var actionName = _this.appConfig.action;\n            var baseUrl = _this.appConfig.baseURL;\n            queryString = queryString || '';\n            if (angular.isDefined(queryString) && queryString.length) {\n                if (queryString.indexOf('&') !== 0) {\n                    queryString = '&' + queryString;\n                }\n            }\n            return baseUrl + '?' + actionName + '=' + action + queryString;\n        };\n        this.getUrlWithActionPrefix = function () {\n            return _this.appConfig.baseURL + '/index.cfm/?' + _this.appConfig.action + \"=\";\n        };\n        this.getJsEntities = function () {\n            return _this._jsEntities;\n        };\n        this.setJsEntities = function (jsEntities) {\n            _this._jsEntities = jsEntities;\n        };\n        this.getJsEntityInstances = function () {\n            return _this._jsEntityInstances;\n        };\n        this.setJsEntityInstances = function (jsEntityInstances) {\n            _this._jsEntityInstances = jsEntityInstances;\n        };\n        this.getEntityExample = function (entityName) {\n            return _this._jsEntityInstances[entityName];\n        };\n        this.getEntityMetaData = function (entityName) {\n            return _this._jsEntityInstances[entityName].metaData;\n        };\n        this.getPropertyByEntityNameAndPropertyName = function (entityName, propertyName) {\n            return _this.getEntityMetaData(entityName)[propertyName];\n        };\n        this.getPrimaryIDPropertyNameByEntityName = function (entityName) {\n            return _this.getEntityExample(entityName).$$getIDName();\n        };\n        this.getEntityHasPropertyByEntityName = function (entityName, propertyName) {\n            return angular.isDefined(_this.getEntityMetaData(entityName)[propertyName]);\n        };\n        this.getBaseEntityAliasFromName = function (entityName) {\n            return '_' + entityName;\n        };\n        this.getPropertyIsObjectByEntityNameAndPropertyIdentifier = function (entityName, propertyIdentifier) {\n            var lastEntity = _this.getLastEntityNameInPropertyIdentifier(entityName, propertyIdentifier);\n            var entityMetaData = _this.getEntityMetaData(lastEntity);\n            return angular.isDefined(entityMetaData[_this.utilityService.listLast(propertyIdentifier, '.')].cfc);\n        };\n        this.getLastEntityNameInPropertyIdentifier = function (entityName, propertyIdentifier) {\n            if (!entityName) {\n                throw ('No entity name was supplied to getLastEntityNameInPropertyIdentifier in hibachi service.');\n            }\n            //strip alias if it exists and convert everything to be periods\n            if (propertyIdentifier.charAt(0) === '_') {\n                propertyIdentifier = _this.utilityService.listRest(propertyIdentifier.replace(/_/g, '.'), '.');\n            }\n            var propertyIdentifierArray = propertyIdentifier.split('.');\n            if (propertyIdentifierArray[0] === entityName.toLowerCase()) {\n                propertyIdentifierArray.shift();\n            }\n            if (propertyIdentifierArray.length > 1) {\n                var propertiesStruct = _this.getEntityMetaData(entityName);\n                var currentProperty = propertyIdentifierArray.shift();\n                if (!propertiesStruct[currentProperty] ||\n                    !propertiesStruct[currentProperty].cfc) {\n                    throw (\"The Property Identifier \" + propertyIdentifier + \" is invalid for the entity \" + entityName);\n                }\n                var currentEntityName = propertiesStruct[currentProperty].cfc;\n                var currentPropertyIdentifier = propertyIdentifierArray.join('.');\n                return _this.getLastEntityNameInPropertyIdentifier(currentEntityName, currentPropertyIdentifier);\n            }\n            return entityName;\n        };\n        //helper method to inflate a new entity with data\n        this.populateEntity = function (entityName, data) {\n            var newEntity = _this.newEntity(entityName);\n            angular.extend(newEntity.data, data);\n            return newEntity;\n        };\n        //service method used to transform collection data to collection objects based on a collectionconfig\n        this.populateCollection = function (collectionData, collectionConfig) {\n            //create array to hold objects\n            var entities = [];\n            //loop over all collection data to create objects\n            var hibachiService = _this;\n            angular.forEach(collectionData, function (collectionItemData, key) {\n                //create base Entity\n                var entity = hibachiService['new' + collectionConfig.baseEntityName.replace(_this.appConfig.applicationKey, '')]();\n                //populate entity with data based on the collectionConfig\n                angular.forEach(collectionConfig.columns, function (column, key) {\n                    //get objects base properties\n                    var propertyIdentifier = column.propertyIdentifier.replace(collectionConfig.baseEntityAlias.toLowerCase(), '');\n                    propertyIdentifier = _this.utilityService.replaceAll(propertyIdentifier, '_', '.');\n                    if (propertyIdentifier.charAt(0) === '.') {\n                        propertyIdentifier = propertyIdentifier.slice(1);\n                    }\n                    var propertyIdentifierArray = propertyIdentifier.split('.');\n                    var propertyIdentifierKey = propertyIdentifier.replace(/\\./g, '_');\n                    var currentEntity = entity;\n                    angular.forEach(propertyIdentifierArray, function (property, key) {\n                        if (key === propertyIdentifierArray.length - 1) {\n                            //if we are on the last item in the array\n                            if (angular.isObject(collectionItemData[propertyIdentifierKey]) && currentEntity.metaData[property].fieldtype === 'many-to-one') {\n                                var relatedEntity = hibachiService['new' + currentEntity.metaData[property].cfc]();\n                                relatedEntity.$$init(collectionItemData[propertyIdentifierKey][0]);\n                                currentEntity['$$set' + currentEntity.metaData[property].name.charAt(0).toUpperCase() + currentEntity.metaData[property].name.slice(1)](relatedEntity);\n                            }\n                            else if (angular.isArray(collectionItemData[propertyIdentifierKey]) && (currentEntity.metaData[property].fieldtype === 'one-to-many')) {\n                                angular.forEach(collectionItemData[propertyIdentifierKey], function (arrayItem, key) {\n                                    var relatedEntity = hibachiService['new' + currentEntity.metaData[property].cfc]();\n                                    relatedEntity.$$init(arrayItem);\n                                    currentEntity['$$add' + currentEntity.metaData[property].singularname.charAt(0).toUpperCase() + currentEntity.metaData[property].singularname.slice(1)](relatedEntity);\n                                });\n                            }\n                            else {\n                                currentEntity.data[property] = collectionItemData[propertyIdentifierKey];\n                            }\n                        }\n                        else {\n                            var propertyMetaData = currentEntity.metaData[property];\n                            if (angular.isUndefined(currentEntity.data[property])) {\n                                if (propertyMetaData.fieldtype === 'one-to-many') {\n                                    relatedEntity = [];\n                                }\n                                else {\n                                    relatedEntity = hibachiService['new' + propertyMetaData.cfc]();\n                                }\n                            }\n                            else {\n                                relatedEntity = currentEntity.data[property];\n                            }\n                            currentEntity['$$set' + propertyMetaData.name.charAt(0).toUpperCase() + propertyMetaData.name.slice(1)](relatedEntity);\n                            currentEntity = relatedEntity;\n                        }\n                    });\n                });\n                entities.push(entity);\n            });\n            return entities;\n        };\n        /*basic entity getter where id is optional, returns a promise*/\n        this.getDefer = function (deferKey) {\n            return _this._deferred[deferKey];\n        };\n        this.cancelPromise = function (deferKey) {\n            var deferred = _this.getDefer(deferKey);\n            if (angular.isDefined(deferred)) {\n                deferred.resolve({ messages: [{ messageType: 'error', message: 'User Cancelled' }] });\n            }\n        };\n        this.newEntity = function (entityName) {\n            if (entityName != undefined) {\n                var entityServiceName = entityName.charAt(0).toLowerCase() + entityName.slice(1) + 'Service';\n                if (angular.element(document.body).injector().has(entityServiceName)) {\n                    var entityService = angular.element(document.body).injector().get(entityServiceName);\n                    var functionObj = entityService['new' + entityName];\n                    if (entityService['new' + entityName] != undefined && !!(functionObj && functionObj.constructor && functionObj.call && functionObj.apply)) {\n                        return entityService['new' + entityName]();\n                    }\n                }\n                return new _this._jsEntities[entityName];\n            }\n        };\n        this.getEntityDefinition = function (entityName) {\n            return _this._jsEntities[entityName];\n        };\n        /*basic entity getter where id is optional, returns a promise*/\n        this.getEntity = function (entityName, options) {\n            /*\n            *\n            * getEntity('Product', '12345-12345-12345-12345');\n            * getEntity('Product', {keywords='Hello'});\n            *\n            */\n            var apiSubsystemName = _this.appConfig.apiSubsystemName || \"api\";\n            if (angular.isUndefined(options)) {\n                options = {};\n            }\n            if (angular.isDefined(options.deferKey)) {\n                _this.cancelPromise(options.deferKey);\n            }\n            var params = {};\n            if (typeof options === 'string') {\n                var urlString = _this.getUrlWithActionPrefix() + apiSubsystemName + ':' + 'main.get&entityName=' + entityName + '&entityID=' + options;\n            }\n            else {\n                params['P:Current'] = options.currentPage || 1;\n                params['P:Show'] = options.pageShow || 10;\n                params.keywords = options.keywords || '';\n                params.columnsConfig = options.columnsConfig || '';\n                params.filterGroupsConfig = options.filterGroupsConfig || '';\n                params.joinsConfig = options.joinsConfig || '';\n                params.orderByConfig = options.orderByConfig || '';\n                params.groupBysConfig = options.groupBysConfig || '';\n                params.isDistinct = options.isDistinct || false;\n                params.propertyIdentifiersList = options.propertyIdentifiersList || '';\n                params.allRecords = options.allRecords || false;\n                params.defaultColumns = options.defaultColumns || true;\n                params.processContext = options.processContext || '';\n                params.isReport = options.isReport || false;\n                params.periodInterval = options.periodInterval || \"\";\n                var urlString = _this.getUrlWithActionPrefix() + apiSubsystemName + ':' + 'main.get&entityName=' + entityName;\n            }\n            if (angular.isDefined(options.id)) {\n                urlString += '&entityId=' + options.id;\n            }\n            var transformResponse = function (data) {\n                if (angular.isString(data)) {\n                    data = JSON.parse(data);\n                }\n                return data;\n            };\n            //check if we are using a service to transform the response\n            if (angular.isDefined(options.transformResponse)) {\n                transformResponse = function (data) {\n                    var data = JSON.parse(data);\n                    if (angular.isDefined(data.records)) {\n                        data = options.transformResponse(data.records);\n                    }\n                    return data;\n                };\n            }\n            var request = _this.requestService.newAdminRequest(urlString, params);\n            if (options.deferKey) {\n                _this._deferred[options.deferKey] = request;\n            }\n            return request.promise;\n        };\n        this.getResizedImageByProfileName = function (profileName, skuIDs) {\n            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getResizedImageByProfileName&context=getResizedImageByProfileName&profileName=' + profileName + '&skuIDs=' + skuIDs;\n            var request = _this.requestService.newPublicRequest(urlString);\n            return request.promise;\n        };\n        this.getEventOptions = function (entityName) {\n            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getEventOptionsByEntityName&entityName=' + entityName;\n            var request = _this.requestService.newAdminRequest(urlString);\n            return request.promise;\n        };\n        this.getProcessOptions = function (entityName) {\n            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getProcessMethodOptionsByEntityName&entityName=' + entityName;\n            var request = _this.requestService.newAdminRequest(urlString);\n            return request.promise;\n        };\n        this.checkUniqueOrNullValue = function (object, property, value) {\n            var objectName = object.metaData.className;\n            var objectID = object.$$getID();\n            return _this.$http.get(_this.getUrlWithActionPrefix() + 'api:main.getValidationPropertyStatus&object=' + objectName + '&objectID=' + objectID + '&propertyidentifier=' + property +\n                '&value=' + escape(value)).then(function (results) {\n                return results.data.uniqueStatus;\n            });\n        };\n        this.checkUniqueValue = function (object, property, value) {\n            var objectName = object.metaData.className;\n            var objectID = object.$$getID();\n            return _this.$http.get(_this.getUrlWithActionPrefix() + 'api:main.getValidationPropertyStatus&object=' + objectName + '&objectID=' + objectID + '&propertyidentifier=' + property +\n                '&value=' + escape(value)).then(function (results) {\n                return results.data.uniqueStatus;\n            });\n        };\n        this.getPropertyDisplayData = function (entityName, options) {\n            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getPropertyDisplayData&entityName=' + entityName;\n            var params = {};\n            params.propertyIdentifiersList = options.propertyIdentifiersList || '';\n            var request = _this.requestService.newAdminRequest(urlString, params);\n            return request.promise;\n        };\n        this.getPropertyDisplayOptions = function (entityName, options) {\n            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getPropertyDisplayOptions&entityName=' + entityName;\n            var params = {};\n            params.property = options.property || options.propertyIdentifier || '';\n            params.entityID = options.entityID || '';\n            if (angular.isDefined(options.argument1)) {\n                params.argument1 = options.argument1;\n            }\n            var request = _this.requestService.newAdminRequest(urlString, params);\n            return request.promise;\n        };\n        this.getPropertyTitle = function (propertyName, metaData) {\n            var propertyMetaData = metaData[propertyName];\n            if (angular.isDefined(propertyMetaData['hb_rbkey'])) {\n                return metaData.$$getRBKey(propertyMetaData['hb_rbkey']);\n            }\n            else if (angular.isUndefined(propertyMetaData['persistent'])) {\n                if (angular.isDefined(propertyMetaData['fieldtype'])\n                    && angular.isDefined(propertyMetaData['cfc'])\n                    && [\"one-to-many\", \"many-to-many\"].indexOf(propertyMetaData.fieldtype) > -1) {\n                    return metaData.$$getRBKey(\"entity.\" + metaData.className.toLowerCase() + \".\" + propertyName + ',entity.' + propertyMetaData.cfc + '_plural');\n                }\n                else if (angular.isDefined(propertyMetaData.fieldtype)\n                    && angular.isDefined(propertyMetaData.cfc)\n                    && [\"many-to-one\"].indexOf(propertyMetaData.fieldtype) > -1) {\n                    return metaData.$$getRBKey(\"entity.\" + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc);\n                }\n                return metaData.$$getRBKey('entity.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());\n            }\n            else if (metaData.isProcessObject) {\n                if (angular.isDefined(propertyMetaData.fieldtype)\n                    && angular.isDefined(propertyMetaData.cfc)\n                    && [\"one-to-many\", \"many-to-many\"].indexOf(propertyMetaData.fieldtype) > -1) {\n                    return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc.toLowerCase() + '_plural');\n                }\n                else if (angular.isDefined(propertyMetaData.fieldtype)\n                    && angular.isDefined(propertyMetaData.cfc)) {\n                    return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + ',entity.' + propertyMetaData.cfc.toLowerCase());\n                }\n                return metaData.$$getRBKey('processObject.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());\n            }\n            return metaData.$$getRBKey('object.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());\n        };\n        this.saveEntity = function (entityName, id, params, context) {\n            var urlString = _this.getUrlWithActionPrefix() + 'api:main.post';\n            if (angular.isDefined(entityName)) {\n                params.entityName = entityName;\n            }\n            if (angular.isDefined(id)) {\n                params.entityID = id;\n            }\n            if (angular.isDefined(context)) {\n                params.context = context;\n            }\n            var request = _this.requestService.newAdminRequest(urlString, params);\n            return request.promise;\n        };\n        this.getExistingCollectionsByBaseEntity = function (entityName) {\n            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getExistingCollectionsByBaseEntity&entityName=' + entityName;\n            var request = _this.requestService.newAdminRequest(urlString);\n            return request.promise;\n        };\n        this.getFilterPropertiesByBaseEntityName = function (entityName, includeNonPersistent) {\n            if (includeNonPersistent === void 0) { includeNonPersistent = false; }\n            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getFilterPropertiesByBaseEntityName&EntityName=' + entityName + '&includeNonPersistent=' + includeNonPersistent;\n            var request = _this.requestService.newAdminRequest(urlString);\n            return request.promise;\n        };\n        this.login = function (emailAddress, password) {\n            var urlString = _this.appConfig.baseURL + '/index.cfm/api/auth/login';\n            var params = {\n                emailAddress: emailAddress,\n                password: password\n            };\n            var request = _this.requestService.newAdminRequest(urlString, params);\n            return request.promise;\n        };\n        this.getResourceBundle = function (locale) {\n            var locale = locale || _this.appConfig.rbLocale;\n            if (_this._resourceBundle[locale]) {\n                return _this._resourceBundle[locale];\n            }\n            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getResourceBundle&instantiationKey=' + _this.appConfig.instantiationKey + '&locale=' + locale;\n            var request = _this.requestService.newAdminRequest(urlString);\n            return request.promise;\n        };\n        this.getCurrencies = function () {\n            var urlString = _this.getUrlWithActionPrefix() + 'api:main.getCurrencies&instantiationKey=' + _this.appConfig.instantiationKey;\n            var request = _this.requestService.newAdminRequest(urlString);\n            return request.promise;\n        };\n        this.getConfig = function () {\n            return _this._config;\n        };\n        this.getConfigValue = function (key) {\n            return _this._config[key];\n        };\n        this.setConfigValue = function (key, value) {\n            _this._config[key] = value;\n        };\n        this.setConfig = function (config) {\n            _this._config = config;\n        };\n        this.$injector = $injector;\n        this.$window = $window;\n        this.$q = $q;\n        this.$http = $http;\n        this.$timeout = $timeout;\n        this.$log = $log;\n        this.$rootScope = $rootScope;\n        this.$location = $location;\n        this.$anchorScroll = $anchorScroll;\n        this.requestService = requestService;\n        this.utilityService = utilityService;\n        this.formService = formService;\n        this.rbkeyService = rbkeyService;\n        this.appConfig = appConfig;\n        this._config = _config;\n        this._jsEntities = _jsEntities;\n        this._jsEntityInstances = _jsEntityInstances;\n    }\n    return HibachiService;\n}());\nexports.HibachiService = HibachiService;\nvar $Hibachi = /** @class */ (function () {\n    //@ngInject\n    function $Hibachi(appConfig) {\n        var _this = this;\n        this._config = {};\n        this.angular = angular;\n        this.setJsEntities = function (jsEntities) {\n            _this._jsEntities = jsEntities;\n        };\n        this.getConfig = function () {\n            return _this._config;\n        };\n        this.getConfigValue = function (key) {\n            return _this._config[key];\n        };\n        this.setConfigValue = function (key, value) {\n            _this._config[key] = value;\n        };\n        this.setConfig = function (config) {\n            _this._config = config;\n        };\n        this._config = appConfig;\n        this.$get.$inject = [\n            '$window',\n            '$q',\n            '$http',\n            '$timeout',\n            '$log',\n            '$rootScope',\n            '$location',\n            '$anchorScroll',\n            '$injector',\n            'requestService',\n            'utilityService',\n            'formService',\n            'rbkeyService',\n            'appConfig'\n        ];\n    }\n    $Hibachi.prototype.$get = function ($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, $injector, requestService, utilityService, formService, rbkeyService, appConfig) {\n        return new HibachiService($window, $q, $http, $timeout, $log, $rootScope, $location, $anchorScroll, $injector, requestService, utilityService, formService, rbkeyService, appConfig, this._config, this._jsEntities, this._jsEntityInstances);\n    };\n    return $Hibachi;\n}());\nexports.$Hibachi = $Hibachi;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachiservice.ts?")},"../../../org/Hibachi/client/src/core/services/hibachiservicedecorator.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachiservicedecorator.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HibachiServiceDecorator = /** @class */ (function () {\n    //@ngInject\n    function HibachiServiceDecorator($delegate, $http, $timeout, $log, $rootScope, $location, $anchorScroll, $q, utilityService, formService, rbkeyService, appConfig, observerService, hibachiValidationService, attributeMetaData) {\n        var _deferred = {};\n        var _config = appConfig;\n        var _jsEntities = {};\n        var _jsEntityInstances = {};\n        var entities = appConfig.modelConfig.entities, validations = appConfig.modelConfig.validations, defaultValues = appConfig.modelConfig.defaultValues;\n        angular.forEach(entities, function (entity) {\n            if (attributeMetaData && attributeMetaData[entity.className]) {\n                var relatedAttributes = attributeMetaData[entity.className];\n                for (var attributeSetCode in relatedAttributes) {\n                    var attributeSet = relatedAttributes[attributeSetCode];\n                    for (var attributeCode in attributeSet.attributes) {\n                        var attribute = attributeSet.attributes[attributeCode];\n                        attribute.attributeSet = attributeSet;\n                        attribute.isAttribute = true;\n                        $.extend(entity[attributeCode], attribute);\n                    }\n                }\n            }\n            $delegate['get' + entity.className] = function (options) {\n                var entityInstance = $delegate.newEntity(entity.className);\n                var entityDataPromise = $delegate.getEntity(entity.className, options);\n                entityDataPromise.then(function (response) {\n                    if (angular.isDefined(response.processData)) {\n                        entityInstance.$$init(response.data);\n                        var processObjectInstance = $delegate['new' + entity.className + '_' + options.processContext.charAt(0).toUpperCase() + options.processContext.slice(1)]();\n                        processObjectInstance.$$init(response.processData);\n                        processObjectInstance.data[entity.className.charAt(0).toLowerCase() + entity.className.slice(1)] = entityInstance;\n                        entityInstance.processObject = processObjectInstance;\n                    }\n                    else {\n                        if (entityInstance.populate) {\n                            entityInstance.populate(response);\n                        }\n                        else {\n                            entityInstance.$$init(response);\n                        }\n                    }\n                });\n                return {\n                    promise: entityDataPromise,\n                    value: entityInstance\n                };\n            };\n            $delegate['new' + entity.className] = function () {\n                //if we have the service then get the new instance from that\n                var entityName = entity.className;\n                var serviceName = entityName.charAt(0).toLowerCase() + entityName.slice(1) + 'Service';\n                if (angular.element(document.body).injector().has(serviceName)) {\n                    var entityService = angular.element(document.body).injector().get(serviceName);\n                    if (entityService['new' + entity.className]) {\n                        return entityService['new' + entity.className]();\n                    }\n                }\n                return $delegate.newEntity(entity.className);\n            };\n            entity.isProcessObject = entity.className.indexOf('_') >= 0;\n            _jsEntities[entity.className] = function () {\n                this.validations = validations[entity.className];\n                this.metaData = entity;\n                this.metaData.className = entity.className;\n                if (relatedAttributes) {\n                    this.attributeMetaData = relatedAttributes;\n                }\n                if (entity.hb_parentPropertyName) {\n                    this.metaData.hb_parentPropertyName = entity.hb_parentPropertyName;\n                }\n                if (entity.hb_childPropertyName) {\n                    this.metaData.hb_childPropertyName = entity.hb_childPropertyName;\n                }\n                this.metaData.$$getRBKey = function (rbKey, replaceStringData) {\n                    return rbkeyService.rbKey(rbKey, replaceStringData);\n                };\n                this.metaData.$$getPropertyTitle = function (propertyName) {\n                    return _getPropertyTitle(propertyName, this);\n                };\n                this.metaData.$$getPropertyHint = function (propertyName) {\n                    return _getPropertyHint(propertyName, this);\n                };\n                this.metaData.$$getManyToManyName = function (singularname) {\n                    var metaData = this;\n                    for (var i in metaData) {\n                        if (metaData[i].singularname === singularname) {\n                            return metaData[i].name;\n                        }\n                    }\n                };\n                this.metaData.$$getPropertyFieldType = function (propertyName) {\n                    return _getPropertyFieldType(propertyName, this);\n                };\n                this.metaData.$$getPropertyFormatType = function (propertyName) {\n                    if (this[propertyName])\n                        return _getPropertyFormatType(propertyName, this);\n                };\n                this.metaData.$$getDetailTabs = function () {\n                    var deferred = $q.defer();\n                    var urlString = _config.baseURL + '/index.cfm/?' + appConfig.action + '=api:main.getDetailTabs&entityName=' + this.className;\n                    var detailTabs = [];\n                    $http.get(urlString)\n                        .success(function (data) {\n                        deferred.resolve(data);\n                    }).error(function (reason) {\n                        deferred.reject(reason);\n                    });\n                    return deferred.promise;\n                };\n                this.$$getFormattedValue = function (propertyName, formatType) {\n                    return _getFormattedValue(propertyName, formatType, this);\n                };\n                this.data = {};\n                this.modifiedData = {};\n                var jsEntity = this;\n                if (entity.isProcessObject) {\n                    (function (entity) {\n                        _jsEntities[entity.className].prototype = {\n                            $$getID: function () {\n                                return '';\n                            },\n                            $$getIDName: function () {\n                                var IDNameString = '';\n                                return IDNameString;\n                            }\n                        };\n                    })(entity);\n                }\n                angular.forEach(entity, function (property) {\n                    if (angular.isObject(property) && angular.isDefined(property.name)) {\n                        if (defaultValues && defaultValues[entity.className] && defaultValues[entity.className][property.name] != null) {\n                            jsEntity.data[property.name] = angular.copy(defaultValues[entity.className][property.name]);\n                        }\n                        else {\n                            jsEntity.data[property.name] = undefined;\n                        }\n                    }\n                });\n            };\n            _jsEntities[entity.className].prototype = {\n                $$getPropertyByName: function (propertyName) {\n                    return this['$$get' + propertyName.charAt(0).toUpperCase() + propertyName.slice(1)]();\n                },\n                $$isPersisted: function () {\n                    return this.$$getID() !== '';\n                },\n                $$init: function (data) {\n                    _init(this, data);\n                },\n                $$save: function () {\n                    return _save(this);\n                },\n                $$delete: function () {\n                    return _delete(this);\n                },\n                $$getValidationsByProperty: function (property) {\n                    return _getValidationsByProperty(this, property);\n                },\n                $$getValidationByPropertyAndContext: function (property, context) {\n                    return _getValidationByPropertyAndContext(this, property, context);\n                },\n                $$getTitleByPropertyIdentifier: function (propertyIdentifier) {\n                    if (propertyIdentifier.split('.').length > 1) {\n                        var listFirst = utilityService.listFirst(propertyIdentifier, '.');\n                        var relatedEntityName = this.metaData[listFirst].cfc;\n                        var exampleEntity = $delegate.newEntity(relatedEntityName);\n                        return exampleEntity.$$getTitleByPropertyIdentifier(propertyIdentifier.replace(listFirst, ''));\n                    }\n                    return this.metaData.$$getPropertyTitle(propertyIdentifier);\n                },\n                $$getMetaData: function (propertyName) {\n                    if (propertyName === undefined) {\n                        return this.metaData;\n                    }\n                    else {\n                        if (angular.isDefined(this.metaData[propertyName].name) && angular.isUndefined(this.metaData[propertyName].nameCapitalCase)) {\n                            this.metaData[propertyName].nameCapitalCase = this.metaData[propertyName].name.charAt(0).toUpperCase() + this.metaData[propertyName].name.slice(1);\n                        }\n                        if (angular.isDefined(this.metaData[propertyName].cfc) && angular.isUndefined(this.metaData[propertyName].cfcProperCase)) {\n                            this.metaData[propertyName].cfcProperCase = this.metaData[propertyName].cfc.charAt(0).toLowerCase() + this.metaData[propertyName].cfc.slice(1);\n                        }\n                        return this.metaData[propertyName];\n                    }\n                }\n            };\n            angular.forEach(relatedAttributes, function (attributeSet) {\n                angular.forEach(attributeSet.attributes, function (attribute) {\n                    if (attribute && attribute.attributeCode) {\n                        Object.defineProperty(_jsEntities[entity.className].prototype, attribute.attributeCode, {\n                            configurable: true,\n                            enumerable: false,\n                            get: function () {\n                                if (attribute != null && this.data[attribute.attributeCode] == null) {\n                                    return undefined;\n                                }\n                                return this.data[attribute.attributeCode];\n                            },\n                            set: function (value) {\n                                this.data[attribute.attributeCode] = value;\n                            }\n                        });\n                    }\n                });\n            });\n            angular.forEach(entity, function (property) {\n                if (angular.isObject(property) && angular.isDefined(property.name)) {\n                    //if(angular.isUndefined(property.persistent)){\n                    if (angular.isDefined(property.fieldtype)) {\n                        if (['many-to-one'].indexOf(property.fieldtype) >= 0) {\n                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {\n                                var thisEntityInstance = this;\n                                if (angular.isDefined(this['$$get' + this.$$getIDName().charAt(0).toUpperCase() + this.$$getIDName().slice(1)]())) {\n                                    var options = {\n                                        columnsConfig: angular.toJson([\n                                            {\n                                                \"propertyIdentifier\": \"_\" + this.metaData.className.toLowerCase() + \"_\" + property.name\n                                            }\n                                        ]),\n                                        joinsConfig: angular.toJson([\n                                            {\n                                                \"associationName\": property.name,\n                                                \"alias\": \"_\" + this.metaData.className.toLowerCase() + \"_\" + property.name\n                                            }\n                                        ]),\n                                        filterGroupsConfig: angular.toJson([{\n                                                \"filterGroup\": [\n                                                    {\n                                                        \"propertyIdentifier\": \"_\" + this.metaData.className.toLowerCase() + \".\" + this.$$getIDName(),\n                                                        \"comparisonOperator\": \"=\",\n                                                        \"value\": this.$$getID()\n                                                    }\n                                                ]\n                                            }]),\n                                        allRecords: true\n                                    };\n                                    var collectionPromise = $delegate.getEntity(entity.className, options);\n                                    collectionPromise.then(function (response) {\n                                        for (var i in response.records) {\n                                            var entityInstance = $delegate.newEntity(thisEntityInstance.metaData[property.name].cfc);\n                                            //Removed the array index here at the end of local.property.name.\n                                            if (angular.isArray(response.records[i][property.name])) {\n                                                entityInstance.$$init(response.records[i][property.name][0]);\n                                            }\n                                            else {\n                                                entityInstance.$$init(response.records[i][property.name]); //Shouldn't have the array index'\n                                            }\n                                            thisEntityInstance['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)](entityInstance);\n                                        }\n                                    });\n                                    return collectionPromise;\n                                }\n                                return null;\n                            };\n                            _jsEntities[entity.className].prototype['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function (entityInstance) {\n                                var thisEntityInstance = this;\n                                var metaData = this.metaData;\n                                var manyToManyName = '';\n                                //if entityInstance is not passed in, clear related object\n                                if (angular.isUndefined(entityInstance)) {\n                                    if (angular.isDefined(thisEntityInstance.data[property.name])) {\n                                        delete thisEntityInstance.data[property.name];\n                                    }\n                                    if (!thisEntityInstance.parents) {\n                                        return;\n                                    }\n                                    for (var i = 0; i <= thisEntityInstance.parents.length; i++) {\n                                        if (angular.isDefined(thisEntityInstance.parents[i]) && thisEntityInstance.parents[i].name == property.name.charAt(0).toLowerCase() + property.name.slice(1)) {\n                                            thisEntityInstance.parents.splice(i, 1);\n                                        }\n                                    }\n                                    return;\n                                }\n                                if (property.name === 'parent' + this.metaData.className) {\n                                    var childName = 'child' + this.metaData.className;\n                                    manyToManyName = entityInstance.metaData.$$getManyToManyName(childName);\n                                }\n                                else if (entityInstance.metaData) {\n                                    manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + metaData.className.slice(1));\n                                }\n                                // else{\n                                //     manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + metaData.className.slice(1));\n                                // }\n                                if (angular.isUndefined(thisEntityInstance.parents)) {\n                                    thisEntityInstance.parents = [];\n                                }\n                                thisEntityInstance.parents.push(thisEntityInstance.metaData[property.name]);\n                                if (angular.isDefined(manyToManyName) && manyToManyName.length) {\n                                    if (angular.isUndefined(entityInstance.children)) {\n                                        entityInstance.children = [];\n                                    }\n                                    var child = entityInstance.metaData[manyToManyName];\n                                    if (entityInstance.children.indexOf(child) === -1) {\n                                        entityInstance.children.push(child);\n                                    }\n                                    if (angular.isUndefined(entityInstance.data[manyToManyName])) {\n                                        entityInstance.data[manyToManyName] = [];\n                                    }\n                                    entityInstance.data[manyToManyName].push(thisEntityInstance);\n                                }\n                                thisEntityInstance.data[property.name] = entityInstance;\n                            };\n                            if (property.name !== 'data' && property.name !== 'validations') {\n                                Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {\n                                    configurable: true,\n                                    enumerable: false,\n                                    get: function () {\n                                        if (this.data[property.name] == null) {\n                                            return undefined;\n                                        }\n                                        return this.data[property.name];\n                                    },\n                                    set: function (value) {\n                                        this['$$set' + property.name.charAt(0).toUpperCase() + property.name.slice(1)](value);\n                                    }\n                                });\n                            }\n                        }\n                        else if (['one-to-many', 'many-to-many'].indexOf(property.fieldtype) >= 0) {\n                            if (!property.singularname) {\n                                throw ('need to define a singularname for ' + property.fieldtype);\n                            }\n                            _jsEntities[entity.className].prototype['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)] = function (entityInstance) {\n                                if (angular.isUndefined(entityInstance)) {\n                                    var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);\n                                }\n                                var metaData = this.metaData;\n                                if (metaData[property.name].fieldtype === 'one-to-many') {\n                                    entityInstance.data[metaData[property.name].fkcolumn.slice(0, -2)] = this;\n                                }\n                                else if (metaData[property.name].fieldtype === 'many-to-many') {\n                                    var manyToManyName = entityInstance.metaData.$$getManyToManyName(metaData.className.charAt(0).toLowerCase() + this.metaData.className.slice(1));\n                                    if (angular.isUndefined(entityInstance.data[manyToManyName])) {\n                                        entityInstance.data[manyToManyName] = [];\n                                    }\n                                    entityInstance.data[manyToManyName].push(this);\n                                }\n                                if (angular.isDefined(metaData[property.name])) {\n                                    if (angular.isDefined(entityInstance.metaData[metaData[property.name].fkcolumn.slice(0, -2)])) {\n                                        if (angular.isUndefined(entityInstance.parents)) {\n                                            entityInstance.parents = [];\n                                        }\n                                        entityInstance.parents.push(entityInstance.metaData[metaData[property.name].fkcolumn.slice(0, -2)]);\n                                    }\n                                    if (angular.isUndefined(this.children)) {\n                                        this.children = [];\n                                    }\n                                    var child = metaData[property.name];\n                                    if (this.children.indexOf(child) === -1) {\n                                        this.children.push(child);\n                                    }\n                                }\n                                if (angular.isUndefined(this.data[property.name])) {\n                                    this.data[property.name] = [];\n                                }\n                                this.data[property.name].push(entityInstance);\n                                return entityInstance;\n                            };\n                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {\n                                var thisEntityInstance = this;\n                                if (angular.isDefined(this['$$get' + this.$$getIDName().charAt(0).toUpperCase() + this.$$getIDName().slice(1)])) {\n                                    var options = {\n                                        filterGroupsConfig: angular.toJson([{\n                                                \"filterGroup\": [\n                                                    {\n                                                        \"propertyIdentifier\": \"_\" + property.cfc.toLowerCase() + \".\" + property.fkcolumn.replace('ID', '') + \".\" + this.$$getIDName(),\n                                                        \"comparisonOperator\": \"=\",\n                                                        \"value\": this.$$getID()\n                                                    }\n                                                ]\n                                            }]),\n                                        allRecords: true\n                                    };\n                                    var collectionPromise = $delegate.getEntity(property.cfc, options);\n                                    collectionPromise.then(function (response) {\n                                        var entityInstances = [];\n                                        for (var i in response.records) {\n                                            var entityInstance = thisEntityInstance['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)]();\n                                            entityInstance.$$init(response.records[i]);\n                                            if (angular.isUndefined(thisEntityInstance[property.name])) {\n                                                thisEntityInstance[property.name] = [];\n                                            }\n                                            entityInstances.push(entityInstance);\n                                        }\n                                        thisEntityInstance.data[property.name] = entityInstances;\n                                    });\n                                    return collectionPromise;\n                                }\n                            };\n                            Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {\n                                configurable: true,\n                                enumerable: false,\n                                get: function () {\n                                    if (this.data[property.name] == null) {\n                                        return undefined;\n                                    }\n                                    return this.data[property.name];\n                                },\n                                set: function (value) {\n                                    this.data[property.name] = [];\n                                    if (angular.isArray(value)) {\n                                        for (var i = 0; i < value.length; i++) {\n                                            var item = value[i];\n                                            var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);\n                                            entityInstance.$$init(item);\n                                            this['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)](entityInstance);\n                                        }\n                                    }\n                                    else {\n                                        var entityInstance = $delegate.newEntity(this.metaData[property.name].cfc);\n                                        entityInstance.$$init(value);\n                                        this['$$add' + property.singularname.charAt(0).toUpperCase() + property.singularname.slice(1)](entityInstance);\n                                    }\n                                }\n                            });\n                        }\n                        else {\n                            if (['id'].indexOf(property.fieldtype) >= 0) {\n                                _jsEntities[entity.className].prototype['$$getID'] = function () {\n                                    //this should retreive id from the metadata\n                                    return this.data[this.$$getIDName()];\n                                };\n                                _jsEntities[entity.className].prototype['$$getIDName'] = function () {\n                                    var IDNameString = property.name;\n                                    return IDNameString;\n                                };\n                            }\n                            if (property.name !== 'data' && property.name !== 'validations') {\n                                Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {\n                                    configurable: true,\n                                    enumerable: false,\n                                    get: function () {\n                                        if (this.data[property.name] == null) {\n                                            return undefined;\n                                        }\n                                        return this.data[property.name];\n                                    },\n                                    set: function (value) {\n                                        this.data[property.name] = value;\n                                    }\n                                });\n                            }\n                            _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {\n                                return this.data[property.name];\n                            };\n                        }\n                    }\n                    else {\n                        if (property.name !== 'data' && property.name !== 'validations') {\n                            Object.defineProperty(_jsEntities[entity.className].prototype, property.name, {\n                                configurable: true,\n                                enumerable: false,\n                                get: function () {\n                                    if (this.data[property.name] == null) {\n                                        return undefined;\n                                    }\n                                    return this.data[property.name];\n                                },\n                                set: function (value) {\n                                    this.data[property.name] = value;\n                                }\n                            });\n                        }\n                        _jsEntities[entity.className].prototype['$$get' + property.name.charAt(0).toUpperCase() + property.name.slice(1)] = function () {\n                            return this.data[property.name];\n                        };\n                    }\n                    //}\n                }\n            });\n        });\n        $delegate.setJsEntities(_jsEntities);\n        angular.forEach(_jsEntities, function (jsEntity) {\n            var jsEntityInstance = new jsEntity;\n            _jsEntityInstances[jsEntityInstance.metaData.className] = jsEntityInstance;\n        });\n        $delegate.setJsEntityInstances(_jsEntityInstances);\n        var _init = function (entityInstance, data) {\n            hibachiValidationService.init(entityInstance, data);\n        };\n        var _getPropertyTitle = function (propertyName, metaData) {\n            return $delegate.getPropertyTitle(propertyName, metaData);\n        };\n        var _getPropertyHint = function (propertyName, metaData) {\n            var propertyMetaData = metaData[propertyName];\n            var keyValue = '';\n            if (angular.isDefined(propertyMetaData['hb_rbkey'])) {\n                keyValue = metaData.$$getRBKey(propertyMetaData['hb_rbkey'] + '_hint');\n            }\n            else if (angular.isUndefined(propertyMetaData['persistent']) || (angular.isDefined(propertyMetaData['persistent']) && propertyMetaData['persistent'] === true)) {\n                keyValue = metaData.$$getRBKey('entity.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + '_hint');\n            }\n            else {\n                keyValue = metaData.$$getRBKey('object.' + metaData.className.toLowerCase() + '.' + propertyName.toLowerCase());\n            }\n            if (keyValue.slice(-8) !== '_missing') {\n                return keyValue;\n            }\n            return '';\n        };\n        var _getPropertyFieldType = function (propertyName, metaData) {\n            var propertyMetaData = metaData[propertyName];\n            if (angular.isDefined(propertyMetaData['hb_formfieldtype'])) {\n                return propertyMetaData['hb_formfieldtype'];\n            }\n            if (angular.isUndefined(propertyMetaData.fieldtype) || propertyMetaData.fieldtype === 'column') {\n                var dataType = \"\";\n                if (angular.isDefined(propertyMetaData.ormtype)) {\n                    dataType = propertyMetaData.ormtype;\n                }\n                else if (angular.isDefined(propertyMetaData.type)) {\n                    dataType = propertyMetaData.type;\n                }\n                if ([\"boolean\", \"yes_no\", \"true_false\"].indexOf(dataType) > -1) {\n                    return \"yesno\";\n                }\n                else if ([\"date\", \"timestamp\"].indexOf(dataType) > -1) {\n                    return \"dateTime\";\n                }\n                else if (\"array\" === dataType) {\n                    return \"select\";\n                }\n                else if (\"struct\" === dataType) {\n                    return \"checkboxgroup\";\n                }\n                else if (propertyName.indexOf('password') > -1) {\n                    return \"password\";\n                }\n            }\n            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'many-to-one') {\n                return 'select';\n            }\n            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'one-to-many') {\n                return 'There is no property field type for one-to-many relationship properties, which means that you cannot get a fieldtype for ' + propertyName;\n            }\n            else if (angular.isDefined(propertyMetaData.fieldtype) && propertyMetaData.fieldtype === 'many-to-many') {\n                return \"listingMultiselect\";\n            }\n            return \"text\";\n        };\n        var _getPropertyFormatType = function (propertyName, metaData) {\n            if (!propertyName || !metaData) {\n                return 'none';\n            }\n            var propertyMetaData = metaData[propertyName];\n            if (propertyMetaData['hb_formattype']) {\n                return propertyMetaData['hb_formattype'];\n            }\n            else if (angular.isUndefined(propertyMetaData.fieldtype) || propertyMetaData.fieldtype === 'column') {\n                var dataType = \"\";\n                if (angular.isDefined(propertyMetaData.ormtype)) {\n                    dataType = propertyMetaData.ormtype;\n                }\n                else if (angular.isDefined(propertyMetaData.type)) {\n                    dataType = propertyMetaData.type;\n                }\n                if ([\"boolean\", \"yes_no\", \"true_false\"].indexOf(dataType) > -1) {\n                    return \"yesno\";\n                }\n                else if ([\"date\", \"timestamp\"].indexOf(dataType) > -1) {\n                    return \"dateTime\";\n                }\n                else if ([\"big_decimal\"].indexOf(dataType) > -1 && propertyName.slice(-6) === 'weight') {\n                    return \"weight\";\n                }\n                else if ([\"big_decimal\"].indexOf(dataType) > -1) {\n                    return \"currency\";\n                }\n            }\n            return 'none';\n        };\n        var _isSimpleValue = function (value) {\n            return !!(angular.isString(value) || angular.isNumber(value)\n                || angular.isDate(value) || value === false || value === true);\n        };\n        var _getFormattedValue = function (propertyName, formatType, entityInstance) {\n            var value = entityInstance.$$getPropertyByName(propertyName);\n            if (angular.isUndefined(formatType)) {\n                formatType = entityInstance.metaData.$$getPropertyFormatType(propertyName);\n            }\n            if (formatType === \"custom\") {\n                //to be implemented\n                //return entityInstance['$$get'+propertyName+Formatted]();\n            }\n            else if (formatType === \"rbkey\") {\n                if (angular.isDefined(value)) {\n                    return entityInstance.$$getRBKey('entity.' + entityInstance.metaData.className.toLowerCase() + '.' + propertyName.toLowerCase() + '.' + value);\n                }\n                else {\n                    return '';\n                }\n            }\n            if (angular.isUndefined(value)) {\n                var propertyMeta = entityInstance.metaData[propertyName];\n                if (angular.isDefined(propertyMeta['hb_nullRBKey'])) {\n                    return entityInstance.$$getRbKey(propertyMeta['hb_nullRBKey']);\n                }\n                return \"\";\n            }\n            else if (_isSimpleValue(value)) {\n                var formatDetails = {};\n                if (angular.isDefined(entityInstance.data['currencyCode'])) {\n                    formatDetails.currencyCode = entityInstance.$$getCurrencyCode();\n                }\n                return utilityService.formatValue(value, formatType, formatDetails, entityInstance);\n            }\n        };\n        var _delete = function (entityInstance) {\n            var entityName = entityInstance.metaData.className;\n            var entityID = entityInstance.$$getID();\n            var context = 'delete';\n            return $delegate.saveEntity(entityName, entityID, {}, context);\n        };\n        var _setValueByPropertyPath = function (obj, path, value) {\n            var a = path.split('.');\n            var context = obj;\n            var selector;\n            var myregexp = /([a-zA-Z]+)(\\[(\\d)\\])+/; // matches:  item[0]\n            var match = null;\n            for (var i = 0; i < a.length - 1; i += 1) {\n                match = myregexp.exec(a[i]);\n                if (match !== null)\n                    context = context[match[1]][match[3]];\n                else\n                    context = context[a[i]];\n            }\n            // check for ending item[xx] syntax\n            match = myregexp.exec([a[a.length - 1]]);\n            if (match !== null)\n                context[match[1]][match[3]] = value;\n            else\n                context[a[a.length - 1]] = value;\n        };\n        var _getValueByPropertyPath = function (obj, path) {\n            var paths = path.split('.'), current = obj, i;\n            for (i = 0; i < paths.length; ++i) {\n                if (current[paths[i]] == undefined) {\n                    return undefined;\n                }\n                else {\n                    current = current[paths[i]];\n                }\n            }\n            return current;\n        };\n        var _addReturnedIDs = function (returnedIDs, entityInstance) {\n            for (var key in returnedIDs) {\n                if (angular.isArray(returnedIDs[key])) {\n                    var arrayItems = returnedIDs[key];\n                    var entityInstanceArray = entityInstance.data[key];\n                    for (var i in arrayItems) {\n                        var arrayItem = arrayItems[i];\n                        var entityInstanceArrayItem = entityInstance.data[key][i];\n                        _addReturnedIDs(arrayItem, entityInstanceArrayItem);\n                    }\n                }\n                else if (angular.isObject(returnedIDs[key])) {\n                    for (var k in returnedIDs[key]) {\n                        _addReturnedIDs(returnedIDs[key][k], entityInstance.data[key][k]);\n                    }\n                }\n                else {\n                    entityInstance.data[key] = returnedIDs[key];\n                }\n            }\n        };\n        var _save = function (entityInstance) {\n            var deferred = $q.defer();\n            $timeout(function () {\n                //$log.debug('save begin');\n                //$log.debug(entityInstance);\n                var entityID = entityInstance.$$getID();\n                var modifiedData = _getModifiedData(entityInstance);\n                //$log.debug('modifiedData complete');\n                //$log.debug(modifiedData);\n                //timeoutPromise.valid = modifiedData.valid;\n                if (modifiedData.valid) {\n                    var params = {};\n                    params.serializedJsonData = utilityService.toJson(modifiedData.value);\n                    //if we have a process object then the context is different from the standard save\n                    var entityName = '';\n                    var context = 'save';\n                    if (entityInstance.metaData.isProcessObject === 1) {\n                        var processStruct = modifiedData.objectLevel.metaData.className.split('_');\n                        entityName = processStruct[0];\n                        context = processStruct[1];\n                    }\n                    else {\n                        entityName = modifiedData.objectLevel.metaData.className;\n                    }\n                    var savePromise = $delegate.saveEntity(entityName, entityID, params, context);\n                    savePromise.then(function (response) {\n                        var returnedIDs = response.data;\n                        if ((angular.isDefined(response.SUCCESS) && response.SUCCESS === true)\n                            || (angular.isDefined(response.success) && response.success === true)) {\n                            if ($location.url() == '/entity/' + entityName + '/create' && response.data[modifiedData.objectLevel.$$getIDName()]) {\n                                $location.path('/entity/' + entityName + '/' + response.data[modifiedData.objectLevel.$$getIDName()], false);\n                            }\n                            _addReturnedIDs(returnedIDs, modifiedData.objectLevel);\n                            deferred.resolve(returnedIDs);\n                            observerService.notify('saveSuccess', returnedIDs);\n                            observerService.notify('saveSuccess' + entityName, returnedIDs);\n                        }\n                        else {\n                            deferred.reject(angular.isDefined(response.messages) ? response.messages : response);\n                            observerService.notify('saveFailed', response);\n                            observerService.notify('saveFailed' + entityName, response);\n                        }\n                    }, function (reason) {\n                        deferred.reject(reason);\n                        observerService.notify('saveFailed', reason);\n                        observerService.notify('saveFailed' + entityName, reason);\n                    });\n                }\n                else {\n                    //select first, visible, and enabled input with a class of ng-invalid\n                    var target = $('input.ng-invalid:first:visible:enabled');\n                    if (angular.isDefined(target)) {\n                        target.focus();\n                        var targetID = target.attr('id');\n                        $anchorScroll();\n                    }\n                    deferred.reject('Input is invalid.');\n                    observerService.notify('validationFailed');\n                    observerService.notify('validationFailed' + entityName);\n                }\n            });\n            //return timeoutPromise;\n            return deferred.promise;\n            /*\n\n            */\n        };\n        var _getModifiedData = function (entityInstance) {\n            var modifiedData = {};\n            modifiedData = getModifiedDataByInstance(entityInstance);\n            return modifiedData;\n        };\n        var getObjectSaveLevel = function (entityInstance) {\n            return hibachiValidationService.getObjectSaveLevel(entityInstance);\n        };\n        var validateObject = function (entityInstance) {\n            return hibachiValidationService.validateObject;\n        };\n        var validateChildren = function (entityInstance) {\n            return hibachiValidationService.validateChildren(entityInstance);\n        };\n        var processChild = function (entityInstance, entityInstanceParent) {\n            return hibachiValidationService.processChild(entityInstance, entityInstanceParent);\n        };\n        var processParent = function (entityInstance) {\n            return hibachiValidationService.processParent(entityInstance);\n        };\n        var processForm = function (form, entityInstance) {\n            return hibachiValidationService.processForm(form, entityInstance);\n        };\n        var getDataFromParents = function (entityInstance, entityInstanceParents) {\n            return hibachiValidationService.getDataFromParents(entityInstance, entityInstanceParents);\n        };\n        var getDataFromChildren = function (entityInstance) {\n            return hibachiValidationService.getDataFromChildren(entityInstance);\n        };\n        var getModifiedDataByInstance = function (entityInstance) {\n            return hibachiValidationService.getModifiedDataByInstance(entityInstance);\n        };\n        var _getValidationsByProperty = function (entityInstance, property) {\n            return hibachiValidationService.getValidationsByProperty(entityInstance, property);\n        };\n        var _getValidationByPropertyAndContext = function (entityInstance, property, context) {\n            return hibachiValidationService.getValidationByPropertyAndContext(entityInstance, property, context);\n        };\n        return $delegate;\n    }\n    return HibachiServiceDecorator;\n}());\nexports.HibachiServiceDecorator = HibachiServiceDecorator;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachiservicedecorator.ts?")},"../../../org/Hibachi/client/src/core/services/hibachivalidationservice.ts":
/*!******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachivalidationservice.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar HibachiValidationService = /** @class */ (function () {\n    //@ngInject\n    function HibachiValidationService($log) {\n        var _this = this;\n        this.$log = $log;\n        this.getObjectSaveLevel = function (entityInstance) {\n            var objectLevel = entityInstance;\n            var entityID = entityInstance.$$getID();\n            angular.forEach(entityInstance.parents, function (parentObject) {\n                if (angular.isDefined(entityInstance.data[parentObject.name]) && entityInstance.data[parentObject.name].$$getID() === '' && (angular.isUndefined(entityID) || !entityID.trim().length)) {\n                    var parentEntityInstance = entityInstance.data[parentObject.name];\n                    var parentEntityID = parentEntityInstance.$$getID();\n                    if (parentEntityID === '' && parentEntityInstance.forms) {\n                        objectLevel = _this.getObjectSaveLevel(parentEntityInstance);\n                    }\n                }\n            });\n            return objectLevel;\n        };\n        this.getModifiedDataByInstance = function (entityInstance) {\n            var modifiedData = {};\n            var objectSaveLevel = _this.getObjectSaveLevel(entityInstance);\n            _this.$log.debug('objectSaveLevel : ' + objectSaveLevel);\n            var valueStruct = _this.validateObject(objectSaveLevel);\n            _this.$log.debug('validateObject data');\n            _this.$log.debug(valueStruct.value);\n            modifiedData = {\n                objectLevel: objectSaveLevel,\n                value: valueStruct.value,\n                valid: valueStruct.valid\n            };\n            return modifiedData;\n        };\n        this.getValidationByPropertyAndContext = function (entityInstance, property, context) {\n            var validations = _this.getValidationsByProperty(entityInstance, property);\n            for (var i in validations) {\n                var contexts = validations[i].contexts.split(',');\n                for (var j in contexts) {\n                    if (contexts[j] === context) {\n                        return validations[i];\n                    }\n                }\n            }\n        };\n        this.getValidationsByProperty = function (entityInstance, property) {\n            return entityInstance.validations.properties[property];\n        };\n        this.validateObject = function (entityInstance) {\n            var modifiedData = {};\n            var valid = true;\n            var forms = entityInstance.forms;\n            _this.$log.debug('process base level data');\n            for (var f in forms) {\n                var form = forms[f];\n                form.$setSubmitted(); //Sets the form to submitted for the validation errors to pop up.\n                if (form.$dirty && form.$valid) {\n                    for (var key in form) {\n                        _this.$log.debug('key:' + key);\n                        if (key.charAt(0) !== '$' && angular.isObject(form[key])) {\n                            var inputField = form[key];\n                            if (typeof inputField.$modelValue != 'undefined' && inputField.$modelValue !== '') {\n                                inputField.$dirty = true;\n                            }\n                            if (angular.isDefined(inputField.$valid) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {\n                                if (angular.isDefined(entityInstance.metaData[key])\n                                    && angular.isDefined(entityInstance.metaData[key].hb_formfieldtype)\n                                    && entityInstance.metaData[key].hb_formfieldtype === 'json') {\n                                    modifiedData[key] = angular.toJson(inputField.$modelValue);\n                                }\n                                else {\n                                    modifiedData[key] = inputField.$modelValue;\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (!form.$valid) {\n                        valid = false;\n                    }\n                }\n            }\n            modifiedData[entityInstance.$$getIDName()] = entityInstance.$$getID();\n            _this.$log.debug(modifiedData);\n            _this.$log.debug('process parent data');\n            if (angular.isDefined(entityInstance.parents)) {\n                for (var p in entityInstance.parents) {\n                    var parentObject = entityInstance.parents[p];\n                    var parentInstance = entityInstance.data[parentObject.name];\n                    if (angular.isUndefined(modifiedData[parentObject.name])) {\n                        modifiedData[parentObject.name] = {};\n                    }\n                    var forms = parentInstance.forms;\n                    for (var f in forms) {\n                        var form = forms[f];\n                        form.$setSubmitted();\n                        if (form.$dirty && form.$valid) {\n                            for (var key in form) {\n                                if (key.charAt(0) !== '$' && angular.isObject(form[key])) {\n                                    var inputField = form[key];\n                                    if (typeof inputField.$modelValue != 'undefined' && inputField.$modelValue !== '') {\n                                        inputField.$dirty = true;\n                                    }\n                                    if (angular.isDefined(inputField) && angular.isDefined(inputField.$valid) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {\n                                        if (angular.isDefined(parentInstance.metaData[key])\n                                            && angular.isDefined(parentInstance.metaData[key].hb_formfieldtype)\n                                            && parentInstance.metaData[key].hb_formfieldtype === 'json') {\n                                            modifiedData[parentObject.name][key] = angular.toJson(inputField.$modelValue);\n                                        }\n                                        else {\n                                            modifiedData[parentObject.name][key] = inputField.$modelValue;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (!form.$valid) {\n                                valid = false;\n                            }\n                        }\n                    }\n                    modifiedData[parentObject.name][parentInstance.$$getIDName()] = parentInstance.$$getID();\n                }\n            }\n            _this.$log.debug(modifiedData);\n            _this.$log.debug('begin child data');\n            var childrenData = _this.validateChildren(entityInstance);\n            _this.$log.debug('child Data');\n            _this.$log.debug(childrenData);\n            angular.extend(modifiedData, childrenData);\n            return {\n                valid: valid,\n                value: modifiedData\n            };\n        };\n        this.validateChildren = function (entityInstance) {\n            var data = {};\n            if (angular.isDefined(entityInstance.children) && entityInstance.children.length) {\n                data = _this.getDataFromChildren(entityInstance);\n            }\n            return data;\n        };\n        this.init = function (entityInstance, data) {\n            for (var key in data) {\n                if (key.charAt(0) !== '$' && angular.isDefined(entityInstance.metaData[key])) {\n                    var propertyMetaData = entityInstance.metaData[key];\n                    if (angular.isDefined(propertyMetaData) && angular.isDefined(propertyMetaData.hb_formfieldtype) && propertyMetaData.hb_formfieldtype === 'json') {\n                        if (data[key].trim() !== '') {\n                            entityInstance.data[key] = angular.fromJson(data[key]);\n                        }\n                    }\n                    else {\n                        entityInstance.data[key] = data[key];\n                    }\n                }\n            }\n        };\n        this.processForm = function (form, entityInstance) {\n            _this.$log.debug('begin process form');\n            var data = {};\n            form.$setSubmitted();\n            for (var key in form) {\n                if (key.charAt(0) !== '$' && angular.isObject(form[key])) {\n                    var inputField = form[key];\n                    if (inputField.$modelValue) {\n                        inputField.$dirty = true;\n                    }\n                    if (angular.isDefined(inputField) && angular.isDefined(inputField) && inputField.$valid === true && (inputField.$dirty === true || (form.autoDirty && form.autoDirty == true))) {\n                        if (angular.isDefined(entityInstance.metaData[key]) && angular.isDefined(entityInstance.metaData[key].hb_formfieldtype) && entityInstance.metaData[key].hb_formfieldtype === 'json') {\n                            data[key] = angular.toJson(inputField.$modelValue);\n                        }\n                        else {\n                            data[key] = inputField.$modelValue;\n                        }\n                    }\n                }\n            }\n            data[entityInstance.$$getIDName()] = entityInstance.$$getID();\n            _this.$log.debug('process form data');\n            _this.$log.debug(data);\n            return data;\n        };\n        this.processParent = function (entityInstance) {\n            var data = {};\n            if (entityInstance.$$getID() !== '') {\n                data[entityInstance.$$getIDName()] = entityInstance.$$getID();\n            }\n            _this.$log.debug('processParent');\n            _this.$log.debug(entityInstance);\n            var forms = entityInstance.forms;\n            for (var f in forms) {\n                var form = forms[f];\n                data = angular.extend(data, _this.processForm(form, entityInstance));\n            }\n            return data;\n        };\n        this.processChild = function (entityInstance, entityInstanceParent) {\n            var data = {};\n            var forms = entityInstance.forms;\n            for (var f in forms) {\n                var form = forms[f];\n                angular.extend(data, _this.processForm(form, entityInstance));\n            }\n            if (angular.isDefined(entityInstance.children) && entityInstance.children.length) {\n                var childData = _this.getDataFromChildren(entityInstance);\n                angular.extend(data, childData);\n            }\n            if (angular.isDefined(entityInstance.parents) && entityInstance.parents.length) {\n                var parentData = _this.getDataFromParents(entityInstance, entityInstanceParent);\n                angular.extend(data, parentData);\n            }\n            return data;\n        };\n        this.getDataFromParents = function (entityInstance, entityInstanceParent) {\n            var data = {};\n            for (var c in entityInstance.parents) {\n                var parentMetaData = entityInstance.parents[c];\n                if (angular.isDefined(parentMetaData)) {\n                    var parent = entityInstance.data[parentMetaData.name];\n                    if (angular.isObject(parent) && entityInstanceParent !== parent && parent.$$getID() !== '') {\n                        if (angular.isUndefined(data[parentMetaData.name])) {\n                            data[parentMetaData.name] = {};\n                        }\n                        var parentData = _this.processParent(parent);\n                        _this.$log.debug('parentData:' + parentMetaData.name);\n                        _this.$log.debug(parentData);\n                        angular.extend(data[parentMetaData.name], parentData);\n                    }\n                    else {\n                    }\n                }\n            }\n            ;\n            return data;\n        };\n        this.getDataFromChildren = function (entityInstance) {\n            var data = {};\n            _this.$log.debug('childrenFound');\n            _this.$log.debug(entityInstance.children);\n            for (var c in entityInstance.children) {\n                var childMetaData = entityInstance.children[c];\n                var children = entityInstance.data[childMetaData.name];\n                _this.$log.debug(childMetaData);\n                _this.$log.debug(children);\n                if (angular.isArray(entityInstance.data[childMetaData.name])) {\n                    if (angular.isUndefined(data[childMetaData.name])) {\n                        data[childMetaData.name] = [];\n                    }\n                    angular.forEach(entityInstance.data[childMetaData.name], function (child, key) {\n                        _this.$log.debug('process child array item');\n                        var childData = _this.processChild(child, entityInstance);\n                        _this.$log.debug('process child return');\n                        _this.$log.debug(childData);\n                        data[childMetaData.name].push(childData);\n                    });\n                }\n                else {\n                    if (angular.isUndefined(data[childMetaData.name])) {\n                        data[childMetaData.name] = {};\n                    }\n                    var child = entityInstance.data[childMetaData.name];\n                    _this.$log.debug('begin process child');\n                    var childData = _this.processChild(child, entityInstance);\n                    _this.$log.debug('process child return');\n                    _this.$log.debug(childData);\n                    angular.extend(data, childData);\n                }\n            }\n            _this.$log.debug('returning child data');\n            _this.$log.debug(data);\n            return data;\n        };\n        this.$log = $log;\n    }\n    return HibachiValidationService;\n}());\nexports.HibachiValidationService = HibachiValidationService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/hibachivalidationservice.ts?")},"../../../org/Hibachi/client/src/core/services/historyservice.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/historyservice.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar HistoryService = /** @class */ (function () {\n    //ngInject\n    function HistoryService() {\n        var _this = this;\n        this.histories = {};\n        this.recordHistory = function (key, data, overwrite) {\n            if (overwrite === void 0) { overwrite = false; }\n            if (angular.isUndefined(_this.histories[key]) || overwrite) {\n                _this.histories[key] = [];\n            }\n            _this.histories[key].push(data);\n        };\n        this.hasHistory = function (key) {\n            return angular.isDefined(_this.histories[key]);\n        };\n        this.getHistory = function (key) {\n            if (angular.isDefined(_this.histories[key])) {\n                return _this.histories[key];\n            }\n        };\n        this.deleteHistory = function (key) {\n            _this.histories[key] = [];\n        };\n    }\n    return HistoryService;\n}());\nexports.HistoryService = HistoryService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/historyservice.ts?')},"../../../org/Hibachi/client/src/core/services/localstorageservice.ts":
/*!*************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/localstorageservice.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LocalStorageService = /** @class */ (function () {\n    //@ngInject\n    function LocalStorageService($window) {\n        var _this = this;\n        this.$window = $window;\n        this.removeItem = function (key) {\n            try {\n                _this.$window.localStorage.removeItem(key);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        };\n        this.hasItem = function (key) {\n            //try catch to handle safari in private mode which does not allow localstorage\n            try {\n                return (_this.$window.localStorage.getItem(key)\n                    && _this.$window.localStorage.getItem(key) !== null\n                    && _this.$window.localStorage.getItem(key) !== \"undefined\");\n            }\n            catch (e) {\n                return false;\n            }\n        };\n        this.getItem = function (key) {\n            var value = _this.$window.localStorage.getItem(key);\n            if (value.charAt(0) === '{' || value.charAt(0) === '[') {\n                value = angular.fromJson(value);\n            }\n            return value;\n        };\n        this.setItem = function (key, data) {\n            //try catch to handle safari in private mode which does not allow localstorage\n            try {\n                if (angular.isObject(data) || angular.isArray(data)) {\n                    data = angular.toJson(data);\n                }\n                _this.$window.localStorage.setItem(key, data);\n            }\n            catch (e) {\n            }\n        };\n        this.$window = $window;\n    }\n    return LocalStorageService;\n}());\nexports.LocalStorageService = LocalStorageService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/localstorageservice.ts?")},"../../../org/Hibachi/client/src/core/services/metadataservice.ts":
/*!*********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/metadataservice.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar MetaDataService = /** @class */ (function () {\n    //@ngInject\n    function MetaDataService($filter, $log) {\n        var _this = this;\n        this.$filter = $filter;\n        this.$log = $log;\n        this.getPropertyHintByObjectAndPropertyIdentifier = function (object, propertyIdentifier) {\n            var hint = \"\";\n            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {\n                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {\n                    hint = object.metaData && object.metaData[propertyIdentifier].attributeHint;\n                }\n                else {\n                    hint = object.metaData.$$getPropertyHint(propertyIdentifier);\n                }\n            }\n            return hint;\n        };\n        this.getPropertyTitle = function (object, propertyIdentifier) {\n            var title = \"\";\n            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {\n                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {\n                    title = object.metaData && object.metaData[propertyIdentifier].attributeName;\n                }\n                else {\n                    title = object.metaData.$$getPropertyTitle(propertyIdentifier);\n                }\n            }\n            return title;\n        };\n        this.getPropertyFieldType = function (object, propertyIdentifier) {\n            var fieldType = \"\";\n            if (_this.hasPropertyByEntityNameAndPropertyIdentifier(object, propertyIdentifier)) {\n                if (_this.isAttributePropertyByEntityAndPropertyIdentifier(object, propertyIdentifier)) {\n                    fieldType = object.metaData && object.metaData[propertyIdentifier].attributeInputType;\n                }\n                else {\n                    fieldType = object.metaData.$$getPropertyFieldType(propertyIdentifier);\n                }\n            }\n            return fieldType;\n        };\n        this.isAttributePropertyByEntityAndPropertyIdentifier = function (object, propertyIdentifier) {\n            return object.metaData && object.metaData[propertyIdentifier] && object.metaData[propertyIdentifier].attributeCode == propertyIdentifier;\n        };\n        this.hasPropertyByEntityNameAndPropertyIdentifier = function (object, propertyIdentifier) {\n            return object.metaData && object.metaData[propertyIdentifier];\n        };\n        this.getPropertiesList = function () {\n            return _this._propertiesList;\n        };\n        this.getPropertiesListByBaseEntityAlias = function (baseEntityAlias) {\n            return _this._propertiesList[baseEntityAlias];\n        };\n        this.setPropertiesList = function (value, key) {\n            _this._propertiesList[key] = value;\n        };\n        this.formatPropertiesList = function (propertiesList, propertyIdentifier) {\n            if (!propertiesList) {\n                propertiesList = {};\n            }\n            if (!propertiesList.data) {\n                propertiesList.data = [];\n            }\n            var simpleGroup = {\n                $$group: 'simple',\n            };\n            propertiesList.data.push(simpleGroup);\n            var drillDownGroup = {\n                $$group: 'drilldown',\n            };\n            propertiesList.data.push(drillDownGroup);\n            var compareCollections = {\n                $$group: 'compareCollections',\n            };\n            propertiesList.data.push(compareCollections);\n            var attributeCollections = {\n                $$group: 'attribute',\n            };\n            propertiesList.data.push(attributeCollections);\n            for (var i in propertiesList.data) {\n                if (angular.isDefined(propertiesList.data[i].ormtype)) {\n                    if (angular.isDefined(propertiesList.data[i].attributeID)) {\n                        propertiesList.data[i].$$group = 'attribute';\n                    }\n                    else {\n                        propertiesList.data[i].$$group = 'simple';\n                    }\n                }\n                if (angular.isDefined(propertiesList.data[i].fieldtype)) {\n                    if (propertiesList.data[i].fieldtype === 'id') {\n                        propertiesList.data[i].$$group = 'simple';\n                    }\n                    if (propertiesList.data[i].fieldtype === 'many-to-one') {\n                        propertiesList.data[i].$$group = 'drilldown';\n                    }\n                    if (propertiesList.data[i].fieldtype === 'many-to-many' || propertiesList.data[i].fieldtype === 'one-to-many') {\n                        propertiesList.data[i].$$group = 'compareCollections';\n                    }\n                }\n                var divider = '_';\n                if (propertiesList.data[i].$$group == 'simple' || propertiesList.data[i].$$group == 'attribute') {\n                    divider = '.';\n                }\n                propertiesList.data[i].propertyIdentifier = propertyIdentifier + divider + propertiesList.data[i].name;\n            }\n            //propertiesList.data = _orderBy(propertiesList.data,['displayPropertyIdentifier'],false);\n            //--------------------------------Removes empty lines from dropdown.\n            var temp = [];\n            for (var i_1 = 0; i_1 <= propertiesList.data.length - 1; i_1++) {\n                if (propertiesList.data[i_1].propertyIdentifier.indexOf(\".undefined\") != -1 || propertiesList.data[i_1].propertyIdentifier.indexOf(\"_undefined\") != -1) {\n                    _this.$log.debug(\"removing: \" + propertiesList.data[i_1].displayPropertyIdentifier);\n                    propertiesList.data[i_1].displayPropertyIdentifier = \"hide\";\n                }\n                else {\n                    temp.push(propertiesList.data[i_1]);\n                    _this.$log.debug(propertiesList.data[i_1]);\n                }\n            }\n            temp.sort;\n            propertiesList.data = temp;\n            _this.$log.debug(\"----------------------PropertyList\\n\\n\\n\\n\\n\");\n            propertiesList.data = _this._orderBy(propertiesList.data, ['propertyIdentifier'], false);\n            //--------------------------------End remove empty lines.\n        };\n        this.orderBy = function (propertiesList, predicate, reverse) {\n            return _this._orderBy(propertiesList, predicate, reverse);\n        };\n        this.$filter = $filter;\n        this.$log = $log;\n        this._propertiesList = {};\n        this._orderBy = $filter('orderBy');\n    }\n    MetaDataService.$inject = [\n        '$filter',\n        '$log'\n    ];\n    return MetaDataService;\n}());\nexports.MetaDataService = MetaDataService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/metadataservice.ts?")},"../../../org/Hibachi/client/src/core/services/observerservice.ts":
/*!*********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/observerservice.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\n/**\n * @ngdoc service\n * @name sdt.models:ObserverService\n * @description\n * # ObserverService\n * Manages all events inside the application\n *\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseservice_1 = __webpack_require__(/*! ./baseservice */ \"../../../org/Hibachi/client/src/core/services/baseservice.ts\");\nvar ObserverService = /** @class */ (function (_super) {\n    __extends(ObserverService, _super);\n    //@ngInject\n    function ObserverService($timeout, historyService, utilityService) {\n        var _this = \n        /**\n         * @ngdoc property\n         * @name ObserverService#observers\n         * @propertyOf sdt.models:ObserverService\n         * @description object to store all observers in\n         * @returns {object} object\n         */\n        _super.call(this) || this;\n        _this.$timeout = $timeout;\n        _this.historyService = historyService;\n        _this.utilityService = utilityService;\n        /* Declare methods */\n        /**\n         * @ngdoc method\n         * @name ObserverService#attach\n         * @methodOf sdt.models:ObserverService\n         * @param {function} callback the callback function to fire\n         * @param {string} event name of the event\n         * @param {string} id unique id for the object that is listening i.e. namespace\n         * @description adds events listeners\n         */\n        _this.attach = function (callback, event, id) {\n            if (!id) {\n                id = _this.utilityService.createID();\n            }\n            event = event.toLowerCase();\n            id = id.toLowerCase();\n            if (!_this.observers[event]) {\n                _this.observers[event] = {};\n            }\n            if (!_this.observers[event][id])\n                _this.observers[event][id] = [];\n            _this.observers[event][id].push(callback);\n        };\n        /**\n         * @ngdoc method\n         * @name ObserverService#detachById\n         * @methodOf sdt.models:ObserverService\n         * @param {string} id unique id for the object that is listening i.e. namespace\n         * @description removes all events for a specific id from the observers object\n         */\n        _this.detachById = function (id) {\n            id = id.toLowerCase();\n            for (var event in _this.observers) {\n                _this.detachByEventAndId(event, id);\n            }\n        };\n        /**\n         * @ngdoc method\n         * @name ObserverService#detachById\n         * @methodOf sdt.models:ObserverService\n         * @param {string} event name of the event\n         * @description removes removes all the event from the observer object\n         */\n        _this.detachByEvent = function (event) {\n            event = event.toLowerCase();\n            if (event in _this.observers) {\n                delete _this.observers[event];\n            }\n        };\n        /**\n         * @ngdoc method\n         * @name ObserverService#detachByEventAndId\n         * @methodOf sdt.models:ObserverService\n         * @param {string} event name of the event\n         * @param {string} id unique id for the object that is listening i.e. namespace\n         * @description removes removes all callbacks for an id in a specific event from the observer object\n         */\n        _this.detachByEventAndId = function (event, id) {\n            event = event.toLowerCase();\n            id = id.toLowerCase();\n            if (event in _this.observers) {\n                if (id in _this.observers[event]) {\n                    delete _this.observers[event][id];\n                }\n            }\n        };\n        /**\n         * @ngdoc method\n         * @name ObserverService#notify\n         * @methodOf sdt.models:ObserverService\n         * @param {string} event name of the event\n         * @param {string|object|Array|number} parameters pass whatever your listener is expecting\n         * @description notifies all observers of a specific event\n         */\n        _this.notify = function (event, parameters) {\n            console.warn(event, parameters);\n            event = event.toLowerCase();\n            return _this.$timeout(function () {\n                for (var id in _this.observers[event]) {\n                    for (var _i = 0, _a = _this.observers[event][id]; _i < _a.length; _i++) {\n                        var callback = _a[_i];\n                        callback(parameters);\n                    }\n                }\n            });\n        };\n        /**\n         * @ngdoc method\n         * @name ObserverService#notifyById\n         * @methodOf sdt.models:ObserverService\n         * @param {string} event name of the event\n         * @param {string} eventId unique id for the object that is listening i.e. namespace\n         * @param {string|object|Array|number} parameters pass whatever your listener is expecting\n         * @description notifies observers of a specific event by id\n         */\n        _this.notifyById = function (event, eventId, parameters) {\n            console.warn(event, eventId, parameters);\n            event = event.toLowerCase();\n            eventId = eventId.toLowerCase();\n            return _this.$timeout(function () {\n                for (var id in _this.observers[event]) {\n                    if (id != eventId)\n                        continue;\n                    angular.forEach(_this.observers[event][id], function (callback) {\n                        callback(parameters);\n                    });\n                }\n            });\n        };\n        _this.notifyAndRecord = function (event, parameters) {\n            return _this.notify(event, parameters).then(function () {\n                _this.historyService.recordHistory(event, parameters, true);\n            });\n        };\n        _this.observers = {};\n        return _this;\n    }\n    return ObserverService;\n}(baseservice_1.BaseService));\nexports.ObserverService = ObserverService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/observerservice.ts?")},"../../../org/Hibachi/client/src/core/services/orderpaymentservice.ts":
/*!*************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/orderpaymentservice.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseentityservice_1 = __webpack_require__(/*! ./baseentityservice */ \"../../../org/Hibachi/client/src/core/services/baseentityservice.ts\");\nvar OrderPaymentService = /** @class */ (function (_super) {\n    __extends(OrderPaymentService, _super);\n    //@ngInject\n    function OrderPaymentService($injector, $hibachi, utilityService) {\n        var _this = _super.call(this, $injector, $hibachi, utilityService, 'OrderPayment') || this;\n        _this.$injector = $injector;\n        _this.$hibachi = $hibachi;\n        _this.utilityService = utilityService;\n        return _this;\n    }\n    return OrderPaymentService;\n}(baseentityservice_1.BaseEntityService));\nexports.OrderPaymentService = OrderPaymentService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/orderpaymentservice.ts?")},"../../../org/Hibachi/client/src/core/services/orderservice.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/orderservice.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseentityservice_1 = __webpack_require__(/*! ./baseentityservice */ \"../../../org/Hibachi/client/src/core/services/baseentityservice.ts\");\nvar OrderService = /** @class */ (function (_super) {\n    __extends(OrderService, _super);\n    //@ngInject\n    function OrderService($injector, $hibachi, utilityService) {\n        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Order') || this;\n        _this.$injector = $injector;\n        _this.$hibachi = $hibachi;\n        _this.utilityService = utilityService;\n        _this.newOrder_AddOrderPayment = function () {\n            return _this.newProcessObject('Order_AddOrderPayment');\n        };\n        return _this;\n    }\n    return OrderService;\n}(baseentityservice_1.BaseEntityService));\nexports.OrderService = OrderService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/orderservice.ts?")},"../../../org/Hibachi/client/src/core/services/publicservice.ts":
/*!*******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/publicservice.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PublicService = /** @class */ (function () {\n    ///index.cfm/api/scope/\n    //@ngInject\n    function PublicService($http, $q, $window, $location, $hibachi, $injector, requestService, accountService, accountAddressService, cartService, orderService, observerService, appConfig, $timeout) {\n        var _this = this;\n        this.$http = $http;\n        this.$q = $q;\n        this.$window = $window;\n        this.$location = $location;\n        this.$hibachi = $hibachi;\n        this.$injector = $injector;\n        this.requestService = requestService;\n        this.accountService = accountService;\n        this.accountAddressService = accountAddressService;\n        this.cartService = cartService;\n        this.orderService = orderService;\n        this.observerService = observerService;\n        this.appConfig = appConfig;\n        this.$timeout = $timeout;\n        this.requests = {};\n        this.errors = {};\n        this.baseActionPath = \"\";\n        this.months = [{ name: '01 - JAN', value: 1 }, { name: '02 - FEB', value: 2 }, { name: '03 - MAR', value: 3 }, { name: '04 - APR', value: 4 }, { name: '05 - MAY', value: 5 }, { name: '06 - JUN', value: 6 }, { name: '07 - JUL', value: 7 }, { name: '08 - AUG', value: 8 }, { name: '09 - SEP', value: 9 }, { name: '10 - OCT', value: 10 }, { name: '11 - NOV', value: 11 }, { name: '12 - DEC', value: 12 }];\n        this.years = [];\n        this.shippingAddress = \"\";\n        this.accountAddressEditFormIndex = [];\n        this.showStoreSelector = [];\n        this.showEmailSelector = [];\n        this.imagePath = {};\n        this.successfulActions = [];\n        this.failureActions = [];\n        // public hasErrors = ()=>{\n        //     return this.errors.length;\n        // }\n        /**\n         * Helper methods for getting errors from the cart\n         */\n        this.getErrors = function () {\n            _this.errors = {};\n            for (var key in _this.requests) {\n                var request = _this.requests[key];\n                if (Object.keys(request.errors).length) {\n                    _this.errors[key] = request.errors;\n                }\n            }\n            return _this.errors;\n        };\n        /** grab the valid expiration years for credit cards  */\n        this.getExpirationYears = function () {\n            var baseDate = new Date();\n            var today = baseDate.getFullYear();\n            var start = today;\n            for (var i = 0; i <= 15; i++) {\n                _this.years.push({\n                    name: start + i,\n                    value: start + i,\n                });\n            }\n        };\n        /** accessors for account */\n        this.getAccount = function (refresh) {\n            if (refresh === void 0) { refresh = false; }\n            var urlBase = _this.baseActionPath + 'getAccount/';\n            if (!_this.accountDataPromise || refresh) {\n                _this.accountDataPromise = _this.getData(urlBase, \"account\", \"\");\n            }\n            return _this.accountDataPromise;\n        };\n        /** accessors for cart */\n        this.getCart = function (refresh) {\n            if (refresh === void 0) { refresh = false; }\n            var urlBase = _this.baseActionPath + 'getCart/';\n            if (!_this.cartDataPromise || refresh) {\n                _this.cartDataPromise = _this.getData(urlBase, \"cart\", \"\");\n            }\n            return _this.cartDataPromise;\n        };\n        /** accessors for countries */\n        this.getCountries = function (refresh) {\n            if (refresh === void 0) { refresh = false; }\n            var urlBase = _this.baseActionPath + 'getCountries/';\n            if (!_this.countryDataPromise || refresh) {\n                _this.countryDataPromise = _this.getData(urlBase, \"countries\", \"\");\n            }\n            return _this.countryDataPromise;\n        };\n        /** accessors for states */\n        this.getStates = function (countryCode, address, refresh) {\n            if (refresh === void 0) { refresh = false; }\n            if (address && address.data) {\n                countryCode = address.data.countrycode || address.countrycode;\n            }\n            if (typeof address === 'boolean' && !angular.isDefined(refresh)) {\n                refresh = address;\n            }\n            if (!countryCode)\n                countryCode = \"US\";\n            var urlBase = _this.baseActionPath + 'getStateCodeOptionsByCountryCode/';\n            if (!_this.getRequestByAction('getStateCodeOptionsByCountryCode') || !_this.getRequestByAction('getStateCodeOptionsByCountryCode').loading || refresh) {\n                _this.stateDataPromise = _this.getData(urlBase, \"states\", \"?countryCode=\" + countryCode);\n                return _this.stateDataPromise;\n            }\n            return _this.stateDataPromise;\n        };\n        this.refreshAddressOptions = function (address) {\n            _this.getStates(null, address);\n            _this.getAddressOptions(null, address);\n        };\n        this.getStateByStateCode = function (stateCode) {\n            if (!angular.isDefined(_this.states) || !angular.isDefined(_this.states.stateCodeOptions) || !angular.isDefined(stateCode)) {\n                return;\n            }\n            for (var state in _this.states.stateCodeOptions) {\n                if (_this.states.stateCodeOptions[state].value == stateCode) {\n                    return _this.states.stateCodeOptions[state];\n                }\n            }\n        };\n        this.getCountryByCountryCode = function (countryCode) {\n            if (!angular.isDefined(_this.countries) || !angular.isDefined(_this.countries.countryCodeOptions)) {\n                return;\n            }\n            if (!countryCode) {\n                countryCode = 'US';\n            }\n            for (var country in _this.countries.countryCodeOptions) {\n                if (_this.countries.countryCodeOptions[country].value == countryCode) {\n                    return _this.countries.countryCodeOptions[country];\n                }\n            }\n        };\n        /** accessors for states */\n        this.getAddressOptions = function (countryCode, address, refresh) {\n            if (refresh === void 0) { refresh = false; }\n            if (address && address.data) {\n                countryCode = address.data.countrycode || address.countrycode;\n            }\n            if (!angular.isDefined(countryCode))\n                countryCode = \"US\";\n            if (typeof address === 'boolean' && !angular.isDefined(refresh)) {\n                refresh = address;\n            }\n            var urlBase = _this.baseActionPath + 'getAddressOptionsByCountryCode/';\n            if (!_this.getRequestByAction('getAddressOptionsByCountryCode') || !_this.getRequestByAction('getAddressOptionsByCountryCode').loading || refresh) {\n                _this.addressOptionData = _this.getData(urlBase, \"addressOptions\", \"?countryCode=\" + countryCode);\n                return _this.addressOptionData;\n            }\n            return _this.addressOptionData;\n        };\n        /** accessors for states */\n        this.getData = function (url, setter, param) {\n            var urlBase = url + param;\n            var request = _this.requestService.newPublicRequest(urlBase);\n            request.promise.then(function (result) {\n                //don't need account and cart for anything other than account and cart calls.\n                if (setter.indexOf('account') == -1 || setter.indexOf('cart') == -1) {\n                    if (result['account']) {\n                        delete result['account'];\n                    }\n                    if (result['cart']) {\n                        delete result['cart'];\n                    }\n                }\n                if (setter == 'cart' || setter == 'account' && _this[setter] && _this[setter].populate) {\n                    //cart and account return cart and account info flat\n                    _this[setter].populate(result);\n                }\n                else {\n                    //other functions reutrn cart,account and then data\n                    if (setter == 'states') {\n                        _this[setter] = {};\n                        _this.$timeout(function () {\n                            _this[setter] = (result);\n                        });\n                    }\n                    else {\n                        _this[setter] = (result);\n                    }\n                }\n            }).catch(function (reason) {\n            });\n            _this.requests[request.getAction()] = request;\n            return request.promise;\n        };\n        /** sets the current shipping address */\n        this.setShippingAddress = function (shippingAddress) {\n            _this.shippingAddress = shippingAddress;\n        };\n        /** sets the current shipping address */\n        this.setBillingAddress = function (billingAddress) {\n            _this.billingAddress = billingAddress;\n        };\n        /** sets the current billing address */\n        this.selectBillingAddress = function (key) {\n            if (_this.orderPaymentObject && _this.orderPaymentObject.forms) {\n                var address = _this.account.accountAddresses[key].address;\n                address.accountAddressID = _this.account.accountAddresses[key].accountAddressID;\n                for (var property in address) {\n                    for (var form in _this.orderPaymentObject['forms']) {\n                        form = _this.orderPaymentObject['forms'][form];\n                        if (form['newOrderPayment.billingAddress.' + property] != undefined) {\n                            form['newOrderPayment.billingAddress.' + property].$setViewValue(address[property]);\n                        }\n                    }\n                }\n                _this.orderPaymentObject.newOrderPayment.billingAddress = address;\n            }\n        };\n        /** this is the generic method used to call all server side actions.\n        *  @param action {string} the name of the action (method) to call in the public service.\n        *  @param data   {object} the params as key value pairs to pass in the post request.\n        *  @return a deferred promise that resolves server response or error. also includes updated account and cart.\n        */\n        this.doAction = function (action, data, method) {\n            //purge angular $ prefixed propertie\n            //Prevent sending the same request multiple times in parallel\n            if (_this.getRequestByAction(action) && _this.loadingThisRequest(action, data, false))\n                return _this.$q.when();\n            if (!action) {\n                throw \"Action is required exception\";\n            }\n            var urlBase = _this.appConfig.baseURL;\n            //check if the caller is defining a path to hit, otherwise use the public scope.\n            if (action.indexOf(\":\") !== -1) {\n                urlBase = urlBase + action; //any path\n            }\n            else {\n                urlBase = _this.baseActionPath + action; //public path\n            }\n            if (data) {\n                method = \"post\";\n                data.returnJsonObjects = \"cart,account\";\n                if (_this.cmsSiteID) {\n                    data.cmsSiteID = _this.cmsSiteID;\n                }\n            }\n            else {\n                urlBase += (urlBase.indexOf('?') == -1) ? '?' : '&';\n                urlBase += \"returnJsonObject=cart,account\";\n                if (_this.cmsSiteID) {\n                    urlBase += \"&cmsSiteID=\" + _this.cmsSiteID;\n                }\n            }\n            if (method == \"post\") {\n                data.returnJsonObjects = \"cart,account\";\n                //post\n                var request_1 = _this.requestService.newPublicRequest(urlBase, data, method);\n                request_1.promise.then(function (result) {\n                    _this.processAction(result, request_1);\n                }).catch(function (response) {\n                });\n                _this.requests[request_1.getAction()] = request_1;\n                return request_1.promise;\n            }\n            else {\n                //get\n                var url = urlBase;\n                var request_2 = _this.requestService.newPublicRequest(url, data, method);\n                request_2.promise.then(function (result) {\n                    _this.processAction(result, request_2);\n                }).catch(function (reason) {\n                });\n                _this.requests[request_2.getAction()] = request_2;\n                return request_2.promise;\n            }\n        };\n        this.uploadFile = function (action, data) {\n            _this.$timeout(function () {\n                _this.uploadingFile = true;\n            });\n            var url = _this.appConfig.baseURL + action;\n            var formData = new FormData();\n            formData.append(\"fileName\", data.fileName);\n            formData.append(\"uploadFile\", data.uploadFile);\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', url, true);\n            xhr.onload = function (result) {\n                var response = JSON.parse(xhr.response);\n                if (xhr.status === 200) {\n                    _this.processAction(response, null);\n                    _this.successfulActions = response.successfulActions;\n                    _this.failureActions = response.failureActions;\n                }\n                _this.$timeout(function () {\n                    _this.uploadingFile = false;\n                });\n            };\n            xhr.send(formData);\n        };\n        this.processAction = function (response, request) {\n            //Run any specific adjustments needed\n            _this.runCheckoutAdjustments(response);\n            //if the action that was called was successful, then success is true.\n            if (request && request.hasSuccessfulAction()) {\n                _this.successfulActions = [];\n                for (var action in request.successfulActions) {\n                    _this.successfulActions.push(request.successfulActions[action].split('.')[1]);\n                    if (request.successfulActions[action].indexOf('public:cart.placeOrder') !== -1) {\n                        _this.$window.location.href = _this.confirmationUrl;\n                        return;\n                    }\n                    else if (request.successfulActions[action].indexOf('public:cart.finalizeCart') !== -1) {\n                        _this.$window.location.href = _this.checkoutUrl;\n                        return;\n                    }\n                    else if (request.successfulActions[action].indexOf('public:account.logout') !== -1) {\n                        _this.account = _this.$hibachi.newAccount();\n                    }\n                }\n            }\n            if (request && request.hasFailureAction()) {\n                _this.failureActions = [];\n                for (var action in request.failureActions) {\n                    _this.failureActions.push(request.failureActions[action].split('.')[1]);\n                }\n            }\n            /** update the account and the cart */\n            if (response.account) {\n                _this.account.populate(response.account);\n                _this.account.request = request;\n            }\n            if (response.cart) {\n                _this.cart.populate(response.cart);\n                _this.cart.request = request;\n            }\n            _this.errors = response.errors;\n            if (response.messages) {\n                _this.messages = response.messages;\n            }\n        };\n        this.runCheckoutAdjustments = function (response) {\n            _this.filterErrors(response);\n            if (response.cart) {\n                _this.removeInvalidOrderPayments(response.cart);\n            }\n        };\n        this.getRequestByAction = function (action) {\n            return _this.requests[action];\n        };\n        /**\n         * Helper methods so that everything in account and cart can be accessed using getters.\n         */\n        this.userIsLoggedIn = function () {\n            return _this.account.userIsLoggedIn();\n        };\n        this.getActivePaymentMethods = function () {\n            var urlString = \"/?\" + _this.appConfig.action + \"=admin:ajax.getActivePaymentMethods\";\n            var request = _this.requestService.newPublicRequest(urlString)\n                .then(function (result) {\n                if (angular.isDefined(result.data.paymentMethods)) {\n                    _this.paymentMethods = result.data.paymentMethods;\n                }\n            });\n            _this.requests[request.getAction()] = request;\n        };\n        this.filterErrors = function (response) {\n            if (!response || !response.cart || !response.cart.errors)\n                return;\n            var cartErrors = response.cart.errors;\n            if (cartErrors.addOrderPayment) {\n                cartErrors.addOrderPayment = cartErrors.addOrderPayment.filter(function (error) { return error != 'billingAddress'; });\n            }\n        };\n        /** Uses getRequestByAction() plus an identifier to distinguish between different functionality using the same route*/\n        this.loadingThisRequest = function (action, conditions, strict) {\n            var request = _this.getRequestByAction(action);\n            if (!request || !request.loading)\n                return false;\n            for (var identifier in conditions) {\n                if (!((conditions[identifier] === true && !strict) || request.data[identifier] == conditions[identifier])) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        this.removeInvalidOrderPayments = function (cart) {\n            cart.orderPayments = cart.orderPayments.filter(function (payment) { return !payment.hasErrors; });\n        };\n        /**\n         * Given a payment method name, returns the id.\n         */\n        this.getPaymentMethodID = function (name) {\n            for (var method in _this.paymentMethods) {\n                if (_this.paymentMethods[method].paymentMethodName == name && _this.paymentMethods[method].activeFlag == \"Yes \") {\n                    return _this.paymentMethods[method].paymentMethodID;\n                }\n            }\n        };\n        /** Returns a boolean indicating whether or not the order has the named payment method.*/\n        this.hasPaymentMethod = function (paymentMethodName) {\n            for (var _i = 0, _a = _this.cart.orderPayments; _i < _a.length; _i++) {\n                var payment = _a[_i];\n                if (payment.paymentMethod.paymentMethodName === paymentMethodName)\n                    return true;\n            }\n            return false;\n        };\n        this.hasCreditCardPaymentMethod = function () {\n            return _this.hasPaymentMethod(\"Credit Card\");\n        };\n        this.hasPaypalPaymentMethod = function () {\n            return _this.hasPaymentMethod(\"PayPal Express\");\n        };\n        this.hasGiftCardPaymentMethod = function () {\n            return _this.hasPaymentMethod(\"Gift Card\");\n        };\n        this.hasMoneyOrderPaymentMethod = function () {\n            return _this.hasPaymentMethod(\"Money Order\");\n        };\n        this.hasCashPaymentMethod = function () {\n            return _this.hasPaymentMethod(\"Cash\");\n        };\n        /** Returns a boolean indicating whether or not the order has the named fulfillment method.*/\n        this.hasFulfillmentMethod = function (fulfillmentMethodName) {\n            for (var _i = 0, _a = _this.cart.orderFulfillments; _i < _a.length; _i++) {\n                var fulfillment = _a[_i];\n                if (fulfillment.fulfillmentMethod.fulfillmentMethodName === fulfillmentMethodName)\n                    return true;\n            }\n            return false;\n        };\n        this.hasShippingFulfillmentMethod = function () {\n            return _this.hasFulfillmentMethod(\"Shipping\");\n        };\n        this.hasEmailFulfillmentMethod = function () {\n            return _this.hasFulfillmentMethod(\"Email\");\n        };\n        this.hasPickupFulfillmentMethod = function () {\n            return _this.hasFulfillmentMethod(\"Pickup\");\n        };\n        this.getFulfillmentType = function (fulfillment) {\n            return fulfillment.fulfillmentMethod.fulfillmentMethodType;\n        };\n        this.isShippingFulfillment = function (fulfillment) {\n            return _this.getFulfillmentType(fulfillment) === 'shipping';\n        };\n        this.isEmailFulfillment = function (fulfillment) {\n            return _this.getFulfillmentType(fulfillment) === 'email';\n        };\n        this.isPickupFulfillment = function (fulfillment) {\n            return _this.getFulfillmentType(fulfillment) === 'pickup';\n        };\n        /** Returns true if the order fulfillment has a shipping address selected. */\n        this.hasShippingAddress = function (fulfillmentIndex) {\n            return (_this.cart.orderFulfillments[fulfillmentIndex] &&\n                _this.isShippingFulfillment(_this.cart.orderFulfillments[fulfillmentIndex]) &&\n                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingAddress &&\n                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingAddress.addressID);\n        };\n        this.hasShippingMethodOptions = function (fulfillmentIndex) {\n            var shippingMethodOptions = _this.cart.orderFulfillments[fulfillmentIndex].shippingMethodOptions;\n            return shippingMethodOptions && shippingMethodOptions.length && (shippingMethodOptions.length > 1 || (shippingMethodOptions[0].value && shippingMethodOptions[0].value.length));\n        };\n        /** Returns true if the order fulfillment has a shipping address selected. */\n        this.hasPickupLocation = function (fulfillmentIndex) {\n            return (_this.cart.orderFulfillments[fulfillmentIndex] &&\n                _this.isPickupFulfillment(_this.cart.orderFulfillments[fulfillmentIndex]) &&\n                _this.cart.orderFulfillments[fulfillmentIndex].pickupLocation);\n        };\n        /** Returns true if the order requires a fulfillment */\n        this.orderRequiresFulfillment = function () {\n            return _this.cart.orderRequiresFulfillment();\n        };\n        /**\n         *  Returns true if the order requires a account\n         *  Either because the user is not logged in, or because they don't have one.\n         *\n         */\n        this.orderRequiresAccount = function () {\n            return _this.cart.orderRequiresAccount();\n        };\n        /** Returns true if the payment tab should be active */\n        this.hasShippingAddressAndMethod = function () {\n            return _this.cart.hasShippingAddressAndMethod();\n        };\n        /**\n         * Returns true if the user has an account and is logged in.\n         */\n        this.hasAccount = function () {\n            if (_this.account.accountID) {\n                return true;\n            }\n            return false;\n        };\n        /** Redirects to the passed in URL\n        */\n        this.redirectExact = function (url) {\n            _this.$window.location.href = url;\n        };\n        // /** Returns true if a property on an object is undefined or empty. */\n        this.isUndefinedOrEmpty = function (object, property) {\n            if (!angular.isDefined(object[property]) || object[property] == \"\") {\n                return true;\n            }\n            return false;\n        };\n        /** A simple method to return the quantity sum of all orderitems in the cart. */\n        this.getOrderItemQuantitySum = function () {\n            var totalQuantity = 0;\n            if (angular.isDefined(_this.cart)) {\n                return _this.cart.getOrderItemQuantitySum();\n            }\n            return totalQuantity;\n        };\n        /** Returns the index of the state from the list of states */\n        this.getSelectedStateIndexFromStateCode = function (stateCode, states) {\n            for (var state in states) {\n                if (states[state].value == stateCode) {\n                    return state;\n                }\n            }\n        };\n        /** Selects shippingAddress*/\n        this.selectShippingAccountAddress = function (accountAddressID, orderFulfillmentID) {\n            var fulfillmentIndex = _this.cart.orderFulfillments.findIndex(function (fulfillment) { return fulfillment.orderFulfillmentID == orderFulfillmentID; });\n            var oldAccountAddressID;\n            if (_this.cart.orderFulfillments[fulfillmentIndex] && _this.cart.orderFulfillments[fulfillmentIndex].accountAddress) {\n                oldAccountAddressID = _this.cart.orderFulfillments[fulfillmentIndex].accountAddress.accountAddressID;\n            }\n            _this.doAction('addShippingAddressUsingAccountAddress', { accountAddressID: accountAddressID, fulfillmentID: orderFulfillmentID }).then(function (result) {\n                if (result && result.failureActions && result.failureActions.length) {\n                    _this.$timeout(function () {\n                        if (oldAccountAddressID) {\n                            _this.cart.orderFulfillments[fulfillmentIndex].accountAddress.accountAddressID = oldAccountAddressID;\n                        }\n                    });\n                }\n            });\n        };\n        /** Selects shippingAddress*/\n        this.selectBillingAccountAddress = function (accountAddressID) {\n            _this.doAction('addBillingAddressUsingAccountAddress', { accountAddressID: accountAddressID });\n        };\n        /**\n         * Returns true if on a mobile device. This is important for placeholders.\n         */\n        this.isMobile = function () {\n            if (_this.$window.innerWidth <= 800 && _this.$window.innerHeight <= 600) {\n                return true;\n            }\n            return false;\n        };\n        /** returns true if the shipping method option passed in is the selected shipping method\n        */\n        this.isSelectedShippingMethod = function (option, fulfillmentIndex) {\n            // DEPRECATED LOGIC\n            if (typeof option === 'number' || typeof option === 'string') {\n                var index = option, value = fulfillmentIndex;\n                var orderFulfillment = void 0;\n                for (var _i = 0, _a = _this.cart.orderFulfillments; _i < _a.length; _i++) {\n                    var fulfillment = _a[_i];\n                    if (_this.isShippingFulfillment(fulfillment)) {\n                        orderFulfillment = fulfillment;\n                    }\n                }\n                if (_this.cart.fulfillmentTotal &&\n                    value == orderFulfillment.shippingMethod.shippingMethodID ||\n                    orderFulfillment.shippingMethodOptions.length == 1) {\n                    return true;\n                }\n                return false;\n            }\n            //NEW LOGIC\n            return (_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod &&\n                _this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethod.shippingMethodID == option.value) ||\n                (_this.cart.orderFulfillments[fulfillmentIndex].data.shippingMethodOptions.length == 1);\n        };\n        /** Select a shipping method - temporarily changes the selected method on the front end while awaiting official change from server\n        */\n        this.selectShippingMethod = function (option, orderFulfillment) {\n            var fulfillmentID = '';\n            if (typeof orderFulfillment == 'string') {\n                orderFulfillment = _this.cart.orderFulfillments[orderFulfillment];\n            }\n            var data = {\n                'shippingMethodID': option.value,\n                'fulfillmentID': orderFulfillment.orderFulfillmentID\n            };\n            _this.doAction('addShippingMethodUsingShippingMethodID', data);\n            if (!orderFulfillment.data.shippingMethod) {\n                orderFulfillment.data.shippingMethod = {};\n            }\n            orderFulfillment.data.shippingMethod.shippingMethodID = option.value;\n        };\n        /** Removes promotional code from order*/\n        this.removePromoCode = function (code) {\n            _this.doAction('removePromotionCode', { promotionCode: code });\n        };\n        this.deleteAccountAddress = function (accountAddressID) {\n            _this.doAction('deleteAccountAddress', { accountAddressID: accountAddressID });\n        };\n        //gets the calcuated total minus the applied gift cards.\n        this.getTotalMinusGiftCards = function () {\n            var total = _this.getAppliedGiftCardTotals();\n            return _this.cart.calculatedTotal - total;\n        };\n        /** Format saved payment method info for display in list*/\n        this.formatPaymentMethod = function (paymentMethod) {\n            return (paymentMethod.accountPaymentMethodName || paymentMethod.nameOnCreditCard) + ' - ' + paymentMethod.creditCardType + ' *' + paymentMethod.creditCardLastFour + ' exp. ' + ('0' + paymentMethod.expirationMonth).slice(-2) + '/' + paymentMethod.expirationYear.toString().slice(-2);\n        };\n        this.getOrderItemSkuIDs = function (cart) {\n            return cart.orderItems.map(function (item) {\n                return item.sku.skuID;\n            }).join(',');\n        };\n        this.getResizedImageByProfileName = function (profileName, skuIDs) {\n            _this.loading = true;\n            if (profileName == undefined) {\n                profileName = \"medium\";\n            }\n            _this.doAction('getResizedImageByProfileName', { profileName: profileName, skuIds: skuIDs }).then(function (result) {\n                if (!angular.isDefined(_this.imagePath)) {\n                    _this.imagePath = {};\n                }\n                if (result.resizedImagePaths) {\n                    for (var skuID in result.resizedImagePaths) {\n                        _this.imagePath[skuID] = result.resizedImagePaths[skuID];\n                    }\n                }\n            });\n        };\n        /** Returns the amount total of giftcards added to this order.*/\n        this.getPaymentTotals = function () {\n            //\n            var total = 0;\n            for (var index in _this.cart.orderPayments) {\n                total = total + Number(_this.cart.orderPayments[index]['amount'].toFixed(2));\n            }\n            return total;\n        };\n        /** Gets the calcuated total minus the applied gift cards. */\n        this.getTotalMinusPayments = function () {\n            var total = _this.getPaymentTotals();\n            return _this.cart.calculatedTotal - total;\n        };\n        /** Boolean indicating whether the total balance has been accounted for by order payments.*/\n        this.paymentsEqualTotalBalance = function () {\n            return _this.getTotalMinusPayments() == 0;\n        };\n        /**View logic - Opens review panel if no more payments are due.*/\n        this.checkIfFinalPayment = function () {\n            if ((_this.getRequestByAction('addOrderPayment') && _this.getRequestByAction('addOrderPayment').hasSuccessfulAction() ||\n                _this.getRequestByAction('addGiftCardOrderPayment') && _this.getRequestByAction('addGiftCardOrderPayment').hasSuccessfulAction()) && _this.paymentsEqualTotalBalance()) {\n                _this.edit = 'review';\n            }\n        };\n        this.getAddressEntity = function (address) {\n            var addressEntity = _this.$hibachi.newAddress();\n            if (address) {\n                for (var key in address) {\n                    if (address.hasOwnProperty(key)) {\n                        addressEntity[key] = address[key];\n                    }\n                }\n            }\n            return addressEntity;\n        };\n        this.resetRequests = function (request) {\n            delete _this.requests[request];\n        };\n        /** Returns true if the addresses match. */\n        this.addressesMatch = function (address1, address2) {\n            if (angular.isDefined(address1) && angular.isDefined(address2)) {\n                if ((address1.streetAddress == address2.streetAddress &&\n                    address1.street2Address == address2.street2Address &&\n                    address1.city == address2.city &&\n                    address1.postalCode == address2.postalCode &&\n                    address1.stateCode == address2.stateCode &&\n                    address1.countrycode == address2.countrycode)) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n       *  Returns true when the fulfillment body should be showing\n       *  Show if we don't need an account but do need a fulfillment\n       *\n       */\n        this.showFulfillmentTabBody = function () {\n            if (!_this.hasAccount())\n                return false;\n            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&\n                (_this.cart.orderRequirementsList.indexOf('fulfillment') != -1) && !_this.edit ||\n                (_this.edit == 'fulfillment')) {\n                return true;\n            }\n            return false;\n        };\n        /**\n         *  Returns true when the fulfillment body should be showing\n         *  Show if we don't need an account,fulfillment, and don't have a payment - or\n         *  we have a payment but are editting the payment AND nothing else is being edited\n         *\n         */\n        this.showPaymentTabBody = function () {\n            if (!_this.hasAccount())\n                return false;\n            if (((_this.cart.orderRequirementsList.indexOf('account') == -1) &&\n                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&\n                (_this.cart.orderRequirementsList.indexOf('payment') != -1) && !_this.edit) ||\n                ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&\n                    (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&\n                    (_this.edit == 'payment'))) {\n                return true;\n            }\n            return false;\n        };\n        /**\n         *  Returns true if the review tab body should be showing.\n         *  Show if we don't need an account,fulfillment,payment, but not if something else is being edited\n         *\n         */\n        this.showReviewTabBody = function () {\n            if (!_this.hasAccount())\n                return false;\n            if ((_this.cart.orderRequirementsList.indexOf('account') == -1) &&\n                (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&\n                (_this.cart.orderRequirementsList.indexOf('payment') == -1) &&\n                ((!_this.edit) || (_this.edit == 'review'))) {\n                return true;\n            }\n            return false;\n        };\n        /** Returns true if the fulfillment tab should be active */\n        this.fulfillmentTabIsActive = function () {\n            if (!_this.hasAccount())\n                return false;\n            if ((_this.edit == 'fulfillment') ||\n                (!_this.edit && ((_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID) &&\n                    (_this.cart.orderRequirementsList.indexOf('fulfillment') != -1))) {\n                return true;\n            }\n            return false;\n        };\n        /** Returns true if the payment tab should be active */\n        this.paymentTabIsActive = function () {\n            if (!_this.hasAccount())\n                return false;\n            if ((_this.edit == 'payment') ||\n                (!_this.edit &&\n                    (_this.cart.orderRequirementsList.indexOf('account') == -1) && _this.account.accountID &&\n                    (_this.cart.orderRequirementsList.indexOf('fulfillment') == -1) &&\n                    (_this.cart.orderRequirementsList.indexOf('payment') != -1))) {\n                return true;\n            }\n            return false;\n        };\n        this.isCreatingAccount = function () {\n            return !_this.hasAccount() && _this.showCreateAccount;\n        };\n        this.isSigningIn = function () {\n            return !_this.hasAccount() && !_this.showCreateAccount;\n        };\n        this.loginError = function () {\n            if (_this.account.processObjects && _this.account.processObjects.login && _this.account.processObjects.login.hasErrors) {\n                return _this.account.processObjects.login.errors.emailAddress['0'];\n            }\n            ;\n        };\n        this.createAccountError = function () {\n            if (_this.account.processObjects && _this.account.processObjects.create && _this.account.processObjects.create.hasErrors) {\n                return _this.account.processObjects.create.errors;\n            }\n        };\n        this.forgotPasswordNotSubmitted = function () {\n            return !_this.account.processObjects || (!_this.account.hasErrors && !_this.account.processObjects.forgotPassword);\n        };\n        this.forgotPasswordSubmitted = function () {\n            return _this.account.processObjects && _this.account.processObjects.forgotPassword;\n        };\n        this.forgotPasswordHasNoErrors = function () {\n            return _this.account.processObjects && _this.account.processObjects.forgotPassword && !_this.account.processObjects.forgotPassword.hasErrors;\n        };\n        this.forgotPasswordError = function () {\n            if (_this.forgotPasswordSubmitted() && !_this.forgotPasswordHasNoErrors()) {\n                return _this.account.processObjects.forgotPassword.errors.emailAddress['0'];\n            }\n        };\n        /** Consolidate response errors on cart.errors.runPlaceOrderTransaction*/\n        this.placeOrderFailure = function () {\n            var errors = [];\n            for (var key in _this.cart.errors) {\n                var errArray = _this.cart.errors[key];\n                errors = errors.concat(errArray);\n            }\n            _this.cart.errors.runPlaceOrderTransaction = errors;\n            _this.edit = '';\n        };\n        /** Returns errors from placeOrder request*/\n        this.placeOrderError = function () {\n            if (_this.cart.hasErrors && _this.cart.errors.runPlaceOrderTransaction) {\n                return _this.cart.errors.runPlaceOrderTransaction;\n            }\n        };\n        /** Returns errors from addOrderPayment request. */\n        this.addOrderPaymentError = function () {\n            if (_this.cart.errors.addOrderPayment)\n                return _this.cart.errors.addOrderPayment;\n            if (_this.cart.errors.runPlaceOrderTransaction)\n                return _this.cart.errors.runPlaceOrderTransaction;\n            return angular.isDefined(_this.errors) ? _this.errors['ADDORDERPAYMENT'] : false;\n        };\n        /** Returns errors from addBillingAddress request. */\n        this.addBillingAddressError = function () {\n            if (_this.loadingThisRequest('addOrderPayment', {}, false))\n                return false;\n            if (_this.errors && _this.errors.copied)\n                return _this.addBillingAddressErrors;\n            _this.addBillingAddressErrors = _this.cart.errors.addBillingAddress || (angular.isDefined(_this.errors) ? _this.errors['addBillingAddress'] : false);\n            if (!_this.billingAddressEditFormIndex && _this.errors && _this.hasFailureAction('addBillingAddress')) {\n                var addressProperties = _this.$hibachi.newAddress().data;\n                for (var property in _this.errors) {\n                    if (addressProperties.hasOwnProperty(property)) {\n                        _this.addBillingAddressErrors = _this.addBillingAddressErrors || [];\n                        _this.errors[property].forEach(function (error) {\n                            _this.addBillingAddressErrors.push(error);\n                        });\n                    }\n                }\n                _this.errors.copied = 1;\n            }\n            return _this.addBillingAddressErrors;\n        };\n        /** Returns errors from addGiftCard request. */\n        this.giftCardError = function () {\n            if (_this.cart.processObjects &&\n                _this.cart.processObjects.addOrderPayment &&\n                _this.cart.processObjects.addOrderPayment.errors &&\n                _this.cart.processObjects.addOrderPayment.errors.giftCardID) {\n                return _this.cart.processObjects.addOrderPayment.errors.giftCardID[0];\n            }\n        };\n        this.editAccountAddress = function (key, fulfillmentIndex) {\n            _this.clearShippingAddressErrors();\n            _this.accountAddressEditFormIndex[fulfillmentIndex] = key;\n            _this.editingAccountAddress = _this.getAddressEntity(_this.account.accountAddresses[key].address);\n            _this.editingAccountAddress.accountAddressName = _this.account.accountAddresses[key].accountAddressName;\n            _this.editingAccountAddress.accountAddressID = _this.account.accountAddresses[key].accountAddressID;\n        };\n        this.editBillingAddress = function (key, formName) {\n            _this.clearMessages();\n            _this.billingAddressEditFormIndex = key;\n            _this.selectedBillingAddress = null;\n            if (formName) {\n                _this[formName + 'BillingAddress'] = _this.getAddressEntity(_this.account.accountAddresses[key].address);\n                _this[formName + 'BillingAddress'].accountAddressName = _this.account.accountAddresses[key].accountAddressName;\n                _this[formName + 'BillingAddress'].accountAddressID = _this.account.accountAddresses[key].accountAddressID;\n            }\n            else {\n                _this.billingAddress = _this.getAddressEntity(_this.account.accountAddresses[key].address);\n                _this.billingAddress.accountAddressName = _this.account.accountAddresses[key].accountAddressName;\n                _this.billingAddress.accountAddressID = _this.account.accountAddresses[key].accountAddressID;\n            }\n        };\n        this.clearShippingAddressErrors = function () {\n            _this.clearMessages();\n            _this.shippingAddressErrors = undefined;\n        };\n        this.clearMessages = function () {\n            _this.successfulActions = [];\n            _this.failureActions = [];\n        };\n        this.clearPaymentMethod = function () {\n            _this.activePaymentMethod = null;\n        };\n        /**Hides shipping address form, clears shipping address errors*/\n        this.hideAccountAddressForm = function (fulfillmentIndex) {\n            _this.accountAddressEditFormIndex[fulfillmentIndex] = undefined;\n        };\n        this.hideBillingAddressForm = function () {\n            if (_this.billingAddressEditFormIndex != undefined) {\n                var index = _this.billingAddressEditFormIndex;\n                if (_this.billingAddressEditFormIndex == 'new') {\n                    index = _this.account.accountAddresses.length - 1;\n                }\n                _this.selectBillingAddress(index);\n            }\n            _this.billingAddressEditFormIndex = undefined;\n            _this.billingAddress = {};\n        };\n        this.editingDifferentAccountAddress = function (fulfillmentIndex) {\n            for (var index = 0; index < _this.cart.orderFulfillments.length; index++) {\n                if (index !== fulfillmentIndex && _this.accountAddressEditFormIndex[index] != undefined) {\n                    return true;\n                }\n            }\n        };\n        this.showEditAccountAddressForm = function (fulfillmentIndex) {\n            return _this.accountAddressEditFormIndex[fulfillmentIndex] != undefined && _this.accountAddressEditFormIndex[fulfillmentIndex] != 'new';\n        };\n        this.showNewAccountAddressForm = function (fulfillmentIndex) {\n            return _this.accountAddressEditFormIndex[fulfillmentIndex] == 'new';\n        };\n        this.showNewBillingAddressForm = function () {\n            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex == 'new';\n        };\n        this.showEditBillingAddressForm = function () {\n            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex != undefined && _this.billingAddressEditFormIndex != 'new';\n        };\n        /** Adds errors from response to cart errors.*/\n        this.addBillingErrorsToCartErrors = function () {\n            var cartErrors = _this.cart.errors;\n            if (cartErrors.addOrderPayment) {\n                var deleteIndex = cartErrors.addOrderPayment.indexOf('billingAddress');\n                if (deleteIndex > -1) {\n                    cartErrors.addOrderPayment.splice(deleteIndex, 1);\n                }\n                if (cartErrors.addOrderPayment.length == 0) {\n                    cartErrors.addOrderPayment = null;\n                }\n            }\n            cartErrors.addBillingAddress = [];\n            for (var key in _this.errors) {\n                _this.cart.errors.addBillingAddress = _this.cart.errors.addBillingAddress.concat(_this.errors[key]);\n            }\n        };\n        this.accountAddressIsSelectedShippingAddress = function (key, fulfillmentIndex) {\n            if (_this.account &&\n                _this.account.accountAddresses &&\n                _this.cart.orderFulfillments[fulfillmentIndex].shippingAddress &&\n                !_this.cart.orderFulfillments[fulfillmentIndex].shippingAddress.hasErrors) {\n                return _this.addressesMatch(_this.account.accountAddresses[key].address, _this.cart.orderFulfillments[fulfillmentIndex].shippingAddress);\n            }\n            return false;\n        };\n        this.accountAddressIsSelectedBillingAddress = function (key) {\n            if (_this.account &&\n                _this.account.accountAddresses &&\n                _this.orderPaymentObject &&\n                _this.orderPaymentObject.newOrderPayment &&\n                _this.orderPaymentObject.newOrderPayment.billingAddress) {\n                return _this.account.accountAddresses[key].accountAddressID == _this.orderPaymentObject.newOrderPayment.billingAddress.accountAddressID;\n            }\n            return false;\n        };\n        /** Returns true if order requires email fulfillment and email address has been chosen.*/\n        this.hasEmailFulfillmentAddress = function (fulfillmentIndex) {\n            return Boolean(_this.cart.orderFulfillments[fulfillmentIndex].emailAddress);\n        };\n        this.getEligiblePaymentMethodsForPaymentMethodType = function (paymentMethodType) {\n            return _this.cart.eligiblePaymentMethodDetails.filter(function (paymentMethod) {\n                return paymentMethod.paymentMethod.paymentMethodType == paymentMethodType;\n            });\n        };\n        this.getEligibleCreditCardPaymentMethods = function () {\n            return _this.getEligiblePaymentMethodsForPaymentMethodType('creditCard');\n        };\n        this.getPickupLocation = function (fulfillmentIndex) {\n            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])\n                return;\n            return _this.cart.data.orderFulfillments[fulfillmentIndex].pickupLocation;\n        };\n        this.getShippingAddress = function (fulfillmentIndex) {\n            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])\n                return;\n            return _this.cart.data.orderFulfillments[fulfillmentIndex].data.shippingAddress;\n        };\n        this.getEmailFulfillmentAddress = function (fulfillmentIndex) {\n            if (!_this.cart.data.orderFulfillments[fulfillmentIndex])\n                return;\n            return _this.cart.data.orderFulfillments[fulfillmentIndex].emailAddress;\n        };\n        this.getPickupLocations = function () {\n            var locations = [];\n            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {\n                if (_this.getFulfillmentType(fulfillment) == 'pickup' && fulfillment.pickupLocation && fulfillment.pickupLocation.locationID) {\n                    fulfillment.pickupLocation.fulfillmentIndex = index;\n                    locations.push(fulfillment.pickupLocation);\n                }\n            });\n            return locations;\n        };\n        this.getShippingAddresses = function () {\n            var addresses = [];\n            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {\n                if (_this.getFulfillmentType(fulfillment) == 'shipping' && fulfillment.data.shippingAddress && fulfillment.data.shippingAddress.addressID) {\n                    fulfillment.data.shippingAddress.fulfillmentIndex = index;\n                    addresses.push(fulfillment.data.shippingAddress);\n                }\n            });\n            return addresses;\n        };\n        this.getEmailFulfillmentAddresses = function () {\n            var addresses = [];\n            _this.cart.orderFulfillments.forEach(function (fulfillment, index) {\n                if (_this.getFulfillmentType(fulfillment) == 'email' && fulfillment.emailAddress) {\n                    fulfillment.fulfillmentIndex = index;\n                    addresses.push(fulfillment);\n                }\n            });\n            return addresses;\n        };\n        /** Returns true if any action in comma-delimited list exists in this.successfulActions */\n        this.hasSuccessfulAction = function (actionList) {\n            for (var _i = 0, _a = actionList.split(','); _i < _a.length; _i++) {\n                var action = _a[_i];\n                if (_this.successfulActions.indexOf(action) > -1) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /** Returns true if any action in comma-delimited list exists in this.failureActions */\n        this.hasFailureAction = function (actionList) {\n            for (var _i = 0, _a = actionList.split(','); _i < _a.length; _i++) {\n                var action = _a[_i];\n                if (_this.failureActions.indexOf(action) > -1) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        this.shippingUpdateSuccess = function () {\n            return _this.hasSuccessfulAction('addShippingAddressUsingAccountAddress,addShippingAddress');\n        };\n        this.shippingMethodUpdateSuccess = function () {\n            return _this.hasSuccessfulAction('addShippingMethodUsingShippingMethodID');\n        };\n        this.updatedBillingAddress = function () {\n            return _this.hasSuccessfulAction('updateAddress') && !_this.hasSuccessfulAction('addShippingAddress');\n        };\n        this.addedBillingAddress = function () {\n            return _this.hasSuccessfulAction('addNewAccountAddress') && !_this.hasSuccessfulAction('addShippingAddressUsingAccountAddress');\n        };\n        this.addedShippingAddress = function () {\n            return _this.hasSuccessfulAction('addNewAccountAddress') && _this.hasSuccessfulAction('addShippingAddressUsingAccountAddress');\n        };\n        this.emailFulfillmentUpdateSuccess = function () {\n            return _this.hasSuccessfulAction('addEmailFulfillmentAddress');\n        };\n        this.pickupLocationUpdateSuccess = function () {\n            return _this.hasSuccessfulAction('addEmailFulfillmentAddress');\n        };\n        /** Returns true if selected pickup location has no name.*/\n        this.namelessPickupLocation = function (fulfillmentIndex) {\n            if (!_this.getPickupLocation(fulfillmentIndex))\n                return false;\n            return _this.getPickupLocation(fulfillmentIndex).primaryAddress != undefined && _this.getPickupLocation(fulfillmentIndex).locationName == undefined;\n        };\n        /** Returns true if no pickup location has been selected.*/\n        this.noPickupLocation = function (fulfillmentIndex) {\n            if (!_this.getPickupLocation(fulfillmentIndex))\n                return true;\n            return _this.getPickupLocation(fulfillmentIndex).primaryAddress == undefined && _this.getPickupLocation(fulfillmentIndex).locationName == undefined;\n        };\n        this.disableContinueToPayment = function () {\n            return _this.cart.orderRequirementsList.indexOf('fulfillment') != -1;\n        };\n        this.hasAccountPaymentMethods = function () {\n            return _this.account && _this.account.accountPaymentMethods && _this.account.accountPaymentMethods.length;\n        };\n        this.showBillingAccountAddresses = function () {\n            return !_this.useShippingAsBilling && _this.billingAddressEditFormIndex == undefined;\n        };\n        this.hasNoCardInfo = function () {\n            return !_this.newCardInfo || !_this.newCardInfo.nameOnCreditCard || !_this.newCardInfo.cardNumber || !_this.newCardInfo.cvv;\n        };\n        this.isGiftCardPayment = function (payment) {\n            return payment.giftCard && payment.giftCard.giftCardCode;\n        };\n        this.isPurchaseOrderPayment = function (payment) {\n            return payment.purchaseOrderNumber;\n        };\n        //Not particularly robust, needs to be modified for each project\n        this.isCheckOrMoneyOrderPayment = function (payment) {\n            return payment.paymentMethod.paymentMethodName == \"Check or Money Order\";\n        };\n        this.orderHasNoPayments = function () {\n            var activePayments = _this.cart.orderPayments.filter(function (payment) { return payment.amount != 0; });\n            return !activePayments.length;\n        };\n        this.hasProductNameAndNoSkuName = function (orderItem) {\n            return !orderItem.sku.skuName && orderItem.sku.product && orderItem.sku.product.productName;\n        };\n        this.cartHasNoItems = function () {\n            return !_this.getRequestByAction('getCart').loading && _this.hasAccount() && _this.cart && _this.cart.orderItems && !_this.cart.orderItems.length && !_this.loading && !_this.orderPlaced;\n        };\n        this.hasAccountAndCartItems = function () {\n            return _this.hasAccount() && !_this.cartHasNoItems();\n        };\n        this.hideStoreSelector = function (fulfillmentIndex) {\n            _this.showStoreSelector[fulfillmentIndex] = false;\n        };\n        this.hideEmailSelector = function (fulfillmentIndex) {\n            _this.showEmailSelector[fulfillmentIndex] = false;\n        };\n        this.updateOrderItemQuantity = function (orderItemID, quantity) {\n            if (quantity === void 0) { quantity = 1; }\n            _this.doAction('updateOrderItemQuantity', { 'orderItem.orderItemID': orderItemID, 'orderItem.quantity': quantity });\n        };\n        this.getOrderAttributeValues = function (allowedAttributeSets) {\n            var attributeValues = {};\n            var orderAttributeModel = JSON.parse(localStorage.getItem('attributeMetaData'))[\"Order\"];\n            for (var attributeSetCode in orderAttributeModel) {\n                var attributeSet = orderAttributeModel[attributeSetCode];\n                if (allowedAttributeSets.indexOf(attributeSetCode) !== -1) {\n                    for (var attributeCode in attributeSet.attributes) {\n                        var attribute = attributeSet.attributes[attributeCode];\n                        attributeValues[attribute.attributeCode] = {\n                            attributeCode: attribute.attributeCode,\n                            attributeName: attribute.attributeName,\n                            attributeValue: _this.cart[attribute.attributeCode],\n                            inputType: attribute.attributeInputType,\n                            requiredFlag: attribute.requiredFlag\n                        };\n                    }\n                }\n            }\n            return attributeValues;\n        };\n        this.binder = function (self, fn) {\n            var args = [];\n            for (var _i = 2; _i < arguments.length; _i++) {\n                args[_i - 2] = arguments[_i];\n            }\n            return fn.bind.apply(fn, [self].concat(args));\n        };\n        /*********************************************************************************/\n        /*******************                                    **************************/\n        /*******************         DEPRECATED METHODS         **************************/\n        /*******************                                    **************************/\n        /*********************************************************************************/\n        /** DEPRECATED\n        */\n        this.getSelectedShippingIndex = function (index, value) {\n            for (var i = 0; i <= this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions.length; i++) {\n                if (this.cart.fulfillmentTotal == this.cart.orderFulfillments[this.cart.orderFulfillmentWithShippingMethodOptionsIndex].shippingMethodOptions[i].totalCharge) {\n                    return i;\n                }\n            }\n        };\n        /** simple validation just to ensure data is present and accounted for.\n        */\n        this.validateNewOrderPayment = function (newOrderPayment) {\n            var newOrderPaymentErrors = {};\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.streetAddress')) {\n                newOrderPaymentErrors['streetAddress'] = 'Required *';\n            }\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.countrycode')) {\n                newOrderPaymentErrors['countrycode'] = 'Required *';\n            }\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.statecode')) {\n                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.locality')) {\n                    newOrderPaymentErrors['statecode'] = 'Required *';\n                }\n            }\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.city')) {\n                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.city')) {\n                    newOrderPaymentErrors['city'] = 'Required *';\n                }\n            }\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.locality')) {\n                if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.statecode')) {\n                    newOrderPaymentErrors['locality'] = 'Required *';\n                }\n            }\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.billingAddress.postalcode')) {\n                newOrderPaymentErrors['postalCode'] = 'Required *';\n            }\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.nameOnCreditCard')) {\n                newOrderPaymentErrors['nameOnCreditCard'] = 'Required *';\n            }\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.expirationMonth')) {\n                newOrderPaymentErrors['streetAddress'] = 'Required *';\n            }\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.expirationYear')) {\n                newOrderPaymentErrors['expirationYear'] = 'Required *';\n            }\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.creditCardNumber')) {\n                newOrderPaymentErrors['creditCardNumber'] = 'Required *';\n            }\n            if (_this.isUndefinedOrEmpty(newOrderPayment, 'newOrderPayment.securityCode')) {\n                newOrderPaymentErrors['securityCode'] = 'Required *';\n            }\n            if (Object.keys(newOrderPaymentErrors).length) {\n                //this.cart.orderPayments.hasErrors = true;\n                //this.cart.orderPayments.errors = newOrderPaymentErrors;\n            }\n        };\n        /** Allows an easy way to calling the service addOrderPayment.\n        */\n        this.addOrderPayment = function (formdata) {\n            //reset the form errors.\n            //Grab all the data\n            var billingAddress = _this.newBillingAddress;\n            var expirationMonth = formdata.month;\n            var expirationYear = formdata.year;\n            var country = formdata.country;\n            var state = formdata.state;\n            var accountFirst = _this.account.firstName;\n            var accountLast = _this.account.lastName;\n            var data = {};\n            var processObject = _this.orderService.newOrder_AddOrderPayment();\n            data = {\n                'newOrderPayment.billingAddress.addressID': '',\n                'newOrderPayment.billingAddress.streetAddress': billingAddress.streetAddress,\n                'newOrderPayment.billingAddress.street2Address': billingAddress.street2Address,\n                'newOrderPayment.nameOnCreditCard': billingAddress.nameOnCreditCard,\n                'newOrderPayment.billingAddress.name': billingAddress.nameOnCreditCard,\n                'newOrderPayment.expirationMonth': expirationMonth,\n                'newOrderPayment.expirationYear': expirationYear,\n                'newOrderPayment.billingAddress.countrycode': country || billingAddress.countrycode,\n                'newOrderPayment.billingAddress.city': '' + billingAddress.city,\n                'newOrderPayment.billingAddress.statecode': state || billingAddress.statecode,\n                'newOrderPayment.billingAddress.locality': billingAddress.locality || '',\n                'newOrderPayment.billingAddress.postalcode': billingAddress.postalcode,\n                'newOrderPayment.securityCode': billingAddress.cvv,\n                'newOrderPayment.creditCardNumber': billingAddress.cardNumber,\n                'newOrderPayment.saveShippingAsBilling': (_this.saveShippingAsBilling == true),\n            };\n            //processObject.populate(data);\n            //Make sure we have required fields for a newOrderPayment.\n            _this.validateNewOrderPayment(data);\n            if (_this.cart.orderPayments.hasErrors && Object.keys(_this.cart.orderPayments.errors).length) {\n                return -1;\n            }\n            //Post the new order payment and set errors as needed.\n            _this.doAction('addOrderPayment', data, 'post').then(function (result) {\n                var serverData = result;\n                if (serverData.cart.hasErrors || angular.isDefined(_this.cart.orderPayments[_this.cart.orderPayments.length - 1]['errors']) && !_this.cart.orderPayments[_this.cart.orderPayments.length - 1]['errors'].hasErrors) {\n                    _this.cart.hasErrors = true;\n                    _this.readyToPlaceOrder = true;\n                    _this.edit = '';\n                }\n                else {\n                    _this.editPayment = false;\n                    _this.readyToPlaceOrder = true;\n                    _this.edit = '';\n                }\n            });\n        };\n        /** Allows an easy way to calling the service addOrderPayment.\n        */\n        this.addGiftCardOrderPayments = function (redeemGiftCardToAccount) {\n            //reset the form errors.\n            _this.cart.hasErrors = false;\n            _this.cart.orderPayments.errors = {};\n            _this.cart.orderPayments.hasErrors = false;\n            //Grab all the data\n            var giftCards = _this.account.giftCards;\n            var data = {};\n            data = {\n                'newOrderPayment.paymentMethod.paymentMethodID': '50d8cd61009931554764385482347f3a',\n                'newOrderPayment.redeemGiftCardToAccount': redeemGiftCardToAccount,\n            };\n            //add the amounts from the gift cards\n            for (var card in giftCards) {\n                if (giftCards[card].applied == true) {\n                    data['newOrderPayment.giftCardNumber'] = giftCards[card].giftCardCode;\n                    if (giftCards[card].calculatedTotal < _this.cart.calculatedTotal) {\n                        data['newOrderPayment.amount'] = giftCards[card].calculatedBalanceAmount; //will use once we have amount implemented.\n                    }\n                    else {\n                        data['newOrderPayment.amount'] = _this.cart.calculatedTotal; //this is so it doesn't throw the 100% error\n                    }\n                    data['copyFromType'] = \"\";\n                    //Post the new order payment and set errors as needed.\n                    _this.$q.all([_this.doAction('addOrderPayment', data, 'post')]).then(function (result) {\n                        var serverData;\n                        if (angular.isDefined(result['0'])) {\n                            serverData = result['0'].data;\n                        }\n                        if (serverData.cart.hasErrors || angular.isDefined(this.cart.orderPayments[this.cart.orderPayments.length - 1]['errors']) && !this.cart.orderPayments['' + (this.cart.orderPayments.length - 1)]['errors'].hasErrors) {\n                            this.cart.hasErrors = true;\n                            this.readyToPlaceOrder = true;\n                            this.edit = '';\n                        }\n                        else {\n                        }\n                    });\n                }\n            }\n        };\n        /** Allows an easy way to calling the service addOrderPayment.\n        */\n        this.addOrderPaymentAndPlaceOrder = function (formdata) {\n            //reset the form errors.\n            _this.orderPlaced = false;\n            //Grab all the data\n            var billingAddress = _this.newBillingAddress;\n            var expirationMonth = formdata.month;\n            var expirationYear = formdata.year;\n            var country = formdata.country;\n            var state = formdata.state;\n            var accountFirst = _this.account.firstName;\n            var accountLast = _this.account.lastName;\n            var data = {};\n            data = {\n                'orderid': _this.cart.orderID,\n                'newOrderPayment.billingAddress.streetAddress': billingAddress.streetAddress,\n                'newOrderPayment.billingAddress.street2Address': billingAddress.street2Address,\n                'newOrderPayment.nameOnCreditCard': billingAddress.nameOnCard || accountFirst + ' ' + accountLast,\n                'newOrderPayment.expirationMonth': expirationMonth,\n                'newOrderPayment.expirationYear': expirationYear,\n                'newOrderPayment.billingAddress.countrycode': country || billingAddress.countrycode,\n                'newOrderPayment.billingAddress.city': '' + billingAddress.city,\n                'newOrderPayment.billingAddress.statecode': state || billingAddress.statecode,\n                'newOrderPayment.billingAddress.locality': billingAddress.locality || '',\n                'newOrderPayment.billingAddress.postalcode': billingAddress.postalcode,\n                'newOrderPayment.securityCode': billingAddress.cvv,\n                'newOrderPayment.creditCardNumber': billingAddress.cardNumber,\n                'newOrderPayment.saveShippingAsBilling': (_this.saveShippingAsBilling == true),\n            };\n            //Make sure we have required fields for a newOrderPayment.\n            //this.validateNewOrderPayment( data );\n            if (_this.cart.orderPayments.hasErrors && Object.keys(_this.cart.orderPayments.errors).length) {\n                return -1;\n            }\n            //Post the new order payment and set errors as needed.\n            _this.$q.all([_this.doAction('addOrderPayment,placeOrder', data, 'post')]).then(function (result) {\n                var serverData;\n                if (angular.isDefined(result['0'])) {\n                    serverData = result['0'].data;\n                }\n                else {\n                } //|| angular.isDefined(serverData.cart.orderPayments[serverData.cart.orderPayments.length-1]['errors']) && slatwall.cart.orderPayments[''+slatwall.cart.orderPayments.length-1]['errors'].hasErrors\n                if (serverData.cart.hasErrors || (angular.isDefined(serverData.failureActions) && serverData.failureActions.length && serverData.failureActions[0] == \"public:cart.addOrderPayment\")) {\n                    if (serverData.failureActions.length) {\n                        for (var action in serverData.failureActions) {\n                            //\n                        }\n                    }\n                    this.edit = '';\n                    return true;\n                }\n                else if (serverData.successfulActions.length) {\n                    //\n                    this.cart.hasErrors = false;\n                    this.editPayment = false;\n                    this.edit = '';\n                    for (var action in serverData.successfulActions) {\n                        //\n                        if (serverData.successfulActions[action].indexOf(\"placeOrder\") != -1) {\n                            //if there are no errors then redirect.\n                            this.orderPlaced = true;\n                            this.redirectExact('/order-confirmation/');\n                        }\n                    }\n                }\n                else {\n                    this.edit = '';\n                }\n            });\n        };\n        //Applies a giftcard from the user account onto the payment.\n        this.applyGiftCard = function (giftCardCode) {\n            _this.finding = true;\n            //find the code already on the account.\n            var found = false;\n            for (var giftCard in _this.account.giftCards) {\n                if (_this.account.giftCards[giftCard].balanceAmount == 0) {\n                    _this.account.giftCards[giftCard]['error'] = \"The balance is $0.00 for this card.\";\n                    found = false;\n                }\n                if (_this.account.giftCards[giftCard].giftCardCode == giftCardCode) {\n                    _this.account.giftCards[giftCard].applied = true;\n                    found = true;\n                }\n            }\n            if (found) {\n                _this.finding = false;\n                _this.addGiftCardOrderPayments(false);\n            }\n            else {\n                _this.finding = false;\n                _this.addGiftCardOrderPayments(true);\n            }\n        };\n        //returns the amount total of giftcards added to this account.\n        this.getAppliedGiftCardTotals = function () {\n            //\n            var total = 0;\n            for (var payment in _this.cart.orderPayments) {\n                if (_this.cart.orderPayments[payment].giftCardNumber != \"\") {\n                    total = total + parseInt(_this.cart.orderPayments[payment]['amount']);\n                }\n            }\n            return total;\n        };\n        this.orderService = orderService;\n        this.cartService = cartService;\n        this.accountService = accountService;\n        this.accountAddressService = accountAddressService;\n        this.requestService = requestService;\n        this.appConfig = appConfig;\n        this.baseActionPath = this.appConfig.baseURL + \"/index.cfm/api/scope/\"; //default path\n        this.confirmationUrl = \"/order-confirmation\";\n        this.checkoutUrl = \"/checkout\";\n        this.$http = $http;\n        this.$location = $location;\n        this.$q = $q;\n        this.$injector = $injector;\n        this.getExpirationYears();\n        this.$window = $window;\n        this.$hibachi = $hibachi;\n        this.cart = this.cartService.newCart();\n        this.account = this.accountService.newAccount();\n        this.observerService = observerService;\n        this.$timeout = $timeout;\n    }\n    PublicService.prototype.getOrderFulfillmentItemList = function (fulfillmentIndex) {\n        return this.cart.orderFulfillments[fulfillmentIndex].orderFulfillmentItems.map(function (item) { return item.sku.skuName ? item.sku.skuName : item.sku.product.productName; }).join(', ');\n    };\n    //Use with bind, assigning 'this' as the temporary order item\n    //a.k.a. slatwall.bind(tempOrderItem,slatwall.copyOrderItem,originalOrderItem);\n    //gets you tempOrderItem.orderItem == originalOrderItem;\n    PublicService.prototype.copyOrderItem = function (orderItem) {\n        this.orderItem = { orderItemID: orderItem.orderItemID,\n            quantity: orderItem.quantity };\n        return this;\n    };\n    return PublicService;\n}());\nexports.PublicService = PublicService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/publicservice.ts?")},"../../../org/Hibachi/client/src/core/services/rbkeyservice.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/rbkeyservice.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RbKeyService = /** @class */ (function () {\n    //@ngInject\n    function RbKeyService($http, $q, appConfig, resourceBundles) {\n        var _this = this;\n        this.$http = $http;\n        this.$q = $q;\n        this.appConfig = appConfig;\n        this.resourceBundles = resourceBundles;\n        this._resourceBundle = {};\n        this._resourceBundleLastModified = '';\n        this._loadingResourceBundle = false;\n        this._loadedResourceBundle = false;\n        this.getRBLoaded = function () {\n            return _this._loadedResourceBundle;\n        };\n        this.rbKey = function (key, replaceStringData) {\n            ////$log.debug('rbkey');\n            ////$log.debug(key);\n            ////$log.debug(this.getConfig().rbLocale);\n            var keyValue = _this.getRBKey(key, _this.appConfig.rbLocale);\n            ////$log.debug(keyValue);\n            return keyValue;\n        };\n        this.getRBKey = function (key, locale, checkedKeys, originalKey) {\n            ////$log.debug('getRBKey');\n            ////$log.debug('loading:'+this._loadingResourceBundle);\n            ////$log.debug('loaded'+this._loadedResourceBundle);\n            if (_this.resourceBundles) {\n                key = key.toLowerCase();\n                checkedKeys = checkedKeys || \"\";\n                locale = locale || 'en_us';\n                ////$log.debug('locale');\n                ////$log.debug(locale);\n                var keyListArray = key.split(',');\n                ////$log.debug('keylistAray');\n                ////$log.debug(keyListArray);\n                if (keyListArray.length > 1) {\n                    var keyValue = \"\";\n                    for (var i = 0; i < keyListArray.length; i++) {\n                        keyValue = _this.getRBKey(keyListArray[i], locale, keyValue);\n                        //$log.debug('keyvalue:'+keyValue);\n                        if (keyValue.slice(-8) != \"_missing\") {\n                            break;\n                        }\n                    }\n                    return keyValue;\n                }\n                var bundle = _this.resourceBundles[locale];\n                if (angular.isDefined(bundle[key])) {\n                    //$log.debug('rbkeyfound:'+bundle[key]);\n                    return bundle[key];\n                }\n                var checkedKeysListArray = checkedKeys.split(',');\n                checkedKeysListArray.push(key + '_' + locale + '_missing');\n                checkedKeys = checkedKeysListArray.join(\",\");\n                if (angular.isUndefined(originalKey)) {\n                    originalKey = key;\n                }\n                //$log.debug('originalKey:'+key);\n                //$log.debug(checkedKeysListArray);\n                var localeListArray = locale.split('_');\n                //$log.debug(localeListArray);\n                if (localeListArray.length === 2) {\n                    bundle = _this.resourceBundles[localeListArray[0]];\n                    if (angular.isDefined(bundle[key])) {\n                        //$log.debug('rbkey found:'+bundle[key]);\n                        return bundle[key];\n                    }\n                    checkedKeysListArray.push(key + '_' + localeListArray[0] + '_missing');\n                    checkedKeys = checkedKeysListArray.join(\",\");\n                }\n                var keyDotListArray = key.split('.');\n                if (keyDotListArray.length >= 3\n                    && keyDotListArray[keyDotListArray.length - 2] === 'define') {\n                    var newKey = key.replace(keyDotListArray[keyDotListArray.length - 3] + '.define', 'define');\n                    //$log.debug('newkey1:'+newKey);\n                    return _this.getRBKey(newKey, locale, checkedKeys, originalKey);\n                }\n                else if (keyDotListArray.length >= 2 && keyDotListArray[keyDotListArray.length - 2] !== 'define') {\n                    var newKey = key.replace(keyDotListArray[keyDotListArray.length - 2] + '.', 'define.');\n                    //$log.debug('newkey:'+newKey);\n                    return _this.getRBKey(newKey, locale, checkedKeys, originalKey);\n                }\n                //$log.debug(localeListArray);\n                if (localeListArray[0] !== \"en\") {\n                    return _this.getRBKey(originalKey, 'en', checkedKeys);\n                }\n                return checkedKeys;\n            }\n            return '';\n        };\n        this.$q = $q;\n        this.$http = $http;\n        this.appConfig = appConfig;\n        this.resourceBundles = resourceBundles;\n    }\n    return RbKeyService;\n}());\nexports.RbKeyService = RbKeyService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/rbkeyservice.ts?")},"../../../org/Hibachi/client/src/core/services/requestservice.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/requestservice.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar adminrequest_1 = __webpack_require__(/*! ../model/transient/adminrequest */ "../../../org/Hibachi/client/src/core/model/transient/adminrequest.ts");\nvar publicrequest_1 = __webpack_require__(/*! ../model/transient/publicrequest */ "../../../org/Hibachi/client/src/core/model/transient/publicrequest.ts");\nvar RequestService = /** @class */ (function () {\n    //@ngInject\n    function RequestService($injector, observerService) {\n        var _this = this;\n        this.$injector = $injector;\n        this.observerService = observerService;\n        this.newAdminRequest = function (url, data, method, headers, $injector, observerService) {\n            if (method === void 0) { method = "post"; }\n            if (headers === void 0) { headers = { \'Content-Type\': "application/json" }; }\n            if ($injector === void 0) { $injector = _this.$injector; }\n            if (observerService === void 0) { observerService = _this.observerService; }\n            return new adminrequest_1.AdminRequest(url, data, method, headers, $injector, observerService);\n        };\n        this.newPublicRequest = function (url, data, method, headers, $injector, observerService) {\n            if (method === void 0) { method = "post"; }\n            if (headers === void 0) { headers = { \'Content-Type\': "application/x-www-form-urlencoded" }; }\n            if ($injector === void 0) { $injector = _this.$injector; }\n            if (observerService === void 0) { observerService = _this.observerService; }\n            return new publicrequest_1.PublicRequest(url, data, method, headers, $injector, observerService);\n        };\n        this.$injector = $injector;\n        this.observerService = observerService;\n    }\n    return RequestService;\n}());\nexports.RequestService = RequestService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/requestservice.ts?')},"../../../org/Hibachi/client/src/core/services/scopeservice.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/scopeservice.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar ScopeService = /** @class */ (function () {\n    //ngInject\n    function ScopeService() {\n        var _this = this;\n        this.getRootParentScope = function (scope, targetScopeName) {\n            var currentScope = scope;\n            while (currentScope != null && angular.isUndefined(currentScope[targetScopeName])) {\n                if (angular.isDefined(currentScope.$parent)) {\n                    currentScope = currentScope.$parent;\n                }\n                else {\n                    break;\n                }\n            }\n            if (currentScope != null && angular.isDefined(currentScope[targetScopeName])) {\n                return currentScope;\n            }\n        };\n        this.hasParentScope = function (scope, targetScopeName) {\n            if (_this.getRootParentScope(scope, targetScopeName) != null) {\n                return true;\n            }\n            return false;\n        };\n    }\n    return ScopeService;\n}());\nexports.ScopeService = ScopeService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/scopeservice.ts?')},"../../../org/Hibachi/client/src/core/services/selectionservice.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/selectionservice.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\n/*services return promises which can be handled uniquely based on success or failure by the controller*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseservice_1 = __webpack_require__(/*! ./baseservice */ \"../../../org/Hibachi/client/src/core/services/baseservice.ts\");\nvar SelectionService = /** @class */ (function (_super) {\n    __extends(SelectionService, _super);\n    //@ngInject\n    function SelectionService(observerService) {\n        var _this = _super.call(this) || this;\n        _this.observerService = observerService;\n        _this._selection = {};\n        /* add current selectionid to main selection object*/\n        _this.createSelections = function (selectionid) {\n            _this._selection[selectionid] = {\n                allSelected: false,\n                ids: []\n            };\n        };\n        _this.radioSelection = function (selectionid, selection) {\n            _this.createSelections(selectionid);\n            _this._selection[selectionid].ids.push(selection);\n            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });\n        };\n        _this.addSelection = function (selectionid, selection) {\n            /*if allSelected flag is true addSelection will remove selection*/\n            if (_this.isAllSelected(selectionid)) {\n                var index = _this._selection[selectionid].ids.indexOf(selection);\n                if (index > -1) {\n                    _this._selection[selectionid].ids.splice(index, 1);\n                    _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });\n                }\n            }\n            else if (!_this.hasSelection(selectionid, selection)) {\n                _this._selection[selectionid].ids.push(selection);\n                _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'check', selectionid: selectionid, selection: selection });\n            }\n            console.info(_this._selection[selectionid]);\n        };\n        _this.setSelection = function (selectionid, selections) {\n            if (angular.isUndefined(_this._selection[selectionid])) {\n                _this.createSelections(selectionid);\n            }\n            _this._selection[selectionid].ids = selections;\n        };\n        _this.removeSelection = function (selectionid, selection) {\n            if (angular.isUndefined(_this._selection[selectionid])) {\n                return;\n            }\n            if (!_this.isAllSelected(selectionid)) {\n                var index = _this._selection[selectionid].ids.indexOf(selection);\n                if (index > -1) {\n                    _this._selection[selectionid].ids.splice(index, 1);\n                    _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'uncheck', selectionid: selectionid, selection: selection });\n                }\n                /*if allSelected flag is true removeSelection will add selection*/\n            }\n            else if (!_this.hasSelection(selectionid, selection)) {\n                _this._selection[selectionid].ids.push(selection);\n                _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'uncheck', selectionid: selectionid, selection: selection });\n            }\n            console.info(_this._selection[selectionid]);\n        };\n        _this.hasSelection = function (selectionid, selection) {\n            if (angular.isUndefined(_this._selection[selectionid])) {\n                return false;\n            }\n            return _this._selection[selectionid].ids.indexOf(selection) > -1;\n        };\n        _this.getSelections = function (selectionid) {\n            if (angular.isUndefined(_this._selection[selectionid])) {\n                _this.createSelections(selectionid);\n            }\n            return _this._selection[selectionid].ids;\n        };\n        _this.getSelectionCount = function (selectionid) {\n            if (angular.isUndefined(_this._selection[selectionid])) {\n                _this.createSelections(selectionid);\n            }\n            return _this._selection[selectionid].ids.length;\n        };\n        _this.clearSelection = function (selectionid) {\n            _this.createSelections(selectionid);\n            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'clear' });\n            console.info(_this._selection[selectionid]);\n        };\n        _this.selectAll = function (selectionid) {\n            _this._selection[selectionid] = {\n                allSelected: true,\n                ids: []\n            };\n            _this.observerService.notify('swSelectionToggleSelection' + selectionid, { action: 'selectAll' });\n            console.info(_this._selection[selectionid]);\n        };\n        _this.isAllSelected = function (selectionid) {\n            if (angular.isUndefined(_this._selection[selectionid])) {\n                _this.createSelections(selectionid);\n            }\n            return _this._selection[selectionid].allSelected;\n        };\n        return _this;\n    }\n    return SelectionService;\n}(baseservice_1.BaseService));\nexports.SelectionService = SelectionService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/selectionservice.ts?")},"../../../org/Hibachi/client/src/core/services/skuservice.ts":
/*!****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/skuservice.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar baseentityservice_1 = __webpack_require__(/*! ./baseentityservice */ \"../../../org/Hibachi/client/src/core/services/baseentityservice.ts\");\nvar SkuService = /** @class */ (function (_super) {\n    __extends(SkuService, _super);\n    //@ngInject\n    function SkuService($injector, $hibachi, utilityService) {\n        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Sku') || this;\n        _this.$injector = $injector;\n        _this.$hibachi = $hibachi;\n        _this.utilityService = utilityService;\n        return _this;\n    }\n    return SkuService;\n}(baseentityservice_1.BaseEntityService));\nexports.SkuService = SkuService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/skuservice.ts?")},"../../../org/Hibachi/client/src/core/services/typeaheadservice.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/typeaheadservice.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path="../../../../../../node_modules/typescript/lib/lib.es6.d.ts" />\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar TypeaheadStore = __webpack_require__(/*! ../prototypes/swstore */ "../../../org/Hibachi/client/src/core/prototypes/swstore.ts");\nvar TypeaheadService = /** @class */ (function () {\n    //@ngInject\n    function TypeaheadService($timeout, observerService) {\n        var _this = this;\n        this.$timeout = $timeout;\n        this.observerService = observerService;\n        this.typeaheadData = {};\n        this.typeaheadPromises = {};\n        //The state of the store\n        this.typeaheadStates = {};\n        this.state = {\n            typeaheadInstances: this.typeaheadStates\n        };\n        /**\n         * The reducer is responsible for modifying the state of the state object into a new state.\n         */\n        this.typeaheadStateReducer = function (state, action) {\n            switch (action.type) {\n                case \'TYPEAHEAD_QUERY\':\n                    //modify the state.\n                    return __assign({}, state, { action: action });\n                case \'TYPEAHEAD_USER_SELECTION\':\n                    //passthrough - no state change. anyone subscribed can handle this.\n                    return __assign({}, state, { action: action });\n                default:\n                    return state;\n            }\n        };\n        this.getTypeaheadSelectionUpdateEvent = function (key) {\n            return "typeaheadSelectionUpdated" + key;\n        };\n        this.attachTypeaheadSelectionUpdateEvent = function (key, callback) {\n            _this.observerService.attach(callback, _this.getTypeaheadSelectionUpdateEvent(key));\n        };\n        this.notifyTypeaheadSelectionUpdateEvent = function (key, data) {\n            _this.observerService.notify(_this.getTypeaheadSelectionUpdateEvent(key), data);\n        };\n        this.setTypeaheadState = function (key, state) {\n            _this.typeaheadStates[key] = state;\n        };\n        this.getTypeaheadState = function (key) {\n            return _this.typeaheadStates[key];\n        };\n        this.getTypeaheadPrimaryIDPropertyName = function (key) {\n            return _this.getTypeaheadState(key).primaryIDPropertyName;\n        };\n        this.getIndexOfSelection = function (key, data) {\n            for (var j = 0; j < _this.getData(key).length; j++) {\n                if (angular.isDefined(data[_this.getTypeaheadPrimaryIDPropertyName(key)]) &&\n                    data[_this.getTypeaheadPrimaryIDPropertyName(key)] == _this.getData(key)[j][_this.getTypeaheadPrimaryIDPropertyName(key)]) {\n                    return j;\n                }\n                else if (_this.checkAgainstFallbackProperties(key, _this.getData(key)[j], data)) {\n                    return j;\n                }\n            }\n            return -1;\n        };\n        this.addSelection = function (key, data) {\n            if (angular.isUndefined(_this.typeaheadData[key])) {\n                _this.typeaheadData[key] = [];\n            }\n            _this.typeaheadData[key].push(data);\n            _this.notifyTypeaheadSelectionUpdateEvent(key, data);\n        };\n        this.removeSelection = function (key, index, data) {\n            if (angular.isUndefined(index) &&\n                angular.isDefined(data)) {\n                index = _this.getIndexOfSelection(key, data);\n            }\n            if (angular.isDefined(index) &&\n                angular.isDefined(_this.typeaheadData[key]) &&\n                index != -1) {\n                _this.updateSelections(key);\n                var removedItem = _this.typeaheadData[key].splice(index, 1)[0]; //this will always be an array of 1 element\n                _this.notifyTypeaheadSelectionUpdateEvent(key, removedItem);\n                return removedItem;\n            }\n        };\n        this.initializeSelections = function (key, selectedCollectionConfig) {\n            selectedCollectionConfig.setAllRecords(true);\n            _this.typeaheadPromises[key] = selectedCollectionConfig.getEntity();\n            _this.typeaheadPromises[key].then(function (data) {\n                for (var j = 0; j < data.records.length; j++) {\n                    _this.addSelection(key, data.records[j]);\n                }\n            }, function (reason) {\n                throw ("typeaheadservice had trouble intializing selections for " + key + " because " + reason);\n            });\n        };\n        this.updateSelections = function (key) {\n            if (angular.isDefined(_this.getData(key)) && _this.getData(key).length) {\n                for (var j = 0; j < _this.getTypeaheadState(key).results.length; j++) {\n                    for (var i = 0; i < _this.getData(key).length; i++) {\n                        if (_this.getData(key)[i][_this.getTypeaheadPrimaryIDPropertyName(key)] == _this.getTypeaheadState(key).results[j][_this.getTypeaheadPrimaryIDPropertyName(key)]) {\n                            _this.markResultSelected(_this.getTypeaheadState(key).results[j], i);\n                            break;\n                        }\n                        var found = _this.checkAgainstFallbackProperties(key, _this.getData(key)[i], _this.getTypeaheadState(key).results[j], i);\n                        if (found) {\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n        this.markResultSelected = function (result, index) {\n            result.selected = true;\n            result.selectedIndex = index;\n        };\n        this.checkAgainstFallbackProperties = function (key, selection, result, selectionIndex) {\n            var resultPrimaryID = result[_this.getTypeaheadPrimaryIDPropertyName(key)];\n            //is there a singular property to compare against\n            if (angular.isDefined(_this.getTypeaheadState(key).propertyToCompare) &&\n                _this.getTypeaheadState(key).propertyToCompare.length) {\n                if (angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare]) &&\n                    selection[_this.getTypeaheadState(key).propertyToCompare] == resultPrimaryID) {\n                    if (angular.isDefined(selectionIndex)) {\n                        _this.markResultSelected(result, selectionIndex);\n                    }\n                    return true;\n                }\n                if (angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare]) &&\n                    angular.isDefined(result[_this.getTypeaheadState(key).propertyToCompare]) &&\n                    selection[_this.getTypeaheadState(key).propertyToCompare] == result[_this.getTypeaheadState(key).propertyToCompare]) {\n                    if (angular.isDefined(selectionIndex)) {\n                        _this.markResultSelected(result, selectionIndex);\n                    }\n                    return true;\n                }\n            }\n            //check the defined fallback properties to see if theres a match\n            if (_this.getTypeaheadState(key).fallbackPropertyArray.length > 0) {\n                for (var j = 0; j < _this.getTypeaheadState(key).fallbackPropertyArray.length; j++) {\n                    var property = _this.getTypeaheadState(key).fallbackPropertyArray[j];\n                    if (angular.isDefined(selection[property])) {\n                        if (selection[property] == resultPrimaryID) {\n                            if (angular.isDefined(selectionIndex)) {\n                                _this.markResultSelected(result, selectionIndex);\n                            }\n                            return true;\n                        }\n                        if (angular.isDefined(result[property]) &&\n                            selection[property] == result[property]) {\n                            if (angular.isDefined(selectionIndex)) {\n                                _this.markResultSelected(result, selectionIndex);\n                            }\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        };\n        this.updateSelectionList = function (key) {\n            var selectionIDArray = [];\n            if (angular.isDefined(_this.getData(key))) {\n                for (var j = 0; j < _this.getData(key).length; j++) {\n                    var selection = _this.getData(key)[j];\n                    var primaryID = selection[_this.getTypeaheadPrimaryIDPropertyName(key)];\n                    if (angular.isDefined(primaryID)) {\n                        selectionIDArray.push(primaryID);\n                    }\n                    else if (angular.isDefined(_this.getTypeaheadState(key).propertyToCompare) &&\n                        angular.isDefined(selection[_this.getTypeaheadState(key).propertyToCompare])) {\n                        selectionIDArray.push(selection[_this.getTypeaheadState(key).propertyToCompare]);\n                    }\n                    else if (angular.isDefined(_this.getTypeaheadState(key).fallbackPropertyArray)) {\n                        var fallbackPropertyArray = _this.getTypeaheadState(key).fallbackPropertyArray;\n                        for (var i = 0; i < fallbackPropertyArray.length; i++) {\n                            var fallbackProperty = fallbackPropertyArray[i];\n                            if (angular.isDefined(selection[fallbackProperty])) {\n                                selectionIDArray.push(selection[fallbackProperty]);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            return selectionIDArray.join(",");\n        };\n        this.getData = function (key) {\n            if (key in _this.typeaheadPromises) {\n                //wait until it\'s been intialized\n                _this.typeaheadPromises[key].then().finally(function () {\n                    return _this.typeaheadData[key] || [];\n                });\n                delete _this.typeaheadPromises[key];\n            }\n            else {\n                return _this.typeaheadData[key] || [];\n            }\n        };\n        //strips out dangerous directives that cause infinite compile errors \n        // - this probably belongs in a different service but is used for typeahead only at the moment\n        this.stripTranscludedContent = function (transcludedContent) {\n            for (var i = 0; i < transcludedContent.length; i++) {\n                if (angular.isDefined(transcludedContent[i].localName) &&\n                    transcludedContent[i].localName == \'ng-transclude\') {\n                    transcludedContent = transcludedContent.children();\n                }\n            }\n            //prevent collection config from being recompiled\n            for (var i = 0; i < transcludedContent.length; i++) {\n                if (angular.isDefined(transcludedContent[i].localName) &&\n                    transcludedContent[i].localName == \'sw-collection-config\') {\n                    transcludedContent.splice(i, 1);\n                }\n            }\n            return transcludedContent;\n        };\n        this.typeaheadStore = new TypeaheadStore.IStore(this.state, this.typeaheadStateReducer); //.combineLatest(this.loggerEpic)\n    }\n    return TypeaheadService;\n}());\nexports.TypeaheadService = TypeaheadService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/typeaheadservice.ts?')},"../../../org/Hibachi/client/src/core/services/utilityservice.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/utilityservice.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\n/*services return promises which can be handled uniquely based on success or failure by the controller*/\nvar baseservice_1 = __webpack_require__(/*! ./baseservice */ \"../../../org/Hibachi/client/src/core/services/baseservice.ts\");\nvar UtilityService = /** @class */ (function (_super) {\n    __extends(UtilityService, _super);\n    //@ngInject\n    function UtilityService($parse) {\n        var _this = _super.call(this) || this;\n        _this.$parse = $parse;\n        _this.structKeyExists = function (struct, key) {\n            return key in struct;\n        };\n        _this.keyToAttributeString = function (key) {\n            var attributeString = \"data-\";\n            for (var i = 0; i < key.length; i++) {\n                if (key.charAt(i) == \"_\") {\n                    attributeString += \"-\";\n                }\n                else if (_this.isUpperCase(key.charAt(i))) {\n                    //special case for ID and Acronyms because it doesn't follow naming conventions\n                    if (i + 1 <= key.length && _this.isUpperCase(key.charAt(i + 1))) {\n                        if (key.charAt(i) + key.charAt(i + 1) == \"ID\") {\n                            attributeString += \"-id\";\n                            i++; //skip ahead\n                        }\n                        else if (_this.isUpperCase(key.charAt(i + 1))) {\n                            attributeString += \"-\";\n                            //this handles acronyms IE QATS \n                            while (i + 1 <= key.length && _this.isUpperCase(key.charAt(i + 1))) {\n                                attributeString += key.charAt(i).toLowerCase();\n                                i++;\n                            }\n                        }\n                    }\n                    else {\n                        attributeString += \"-\" + key.charAt(i).toLowerCase();\n                    }\n                }\n                else {\n                    attributeString += key.charAt(i);\n                }\n            }\n            return attributeString;\n        };\n        _this.isUpperCase = function (character) {\n            return character == character.toUpperCase();\n        };\n        _this.isLowerCase = function (character) {\n            return character == character.toLowerCase();\n        };\n        _this.snakeToCapitalCase = function (s) {\n            return s.charAt(0).toUpperCase() + s.replace(/(\\-\\w)/g, function (m) { return m[1].toUpperCase(); }).slice(1);\n        };\n        _this.camelCaseToSnakeCase = function (s) {\n            return s.replace(/([A-Z])/g, function ($1) { return \"-\" + $1.toLowerCase(); });\n        };\n        _this.replaceStringWithProperties = function (stringItem, context) {\n            var properties = _this.getPropertiesFromString(stringItem);\n            if (!properties)\n                return;\n            var data = [];\n            angular.forEach(properties, function (property) {\n                if (property.indexOf('.') != -1) {\n                    property = property.replace('.', '_');\n                }\n                var parseFunction = _this.$parse(property);\n                data.push(parseFunction(context));\n            });\n            return _this.replacePropertiesWithData(stringItem, data);\n        };\n        //used to do inheritance at runtime\n        _this.extend = function (ChildClass, ParentClass) {\n            ChildClass.prototype = new ParentClass();\n            ChildClass.prototype.constructor = ChildClass;\n        };\n        _this.getQueryParamsFromUrl = function (url) {\n            // This function is anonymous, is executed immediately and\n            // the return value is assigned to QueryString!\n            var query_string = {};\n            if (url && url.split) {\n                var spliturl = url.split('?');\n                if (spliturl.length) {\n                    url = spliturl[1];\n                    if (url && url.split) {\n                        var vars = url.split(\"&\");\n                        if (vars && vars.length) {\n                            for (var i = 0; i < vars.length; i++) {\n                                var pair = vars[i].split(\"=\");\n                                // If first entry with this name\n                                if (typeof query_string[pair[0]] === \"undefined\") {\n                                    query_string[pair[0]] = pair[1];\n                                    // If second entry with this name\n                                }\n                                else if (typeof query_string[pair[0]] === \"string\") {\n                                    var arr = [query_string[pair[0]], pair[1]];\n                                    query_string[pair[0]] = arr;\n                                    // If third or later entry with this name\n                                }\n                                else {\n                                    query_string[pair[0]].push(pair[1]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return query_string;\n        };\n        _this.isAngularRoute = function () {\n            return /[\\?&]ng#!/.test(window.location.href);\n        };\n        _this.ArrayFindByPropertyValue = function (arr, property, value) {\n            var currentIndex = -1;\n            arr.forEach(function (arrItem, index) {\n                if (arrItem[property] && arrItem[property] === value) {\n                    currentIndex = index;\n                }\n            });\n            return currentIndex;\n        };\n        _this.listLast = function (list, delimiter) {\n            if (list === void 0) { list = ''; }\n            if (delimiter === void 0) { delimiter = ','; }\n            var listArray = list.split(delimiter);\n            return listArray[listArray.length - 1];\n        };\n        _this.listRest = function (list, delimiter) {\n            if (list === void 0) { list = ''; }\n            if (delimiter === void 0) { delimiter = \",\"; }\n            var listArray = list.split(delimiter);\n            if (listArray.length) {\n                listArray.splice(0, 1);\n            }\n            return listArray.join(delimiter);\n        };\n        _this.listFirst = function (list, delimiter) {\n            if (list === void 0) { list = ''; }\n            if (delimiter === void 0) { delimiter = ','; }\n            var listArray = list.split(delimiter);\n            return listArray[0];\n        };\n        _this.listPrepend = function (list, substring, delimiter) {\n            if (list === void 0) { list = ''; }\n            if (substring === void 0) { substring = ''; }\n            if (delimiter === void 0) { delimiter = ','; }\n            var listArray = list.split(delimiter);\n            if (listArray.length) {\n                return substring + delimiter + list;\n            }\n            else {\n                return substring;\n            }\n        };\n        _this.listAppend = function (list, substring, delimiter) {\n            if (list === void 0) { list = ''; }\n            if (substring === void 0) { substring = ''; }\n            if (delimiter === void 0) { delimiter = ','; }\n            var listArray = list.split(delimiter);\n            if (list.trim() != '' && listArray.length) {\n                return list + delimiter + substring;\n            }\n            else {\n                return substring;\n            }\n        };\n        _this.listAppendUnique = function (list, substring, delimiter) {\n            if (list === void 0) { list = ''; }\n            if (substring === void 0) { substring = ''; }\n            if (delimiter === void 0) { delimiter = ','; }\n            var listArray = list.split(delimiter);\n            if (list.trim() != '' && listArray.length && listArray.indexOf(substring) == -1) {\n                return list + delimiter + substring;\n            }\n            else {\n                return substring;\n            }\n        };\n        /**\n         * Removes an element from a list.\n         * str: The original list.\n         * subStr: The element to remove.\n         * returns the modified list.\n         */\n        _this.listRemove = function (str, substring) {\n            var strArray = str.split(',');\n            var index = strArray.indexOf(substring);\n            if (index > -1) {\n                strArray.splice(index, 1);\n            }\n            return strArray.join();\n        };\n        _this.formatValue = function (value, formatType, formatDetails, entityInstance) {\n            if (angular.isUndefined(formatDetails)) {\n                formatDetails = {};\n            }\n            var typeList = [\"currency\", \"date\", \"datetime\", \"pixels\", \"percentage\", \"second\", \"time\", \"truefalse\", \"url\", \"weight\", \"yesno\"];\n            if (typeList.indexOf(formatType)) {\n                _this['format_' + formatType](value, formatDetails, entityInstance);\n            }\n            return value;\n        };\n        _this.format_currency = function (value, formatDetails, entityInstance) {\n            if (angular.isUndefined) {\n                formatDetails = {};\n            }\n        };\n        _this.format_date = function (value, formatDetails, entityInstance) {\n            if (angular.isUndefined) {\n                formatDetails = {};\n            }\n        };\n        _this.format_datetime = function (value, formatDetails, entityInstance) {\n            if (angular.isUndefined) {\n                formatDetails = {};\n            }\n        };\n        _this.format_pixels = function (value, formatDetails, entityInstance) {\n            if (angular.isUndefined) {\n                formatDetails = {};\n            }\n        };\n        _this.format_yesno = function (value, formatDetails, entityInstance) {\n            if (angular.isUndefined) {\n                formatDetails = {};\n            }\n            if (Boolean(value) === true) {\n                return entityInstance.metaData.$$getRBKey(\"define.yes\");\n            }\n            else if (value === false || value.trim() === 'No' || value.trim === 'NO' || value.trim() === '0') {\n                return entityInstance.metaData.$$getRBKey(\"define.no\");\n            }\n        };\n        _this.left = function (stringItem, count) {\n            return stringItem.substring(0, count);\n        };\n        _this.right = function (stringItem, count) {\n            return stringItem.substring(stringItem.length - count, stringItem.length);\n        };\n        //this.utilityService.mid(propertyIdentifier,1,propertyIdentifier.lastIndexOf('.'));\n        _this.mid = function (stringItem, start, count) {\n            var end = start + count;\n            return stringItem.substring(start, end);\n        };\n        _this.getPropertiesFromString = function (stringItem) {\n            if (!stringItem)\n                return;\n            var capture = false;\n            var property = '';\n            var results = [];\n            for (var i = 0; i < stringItem.length; i++) {\n                if (!capture && stringItem.substr(i, 2) == \"${\") {\n                    property = '';\n                    capture = true;\n                    i = i + 1; //skip the ${\n                }\n                else if (capture && stringItem[i] != '}') {\n                    property = property.concat(stringItem[i]);\n                }\n                else if (capture) {\n                    results.push(property);\n                    capture = false;\n                }\n            }\n            return results;\n        };\n        _this.replacePropertiesWithData = function (stringItem, data) {\n            var results = _this.getPropertiesFromString(stringItem);\n            for (var i = 0; i < results.length; i++) {\n                stringItem = stringItem.replace('${' + results[i] + '}', data[i]);\n            }\n            return stringItem;\n        };\n        _this.replaceAll = function (stringItem, find, replace) {\n            return stringItem.replace(new RegExp(_this.escapeRegExp(find), 'g'), replace);\n        };\n        _this.escapeRegExp = function (stringItem) {\n            return stringItem.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n        };\n        _this.createID = function (count) {\n            var count = count || 26;\n            var text = \"\";\n            var firstPossibleCharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n            var nextPossibleCharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n            var currentPossibleCharacters = \"\";\n            for (var i = 0; i < count; i++) {\n                if (i === 0) {\n                    currentPossibleCharacters = firstPossibleCharacters;\n                }\n                else {\n                    currentPossibleCharacters = nextPossibleCharacters;\n                }\n                text += currentPossibleCharacters.charAt(Math.floor(Math.random() * currentPossibleCharacters.length));\n            }\n            return text;\n        };\n        //list functions\n        _this.arrayToList = function (array, delimiter) {\n            if (delimiter != null) {\n                return array.join(delimiter);\n            }\n            else {\n                return array.join();\n            }\n        };\n        _this.getPropertyValue = function (object, propertyIdentifier) {\n            var keys = propertyIdentifier.split('.'), obj = object, keyPart;\n            while ((keyPart = keys.shift()) && keys.length) {\n                obj = obj[keyPart];\n            }\n            return obj[keyPart];\n        };\n        _this.setPropertyValue = function (object, propertyIdentifier, value) {\n            var keys = propertyIdentifier.split('.'), obj = object, keyPart;\n            while ((keyPart = keys.shift()) && keys.length) {\n                if (!obj[keyPart]) {\n                    obj[keyPart] = {};\n                }\n                obj = obj[keyPart];\n            }\n            obj[keyPart] = value;\n        };\n        _this.nvpToObject = function (NVPData) {\n            var object = {};\n            for (var key in NVPData) {\n                var value = NVPData[key];\n                var propertyIdentitifer = key.replace(/\\_/g, '.');\n                _this.setPropertyValue(object, propertyIdentitifer, value);\n            }\n            return object;\n        };\n        _this.isDescendantElement = function (parent, child) {\n            var node = child.parentNode;\n            while (node != null) {\n                if (node == parent) {\n                    return true;\n                }\n                node = node.parentNode;\n            }\n            return false;\n        };\n        //utility service toJson avoids circular references\n        _this.toJson = function (obj) {\n            var seen = [];\n            return JSON.stringify(obj, function (key, val) {\n                if (val != null && typeof val == \"object\") {\n                    if (seen.indexOf(val) >= 0) {\n                        return;\n                    }\n                    seen.push(val);\n                }\n                return val;\n            });\n        };\n        _this.listFind = function (list, value, delimiter) {\n            if (list === void 0) { list = ''; }\n            if (value === void 0) { value = ''; }\n            if (delimiter === void 0) { delimiter = ','; }\n            var splitString = list.split(delimiter);\n            var stringFound = -1;\n            for (var i = 0; i < splitString.length; i++) {\n                var stringPart = splitString[i];\n                if (stringPart === value) {\n                    stringFound = i;\n                }\n            }\n            return stringFound;\n        };\n        _this.listLen = function (list, delimiter) {\n            if (list === void 0) { list = ''; }\n            if (delimiter === void 0) { delimiter = ','; }\n            var splitString = list.split(delimiter);\n            return splitString.length;\n        };\n        //This will enable you to sort by two separate keys in the order they are passed in\n        _this.arraySorter = function (array, keysToSortBy) {\n            var arrayOfTypes = [], returnArray = [], firstKey = keysToSortBy[0];\n            if (angular.isDefined(keysToSortBy[1])) {\n                var secondKey = keysToSortBy[1];\n            }\n            for (var itemIndex in array) {\n                if (!(arrayOfTypes.indexOf(array[itemIndex][firstKey]) > -1)) {\n                    arrayOfTypes.push(array[itemIndex][firstKey]);\n                }\n            }\n            arrayOfTypes.sort(function (a, b) {\n                if (a < b) {\n                    return -1;\n                }\n                else if (a > b) {\n                    return 1;\n                }\n                else {\n                    return 0;\n                }\n            });\n            for (var typeIndex in arrayOfTypes) {\n                var tempArray = [];\n                for (var itemIndex in array) {\n                    if (array[itemIndex][firstKey] == arrayOfTypes[typeIndex]) {\n                        tempArray.push(array[itemIndex]);\n                    }\n                }\n                if (keysToSortBy[1] != null) {\n                    tempArray.sort(function (a, b) {\n                        if (a[secondKey] < b[secondKey]) {\n                            return -1;\n                        }\n                        else if (a[secondKey] > b[secondKey]) {\n                            return 1;\n                        }\n                        else {\n                            return 0;\n                        }\n                    });\n                }\n                for (var finalIndex in tempArray) {\n                    returnArray.push(tempArray[finalIndex]);\n                }\n            }\n            return returnArray;\n        };\n        _this.minutesOfDay = function (m) {\n            return m.getMinutes() + m.getHours() * 60;\n        };\n        _this.removeTimeOffset = function (timestampStr) {\n            var date = new Date(timestampStr);\n            var correctDate = new Date();\n            correctDate.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n            return correctDate.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n        };\n        return _this;\n    }\n    return UtilityService;\n}(baseservice_1.BaseService));\nexports.UtilityService = UtilityService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/core/services/utilityservice.ts?")},"../../../org/Hibachi/client/src/dialog/controllers/pagedialog.ts":
/*!*********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/dialog/controllers/pagedialog.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar PageDialogController = /** @class */ (function () {\n    //@ngInject\n    function PageDialogController($scope, $location, $anchorScroll, dialogService) {\n        $scope.$id = 'pageDialogController';\n        //get url param to retrieve collection listing\n        $scope.pageDialogs = dialogService.getPageDialogs();\n        $scope.scrollToTopOfDialog = function () {\n            $location.hash('/#topOfPageDialog');\n            $anchorScroll();\n        };\n        $scope.pageDialogStyle = { \"z-index\": 3000 };\n    }\n    return PageDialogController;\n}());\nexports.PageDialogController = PageDialogController;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/dialog/controllers/pagedialog.ts?")},"../../../org/Hibachi/client/src/dialog/dialog.module.ts":
/*!************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/dialog/dialog.module.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//services\nvar dialogservice_1 = __webpack_require__(/*! ./services/dialogservice */ \"../../../org/Hibachi/client/src/dialog/services/dialogservice.ts\");\n//controllers\nvar pagedialog_1 = __webpack_require__(/*! ./controllers/pagedialog */ \"../../../org/Hibachi/client/src/dialog/controllers/pagedialog.ts\");\nvar dialogmodule = angular.module('hibachi.dialog', []).config(function () {\n})\n    //services\n    .service('dialogService', dialogservice_1.DialogService)\n    //controllers\n    .controller('pageDialog', pagedialog_1.PageDialogController)\n    //filters\n    //constants\n    .constant('dialogPartials', 'dialog/components/');\nexports.dialogmodule = dialogmodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/dialog/dialog.module.ts?")},"../../../org/Hibachi/client/src/dialog/services/dialogservice.ts":
/*!*********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/dialog/services/dialogservice.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DialogService = /** @class */ (function () {\n    function DialogService(hibachiPathBuilder) {\n        var _this = this;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.get = function () {\n            return _this._pageDialogs || [];\n        };\n        this.addPageDialog = function (name, params) {\n            var newDialog = {\n                'path': name + '.html',\n                'params': params\n            };\n            _this._pageDialogs.push(newDialog);\n        };\n        this.removePageDialog = function (index) {\n            _this._pageDialogs.splice(index, 1);\n        };\n        this.getPageDialogs = function () {\n            return _this._pageDialogs;\n        };\n        this.removeCurrentDialog = function () {\n            _this._pageDialogs.splice(_this._pageDialogs.length - 1, 1);\n        };\n        this.getCurrentDialog = function () {\n            return _this._pageDialogs[_this._pageDialogs.length - 1];\n        };\n        this._pageDialogs = [];\n        this.hibachiPathBuilder = hibachiPathBuilder;\n    }\n    DialogService.$inject = [\n        'hibachiPathBuilder'\n    ];\n    return DialogService;\n}());\nexports.DialogService = DialogService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/dialog/services/dialogservice.ts?")},"../../../org/Hibachi/client/src/entity/components/swdetail.ts":
/*!******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/components/swdetail.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWDetail = /** @class */ (function () {\n    function SWDetail($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + '/detail.html',\n            link: function (scope, element, attr) {\n                scope.$id = \"slatwallDetailController\";\n                $log.debug('slatwallDetailController');\n                /*Sets the view dirty on save*/\n                scope.setDirty = function (entity) {\n                    angular.forEach(entity.forms, function (form) {\n                        form.$setSubmitted();\n                    });\n                };\n                var setupMetaData = function () {\n                    scope[scope.entityName.toLowerCase()] = scope.entity;\n                    scope.entity.metaData.$$getDetailTabs().then(function (value) {\n                        scope.detailTabs = value.data;\n                        $log.debug('detailtabs');\n                        $log.debug(scope.detailTabs);\n                    });\n                };\n                var propertyCasedEntityName = scope.entityName.charAt(0).toUpperCase() + scope.entityName.slice(1);\n                scope.tabPartialPath = hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath);\n                scope.getEntity = function () {\n                    if (scope.entityID === 'create') {\n                        scope.createMode = true;\n                        scope.entity = $hibachi['new' + propertyCasedEntityName]();\n                        setupMetaData();\n                    }\n                    else {\n                        scope.createMode = false;\n                        var entityPromise = $hibachi['get' + propertyCasedEntityName]({ id: scope.entityID });\n                        entityPromise.promise.then(function () {\n                            scope.entity = entityPromise.value;\n                            setupMetaData();\n                        });\n                    }\n                };\n                scope.getEntity();\n                scope.deleteEntity = function () {\n                    var deletePromise = scope.entity.$$delete();\n                    deletePromise.then(function () {\n                        $location.path('/entity/' + propertyCasedEntityName + '/');\n                    });\n                };\n                scope.allTabsOpen = false;\n            }\n        };\n    }\n    SWDetail.Factory = function () {\n        var directive = function ($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder) { return new SWDetail($location, $log, $hibachi, coreEntityPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$location',\n            '$log',\n            '$hibachi',\n            'coreEntityPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWDetail;\n}());\nexports.SWDetail = SWDetail;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/components/swdetail.ts?")},"../../../org/Hibachi/client/src/entity/components/swdetailtabs.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/components/swdetailtabs.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWDetailTabs = /** @class */ (function () {\n    function SWDetailTabs(coreEntityPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + 'detailtabs.html',\n            link: function (scope, element, attr) {\n            }\n        };\n    }\n    SWDetailTabs.Factory = function () {\n        var directive = function (coreEntityPartialsPath, hibachiPathBuilder) { return new SWDetailTabs(coreEntityPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            'coreEntityPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWDetailTabs;\n}());\nexports.SWDetailTabs = SWDetailTabs;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/components/swdetailtabs.ts?")},"../../../org/Hibachi/client/src/entity/components/swlist.ts":
/*!****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/components/swlist.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWList = /** @class */ (function () {\n    function SWList($log, coreEntityPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(coreEntityPartialsPath) + '/list.html',\n            link: function (scope, element, attr) {\n                $log.debug('slatwallList init');\n                //scope.getCollection = function(){\n                //\n                //\tvar pageShow = 50;\n                //\tif(scope.pageShow !== 'Auto'){\n                //\t\tpageShow = scope.pageShow;\n                //\t}\n                //\tscope.entityName = scope.entityName.charAt(0).toUpperCase()+scope.entityName.slice(1);\n                //\tvar collectionListingPromise = $hibachi.getEntity(scope.entityName, {currentPage:scope.currentPage, pageShow:pageShow, keywords:scope.keywords});\n                //\tcollectionListingPromise.then(function(value){\n                //\t\tscope.collection = value;\n                //\t\tscope.collectionConfig = angular.fromJson(scope.collection.collectionConfig);\n                //\t});\n                //};\n                //scope.getCollection();\n            }\n        };\n    }\n    SWList.Factory = function () {\n        var directive = function ($log, coreEntityPartialsPath, hibachiPathBuilder) { return new SWList($log, coreEntityPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$log',\n            'coreEntityPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWList;\n}());\nexports.SWList = SWList;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/components/swlist.ts?")},"../../../org/Hibachi/client/src/entity/controllers/otherwisecontroller.ts":
/*!******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/controllers/otherwisecontroller.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar OtherWiseController = /** @class */ (function () {\n    //@ngInject\n    function OtherWiseController($scope) {\n        $scope.$id = \"otherwiseController\";\n    }\n    return OtherWiseController;\n}());\nexports.OtherWiseController = OtherWiseController;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/controllers/otherwisecontroller.ts?")},"../../../org/Hibachi/client/src/entity/controllers/routercontroller.ts":
/*!***************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/controllers/routercontroller.ts ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar RouterController = /** @class */ (function () {\n    //@ngInject\n    function RouterController($scope, $routeParams, $location, $log, utilityService) {\n        $scope.$id = \"routerController\";\n        $scope.partialRoute = '';\n        $log.debug($routeParams);\n        $log.debug($location);\n        var path = $location.path();\n        $scope.controllerType = path.split('/')[1];\n        var type;\n        if ($scope.controllerType === 'entity') {\n            //remove all dashes\n            $scope.entityName = utilityService.snakeToCapitalCase($routeParams.entityName);\n            if (angular.isDefined($routeParams.entityID)) {\n                $scope.entityID = $routeParams.entityID || '';\n            }\n        }\n    }\n    return RouterController;\n}());\nexports.RouterController = RouterController;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/controllers/routercontroller.ts?")},"../../../org/Hibachi/client/src/entity/entity.module.ts":
/*!************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/entity.module.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//services\n// import {AccountService} from \"./services/accountservice\";\n// import {CartService} from \"./services/cartservice\";\n// import {UtilityService} from \"./services/utilityservice\";\n// import {SelectionService} from \"./services/selectionservice\";\n// import {ObserverService} from \"./services/observerservice\";\n// import {FormService} from \"./services/formservice\";\n// import {MetaDataService} from \"./services/metadataservice\";\n//controllers\nvar otherwisecontroller_1 = __webpack_require__(/*! ./controllers/otherwisecontroller */ \"../../../org/Hibachi/client/src/entity/controllers/otherwisecontroller.ts\");\nvar routercontroller_1 = __webpack_require__(/*! ./controllers/routercontroller */ \"../../../org/Hibachi/client/src/entity/controllers/routercontroller.ts\");\n//directives\nvar swdetailtabs_1 = __webpack_require__(/*! ./components/swdetailtabs */ \"../../../org/Hibachi/client/src/entity/components/swdetailtabs.ts\");\nvar swdetail_1 = __webpack_require__(/*! ./components/swdetail */ \"../../../org/Hibachi/client/src/entity/components/swdetail.ts\");\nvar swlist_1 = __webpack_require__(/*! ./components/swlist */ \"../../../org/Hibachi/client/src/entity/components/swlist.ts\");\nvar core_module_1 = __webpack_require__(/*! ../core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\nvar entitymodule = angular.module('hibachi.entity', ['ngRoute', core_module_1.coremodule.name])\n    .config(['$routeProvider', '$injector', '$locationProvider', 'appConfig',\n    function ($routeProvider, $injector, $locationProvider, appConfig) {\n        //detect if we are in hashbang mode\n        var vars = {};\n        var parts = window.location.href.replace(/[?&]+([^=&]+)#([^/]*)/gi, function (m, key, value) {\n            vars[key] = value;\n        });\n        if (vars.ng) {\n            $locationProvider.html5Mode(false).hashPrefix('!');\n        }\n        var snakeToCapitalCase = function (s) {\n            return s.charAt(0).toUpperCase() + s.replace(/(\\-\\w)/g, function (m) { return m[1].toUpperCase(); }).slice(1);\n        };\n        $routeProvider.when('/entity/:entityName/', {\n            template: function (params) {\n                var entityDirectiveExists = $injector.has('sw' + snakeToCapitalCase(params.entityName) + 'ListDirective');\n                if (entityDirectiveExists) {\n                    return '<sw-' + params.entityName.toLowerCase() + '-list></sw-' + params.entityName.toLowerCase() + '-list>';\n                }\n                else {\n                    return '<sw-list></sw-list>';\n                }\n            },\n            controller: 'routerController'\n        }).when('/entity/:entityName/:entityID', {\n            template: function (params) {\n                var entityDirectiveExists = $injector.has('sw' + snakeToCapitalCase(params.entityName) + 'DetailDirective');\n                if (entityDirectiveExists) {\n                    return '<sw-' + params.entityName.toLowerCase() + '-detail></sw-' + params.entityName.toLowerCase() + '-detail>';\n                }\n                else {\n                    return '<sw-detail></sw-detail>';\n                }\n            },\n            controller: 'routerController',\n        });\n        //        .otherwise({\n        //         //controller:'otherwiseController'\n        //         templateUrl: appConfig.baseURL + '/admin/client/js/partials/otherwise.html',\n        //     });\n    }])\n    .constant('coreEntityPartialsPath', 'entity/components/')\n    //services\n    //controllers\n    .controller('otherwiseController', otherwisecontroller_1.OtherWiseController)\n    .controller('routerController', routercontroller_1.RouterController)\n    //filters\n    //directives\n    .directive('swDetail', swdetail_1.SWDetail.Factory())\n    .directive('swDetailTabs', swdetailtabs_1.SWDetailTabs.Factory())\n    .directive('swList', swlist_1.SWList.Factory());\nexports.entitymodule = entitymodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/entity/entity.module.ts?")},"../../../org/Hibachi/client/src/form/components/swaddressform.ts":
/*!*********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swaddressform.ts ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWAddressFormController = /** @class */ (function () {\n    //@ngInject\n    function SWAddressFormController($scope, $log, observerService, $rootScope) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$log = $log;\n        this.observerService = observerService;\n        this.$rootScope = $rootScope;\n        this.showAddressBookSelect = false;\n        this.showCountrySelect = true;\n        this.showSubmitButton = true;\n        this.showCloseButton = true;\n        this.param = "?slataction=";\n        this.showAlerts = "true";\n        this.getAction = function () {\n            if (!angular.isDefined(_this.action)) {\n                _this.action = "addAddress";\n            }\n            if (_this.action.indexOf(":") != -1 && _this.action.indexOf(_this.param) == -1) {\n                _this.action = _this.param + _this.action;\n            }\n            return _this.action;\n        };\n        this.hasField = function (field) {\n            if (_this.fieldList.indexOf(field) != -1) {\n                return true;\n            }\n            return false;\n        };\n        this.submitKeyCheck = function (event) {\n            if (event.form.$name == _this.addressName &&\n                event.event.keyCode == 13) {\n                event.swForm.submit(event.swForm.action);\n            }\n        };\n        //if exists, just name it slatwall.\n        if (angular.isDefined(this.slatwallScope)) {\n            this.slatwall = this.slatwallScope;\n        }\n        if (this.fieldList == undefined) {\n            this.fieldList = "countryCode,name,company,streetAddress,street2Address,locality,city,stateCode,postalCode";\n        }\n        if (this.showAddressBookSelect == undefined) {\n            this.showAddressBookSelect = false;\n        }\n        if (this.showCountrySelect == undefined) {\n            this.showCountrySelect = true;\n        }\n        if (this.action == undefined) {\n            this.showSubmitButton = false;\n        }\n        if ($rootScope.slatwall && !$scope.slatwall) {\n            $scope.slatwall = $rootScope.slatwall;\n        }\n        var addressName = this.addressName;\n        if (this.address) {\n            this.address.getData = function () {\n                var formData = _this.address || {};\n                var form = _this.address.forms[addressName];\n                for (var key_1 in form) {\n                    var val = form[key_1];\n                    if (typeof val === \'object\' && val.hasOwnProperty(\'$modelValue\')) {\n                        if (val.$modelValue) {\n                            val = val.$modelValue;\n                        }\n                        else if (val.$viewValue) {\n                            val = val.$viewValue;\n                        }\n                        else {\n                            val = "";\n                        }\n                        if (angular.isString(val)) {\n                            formData[key_1] = val;\n                        }\n                        if (val.$modelValue) {\n                            formData[key_1] = val.$modelValue;\n                        }\n                        else if (val.$viewValue) {\n                            formData[key_1] = val.$viewValue;\n                        }\n                    }\n                }\n                return formData || "";\n            };\n        }\n        if (!this.eventListeners) {\n            this.eventListeners = {};\n        }\n        if (this.submitOnEnter) {\n            this.eventListeners.keyup = this.submitKeyCheck;\n        }\n        if (this.eventListeners) {\n            for (var key in this.eventListeners) {\n                observerService.attach(this.eventListeners[key], key);\n            }\n        }\n    }\n    return SWAddressFormController;\n}());\nexports.SWAddressFormController = SWAddressFormController;\nvar SWAddressForm = /** @class */ (function () {\n    // @ngInject\n    function SWAddressForm(coreFormPartialsPath, hibachiPathBuilder) {\n        var _this = this;\n        this.coreFormPartialsPath = coreFormPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.transclude = true;\n        this.controller = SWAddressFormController;\n        this.controllerAs = \'SwAddressForm\';\n        this.bindToController = {\n            action: \'@\',\n            actionText: \'@\',\n            context: \'@\',\n            customPartial: \'@\',\n            slatwallScope: \'=\',\n            address: "=",\n            id: "@?",\n            fieldNamePrefix: "@",\n            fieldList: "@",\n            fieldClass: "@",\n            fulfillmentIndex: "@",\n            tabIndex: "@",\n            addressName: "@",\n            showAddressBookSelect: "@",\n            showCountrySelect: "@",\n            showSubmitButton: "@",\n            showCloseButton: "@",\n            showAlerts: "@",\n            eventListeners: "=?",\n            submitOnEnter: "@",\n            stateOptions: "=?"\n        };\n        this.scope = {};\n        this.templateUrl = function (elem, attrs) {\n            if (attrs.customPartial) {\n                if (attrs.customPartial === "true") {\n                    return hibachiConfig.customPartialsPath + "addressform.html";\n                }\n                else {\n                    return hibachiConfig.customPartialsPath + attrs.customPartial;\n                }\n            }\n            else {\n                return _this.hibachiPathBuilder.buildPartialsPath(_this.coreFormPartialsPath) + "addressform.html";\n            }\n        };\n    }\n    /**\n     * Handles injecting the partials path into this class\n     */\n    SWAddressForm.Factory = function () {\n        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWAddressForm(coreFormPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\'coreFormPartialsPath\', \'hibachiPathBuilder\'];\n        return directive;\n    };\n    return SWAddressForm;\n}());\nexports.SWAddressForm = SWAddressForm;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swaddressform.ts?')},"../../../org/Hibachi/client/src/form/components/swerrordisplay.ts":
/*!**********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swerrordisplay.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWErrorDisplayController = /** @class */ (function () {\n    //@ngInject\n    function SWErrorDisplayController($injector) {\n        this.$injector = $injector;\n        this.$injector = $injector;\n    }\n    SWErrorDisplayController.prototype.$onInit = function () {\n        /**\n         if a css error class was passed to propertyDisplay, attach to form\n         which will apply it to the dynamically generateddiv that contains\n         the error message\n        **/\n        if (this.swfPropertyDisplay && this.swfPropertyDisplay.errorClass) {\n            this.swForm.errorClass = this.swfPropertyDisplay.errorClass;\n        }\n        var bindToControllerProps = this.$injector.get(\'swErrorDisplayDirective\')[0].bindToController;\n        for (var i in bindToControllerProps) {\n            if (!this[i] && i !== \'name\') {\n                if (!this[i] && this.swPropertyDisplay && this.swPropertyDisplay[i]) {\n                    this[i] = this.swPropertyDisplay[i];\n                }\n                else if (!this[i] && this.swfPropertyDisplay && this.swfPropertyDisplay[i]) {\n                    this[i] = this.swfPropertyDisplay[i];\n                }\n                else if (!this[i] && this.swForm && this.swForm[i]) {\n                    this[i] = this.swForm[i];\n                }\n            }\n        }\n        this.property = this.property || this.propertyIdentifier;\n        this.propertyIdentifier = this.propertyIdentifier || this.property;\n        if (!this.name && this.property) {\n            this.name = this.property;\n        }\n    };\n    return SWErrorDisplayController;\n}());\nexports.SWErrorDisplayController = SWErrorDisplayController;\nvar SWErrorDisplay = /** @class */ (function () {\n    // @ngInject\n    function SWErrorDisplay(coreFormPartialsPath, hibachiPathBuilder) {\n        this.coreFormPartialsPath = coreFormPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.require = {\n            swForm: "^?swForm",\n            form: "^?form",\n            swPropertyDisplay: "^?swPropertyDisplay",\n            swfPropertyDisplay: "^?swfPropertyDisplay"\n        };\n        this.restrict = "E";\n        this.controller = SWErrorDisplayController;\n        this.controllerAs = "swErrorDisplay";\n        this.scope = {};\n        this.bindToController = {\n            form: "=?",\n            name: "@?",\n            property: "@?",\n            propertyIdentifier: "@?",\n            errorClass: "@?"\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "errordisplay.html";\n    }\n    SWErrorDisplay.Factory = function () {\n        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWErrorDisplay(coreFormPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            \'coreFormPartialsPath\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWErrorDisplay;\n}());\nexports.SWErrorDisplay = SWErrorDisplay;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swerrordisplay.ts?')},"../../../org/Hibachi/client/src/form/components/swffileinput.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swffileinput.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWFFileInput = /** @class */ (function () {\n    // @ngInject\n    function SWFFileInput($parse) {\n        var _this = this;\n        this.$parse = $parse;\n        this.restrict = 'A';\n        // @ngInject\n        this.link = function (scope, element, attrs) {\n            var model = _this.$parse(attrs.fileModel);\n            element.bind('change', function () {\n                scope.$apply(function () {\n                    var firstElement = element[0];\n                    if (firstElement.files != undefined) {\n                        model.assign(scope, firstElement.files[0]);\n                    }\n                });\n            });\n        };\n    }\n    SWFFileInput.Factory = function () {\n        var directive = function ($parse) { return new SWFFileInput($parse); };\n        directive.$inject = [\n            '$parse'\n        ];\n        return directive;\n    };\n    return SWFFileInput;\n}());\nexports.SWFFileInput = SWFFileInput;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swffileinput.ts?")},"../../../org/Hibachi/client/src/form/components/swfform.ts":
/*!***************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swfform.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n* Form Controller handles the logic for this directive.\n*/\nvar SWFFormController = /** @class */ (function () {\n    // @ngInject\n    function SWFFormController($rootScope, $scope, $timeout, $hibachi, $element, validationService, hibachiValidationService) {\n        var _this = this;\n        this.$rootScope = $rootScope;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.$hibachi = $hibachi;\n        this.$element = $element;\n        this.validationService = validationService;\n        this.hibachiValidationService = hibachiValidationService;\n        this.fileFlag = false;\n        this.uploadProgressPercentage = 0;\n        this.$onInit = function () {\n        };\n        this.getFormData = function () {\n            var formData = {};\n            for (var key in _this.form) {\n                if (key.indexOf(\'$\') == -1) {\n                    formData[key] = _this.form[key].$modelValue || _this.form[key].$viewValue;\n                }\n            }\n            return formData;\n        };\n        this.calculateFileUploadProgress = function (xhr) {\n            xhr.upload.addEventListener("progress", function (event) {\n                if (event.lengthComputable) {\n                    _this.$timeout(function () {\n                        var uploadProgressPercentage = event.loaded / event.total;\n                        _this.uploadProgressPercentage = Math.floor(uploadProgressPercentage * 100);\n                    });\n                }\n            }, false);\n        };\n        this.getFileFromFormData = function (formData) {\n            var _a;\n            //currently supports just one file input\n            var file;\n            for (var key in formData) {\n                if (formData[key]["size"]) { //the size attribute indicates it\'s a file, this can be improved\n                    file = (_a = {\n                            "fileName": formData[key].name\n                        },\n                        _a[key] = formData[key],\n                        _a["propertyName"] = key,\n                        _a);\n                }\n            }\n            return file;\n        };\n        this.submitForm = function () {\n            if (_this.form.$valid) {\n                _this.loading = true;\n                var formData = _this.getFormData();\n                if (_this.fileFlag) {\n                    var file = _this.getFileFromFormData(formData);\n                    return _this.uploadFile(_this.method, file).then(function (result) {\n                        return _this.processResult(result);\n                    });\n                }\n                return _this.$rootScope.slatwall.doAction(_this.method, formData).then(function (result) {\n                    return _this.processResult(result);\n                });\n            }\n            else {\n                _this.form.$setSubmitted(true);\n                return new Promise(function (resolve, reject) { return []; });\n            }\n        };\n        this.uploadFile = function (action, data) {\n            return new Promise(function (resolve, reject) {\n                var url = _this.$rootScope.slatwall.appConfig.baseURL;\n                //check if the caller is defining a path to hit, otherwise use the public scope.\n                if (action.indexOf(":") !== -1) {\n                    url = url + action; //any path\n                }\n                else {\n                    url = _this.$rootScope.slatwall.baseActionPath + action; //public path\n                }\n                var formData = new FormData();\n                formData.append("fileName", data.fileName);\n                formData.append(data.propertyName, data[data.propertyName]);\n                formData.append("returnJsonObjects", "cart,account");\n                var xhr = new XMLHttpRequest();\n                xhr.open(\'POST\', url, true);\n                _this.calculateFileUploadProgress(xhr);\n                xhr.onload = function (result) {\n                    var response = JSON.parse(xhr.response);\n                    if (xhr.status === 200) {\n                        _this.$rootScope.slatwall.processAction(response, null);\n                        _this.successfulActions = response.successfulActions;\n                        _this.failureActions = response.failureActions;\n                        resolve(response);\n                    }\n                    else {\n                        reject(response);\n                    }\n                };\n                xhr.send(formData);\n            });\n        };\n        this.processResult = function (result) {\n            if (!result)\n                return result;\n            _this.$timeout(function () {\n                _this.loading = false;\n                _this.successfulActions = result.successfulActions;\n                _this.failureActions = result.failureActions;\n                _this.errors = result.errors;\n                if (result.errors && Object.keys(result.errors).length) {\n                    _this.errorToDisplay = result.errors[Object.keys(result.errors)[0]][0]; //getting first key in object and first error in array\n                }\n                if (result.successfulActions.length) {\n                    //if we have an array of actions and they\'re all complete, or if we have just one successful action\n                    if (_this.sRedirectUrl) {\n                        _this.$rootScope.slatwall.redirectExact(_this.sRedirectUrl);\n                    }\n                    if (_this.sAction) {\n                        _this.sAction();\n                    }\n                    _this.form.$setSubmitted(false);\n                    _this.form.$setPristine(true);\n                }\n                if (result.errors) {\n                    if (_this.fRedirectUrl) {\n                        _this.$rootScope.slatwall.redirectExact(_this.fRedirectUrl);\n                    }\n                    if (_this.fAction) {\n                        _this.fAction();\n                    }\n                }\n            });\n            return result;\n        };\n    }\n    return SWFFormController;\n}());\nexports.SWFFormController = SWFFormController;\nvar SWFForm = /** @class */ (function () {\n    // @ngInject\n    function SWFForm() {\n        this.require = {\n            form: \'?^form\',\n            ngModel: \'?^ngModel\'\n        };\n        this.priority = 1000;\n        this.restrict = "A";\n        //needs to have false scope to not interfere with form controller\n        this.scope = true;\n        /**\n         * Binds all of our variables to the controller so we can access using this\n         */\n        this.bindToController = {\n            method: "@?",\n            sRedirectUrl: "@?",\n            fRedirectUrl: "@?",\n            sAction: "=?",\n            fAction: "=?",\n            fileFlag: "@?"\n        };\n        this.controller = SWFFormController;\n        this.controllerAs = "swfForm";\n        /**\n            * Sets the context of this form\n            */\n        this.link = function (scope, element, attrs, formController) {\n        };\n    }\n    /**\n     * Handles injecting the partials path into this class\n     */\n    SWFForm.Factory = function () {\n        var directive = function () { return new SWFForm(); };\n        directive.$inject = [];\n        return directive;\n    };\n    return SWFForm;\n}());\nexports.SWFForm = SWFForm;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swfform.ts?')},"../../../org/Hibachi/client/src/form/components/swfformfield.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swfformfield.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/**********************************************************************************************\n **********************************************************************************************\n **********************************************************************************************\n **\t\t___________________________________________\n ** \tForm Field - type have the following options (This is for the frontend so it can be modified):\n **\n **\t\tcheckbox\t\t\t|\tAs a single checkbox this doesn\'t require any options, but it will create a hidden field for you so that the key gets submitted even when not checked.  The value of the checkbox will be 1\n **\t\tcheckboxgroup\t\t|\tRequires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}\n **\t\tfile\t\t\t\t|\tNo value can be passed in\n **\t\tmultiselect\t\t\t|\tRequires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}\n **\t\tpassword\t\t\t|\tNo Value can be passed in\n **\t\tradiogroup\t\t\t|\tRequires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}\n **\t\tselect      \t\t|\tRequires the valueOptions to be an array of simple value if name and value is same or array of structs with the format of {value="", name=""}\n **\t\ttext\t\t\t\t|\tSimple Text Field\n **\t\ttextarea\t\t\t|\tSimple Textarea\n **\t\tyesno\t\t\t\t|\tThis is used by booleans and flags to create a radio group of Yes and No\n **\t\tsubmit\t\t\t\t|\tsubmit button to post these properties back to the server.\n **\t\t------------------------------------------------------------------------------------------------------\n **\n **\t\tattr.valueObject" type="any" default="" />\n **\t\tattr.valueObjectProperty" type="string" default="" />\n **\n **\t\tGeneral Settings that end up getting applied to the value object\n **\t\tattr.type" type="string" default="text"\n **\t\tattr.name" type="string" default=""\n **\t\tattr.class" type="string" default=""\n **\t\tattr.value" type="any" default=""\n **\t\tattr.valueOptions" type="array" default="#arrayNew(1)#"\t\t\x3c!--- Used for select, checkbox group, multiselect ---\x3e\n **\t\tattr.fieldAttributes" type="string" default=""\n **\n *********************************************************************************************\n *********************************************************************************************\n *********************************************************************************************\n */\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n    * Property Display Controller handles the logic for this directive.\n    */\nvar SWFFormFieldController = /** @class */ (function () {\n    //@ngInject\n    function SWFFormFieldController($scope, $element, $compile, utilityService) {\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$compile = $compile;\n        this.utilityService = utilityService;\n        this.utilityService = utilityService;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$compile = $compile;\n    }\n    /**\n        * Handles the logic for the frontend version of the property display.\n        */\n    SWFFormFieldController.$inject = [\'$scope\', \'$element\', \'$compile\', \'utilityService\'];\n    return SWFFormFieldController;\n}());\n/**\n    * This class handles configuring formFields for use in process forms on the front end.\n    */\nvar SWFFormField = /** @class */ (function () {\n    function SWFFormField(coreFormPartialsPath, hibachiPathBuilder) {\n        this.restrict = "E";\n        this.require = { swfPropertyDisplayCtrl: "^?swfPropertyDisplay", form: "^?form" };\n        this.controller = SWFFormFieldController;\n        this.controllerAs = "swfFormField";\n        this.scope = {};\n        this.bindToController = {\n            propertyDisplay: "=?",\n            propertyIdentifier: "@?",\n            name: "@?",\n            class: "@?",\n            errorClass: "@?",\n            type: "@?"\n        };\n        this.link = function (scope, element, attrs, formController, transcludeFn) {\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + \'swfformfield.html\';\n    }\n    /**\n        * Handles injecting the partials path into this class\n        */\n    SWFFormField.Factory = function () {\n        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFFormField(coreFormPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            \'coreFormPartialsPath\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWFFormField;\n}());\nexports.SWFFormField = SWFFormField;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swfformfield.ts?')},"../../../org/Hibachi/client/src/form/components/swform.ts":
/*!**************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swform.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n* Form Controller handles the logic for this directive.\n*/\nvar SWFormController = /** @class */ (function () {\n    /**\n     * This controller handles most of the logic for the swFormDirective when more complicated self inspection is needed.\n     */\n    // @ngInject\n    function SWFormController($scope, $element, $hibachi, $http, $timeout, observerService, $rootScope, entityService, utilityService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$hibachi = $hibachi;\n        this.$http = $http;\n        this.$timeout = $timeout;\n        this.observerService = observerService;\n        this.$rootScope = $rootScope;\n        this.entityService = entityService;\n        this.utilityService = utilityService;\n        this.eventsObj = [];\n        this.formData = {};\n        this.parseObjectErrors = true;\n        this.completedActions = 0;\n        this.$onInit = function () {\n            if (_this.object && _this.parseObjectErrors) {\n                _this.$timeout(function () {\n                    _this.parseErrors(_this.object.errors);\n                });\n            }\n        };\n        this.isObject = function () {\n            return (angular.isObject(_this.object));\n        };\n        this.submitKeyCheck = function (event) {\n            if (event.form.$name == _this.name &&\n                event.event.keyCode == 13) {\n                _this.submit(event.swForm.action);\n            }\n        };\n        /** create the generic submit function */\n        this.submit = function (actions) {\n            _this.actions = actions || _this.action;\n            console.log(\'actions!\', _this.actions);\n            _this.clearErrors();\n            _this.formData = _this.getFormData() || "";\n            _this.doActions(_this.actions);\n        };\n        //array or comma delimited\n        this.doActions = function (actions) {\n            if (angular.isArray(actions)) {\n                _this.completedActions = 0;\n                for (var _i = 0, _a = actions; _i < _a.length; _i++) {\n                    var action = _a[_i];\n                    _this.doAction(action);\n                }\n            }\n            else if (angular.isString(actions)) {\n                _this.doAction(actions);\n            }\n            else {\n                throw ("Unknown type of action exception");\n            }\n        };\n        // /** iterates through the factory submitting data */\n        this.doAction = function (action) {\n            if (!action) {\n                throw "Action not defined on form";\n            }\n            _this.formData = _this.formData || {};\n            //\n            var request = _this.$rootScope.hibachiScope.doAction(action, _this.formData)\n                .then(function (result) {\n                if (!result)\n                    return;\n                if (result.successfulActions.length) {\n                    _this.completedActions++;\n                }\n                if ((angular.isArray(_this.actions) && _this.completedActions === _this.actions.length)\n                    ||\n                        (!angular.isArray(_this.actions)) && result.successfulActions.length) {\n                    //if we have an array of actions and they\'re all complete, or if we have just one successful action\n                    if (_this.sRedirectUrl) {\n                        _this.$rootScope.slatwall.redirectExact(_this.sRedirectUrl);\n                    }\n                }\n                _this.object.forms[_this.name].$setSubmitted(true);\n                if (result.errors) {\n                    _this.parseErrors(result.errors);\n                    if (_this.fRedirectUrl) {\n                        _this.$rootScope.slatwall.redirectExact(_this.fRedirectUrl);\n                    }\n                }\n            });\n        };\n        /****\n             * Handle parsing through the server errors and injecting the error text for that field\n            * If the form only has a submit, then simply call that function and set errors.\n            ***/\n        this.parseErrors = function (errors) {\n            if (angular.isDefined(errors) && errors) {\n                angular.forEach(errors, function (val, key) {\n                    var primaryElement = _this.$element.find("[error-for=\'" + key + "\']");\n                    _this.$timeout(function () {\n                        /**\n                        if an error class has been attached to this form\n                        by its children propertydisplay or errorDisplay, use it.\n                        Otherwise, just add a generic \'error\' class\n                        to the error message **/\n                        var errorClass = _this.errorClass ? _this.errorClass : "error";\n                        errors[key].forEach(function (error) {\n                            primaryElement.append("<div class=\'" + errorClass + "\' name=\'" + key + "Error\'>" + error + "</div>");\n                        });\n                    }, 0);\n                }, _this);\n            }\n        };\n        /** find and clear all errors on form */\n        this.clearErrors = function () {\n            /** clear all form errors on submit. */\n            _this.$timeout(function () {\n                var errorElements = _this.$element.find("[error-for]");\n                errorElements.empty();\n            }, 0);\n        };\n        this.eventsHandler = function (params) {\n            //this will call any form specific functions such as hide,show,refresh,update or whatever else you later add\n            for (var e in params.events) {\n                if (angular.isDefined(params.events[e].value) && params.events[e].value == _this.name.toLowerCase()) {\n                    if (params.events[e].name && _this[params.events[e].name]) {\n                        _this[params.events[e].name](params.events[e].value);\n                    }\n                }\n            }\n        };\n        /** hides this directive on event */\n        this.hide = function (param) {\n            if (_this.name.toLowerCase() == param) {\n                _this.$element.hide();\n            }\n        };\n        /** shows this directive on event */\n        this.show = function (param) {\n            if (_this.name.toLowerCase() == param) {\n                _this.$element.show();\n            }\n        };\n        /** refreshes this directive on event */\n        this.refresh = function (params) {\n            //stub\n        };\n        /** updates this directive on event */\n        this.update = function (params) {\n            //stub\n        };\n        /** clears this directive on event */\n        this.clear = function (params) {\n            var iterable = _this.formCtrl;\n            angular.forEach(iterable, function (val, key) {\n                if (typeof val === \'object\' && val.hasOwnProperty(\'$modelValue\')) {\n                    if (_this.object.forms[_this.name][key].$viewValue) {\n                        _this.object.forms[_this.name][key].$setViewValue("");\n                        _this.object.forms[_this.name][key].$render();\n                    }\n                }\n                else {\n                    val = "";\n                }\n            });\n        };\n        /** returns all the data from the form by iterating the form elements */\n        this.getFormData = function () {\n            var iterable = _this.formCtrl;\n            angular.forEach(iterable, function (val, key) {\n                if (typeof val === \'object\' && val.hasOwnProperty(\'$modelValue\')) {\n                    if (_this.object.forms[_this.name][key].$modelValue != undefined) {\n                        val = _this.object.forms[_this.name][key].$modelValue;\n                    }\n                    else if (_this.object.forms[_this.name][key].$viewValue != undefined) {\n                        val = _this.object.forms[_this.name][key].$viewValue;\n                    }\n                    else if (_this.object.forms[_this.name][key].$dirty) {\n                        val = "";\n                    }\n                    /** Check for form elements that have a name that doesn\'t start with $ */\n                    if (angular.isString(val) || angular.isNumber(val) || typeof val == \'boolean\') {\n                        _this.formData[key] = val;\n                    }\n                    if (val.$modelValue != undefined) {\n                        _this.formData[key] = val.$modelValue;\n                    }\n                    else if (val.$viewValue != undefined) {\n                        _this.formData[key] = val.$viewValue;\n                    }\n                }\n                else {\n                }\n            });\n            return _this.formData || "";\n        };\n        /** only use if the developer has specified these features with isProcessForm */\n        this.$hibachi = $hibachi;\n        this.utilityService = utilityService;\n        if (angular.isUndefined(this.isDirty)) {\n            this.isDirty = false;\n        }\n        //object can be either an instance or a string that will become an instance\n        if (angular.isString(this.object)) {\n            var objectNameArray = this.object.split(\'_\');\n            this.entityName = objectNameArray[0];\n            //if the object name array has two parts then we can infer that it is a process object\n            if (objectNameArray.length > 1) {\n                this.context = this.context || objectNameArray[1];\n                this.isProcessForm = true;\n            }\n            else {\n                this.context = this.context || \'save\';\n                this.isProcessForm = false;\n            }\n            //convert the string to an object\n            this.$timeout(function () {\n                _this.object = _this.$hibachi[\'new\' + _this.object]();\n            });\n        }\n        else {\n            if (this.object && this.object.metaData) {\n                this.isProcessForm = this.object.metaData.isProcessObject;\n                this.entityName = this.object.metaData.className.split(\'_\')[0];\n                if (this.isProcessForm) {\n                    this.context = this.context || this.object.metaData.className.split(\'_\')[1];\n                }\n                else {\n                    this.context = this.context || \'save\';\n                }\n            }\n        }\n        //\n        this.context = this.context || this.name;\n        if (this.isProcessForm) {\n            /** Cart is an alias for an Order */\n            if (this.entityName == "Order") {\n                this.entityName = "Cart";\n            }\n            ;\n        }\n        if (this.submitOnEnter) {\n            this.eventListeners = this.eventListeners || {};\n            this.eventListeners.keyup = this.submitKeyCheck;\n        }\n        if (this.eventListeners) {\n            for (var key in this.eventListeners) {\n                this.observerService.attach(this.eventListeners[key], key);\n            }\n        }\n    }\n    return SWFormController;\n}());\nexports.SWFormController = SWFormController;\nvar SWForm = /** @class */ (function () {\n    // @ngInject\n    function SWForm(coreFormPartialsPath, hibachiPathBuilder) {\n        this.coreFormPartialsPath = coreFormPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.templateUrl = "";\n        this.transclude = true;\n        this.restrict = "E";\n        this.controller = SWFormController;\n        this.controllerAs = "swForm";\n        this.scope = {};\n        /**\n         * Binds all of our variables to the controller so we can access using this\n         */\n        this.bindToController = {\n            name: "@?",\n            context: "@?",\n            entityName: "@?",\n            hiddenFields: "=?",\n            action: "@?",\n            actions: "@?",\n            formClass: "@?",\n            formData: "=?",\n            errorClass: \'@?\',\n            object: "=?",\n            onSuccess: "@?",\n            onError: "@?",\n            hideUntil: "@?",\n            isDirty: "=?",\n            inputAttributes: "@?",\n            eventListeners: "=?",\n            eventAnnouncers: "@",\n            submitOnEnter: "@",\n            parseObjectErrors: "@?",\n            sRedirectUrl: "@?",\n            fRedirectUrl: "@?"\n        };\n        /**\n            * Sets the context of this form\n            */\n        this.link = function (scope, element, attrs, controller) {\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + "form.html";\n    }\n    /**\n     * Handles injecting the partials path into this class\n     */\n    SWForm.Factory = function () {\n        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWForm(coreFormPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\'coreFormPartialsPath\', \'hibachiPathBuilder\'];\n        return directive;\n    };\n    return SWForm;\n}());\nexports.SWForm = SWForm;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swform.ts?')},"../../../org/Hibachi/client/src/form/components/swformfield.ts":
/*!*******************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformfield.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWFormFieldController = /** @class */ (function () {\n    //@ngInject\n    function SWFormFieldController($injector, $scope, $timeout, $log, $hibachi, observerService, utilityService) {\n        var _this = this;\n        this.$injector = $injector;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.$log = $log;\n        this.$hibachi = $hibachi;\n        this.observerService = observerService;\n        this.utilityService = utilityService;\n        this.formFieldChanged = function (option) {\n            if (_this.fieldType === 'yesno') {\n                _this.object.data[_this.propertyIdentifier] = option.value;\n                _this.form[_this.propertyIdentifier].$dirty = true;\n                _this.form['selected' + _this.object.metaData.className + _this.propertyIdentifier + _this.selectedRadioFormName].$dirty = false;\n            }\n            else if (_this.fieldType == 'checkbox') {\n                _this.object.data[_this.propertyIdentifier] = option.value;\n                _this.form[_this.propertyIdentifier].$dirty = true;\n            }\n            else if (_this.fieldType === 'select') {\n                _this.$log.debug('formfieldchanged');\n                _this.$log.debug(option);\n                if (_this.selectType === 'object' && typeof _this.object.data[_this.propertyIdentifier].$$getIDName == \"function\") {\n                    _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = option.value;\n                    if (angular.isDefined(_this.form[_this.object.data[_this.propertyIdentifier].$$getIDName()])) {\n                        _this.form[_this.object.data[_this.propertyIdentifier].$$getIDName()].$dirty = true;\n                    }\n                }\n                else if (_this.selectType === 'string' && option && option.value != null) {\n                    _this.object.data[_this.propertyIdentifier] = option.value;\n                    _this.form[_this.propertyIdentifier].$dirty = true;\n                }\n                _this.observerService.notify(_this.object.metaData.className + _this.propertyIdentifier.charAt(0).toUpperCase() + _this.propertyIdentifier.slice(1) + 'OnChange', option);\n            }\n            else {\n                _this.object.data[_this.propertyIdentifier] = option.value;\n                _this.form[_this.propertyIdentifier].$dirty = true;\n                _this.form['selected' + _this.object.metaData.className + _this.propertyIdentifier + _this.selectedRadioFormName].$dirty = false;\n            }\n        };\n        this.$onInit = function () {\n            var bindToControllerProps = _this.$injector.get('swFormFieldDirective')[0].bindToController;\n            for (var i in bindToControllerProps) {\n                if (!_this[i]) {\n                    if (!_this[i] && _this.swPropertyDisplay && _this.swPropertyDisplay[i]) {\n                        _this[i] = _this.swPropertyDisplay[i];\n                    }\n                    else if (!_this[i] && _this.swfPropertyDisplay && _this.swfPropertyDisplay[i]) {\n                        _this[i] = _this.swfPropertyDisplay[i];\n                    }\n                    else if (!_this[i] && _this.swForm && _this.swForm[i]) {\n                        _this[i] = _this.swForm[i];\n                    }\n                }\n            }\n            var tempObject = [];\n            if (typeof (_this.optionValues) == \"string\") {\n                var temp = _this.optionValues.split(',');\n                for (var _i = 0, temp_1 = temp; _i < temp_1.length; _i++) {\n                    var value = temp_1[_i];\n                    tempObject.push({\n                        \"name\": value,\n                        \"value\": value\n                    });\n                }\n                _this.optionValues = tempObject;\n            }\n            _this.edit = _this.edit || true;\n            _this.fieldType = _this.fieldType || \"text\";\n            if (_this.fieldType === 'yesno') {\n                _this.yesnoStrategy();\n            }\n            if (_this.fieldType === 'select') {\n                _this.selectStrategy();\n            }\n            if (_this.eventListeners) {\n                for (var key in _this.eventListeners) {\n                    _this.observerService.attach(_this.eventListeners[key], key);\n                }\n            }\n        };\n        this.selectStrategy = function () {\n            //this is specific to the admin because it implies loading of options via api\n            if (angular.isDefined(_this.object.metaData) && angular.isDefined(_this.object.metaData[_this.propertyIdentifier]) && angular.isDefined(_this.object.metaData[_this.propertyIdentifier].fieldtype)) {\n                _this.selectType = 'object';\n                _this.$log.debug('selectType:object');\n            }\n            else {\n                _this.selectType = 'string';\n                _this.$log.debug('selectType:string');\n            }\n            _this.getOptions();\n        };\n        this.getOptions = function () {\n            if (angular.isUndefined(_this.options)) {\n                if (!_this.optionsArguments || !_this.optionsArguments.hasOwnProperty('propertyIdentifier')) {\n                    _this.optionsArguments = {\n                        'propertyIdentifier': _this.propertyIdentifier\n                    };\n                }\n                var optionsPromise = _this.$hibachi.getPropertyDisplayOptions(_this.object.metaData.className, _this.optionsArguments);\n                optionsPromise.then(function (value) {\n                    _this.options = value.data;\n                    if (_this.selectType === 'object') {\n                        if (angular.isUndefined(_this.object.data[_this.propertyIdentifier])) {\n                            _this.object.data[_this.propertyIdentifier] = _this.$hibachi['new' + _this.object.metaData[_this.propertyIdentifier].cfc]();\n                        }\n                        if (_this.object.data[_this.propertyIdentifier].$$getID() === '') {\n                            _this.$log.debug('no ID');\n                            _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());\n                            _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];\n                            _this.object.data[_this.propertyIdentifier] = _this.$hibachi['new' + _this.object.metaData[_this.propertyIdentifier].cfc]();\n                            _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = _this.options[0].value;\n                        }\n                        else {\n                            var found = false;\n                            for (var i in _this.options) {\n                                if (angular.isObject(_this.options[i].value)) {\n                                    _this.$log.debug('isObject');\n                                    _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());\n                                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {\n                                        _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];\n                                        _this.object.data[_this.propertyIdentifier] = _this.options[i].value;\n                                        found = true;\n                                        break;\n                                    }\n                                }\n                                else {\n                                    _this.$log.debug('notisObject');\n                                    _this.$log.debug(_this.object.data[_this.propertyIdentifier].$$getIDName());\n                                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier].$$getID()) {\n                                        _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];\n                                        _this.object.data[_this.propertyIdentifier]['data'][_this.object.data[_this.propertyIdentifier].$$getIDName()] = _this.options[i].value;\n                                        found = true;\n                                        break;\n                                    }\n                                }\n                                if (!found) {\n                                    _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];\n                                }\n                            }\n                        }\n                    }\n                    else if (_this.selectType === 'string') {\n                        if (_this.object.data[_this.propertyIdentifier] !== null) {\n                            for (var i in _this.options) {\n                                if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {\n                                    _this.object.data['selected' + _this.propertyIdentifier] = _this.options[i];\n                                    _this.object.data[_this.propertyIdentifier] = _this.options[i].value;\n                                }\n                            }\n                        }\n                        else {\n                            _this.object.data['selected' + _this.propertyIdentifier] = _this.options[0];\n                            _this.object.data[_this.propertyIdentifier] = _this.options[0].value;\n                        }\n                    }\n                });\n            }\n        };\n        this.yesnoStrategy = function () {\n            //format value\n            _this.selectedRadioFormName = _this.utilityService.createID(26);\n            _this.object.data[_this.propertyIdentifier] = (_this.object.data[_this.propertyIdentifier]\n                && _this.object.data[_this.propertyIdentifier].length\n                && _this.object.data[_this.propertyIdentifier].toLowerCase().trim() === 'yes') || _this.object.data[_this.propertyIdentifier] == 1 ? 1 : 0;\n            _this.options = [\n                {\n                    name: 'Yes',\n                    value: 1\n                },\n                {\n                    name: 'No',\n                    value: 0\n                }\n            ];\n            if (angular.isDefined(_this.object.data[_this.propertyIdentifier])) {\n                for (var i in _this.options) {\n                    if (_this.options[i].value === _this.object.data[_this.propertyIdentifier]) {\n                        _this.selected = _this.options[i];\n                        _this.object.data[_this.propertyIdentifier] = _this.options[i].value;\n                    }\n                }\n            }\n            else {\n                _this.selected = _this.options[0];\n                _this.object.data[_this.propertyIdentifier] = _this.options[0].value;\n            }\n            _this.$timeout(function () {\n                _this.form[_this.propertyIdentifier].$dirty = _this.isDirty;\n            });\n        };\n        this.$injector = $injector;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.$log = $log;\n        this.$hibachi = $hibachi;\n        this.observerService = observerService;\n        this.utilityService = utilityService;\n    }\n    return SWFormFieldController;\n}());\nexports.SWFormFieldController = SWFormFieldController;\nvar SWFormField = /** @class */ (function () {\n    //@ngInject\n    function SWFormField($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) {\n        this.restrict = \"EA\";\n        this.require = {\n            swfPropertyDisplay: \"^?swfPropertyDisplay\",\n            swPropertyDisplay: \"^?swPropertyDisplay\",\n            form: \"^?form\",\n            swForm: '^?swForm'\n        };\n        this.controller = SWFormFieldController;\n        this.controllerAs = \"swFormField\";\n        this.scope = {};\n        this.bindToController = {\n            propertyIdentifier: \"@?\", property: \"@?\",\n            name: \"@?\",\n            class: \"@?\",\n            errorClass: \"@?\",\n            fieldType: \"@?\", type: \"@?\",\n            option: \"=?\",\n            valueObject: \"=?\",\n            object: \"=?\",\n            label: \"@?\",\n            labelText: \"@?\",\n            labelClass: \"@?\",\n            optionValues: \"=?\",\n            edit: \"=?\",\n            title: \"@?\",\n            value: \"=?\",\n            errorText: \"@?\",\n            inListingDisplay: \"=?\",\n            inputAttributes: \"@?\",\n            options: \"=?\",\n            optionsArguments: \"=?\",\n            eagerLoadOptions: \"=?\",\n            rawFileTarget: \"@?\",\n            binaryFileTarget: \"@?\",\n            isDirty: \"=?\",\n            onChange: \"=?\",\n            editable: \"=?\",\n            eventListeners: \"=?\",\n            context: \"@?\",\n            eventAnnouncers: \"@\"\n        };\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'formfield.html';\n    }\n    SWFormField.Factory = function () {\n        var directive = function ($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormField($log, $templateCache, $window, $hibachi, formService, coreFormPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$log',\n            '$templateCache',\n            '$window',\n            '$hibachi',\n            'formService',\n            'coreFormPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWFormField;\n}());\nexports.SWFormField = SWFormField;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformfield.ts?")},"../../../org/Hibachi/client/src/form/components/swformfieldfile.ts":
/*!***********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformfieldfile.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWFormFieldFileController = /** @class */ (function () {\n    //@ngInject\n    function SWFormFieldFileController(formService) {\n        this.formService = formService;\n        if (this.propertyDisplay.isDirty == undefined)\n            this.propertyDisplay.isDirty = false;\n        this.propertyDisplay.form.$dirty = this.propertyDisplay.isDirty;\n        //this.formService.setPristinePropertyValue(this.propertyDisplay.property,this.propertyDisplay.object.data[this.propertyDisplay.property]);\n    }\n    return SWFormFieldFileController;\n}());\nvar SWFormFieldFile = /** @class */ (function () {\n    function SWFormFieldFile(coreFormPartialsPath, hibachiPathBuilder) {\n        this.restrict = 'E';\n        this.require = \"^form\";\n        this.controller = SWFormFieldFileController;\n        this.controllerAs = \"swFormFieldFile\";\n        this.scope = true;\n        this.bindToController = {\n            propertyDisplay: \"=\"\n        };\n        //@ngInject\n        this.link = function (scope, element, attr, formController) {\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + \"file.html\";\n    }\n    SWFormFieldFile.Factory = function () {\n        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldFile(coreFormPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            'coreFormPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWFormFieldFile;\n}());\nexports.SWFormFieldFile = SWFormFieldFile;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformfieldfile.ts?")},"../../../org/Hibachi/client/src/form/components/swformfieldjson.ts":
/*!***********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformfieldjson.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWFormFieldJsonController = /** @class */ (function () {\n    //@ngInject\n    function SWFormFieldJsonController(formService) {\n        this.propertyDisplay.form.$dirty = this.propertyDisplay.isDirty;\n    }\n    return SWFormFieldJsonController;\n}());\nvar SWFormFieldJson = /** @class */ (function () {\n    function SWFormFieldJson(coreFormPartialsPath, hibachiPathBuilder) {\n        this.restrict = \'E\';\n        this.require = "^form";\n        this.scope = true;\n        this.controller = SWFormFieldJsonController;\n        this.bindToController = {\n            propertyDisplay: "=?"\n        };\n        this.controllerAs = "ctrl";\n        this.templateUrl = "";\n        this.link = function (scope, element, attrs, formController) { };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + "json.html";\n    }\n    SWFormFieldJson.Factory = function () {\n        var directive = function (coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldJson(coreFormPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            \'coreFormPartialsPath\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWFormFieldJson;\n}());\nexports.SWFormFieldJson = SWFormFieldJson;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformfieldjson.ts?')},"../../../org/Hibachi/client/src/form/components/swformfieldsearchselect.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformfieldsearchselect.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWFormFieldSearchSelect = /** @class */ (function () {\n    function SWFormFieldSearchSelect($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder) {\n        return {\n            templateUrl: hibachiPathBuilder.buildPartialsPath(coreFormPartialsPath) + 'search-select.html',\n            require: \"^form\",\n            restrict: 'E',\n            scope: {\n                propertyDisplay: \"=\"\n            },\n            link: function (scope, element, attr, formController) {\n                //set up selectionOptions\n                scope.selectionOptions = {\n                    value: [],\n                    $$adding: false\n                };\n                //match in matches track by\n                //function to set state of adding new item\n                scope.setAdding = function (isAdding) {\n                    scope.isAdding = isAdding;\n                    scope.showAddBtn = false;\n                };\n                scope.selectedOption = {};\n                scope.showAddBtn = false;\n                var propertyMetaData = scope.propertyDisplay.object.$$getMetaData(scope.propertyDisplay.property);\n                //create basic\n                var object = $hibachi.newEntity(propertyMetaData.cfc);\n                //\t\t\t\tscope.propertyDisplay.template = '';\n                //\t\t\t\t//check for a template\n                //\t\t\t\t//rules are tiered: check if an override is specified at scope.template, check if the cfc name .html exists, use\n                //\t\t\t\tvar templatePath = coreFormPartialsPath + 'formfields/searchselecttemplates/';\n                //\t\t\t\tif(angular.isUndefined(scope.propertyDisplay.template)){\n                //\t\t\t\t\tvar templatePromise = $http.get(templatePath+propertyMetaData.cfcProperCase+'.html',function(){\n                //\t\t\t\t\t\t$log.debug('template');\n                //\t\t\t\t\t\tscope.propertyDisplay.template = templatePath+propertyMetaData.cfcProperCase+'.html';\n                //\t\t\t\t\t},function(){\n                //\t\t\t\t\t\tscope.propertyDisplay.template = templatePath+'index.html';\n                //\t\t\t\t\t\t$log.debug('template');\n                //\t\t\t\t\t\t$log.debug(scope.propertyDisplay.template);\n                //\t\t\t\t\t});\n                //\t\t\t\t}\n                //set up query function for finding related object\n                scope.cfcProperCase = propertyMetaData.cfcProperCase;\n                scope.selectionOptions.getOptionsByKeyword = function (keyword) {\n                    var filterGroupsConfig = '[' +\n                        ' {  ' +\n                        '\"filterGroup\":[  ' +\n                        '{' +\n                        ' \"propertyIdentifier\":\"_' + scope.cfcProperCase.toLowerCase() + '.' + scope.cfcProperCase + 'Name\",' +\n                        ' \"comparisonOperator\":\"like\",' +\n                        ' \"ormtype\":\"string\",' +\n                        ' \"value\":\"%' + keyword + '%\"' +\n                        '  }' +\n                        ' ]' +\n                        ' }' +\n                        ']';\n                    return $hibachi.getEntity(propertyMetaData.cfc, { filterGroupsConfig: filterGroupsConfig.trim() })\n                        .then(function (value) {\n                        $log.debug('typesByKeyword');\n                        $log.debug(value);\n                        scope.selectionOptions.value = value.pageRecords;\n                        var myLength = keyword.length;\n                        if (myLength > 0) {\n                            scope.showAddBtn = true;\n                        }\n                        else {\n                            scope.showAddBtn = false;\n                        }\n                        return scope.selectionOptions.value;\n                    });\n                };\n                var propertyPromise = scope.propertyDisplay.object['$$get' + propertyMetaData.nameCapitalCase]();\n                propertyPromise.then(function (data) {\n                });\n                //set up behavior when selecting an item\n                scope.selectItem = function ($item, $model, $label) {\n                    scope.$item = $item;\n                    scope.$model = $model;\n                    scope.$label = $label;\n                    scope.showAddBtn = false; //turns off the add btn on select\n                    //angular.extend(inflatedObject.data,$item);\n                    object.$$init($item);\n                    $log.debug('select item');\n                    $log.debug(object);\n                    scope.propertyDisplay.object['$$set' + propertyMetaData.nameCapitalCase](object);\n                };\n                //\t\t\t\tif(angular.isUndefined(scope.propertyDipslay.object[scope.propertyDisplay.property])){\n                //\t\t\t\t\t$log.debug('getmeta');\n                //\t\t\t\t\t$log.debug(scope.propertyDisplay.object.metaData[scope.propertyDisplay.property]);\n                //\n                //\t\t\t\t\t//scope.propertyDipslay.object['$$get'+]\n                //\t\t\t\t}\n                //\n                //\t\t\t\tscope.propertyDisplay.object.data[scope.propertyDisplay.property].$dirty = true;\n            }\n        };\n    }\n    SWFormFieldSearchSelect.Factory = function () {\n        var directive = function ($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder) { return new SWFormFieldSearchSelect($log, $hibachi, coreFormPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$log',\n            '$hibachi',\n            'coreFormPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWFormFieldSearchSelect;\n}());\nexports.SWFormFieldSearchSelect = SWFormFieldSearchSelect;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformfieldsearchselect.ts?")},"../../../org/Hibachi/client/src/form/components/swformregistrar.ts":
/*!***********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformregistrar.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWFormRegistrar = /** @class */ (function () {\n    //@ngInject\n    function SWFormRegistrar(formService) {\n        return {\n            restrict: 'E',\n            require: [\"^form\", \"^swForm\"],\n            scope: {\n                object: \"=?\",\n                context: \"@?\",\n                name: \"@?\",\n                isDirty: \"=?\"\n            },\n            link: function (scope, element, attrs, formController, transclude) {\n                /*add form info at the form level*/\n                scope.$watch(function () { return formController[0]; }, function () {\n                    formController[1].formCtrl = formController[0];\n                });\n                formController[0].$$swFormInfo = {\n                    object: scope.object,\n                    context: scope.context || 'save',\n                    name: scope.name\n                };\n                var makeRandomID = function makeid(count) {\n                    var text = \"\";\n                    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n                    for (var i = 0; i < count; i++)\n                        text += possible.charAt(Math.floor(Math.random() * possible.length));\n                    return text;\n                };\n                if (scope.isDirty) {\n                    formController[0].autoDirty = true;\n                }\n                scope.form = formController[0];\n                /*register form with service*/\n                formController[0].name = scope.name;\n                formController[0].$setDirty();\n                formService.setForm(formController[0]);\n                /*register form at object level*/\n                if (!angular.isDefined(scope.object.forms)) {\n                    scope.object.forms = {};\n                }\n                scope.object.forms[scope.name] = formController[0];\n            }\n        };\n    }\n    SWFormRegistrar.Factory = function () {\n        var directive = function (formService) { return new SWFormRegistrar(formService); };\n        directive.$inject = [\n            'formService'\n        ];\n        return directive;\n    };\n    return SWFormRegistrar;\n}());\nexports.SWFormRegistrar = SWFormRegistrar;\n// \tangular.module('slatwalladmin').directive('swFormRegistrar',[ 'formService', 'partialsPath', (formService, partialsPath) => new swFormRegistrar(formService, partialsPath)]);\n// }\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformregistrar.ts?")},"../../../org/Hibachi/client/src/form/components/swformsubscriber.ts":
/*!************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformsubscriber.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWFormSubscriberController = /** @class */ (function () {\n    //@ngInject\n    function SWFormSubscriberController($log, $compile, $hibachi, utilityService, rbkeyService, $injector) {\n        var _this = this;\n        this.$log = $log;\n        this.$compile = $compile;\n        this.$hibachi = $hibachi;\n        this.utilityService = utilityService;\n        this.rbkeyService = rbkeyService;\n        this.$injector = $injector;\n        this.$onInit = function () {\n            var bindToControllerProps = _this.$injector.get(\'swFormSubscriberDirective\')[0].bindToController;\n            for (var i in bindToControllerProps) {\n                if (!_this[i]) {\n                    if (!_this[i] && _this.swForm && _this.swForm[i]) {\n                        _this[i] = _this.swForm[i];\n                    }\n                }\n            }\n            _this.property = _this.property || _this.propertyIdentifier;\n            _this.propertyIdentifier = _this.propertyIdentifier || _this.property;\n            _this.type = _this.type || _this.fieldType;\n            _this.fieldType = _this.fieldType || _this.type;\n            _this.edit = _this.edit || _this.editing;\n            _this.editing = _this.editing || _this.edit;\n            _this.editing = _this.editing || true;\n            _this.fieldType = _this.fieldType || "text";\n            _this.inputAttributes = _this.inputAttributes || "";\n        };\n        this.utilityService = utilityService;\n        this.$hibachi = $hibachi;\n        this.rbkeyService = rbkeyService;\n        this.$log = $log;\n        this.$injector = $injector;\n    }\n    return SWFormSubscriberController;\n}());\nvar SWFormSubscriber = /** @class */ (function () {\n    //ngInject\n    function SWFormSubscriber() {\n        this.restrict = "A";\n        this.require = {\n            swForm: "?^swForm",\n            form: "?^form"\n        };\n        this.scope = {};\n        this.bindToController = {\n            propertyIdentifier: "@?",\n            name: "@?",\n            class: "@?",\n            errorClass: "@?",\n            option: "=?",\n            valueObject: "=?",\n            object: "=?",\n            label: "@?",\n            labelText: "@?",\n            labelClass: "@?",\n            optionValues: "=?",\n            edit: "=?",\n            title: "@?",\n            value: "=?",\n            errorText: "@?",\n            fieldType: "@?",\n            property: "@?",\n            inputAttributes: "@?",\n            type: "@?",\n            editing: "=?"\n        };\n        this.controller = SWFormSubscriberController;\n        this.controllerAs = "SWFormSubscriber";\n        this.link = function (scope, element, attr) {\n        };\n    }\n    SWFormSubscriber.Factory = function () {\n        var directive = function () { return new SWFormSubscriber(); };\n        directive.$inject = [];\n        return directive;\n    };\n    return SWFormSubscriber;\n}());\nexports.SWFormSubscriber = SWFormSubscriber;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swformsubscriber.ts?')},"../../../org/Hibachi/client/src/form/components/swfpropertydisplay.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swfpropertydisplay.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar swpropertydisplay_1 = __webpack_require__(/*! ./swpropertydisplay */ "../../../org/Hibachi/client/src/form/components/swpropertydisplay.ts");\nvar SWFPropertyDisplayController = /** @class */ (function (_super) {\n    __extends(SWFPropertyDisplayController, _super);\n    //@ngInject\n    function SWFPropertyDisplayController($filter, utilityService, $injector, metadataService, observerService) {\n        var _this = _super.call(this, $filter, utilityService, $injector, metadataService, observerService) || this;\n        _this.$filter = $filter;\n        _this.utilityService = utilityService;\n        _this.$injector = $injector;\n        _this.metadataService = metadataService;\n        _this.observerService = observerService;\n        _this.edit = true;\n        return _this;\n    }\n    return SWFPropertyDisplayController;\n}(swpropertydisplay_1.SWPropertyDisplayController));\nexports.SWFPropertyDisplayController = SWFPropertyDisplayController;\nvar SWFPropertyDisplay = /** @class */ (function (_super) {\n    __extends(SWFPropertyDisplay, _super);\n    //@ngInject\n    function SWFPropertyDisplay($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) {\n        var _this = _super.call(this, $compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) || this;\n        _this.$compile = $compile;\n        _this.scopeService = scopeService;\n        _this.coreFormPartialsPath = coreFormPartialsPath;\n        _this.hibachiPathBuilder = hibachiPathBuilder;\n        _this.swpropertyPartialPath = swpropertyPartialPath;\n        _this.controller = SWFPropertyDisplayController;\n        _this.controllerAs = "swfPropertyDisplay";\n        _this.scope = {};\n        _this.link = function (scope, element, attrs) {\n        };\n        return _this;\n    }\n    return SWFPropertyDisplay;\n}(swpropertydisplay_1.SWPropertyDisplay));\nexports.SWFPropertyDisplay = SWFPropertyDisplay;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swfpropertydisplay.ts?')},"../../../org/Hibachi/client/src/form/components/swinput.ts":
/*!***************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swinput.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWInputController = /** @class */ (function () {\n    //@ngInject\n    function SWInputController($scope, $log, $hibachi, $injector, listingService, utilityService, rbkeyService, observerService, metadataService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$log = $log;\n        this.$hibachi = $hibachi;\n        this.$injector = $injector;\n        this.listingService = listingService;\n        this.utilityService = utilityService;\n        this.rbkeyService = rbkeyService;\n        this.observerService = observerService;\n        this.metadataService = metadataService;\n        this.eventAnnouncers = "";\n        this.onSuccess = function () {\n            _this.utilityService.setPropertyValue(_this.swForm.object, _this.propertyIdentifier, _this.value);\n            if (_this.swPropertyDisplay) {\n                _this.utilityService.setPropertyValue(_this.swPropertyDisplay.object, _this.propertyIdentifier, _this.value);\n            }\n            if (_this.swfPropertyDisplay) {\n                _this.utilityService.setPropertyValue(_this.swfPropertyDisplay.object, _this.propertyIdentifier, _this.value);\n                _this.swfPropertyDisplay.edit = false;\n            }\n            _this.utilityService.setPropertyValue(_this.swFormField.object, _this.propertyIdentifier, _this.value);\n        };\n        this.getValidationDirectives = function () {\n            var spaceDelimitedList = \'\';\n            var name = _this.propertyIdentifier;\n            var form = _this.form;\n            _this.$log.debug("Name is:" + name + " and form is: " + form);\n            if (_this.metadataService.isAttributePropertyByEntityAndPropertyIdentifier(_this.object, _this.propertyIdentifier)) {\n                _this.object.validations.properties[name] = [];\n                if ((_this.object.metaData[_this.propertyIdentifier].requiredFlag && _this.object.metaData[_this.propertyIdentifier].requiredFlag == true) || typeof _this.object.metaData[_this.propertyIdentifier].requiredFlag === \'string\' && _this.object.metaData[_this.propertyIdentifier].requiredFlag.trim().toLowerCase() == "yes") {\n                    _this.object.validations.properties[name].push({\n                        contexts: "save",\n                        required: true\n                    });\n                }\n                if (_this.object.metaData[_this.propertyIdentifier].validationRegex) {\n                    _this.object.validations.properties[name].push({\n                        contexts: "save", regex: _this.object.metaData[_this.propertyIdentifier].validationRegex\n                    });\n                }\n            }\n            if (angular.isUndefined(_this.object.validations)\n                || angular.isUndefined(_this.object.validations.properties)\n                || angular.isUndefined(_this.object.validations.properties[_this.propertyIdentifier])) {\n                return \'\';\n            }\n            var validations = _this.object.validations.properties[_this.propertyIdentifier];\n            _this.$log.debug("Validations: ", validations);\n            _this.$log.debug(_this.form);\n            var validationsForContext = [];\n            //get the form context and the form name.\n            var formContext = _this.swForm.context;\n            var formName = _this.swForm.name;\n            _this.$log.debug("Form context is: ");\n            _this.$log.debug(formContext);\n            _this.$log.debug("Form Name: ");\n            _this.$log.debug(formName);\n            //get the validations for the current element.\n            var propertyValidations = _this.object.validations.properties[name];\n            //check if the contexts match.\n            if (angular.isObject(propertyValidations)) {\n                //if this is a procesobject validation then the context is implied\n                if (angular.isUndefined(propertyValidations[0].contexts) && _this.object.metaData.isProcessObject) {\n                    propertyValidations[0].contexts = _this.object.metaData.className.split(\'_\')[1];\n                }\n                if (propertyValidations[0].contexts.indexOf(formContext) > -1) {\n                    _this.$log.debug("Matched");\n                    for (var prop in propertyValidations[0]) {\n                        if (prop != "contexts" && prop !== "conditions") {\n                            spaceDelimitedList += (" swvalidation" + prop.toLowerCase() + "=\'" + propertyValidations[0][prop] + "\'");\n                        }\n                    }\n                }\n                _this.$log.debug(spaceDelimitedList);\n            }\n            //loop over validations that are required and create the space delimited list\n            _this.$log.debug(validations);\n            //get all validations related to the form context;\n            _this.$log.debug(form);\n            angular.forEach(validations, function (validation, key) {\n                if (validation.contexts && _this.utilityService.listFind(validation.contexts.toLowerCase(), _this.swForm.context.toLowerCase()) !== -1) {\n                    _this.$log.debug("Validations for context");\n                    _this.$log.debug(validation);\n                    validationsForContext.push(validation);\n                }\n            });\n            return spaceDelimitedList;\n        };\n        this.clear = function () {\n            if (_this.reverted) {\n                _this.reverted = false;\n                _this.showRevert = true;\n            }\n            _this.edited = false;\n            _this.value = _this.initialValue;\n            if (_this.inListingDisplay && _this.rowSaveEnabled) {\n                _this.listingService.markUnedited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID);\n            }\n        };\n        this.revert = function () {\n            _this.showRevert = false;\n            _this.reverted = true;\n            _this.value = _this.revertToValue;\n            _this.onEvent({}, "change");\n        };\n        this.onEvent = function (event, eventName) {\n            var customEventName = _this.swForm.name + _this.name + eventName;\n            var formEventName = _this.swForm.name + eventName;\n            var data = {\n                event: event,\n                eventName: eventName,\n                form: _this.form,\n                swForm: _this.swForm,\n                swInput: _this,\n                inputElement: $(\'input\').first()[0]\n            };\n            _this.observerService.notify(customEventName, data);\n            _this.observerService.notify(formEventName, data);\n            _this.observerService.notify(eventName, data);\n        };\n        this.getTemplate = function () {\n            var template = \'\';\n            var validations = \'\';\n            var currencyTitle = \'\';\n            var currencyFormatter = \'\';\n            var style = "";\n            if (!_this.class) {\n                _this.class = "form-control";\n            }\n            if (!_this.noValidate) {\n                validations = _this.getValidationDirectives();\n            }\n            if (_this.object && _this.object.metaData && _this.object.metaData.$$getPropertyFormatType(_this.propertyIdentifier) != undefined && _this.object.metaData.$$getPropertyFormatType(_this.propertyIdentifier) == "currency" && !_this.edit) {\n                currencyFormatter = \'sw-currency-formatter \';\n                if (angular.isDefined(_this.object.data.currencyCode)) {\n                    currencyFormatter = currencyFormatter + \'data-currency-code="\' + _this.object.data.currencyCode + \'" \';\n                    currencyTitle = \'<span class="s-title">\' + _this.object.data.currencyCode + \'</span>\';\n                }\n            }\n            var appConfig = _this.$hibachi.getConfig();\n            var placeholder = \'\';\n            if (_this.object.metaData && _this.object.metaData[_this.propertyIdentifier] && _this.object.metaData[_this.propertyIdentifier].hb_nullrbkey) {\n                placeholder = _this.rbkeyService.getRBKey(_this.object.metaData[_this.propertyIdentifier].hb_nullrbkey);\n            }\n            if (_this.fieldType.toLowerCase() === \'json\') {\n                style = style += \'display:none\';\n            }\n            var acceptedFieldTypes = [\'email\', \'text\', \'password\', \'number\', \'time\', \'date\', \'datetime\', \'json\', \'file\'];\n            if (acceptedFieldTypes.indexOf(_this.fieldType.toLowerCase()) >= 0) {\n                var inputType = _this.fieldType.toLowerCase();\n                if (_this.fieldType === \'time\' || _this.fieldType === \'number\') {\n                    inputType = "text";\n                }\n                template = currencyTitle + \'<input type="\' + inputType + \'" class="\' + _this.class + \'" \' +\n                    \'ng-model="swInput.value" \' +\n                    \'ng-disabled="swInput.editable === false" \' +\n                    \'ng-show="swInput.edit" \' +\n                    "ng-class=\\"{\'form-control\':swInput.inListingDisplay, \'input-xs\':swInput.inListingDisplay}\\"" +\n                    \'name="\' + _this.propertyIdentifier + \'" \' +\n                    \'placeholder="\' + placeholder + \'" \' +\n                    validations + currencyFormatter +\n                    \'id="swinput\' + _this.swForm.name + _this.name + \'" \' +\n                    \'style="\' + style + \'"\' +\n                    _this.inputAttributes +\n                    _this.eventAnnouncerTemplate;\n            }\n            var dateFieldTypes = [\'date\', \'datetime\', \'time\'];\n            if (dateFieldTypes.indexOf(_this.fieldType.toLowerCase()) >= 0) {\n                template = template + \'datetime-picker \';\n            }\n            if (_this.fieldType === \'time\') {\n                template = template + \'data-time-only="true" date-format="\' + appConfig.timeFormat.replace(\'tt\', \'a\') + \'" ng-blur="swInput.pushBindings()"\';\n            }\n            if (_this.fieldType === \'date\') {\n                template = template + \'data-date-only="true" future-only date-format="\' + appConfig.dateFormat + \'" \';\n            }\n            if (template.length) {\n                template = template + \' />\';\n            }\n            var actionButtons = "\\n\\t\\t\\t<a class=\\"s-remove-change\\"\\n\\t\\t\\t\\tdata-ng-click=\\"swPropertyDisplay.clear()\\"\\n\\t\\t\\t\\tdata-ng-if=\\"swInput.edited && swInput.edit\\">\\n\\t\\t\\t\\t\\t<i class=\\"fa fa-remove\\"></i>\\n\\t\\t\\t</a>\\n\\n\\t\\t\\t\x3c!-- Revert Button --\x3e\\n\\t\\t\\t<button class=\\"btn btn-xs btn-default s-revert-btn\\"\\n\\t\\t\\t\\t\\tdata-ng-show=\\"swInput.showRevert\\"\\n\\t\\t\\t\\t\\tdata-ng-click=\\"swInput.revert()\\"\\n\\t\\t\\t\\t\\tdata-toggle=\\"popover\\"\\n\\t\\t\\t\\t\\tdata-trigger=\\"hover\\"\\n\\t\\t\\t\\t\\tdata-content=\\"{{swInput.revertText}}\\"\\n\\t\\t\\t\\t\\tdata-original-title=\\"\\"\\n\\t\\t\\t\\t\\ttitle=\\"\\">\\n\\t\\t\\t\\t<i class=\\"fa fa-refresh\\"></i>\\n\\t\\t\\t</button>\\n\\t\\t";\n            return template + actionButtons;\n        };\n        this.pullBindings = function () {\n            var bindToControllerProps = _this.$injector.get(\'swInputDirective\')[0].bindToController;\n            for (var i in bindToControllerProps) {\n                if (!_this[i]) {\n                    if (!_this[i] && _this.swFormField && _this.swFormField[i]) {\n                        _this[i] = _this.swFormField[i];\n                    }\n                    else if (!_this[i] && _this.swPropertyDisplay && _this.swPropertyDisplay[i]) {\n                        _this[i] = _this.swPropertyDisplay[i];\n                    }\n                    else if (!_this[i] && _this.swfPropertyDisplay && _this.swfPropertyDisplay[i]) {\n                        _this[i] = _this.swfPropertyDisplay[i];\n                    }\n                    else if (!_this[i] && _this.swForm && _this.swForm[i]) {\n                        _this[i] = _this.swForm[i];\n                    }\n                }\n            }\n            _this.edit = _this.edit || true;\n            _this.fieldType = _this.fieldType || "text";\n            _this.inputAttributes = _this.inputAttributes || "";\n            _this.inputAttributes = _this.utilityService.replaceAll(_this.inputAttributes, "\'", \'"\');\n            _this.value = _this.utilityService.getPropertyValue(_this.object, _this.propertyIdentifier);\n        };\n        this.pushBindings = function () {\n            _this.observerService.notify(\'updateBindings\').then(function () { });\n        };\n        this.$onInit = function () {\n            _this.pullBindings();\n            _this.eventAnnouncersArray = _this.eventAnnouncers.split(\',\');\n            _this.eventAnnouncerTemplate = "";\n            for (var i in _this.eventAnnouncersArray) {\n                var eventName = _this.eventAnnouncersArray[i];\n                if (eventName.length) {\n                    _this.eventAnnouncerTemplate += " ng-" + eventName + "=\\"swInput.onEvent($event,\'" + eventName + "\')\\"";\n                }\n            }\n            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {\n                _this.eventNameForObjectSuccess = _this.object.metaData.className.split(\'_\')[0] + _this.context.charAt(0).toUpperCase() + _this.context.slice(1) + \'Success\';\n            }\n            else {\n                _this.eventNameForObjectSuccess = _this.context.charAt(0).toUpperCase() + _this.context.slice(1) + \'Success\';\n            }\n            var eventNameForObjectSuccessID = _this.eventNameForObjectSuccess + _this.propertyIdentifier;\n            var eventNameForUpdateBindings = \'updateBindings\';\n            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {\n                var eventNameForUpdateBindingsID = _this.object.metaData.className.split(\'_\')[0] + _this.propertyIdentifier + \'updateBindings\';\n            }\n            else {\n                var eventNameForUpdateBindingsID = _this.propertyIdentifier + \'updateBindings\';\n            }\n            var eventNameForPullBindings = \'pullBindings\';\n            if (_this.object && _this.object.metaData && _this.object.metaData.className != undefined) {\n                var eventNameForPullBindingsID = _this.object.metaData.className.split(\'_\')[0] + _this.propertyIdentifier + \'pullBindings\';\n            }\n            else {\n                var eventNameForPullBindingsID = _this.propertyIdentifier + \'pullBindings\';\n            }\n            //attach a successObserver\n            if (_this.object) {\n                //update bindings on save success\n                _this.observerService.attach(_this.onSuccess, _this.eventNameForObjectSuccess, eventNameForObjectSuccessID);\n                //update bindings manually\n                _this.observerService.attach(_this.onSuccess, eventNameForUpdateBindings, eventNameForUpdateBindingsID);\n                //pull bindings from higher binding level manually\n                _this.observerService.attach(_this.pullBindings, eventNameForPullBindings, eventNameForPullBindingsID);\n            }\n            _this.$scope.$on("$destroy", function () {\n                _this.observerService.detachById(eventNameForUpdateBindings);\n                _this.observerService.detachById(eventNameForUpdateBindingsID);\n            });\n        };\n    }\n    return SWInputController;\n}());\nvar SWInput = /** @class */ (function () {\n    //ngInject\n    function SWInput($compile, $timeout, $parse, fileService) {\n        var _this = this;\n        this.$compile = $compile;\n        this.$timeout = $timeout;\n        this.$parse = $parse;\n        this.fileService = fileService;\n        this.restrict = "E";\n        this.require = {\n            swForm: "?^swForm",\n            form: "?^form",\n            swFormField: "?^swFormField",\n            swPropertyDisplay: "?^swPropertyDisplay",\n            swfPropertyDisplay: "?^swfPropertyDisplay"\n        };\n        this.scope = {};\n        this.bindToController = {\n            propertyIdentifier: "@?",\n            name: "@?",\n            class: "@?",\n            errorClass: "@?",\n            option: "=?",\n            valueObject: "=?",\n            object: "=?",\n            label: "@?",\n            labelText: "@?",\n            labelClass: "@?",\n            inListingDisplay: "=?",\n            listingID: "=?",\n            pageRecordIndex: "=?",\n            propertyDisplayID: "=?",\n            initialValue: "=?",\n            optionValues: "=?",\n            edit: "=?",\n            title: "@?",\n            value: "=?",\n            errorText: "@?",\n            fieldType: "@?",\n            property: "@?",\n            binaryFileTarget: "@?",\n            rawFileTarget: "@?",\n            reverted: "=?",\n            revertToValue: "=?",\n            showRevert: "=?",\n            inputAttributes: "@?",\n            type: "@?",\n            eventAnnouncers: "@?",\n            context: "@?"\n        };\n        this.controller = SWInputController;\n        this.controllerAs = "swInput";\n        this.link = function (scope, element, attr) {\n            if (scope.swInput.type === \'file\') {\n                if (angular.isUndefined(scope.swInput.object.data[scope.swInput.rawFileTarget])) {\n                    scope.swInput.object[scope.swInput.rawFileTarget] = "";\n                    scope.swInput.object.data[scope.swInput.rawFileTarget] = "";\n                }\n                var model = _this.$parse("swInput.object.data[swInput.rawFileTarget]");\n                var modelSetter = model.assign;\n                element.bind("change", function (e) {\n                    var fileToUpload = (e.srcElement || e.target).files[0];\n                    scope.$apply(function () {\n                        modelSetter(scope, fileToUpload);\n                    }, function () {\n                        throw ("swinput couldn\'t apply the file to scope");\n                    });\n                    _this.$timeout(function () {\n                        _this.fileService.uploadFile(fileToUpload, scope.swInput.object, scope.swInput.binaryFileTarget)\n                            .then(function (result) {\n                            scope.swInput.object[scope.swInput.property] = fileToUpload;\n                            scope.swInput.onEvent(e, "change");\n                        }, function () {\n                            //error\tnotify user\n                        });\n                    });\n                });\n            }\n            //renders the template and compiles it\n            element.html(scope.swInput.getTemplate());\n            _this.$compile(element.contents())(scope);\n        };\n    }\n    SWInput.Factory = function () {\n        var directive = function ($compile, $timeout, $parse, fileService) { return new SWInput($compile, $timeout, $parse, fileService); };\n        directive.$inject = [\n            \'$compile\',\n            \'$timeout\',\n            \'$parse\',\n            \'fileService\'\n        ];\n        return directive;\n    };\n    return SWInput;\n}());\nexports.SWInput = SWInput;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swinput.ts?')},"../../../org/Hibachi/client/src/form/components/swpropertydisplay.ts":
/*!*************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swpropertydisplay.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWPropertyDisplayController = /** @class */ (function () {\n    //@ngInject\n    function SWPropertyDisplayController($filter, utilityService, $injector, metadataService, observerService, listingService) {\n        var _this = this;\n        this.$filter = $filter;\n        this.utilityService = utilityService;\n        this.$injector = $injector;\n        this.metadataService = metadataService;\n        this.observerService = observerService;\n        this.listingService = listingService;\n        this.saved = false;\n        this.$onInit = function () {\n            var bindToControllerProps = _this.$injector.get(\'swPropertyDisplayDirective\')[0].bindToController;\n            for (var i in bindToControllerProps) {\n                if (!_this[i] && _this.swForm && _this.swForm[i]) {\n                    _this[i] = _this.swForm[i];\n                }\n            }\n            _this.errors = {};\n            _this.edited = false;\n            _this.edit = _this.edit || _this.editing;\n            _this.editing = _this.editing || _this.edit;\n            _this.errorName = _this.errorName || _this.name;\n            _this.initialValue = _this.object[_this.property];\n            _this.propertyDisplayID = _this.utilityService.createID(32);\n            if (angular.isUndefined(_this.showSave)) {\n                _this.showSave = true;\n            }\n            if (angular.isUndefined(_this.inListingDisplay)) {\n                _this.inListingDisplay = false;\n            }\n            if (angular.isUndefined(_this.rowSaveEnabled)) {\n                _this.rowSaveEnabled = _this.inListingDisplay;\n            }\n            if (angular.isDefined(_this.revertToValue) && angular.isUndefined(_this.showRevert)) {\n                _this.showRevert = true;\n            }\n            if (angular.isDefined(_this.revertToValue) && angular.isUndefined(_this.revertText)) {\n                _this.revertText = _this.revertToValue;\n            }\n            if (angular.isUndefined(_this.showRevert)) {\n                _this.showRevert = false;\n            }\n            if (angular.isUndefined(_this.rawFileTarget)) {\n                _this.rawFileTarget = _this.property;\n            }\n            if (angular.isUndefined(_this.editing)) {\n                _this.editing = false;\n            }\n            if (angular.isUndefined(_this.editable)) {\n                _this.editable = true;\n            }\n            if (angular.isUndefined(_this.isHidden)) {\n                _this.isHidden = false;\n            }\n            if (angular.isUndefined(_this.noValidate)) {\n                _this.noValidate = false;\n            }\n            if (angular.isUndefined(_this.inModal)) {\n                _this.inModal = false;\n            }\n            if (angular.isUndefined(_this.optionsArguments)) {\n                _this.optionsArguments = {};\n            }\n            if ((_this.fieldType !== \'hidden\' &&\n                angular.isUndefined(_this.inListingDisplay)) ||\n                (angular.isDefined(_this.inListingDisplay) && !_this.inListingDisplay)) {\n                _this.showLabel = true;\n            }\n            else {\n                _this.showLabel = false;\n            }\n            if (angular.isDefined(_this.pageRecord) && angular.isUndefined(_this.pageRecord.edited)) {\n                _this.pageRecord.edited = false;\n            }\n            _this.applyFilter = function (model, filter) {\n                try {\n                    return _this.$filter(filter)(model);\n                }\n                catch (e) {\n                    return model;\n                }\n            };\n            //swfproperty logic\n            if (angular.isUndefined(_this.fieldType) && _this.object && _this.object.metaData) {\n                _this.fieldType = _this.metadataService.getPropertyFieldType(_this.object, _this.propertyIdentifier);\n            }\n            if (angular.isUndefined(_this.title) && _this.object && _this.object.metaData) {\n                _this.labelText = _this.metadataService.getPropertyTitle(_this.object, _this.propertyIdentifier);\n            }\n            _this.labelText = _this.labelText || _this.title;\n            _this.title = _this.title || _this.labelText;\n            _this.fieldType = _this.fieldType || "text";\n            _this.class = _this.class || "form-control";\n            _this.fieldAttributes = _this.fieldAttributes || "";\n            _this.label = _this.label || "true";\n            _this.labelText = _this.labelText || "";\n            _this.labelClass = _this.labelClass || "";\n            _this.name = _this.name || "unnamed";\n            _this.value = _this.value || _this.initialValue;\n            _this.object = _this.object || _this.swForm.object; //this is the process object\n            /** handle options */\n            if (_this.options && angular.isString(_this.options)) {\n                var optionsArray = [];\n                optionsArray = _this.options.toString().split(",");\n                angular.forEach(optionsArray, function (o) {\n                    var newOption = {\n                        name: "",\n                        value: ""\n                    };\n                    newOption.name = o;\n                    newOption.value = o;\n                    _this.optionValues.push(newOption);\n                });\n            }\n            /** handle turning the options into an array of objects */\n            /** handle setting the default value for the yes / no element  */\n            if (_this.fieldType == "yesno" && (_this.value && angular.isString(_this.value))) {\n                _this.selected == _this.value;\n            }\n            if (angular.isUndefined(_this.hint) && _this.object && _this.object.metaData) {\n                _this.hint = _this.metadataService.getPropertyHintByObjectAndPropertyIdentifier(_this.object, _this.propertyIdentifier);\n            }\n            if ((_this.hasOnChangeCallback || _this.inListingDisplay || _this.onChangeEvent) &&\n                (angular.isDefined(_this.swForm) && angular.isDefined(_this.name))) {\n                _this.swInputOnChangeEvent = _this.swForm.name + _this.name + \'change\';\n                _this.observerService.attach(_this.onChange, _this.swInputOnChangeEvent);\n            }\n        };\n        this.onChange = function (result) {\n            _this.edited = true;\n            if (_this.saved) {\n                _this.saved = false;\n            }\n            if (_this.hasOnChangeCallback) {\n                _this.onChangeCallback(result);\n            }\n            if (_this.inListingDisplay && _this.rowSaveEnabled) {\n                _this.listingService.markEdited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID, _this.save);\n            }\n            if (angular.isDefined(_this.onChangeEvent)) {\n                _this.observerService.notify(_this.onChangeEvent, result);\n            }\n        };\n        this.clear = function () {\n            if (_this.reverted) {\n                _this.reverted = false;\n                _this.showRevert = true;\n            }\n            _this.edited = false;\n            _this.object.data[_this.property] = _this.initialValue;\n            if (_this.inListingDisplay && _this.rowSaveEnabled) {\n                _this.listingService.markUnedited(_this.listingID, _this.pageRecordIndex, _this.propertyDisplayID);\n            }\n        };\n        this.revert = function () {\n            _this.showRevert = false;\n            _this.reverted = true;\n            _this.object.data[_this.property] = _this.revertToValue;\n            _this.onChange();\n        };\n        this.save = function () {\n            _this.observerService.notify(\'updateBindings\');\n            //do this eagerly to hide save will reverse if theres an error\n            _this.edited = false;\n            _this.saved = true;\n            if (!_this.inModal) {\n                _this.object.$$save().then(function (response) {\n                    if (_this.hasSaveCallback) {\n                        _this.saveCallback(response);\n                    }\n                }, function (reason) {\n                    _this.edited = true;\n                    _this.saved = false;\n                });\n            }\n            else if (_this.hasModalCallback) {\n                _this.modalCallback();\n            }\n        };\n    }\n    return SWPropertyDisplayController;\n}());\nexports.SWPropertyDisplayController = SWPropertyDisplayController;\nvar SWPropertyDisplay = /** @class */ (function () {\n    //@ngInject\n    function SWPropertyDisplay($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, swpropertyPartialPath) {\n        var _this = this;\n        this.$compile = $compile;\n        this.scopeService = scopeService;\n        this.coreFormPartialsPath = coreFormPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.swpropertyPartialPath = swpropertyPartialPath;\n        this.require = { swForm: "?^swForm", form: "?^form" };\n        this.restrict = \'AE\';\n        this.scope = {};\n        this.bindToController = {\n            //swfproperty scope\n            name: "@?",\n            errorName: "@?",\n            class: "@?",\n            edit: "@?",\n            valueObject: "=?",\n            valueObjectProperty: "=?",\n            propertyIdentifier: "@?",\n            valueOptions: "=?",\n            fieldAttributes: "@?",\n            label: "@?",\n            labelText: "@?",\n            labelClass: "@?",\n            errorText: "@?",\n            errorClass: "@?",\n            formTemplate: "@?",\n            eventAnnouncers: "@",\n            hideErrors: \'=?\',\n            value: "@?",\n            //swpropertyscope\n            property: "@?",\n            object: "=?",\n            editable: "=?",\n            editing: "=?",\n            isHidden: "=?",\n            title: "=?",\n            hint: "@?",\n            options: "=?",\n            optionsArguments: "=?",\n            eagerLoadOptions: "=?",\n            isDirty: "=?",\n            onChangeCallback: "&?onChange",\n            onChangeEvent: "@?",\n            saveCallback: "&?",\n            fieldType: "@?",\n            rawFileTarget: "@?",\n            binaryFileTarget: "@?",\n            noValidate: "=?",\n            inListingDisplay: "=?",\n            inModal: "=?",\n            modalCallback: "&?",\n            hasModalCallback: "=?",\n            rowSaveEnabled: "=?",\n            revertToValue: "=?",\n            revertText: "@?",\n            showRevert: "=?",\n            showSave: "=?",\n            placeholderText: "@",\n            placeholderRbKey: "@",\n            inputAttributes: "@?",\n            optionValues: "=?",\n            eventListeners: "=?",\n            context: "@?"\n        };\n        this.controller = SWPropertyDisplayController;\n        this.controllerAs = "swPropertyDisplay";\n        this.templateUrlPath = "propertydisplay.html";\n        this.link = function ($scope, element, attrs, formController) {\n            $scope.frmController = formController;\n            $scope.swfPropertyDisplay = $scope.swPropertyDisplay;\n            if (angular.isDefined(attrs.onChange)) {\n                $scope.swPropertyDisplay.hasOnChangeCallback = true;\n            }\n            else {\n                $scope.swPropertyDisplay.hasOnChangeCallback = false;\n            }\n            if (angular.isDefined(attrs.saveCallback)) {\n                $scope.swPropertyDisplay.hasSaveCallback = true;\n            }\n            else {\n                $scope.swPropertyDisplay.hasSaveCallback = false;\n            }\n            if (angular.isDefined($scope.swPropertyDisplay.inListingDisplay) && $scope.swPropertyDisplay.inListingDisplay) {\n                var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");\n                if (angular.isDefined(currentScope["pageRecord"])) {\n                    $scope.swPropertyDisplay.pageRecord = currentScope["pageRecord"];\n                }\n                var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");\n                if (angular.isDefined(currentScope["pageRecordKey"])) {\n                    $scope.swPropertyDisplay.pageRecordIndex = currentScope["pageRecordKey"];\n                }\n                var currentScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");\n                if (angular.isDefined(currentScope["swListingDisplay"])) {\n                    $scope.swPropertyDisplay.listingID = currentScope["swListingDisplay"].tableID;\n                }\n            }\n            if (angular.isDefined($scope.swPropertyDisplay.inModal) && $scope.swPropertyDisplay.inModal) {\n                var modalScope = _this.scopeService.getRootParentScope($scope, "swModalLauncher");\n                $scope.swPropertyDisplay.modalName = modalScope.swModalLauncher.modalName;\n                if (angular.isFunction(modalScope.swModalLauncher.launchModal)) {\n                    $scope.swPropertyDisplay.modalCallback = modalScope.swModalLauncher.launchModal;\n                    $scope.swPropertyDisplay.hasModalCallback = true;\n                }\n            }\n        };\n        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.coreFormPartialsPath) + swpropertyPartialPath;\n    }\n    SWPropertyDisplay.Factory = function (swpropertyClass, swpropertyPartialPath) {\n        var directive = function ($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder) { return new swpropertyClass($compile, scopeService, coreFormPartialsPath, hibachiPathBuilder, \n        //not an inejctable don\'t add to $inject. This is in the form.module Factory implementation\n        swpropertyPartialPath); };\n        directive.$inject = [\'$compile\', \'scopeService\', \'coreFormPartialsPath\', \'hibachiPathBuilder\'];\n        return directive;\n    };\n    SWPropertyDisplay.$inject = [\'coreFormPartialsPath\', \'hibachiPathBuilder\'];\n    return SWPropertyDisplay;\n}());\nexports.SWPropertyDisplay = SWPropertyDisplay;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/components/swpropertydisplay.ts?')},"../../../org/Hibachi/client/src/form/form.module.ts":
/*!********************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/form.module.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//module\nvar core_module_1 = __webpack_require__(/*! ../core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//services\nvar fileservice_1 = __webpack_require__(/*! ./services/fileservice */ \"../../../org/Hibachi/client/src/form/services/fileservice.ts\");\n//directives\n//  components\n//form\nvar swinput_1 = __webpack_require__(/*! ./components/swinput */ \"../../../org/Hibachi/client/src/form/components/swinput.ts\");\nvar swfformfield_1 = __webpack_require__(/*! ./components/swfformfield */ \"../../../org/Hibachi/client/src/form/components/swfformfield.ts\");\nvar swform_1 = __webpack_require__(/*! ./components/swform */ \"../../../org/Hibachi/client/src/form/components/swform.ts\");\nvar swfform_1 = __webpack_require__(/*! ./components/swfform */ \"../../../org/Hibachi/client/src/form/components/swfform.ts\");\nvar swffileinput_1 = __webpack_require__(/*! ./components/swffileinput */ \"../../../org/Hibachi/client/src/form/components/swffileinput.ts\");\nvar swformfield_1 = __webpack_require__(/*! ./components/swformfield */ \"../../../org/Hibachi/client/src/form/components/swformfield.ts\");\nvar swformfieldfile_1 = __webpack_require__(/*! ./components/swformfieldfile */ \"../../../org/Hibachi/client/src/form/components/swformfieldfile.ts\");\nvar swformfieldjson_1 = __webpack_require__(/*! ./components/swformfieldjson */ \"../../../org/Hibachi/client/src/form/components/swformfieldjson.ts\");\nvar swformfieldsearchselect_1 = __webpack_require__(/*! ./components/swformfieldsearchselect */ \"../../../org/Hibachi/client/src/form/components/swformfieldsearchselect.ts\");\nvar swformregistrar_1 = __webpack_require__(/*! ./components/swformregistrar */ \"../../../org/Hibachi/client/src/form/components/swformregistrar.ts\");\nvar swerrordisplay_1 = __webpack_require__(/*! ./components/swerrordisplay */ \"../../../org/Hibachi/client/src/form/components/swerrordisplay.ts\");\nvar swaddressform_1 = __webpack_require__(/*! ./components/swaddressform */ \"../../../org/Hibachi/client/src/form/components/swaddressform.ts\");\nvar swpropertydisplay_1 = __webpack_require__(/*! ./components/swpropertydisplay */ \"../../../org/Hibachi/client/src/form/components/swpropertydisplay.ts\");\nvar swfpropertydisplay_1 = __webpack_require__(/*! ./components/swfpropertydisplay */ \"../../../org/Hibachi/client/src/form/components/swfpropertydisplay.ts\");\nvar swformsubscriber_1 = __webpack_require__(/*! ./components/swformsubscriber */ \"../../../org/Hibachi/client/src/form/components/swformsubscriber.ts\");\nvar formmodule = angular.module('hibachi.form', ['angularjs-datetime-picker', core_module_1.coremodule.name]).config(function () {\n})\n    .constant('coreFormPartialsPath', 'form/components/')\n    .service('fileService', fileservice_1.FileService)\n    //directives\n    .directive('swInput', swinput_1.SWInput.Factory())\n    .directive('swfFormField', swfformfield_1.SWFFormField.Factory())\n    .directive('swForm', swform_1.SWForm.Factory())\n    .directive('swfForm', swfform_1.SWFForm.Factory())\n    .directive('swfFileInput', swffileinput_1.SWFFileInput.Factory())\n    .directive('swFormField', swformfield_1.SWFormField.Factory())\n    .directive('swFormFieldFile', swformfieldfile_1.SWFormFieldFile.Factory())\n    .directive('swFormFieldJson', swformfieldjson_1.SWFormFieldJson.Factory())\n    .directive('swFormFieldSearchSelect', swformfieldsearchselect_1.SWFormFieldSearchSelect.Factory())\n    .directive('swFormRegistrar', swformregistrar_1.SWFormRegistrar.Factory())\n    .directive('swfPropertyDisplay', swfpropertydisplay_1.SWFPropertyDisplay.Factory(swfpropertydisplay_1.SWFPropertyDisplay, \"swfpropertydisplay.html\"))\n    .directive('swPropertyDisplay', swpropertydisplay_1.SWPropertyDisplay.Factory(swpropertydisplay_1.SWPropertyDisplay, \"propertydisplay.html\"))\n    .directive('swErrorDisplay', swerrordisplay_1.SWErrorDisplay.Factory())\n    .directive('swAddressForm', swaddressform_1.SWAddressForm.Factory())\n    .directive('swFormSubscriber', swformsubscriber_1.SWFormSubscriber.Factory());\nexports.formmodule = formmodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/form.module.ts?")},"../../../org/Hibachi/client/src/form/services/fileservice.ts":
/*!*****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/services/fileservice.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar FileService = /** @class */ (function () {\n    //@ngInject\n    function FileService($q, observerService) {\n        var _this = this;\n        this.$q = $q;\n        this.observerService = observerService;\n        this.fileStates = {};\n        this.imageExists = function (src) {\n            var deferred = _this.$q.defer();\n            var image = new Image();\n            image.onerror = function () {\n                deferred.reject();\n            };\n            image.onload = function () {\n                deferred.resolve();\n            };\n            image.src = src;\n            return deferred.promise;\n        };\n        this.uploadFile = function (file, object, property) {\n            var deferred = _this.$q.defer();\n            var promise = deferred.promise;\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (result) {\n                object.data[property] = fileReader.result;\n                deferred.resolve(fileReader.result);\n            };\n            fileReader.onerror = function (result) {\n                deferred.reject();\n                throw ("fileservice couldn\'t read the file");\n            };\n            return promise;\n        };\n    }\n    return FileService;\n}());\nexports.FileService = FileService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/form/services/fileservice.ts?')},"../../../org/Hibachi/client/src/hibachi/components/swsaveandfinish.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/hibachi/components/swsaveandfinish.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWSaveAndFinishController = /** @class */ (function () {\n    //@ngInject\n    function SWSaveAndFinishController($hibachi, dialogService, alertService, rbkeyService, $log) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.dialogService = dialogService;\n        this.alertService = alertService;\n        this.rbkeyService = rbkeyService;\n        this.$log = $log;\n        this.saving = false;\n        this.initialSetup = function () {\n            if (!angular.isDefined(_this.finish)) {\n                _this.openNewDialog = false;\n            }\n            else {\n                _this.openNewDialog = (_this.finish.toLowerCase() == \'true\') ? false : true;\n            }\n            if (_this.openNewDialog) {\n                _this.rbKey = \'admin.define.saveandnew\';\n            }\n            else {\n                _this.rbKey = \'admin.define.saveandfinish\';\n            }\n        };\n        this.save = function () {\n            _this.saving = true;\n            var savePromise = _this.entity.$$save();\n            savePromise.then(function (data) {\n                _this.dialogService.removeCurrentDialog();\n                if (_this.openNewDialog && angular.isDefined(_this.partial)) {\n                    _this.dialogService.addPageDialog(_this.partial);\n                }\n                else {\n                    if (angular.isDefined(_this.redirectUrl)) {\n                        window.location.href = _this.redirectUrl;\n                    }\n                    else if (angular.isDefined(_this.redirectAction)) {\n                        if (angular.isUndefined(_this.redirectQueryString)) {\n                            _this.redirectQueryString = "";\n                        }\n                        window.location.href = _this.$hibachi.buildUrl(_this.redirectAction, _this.redirectQueryString);\n                    }\n                    else {\n                        _this.$log.debug("You did not specify a redirect for swSaveAndFinish");\n                    }\n                }\n            }).catch(function (data) {\n                if (angular.isDefined(_this.customErrorRbkey)) {\n                    data = _this.rbkeyService.getRBKey(_this.customErrorRbkey);\n                }\n                if (angular.isString(data)) {\n                    var alert = _this.alertService.newAlert();\n                    alert.msg = data;\n                    alert.type = "error";\n                    alert.fade = true;\n                    _this.alertService.addAlert(alert);\n                }\n                else {\n                    _this.alertService.addAlerts(data);\n                }\n            }).finally(function () {\n                _this.saving = false;\n            });\n        };\n        if (!angular.isFunction(this.entity.$$save)) {\n            throw ("Your entity does not have the $$save function.");\n        }\n        this.initialSetup();\n    }\n    return SWSaveAndFinishController;\n}());\nexports.SWSaveAndFinishController = SWSaveAndFinishController;\nvar SWSaveAndFinish = /** @class */ (function () {\n    //@ngInject\n    function SWSaveAndFinish(hibachiPartialsPath, hibachiPathBuilder) {\n        this.hibachiPartialsPath = hibachiPartialsPath;\n        this.restrict = "EA";\n        this.scope = {};\n        this.controller = SWSaveAndFinishController;\n        this.controllerAs = "swSaveAndFinish";\n        this.bindToController = {\n            entity: "=",\n            redirectUrl: "@?",\n            redirectAction: "@?",\n            redirectQueryString: "@?",\n            finish: "@?",\n            partial: "@?",\n            customErrorRbkey: "@?"\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(hibachiPartialsPath) + "saveandfinish.html";\n    }\n    SWSaveAndFinish.Factory = function () {\n        var directive = function (hibachiPartialsPath, hibachiPathBuilder) { return new SWSaveAndFinish(hibachiPartialsPath, hibachiPathBuilder); };\n        directive.$inject = ["hibachiPartialsPath", "hibachiPathBuilder"];\n        return directive;\n    };\n    return SWSaveAndFinish;\n}());\nexports.SWSaveAndFinish = SWSaveAndFinish;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/hibachi/components/swsaveandfinish.ts?')},"../../../org/Hibachi/client/src/hibachi/hibachi.module.ts":
/*!**************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/hibachi/hibachi.module.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//import alertmodule = require('./alert/alert.module');\nvar alert_module_1 = __webpack_require__(/*! ../alert/alert.module */ \"../../../org/Hibachi/client/src/alert/alert.module.ts\");\nvar card_module_1 = __webpack_require__(/*! ../card/card.module */ \"../../../org/Hibachi/client/src/card/card.module.ts\");\nvar collection_module_1 = __webpack_require__(/*! ../collection/collection.module */ \"../../../org/Hibachi/client/src/collection/collection.module.ts\");\nvar listing_module_1 = __webpack_require__(/*! ../listing/listing.module */ \"../../../org/Hibachi/client/src/listing/listing.module.ts\");\nvar dialog_module_1 = __webpack_require__(/*! ../dialog/dialog.module */ \"../../../org/Hibachi/client/src/dialog/dialog.module.ts\");\nvar entity_module_1 = __webpack_require__(/*! ../entity/entity.module */ \"../../../org/Hibachi/client/src/entity/entity.module.ts\");\nvar pagination_module_1 = __webpack_require__(/*! ../pagination/pagination.module */ \"../../../org/Hibachi/client/src/pagination/pagination.module.ts\");\nvar form_module_1 = __webpack_require__(/*! ../form/form.module */ \"../../../org/Hibachi/client/src/form/form.module.ts\");\nvar validation_module_1 = __webpack_require__(/*! ../validation/validation.module */ \"../../../org/Hibachi/client/src/validation/validation.module.ts\");\nvar workflow_module_1 = __webpack_require__(/*! ../workflow/workflow.module */ \"../../../org/Hibachi/client/src/workflow/workflow.module.ts\");\n//directives\nvar swsaveandfinish_1 = __webpack_require__(/*! ./components/swsaveandfinish */ \"../../../org/Hibachi/client/src/hibachi/components/swsaveandfinish.ts\");\nvar hibachimodule = angular.module('hibachi', [\n    alert_module_1.alertmodule.name,\n    card_module_1.cardmodule.name,\n    collection_module_1.collectionmodule.name,\n    entity_module_1.entitymodule.name,\n    dialog_module_1.dialogmodule.name,\n    listing_module_1.listingmodule.name,\n    pagination_module_1.paginationmodule.name,\n    form_module_1.formmodule.name,\n    validation_module_1.validationmodule.name,\n    workflow_module_1.workflowmodule.name\n]).config([function () {\n    }])\n    .run(['$rootScope', 'publicService', '$hibachi', 'localStorageService', function ($rootScope, publicService, $hibachi, localStorageService) {\n        $rootScope.hibachiScope = publicService;\n        $rootScope.hasAccount = publicService.hasAccount;\n        if ($hibachi.newAccount) {\n            $rootScope.hibachiScope.getAccount();\n        }\n        if ($hibachi.newOrder) {\n            $rootScope.hibachiScope.getCart();\n        }\n        if ($hibachi.newCountry) {\n            $rootScope.hibachiScope.getCountries();\n        }\n        if ($hibachi.newState) {\n            $rootScope.hibachiScope.getStates();\n        }\n        if ($hibachi.newState) {\n            $rootScope.hibachiScope.getAddressOptions();\n        }\n        if (localStorageService.hasItem('selectedPersonalCollection')) {\n            $rootScope.hibachiScope.selectedPersonalCollection = angular.fromJson(localStorageService.getItem('selectedPersonalCollection'));\n        }\n    }])\n    .constant('hibachiPartialsPath', 'hibachi/components/')\n    .directive('swSaveAndFinish', swsaveandfinish_1.SWSaveAndFinish.Factory());\nexports.hibachimodule = hibachimodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/hibachi/hibachi.module.ts?")},"../../../org/Hibachi/client/src/listing/components/swlistingaggregate.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingaggregate.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWListingAggregateController = /** @class */ (function () {\n    function SWListingAggregateController() {\n        var _this = this;\n        this.init = function () {\n            _this.editable = _this.editable || false;\n        };\n        this.init();\n    }\n    return SWListingAggregateController;\n}());\nvar SWListingAggregate = /** @class */ (function () {\n    function SWListingAggregate() {\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.bindToController = {\n            propertyIdentifier: "@",\n            aggregateFunction: "@",\n            aggregateAlias: "@?"\n        };\n        this.controller = SWListingAggregateController;\n        this.controllerAs = "swListingAggregate";\n        this.link = function (scope, element, attrs) {\n            var aggregate = {\n                propertyIdentifier: scope.swListingAggregate.propertyIdentifier,\n                aggregateFunction: scope.swListingAggregate.aggregateFunction,\n                aggregateAlias: scope.swListingAggregate.aggregateAlias,\n            };\n            scope.$parent.swListingDisplay.aggregates.push(aggregate);\n        };\n    }\n    SWListingAggregate.Factory = function () {\n        var directive = function () { return new SWListingAggregate(); };\n        directive.$inject = [];\n        return directive;\n    };\n    return SWListingAggregate;\n}());\nexports.SWListingAggregate = SWListingAggregate;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingaggregate.ts?')},"../../../org/Hibachi/client/src/listing/components/swlistingcolorfilter.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingcolorfilter.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWListingColorFilterController = /** @class */ (function () {\n    function SWListingColorFilterController() {\n        this.init = function () {\n        };\n        this.init();\n    }\n    return SWListingColorFilterController;\n}());\nvar SWListingColorFilter = /** @class */ (function () {\n    function SWListingColorFilter(utilityService) {\n        var _this = this;\n        this.utilityService = utilityService;\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.bindToController = {\n            propertyToCompare: "@",\n            comparisonOperator: "@",\n            comparisonValue: "@",\n            comparisonProperty: "@",\n            colorClass: "@",\n            color: "@"\n        };\n        this.controller = SWListingColorFilterController;\n        this.controllerAs = "swListingColorFilter";\n        this.link = function (scope, element, attrs) {\n            var colorFilter = {\n                propertyToCompare: scope.swListingColorFilter.propertyToCompare,\n                comparisonOperator: scope.swListingColorFilter.comparisonOperator,\n                comparisonValue: scope.swListingColorFilter.comparisonValue,\n                comparisonProperty: scope.swListingColorFilter.comparisonProperty,\n                colorClass: scope.swListingColorFilter.colorClass,\n                color: scope.swListingColorFilter.color\n            };\n            if (_this.utilityService.ArrayFindByPropertyValue(scope.$parent.swListingDisplay.colorFilters, \'propertyToCompare\', colorFilter.propertyToCompare) === -1) {\n                scope.$parent.swListingDisplay.colorFilters.push(colorFilter);\n            }\n        };\n    }\n    SWListingColorFilter.Factory = function () {\n        var directive = function (utilityService) { return new SWListingColorFilter(utilityService); };\n        directive.$inject = [\n            \'utilityService\'\n        ];\n        return directive;\n    };\n    return SWListingColorFilter;\n}());\nexports.SWListingColorFilter = SWListingColorFilter;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingcolorfilter.ts?')},"../../../org/Hibachi/client/src/listing/components/swlistingcolumn.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingcolumn.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWListingColumnController = /** @class */ (function () {\n    //@ngInject\n    function SWListingColumnController($injector, utilityService, listingService, rbkeyService) {\n        var _this = this;\n        this.$injector = $injector;\n        this.utilityService = utilityService;\n        this.listingService = listingService;\n        this.rbkeyService = rbkeyService;\n        this.hasCellView = false;\n        this.hasHeaderView = false;\n        this.$onInit = function () {\n            if (angular.isUndefined(_this.isVisible)) {\n                _this.isVisible = true;\n            }\n            if (angular.isUndefined(_this.isExportable)) {\n                _this.isExportable = true;\n            }\n            if (angular.isUndefined(_this.isDeletable)) {\n                _this.isDeletable = true;\n            }\n            if (angular.isUndefined(_this.search)) {\n                _this.search = true;\n            }\n            _this.editable = _this.editable || false;\n            //did a cellView get suggested, if so does it exist\n            if (_this.cellView) {\n                if (_this.$injector.has(_this.cellView + \'Directive\')) {\n                    _this.hasCellView = true;\n                }\n                else {\n                    throw (_this.cellView + \' is not an existing directive\');\n                }\n            }\n            if (_this.headerView) {\n                if (_this.$injector.has(_this.headerView + \'Directive\')) {\n                    _this.hasHeaderView = true;\n                }\n                else {\n                    throw (_this.headerView + \' is not an existing directive\');\n                }\n            }\n            _this.column = {\n                columnID: "C" + _this.utilityService.createID(31),\n                propertyIdentifier: _this.propertyIdentifier,\n                fallbackPropertyIdentifiers: _this.fallbackPropertyIdentifiers,\n                processObjectProperty: _this.processObjectProperty,\n                title: _this.title,\n                tdclass: _this.tdclass,\n                search: _this.search,\n                sort: _this.sort,\n                filter: _this.filter,\n                range: _this.range,\n                editable: _this.editable,\n                buttonGroup: _this.buttonGroup,\n                hasCellView: _this.hasCellView,\n                hasHeaderView: _this.hasHeaderView,\n                isVisible: _this.isVisible,\n                isDeletable: _this.isDeletable,\n                isSearchable: _this.search,\n                isExportable: _this.isExportable,\n                action: _this.action,\n                queryString: _this.queryString,\n                persistent: _this.persistent\n            };\n            if (_this.hasCellView) {\n                _this.column.cellView = _this.cellView;\n            }\n            if (_this.hasHeaderView) {\n                _this.column.headerView = _this.utilityService.camelCaseToSnakeCase(_this.headerView);\n            }\n            //aggregate logic\n            if (_this.aggregate) {\n                _this.column.aggregate = _this.aggregate;\n                _this.column.aggregate.propertyIdentifier = _this.propertyIdentifier;\n            }\n        };\n        this.$injector = $injector;\n        this.utilityService = utilityService;\n        this.listingService = listingService;\n        this.rbkeyService = rbkeyService;\n    }\n    return SWListingColumnController;\n}());\nvar SWListingColumn = /** @class */ (function () {\n    //@ngInject\n    function SWListingColumn(listingService) {\n        var _this = this;\n        this.listingService = listingService;\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.require = { swListingDisplay: "?^swListingDisplay" };\n        this.bindToController = {\n            propertyIdentifier: "@",\n            processObjectProperty: "@?",\n            //defined as aggregate = {aggregateFunction:\'COUNT\',aggregateAlias:\'aliasstring\'}\n            aggregate: "=?",\n            title: "@?",\n            tdclass: "@?",\n            search: "=?",\n            sort: "=?",\n            filter: "=?",\n            isVisible: "=?",\n            isDeletable: "=?",\n            isExportable: "=?",\n            range: "=?",\n            editable: "=?",\n            buttonGroup: "=?",\n            cellView: "@?",\n            headerView: "@?",\n            fallbackPropertyIdentifiers: "@?",\n            action: "@?",\n            queryString: "@?"\n        };\n        this.controller = SWListingColumnController;\n        this.controllerAs = "swListingColumn";\n        this.link = function (scope, elem, attr, listingService) {\n            if (angular.isDefined(scope.swListingDisplay)\n                && scope.swListingDisplay.tableID\n                && scope.swListingDisplay.tableID.length) {\n                var listingDisplayID = scope.swListingDisplay.tableID;\n                if (scope.swListingDisplay.usePersonalCollection != true\n                    && scope.swListingDisplay.columns) {\n                    _this.listingService.addColumn(listingDisplayID, scope.swListingColumn.column);\n                    _this.listingService.setupColumn(listingDisplayID, scope.swListingColumn.column);\n                }\n            }\n            else if (angular.isDefined(scope.swListingColumn.swListingDisplay)\n                && scope.swListingColumn.swListingDisplay.tableID\n                && scope.swListingColumn.swListingDisplay.tableID.length\n                && scope.swListingColumn.swListingDisplay.usePersonalCollection != true\n                && scope.swListingColumn.swListingDisplay.columns) {\n                var listingDisplayID = scope.swListingColumn.swListingDisplay.tableID;\n                _this.listingService.addColumn(listingDisplayID, scope.swListingColumn.column);\n            }\n            else {\n                throw ("listing display scope not available to sw-listing-column or there is no table id");\n            }\n        };\n    }\n    SWListingColumn.Factory = function () {\n        var directive = function (listingService) { return new SWListingColumn(listingService); };\n        directive.$inject = [\n            \'listingService\'\n        ];\n        return directive;\n    };\n    return SWListingColumn;\n}());\nexports.SWListingColumn = SWListingColumn;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingcolumn.ts?')},"../../../org/Hibachi/client/src/listing/components/swlistingcontrols.ts":
/*!****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingcontrols.ts ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWListingControlsController = /** @class */ (function () {\n    //@ngInject\n    function SWListingControlsController($hibachi, metadataService, collectionService, listingService, observerService) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.metadataService = metadataService;\n        this.collectionService = collectionService;\n        this.listingService = listingService;\n        this.observerService = observerService;\n        this.displayOptionsClosed = true;\n        this.filtersClosed = true;\n        this.personalCollectionsClosed = true;\n        this.columnIsControllableMap = {};\n        this.filterActions = function (res) {\n            if (res.action == 'add' || res.action == 'remove') {\n                _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });\n            }\n            _this.filtersClosed = true;\n        };\n        this.getSelectedSearchColumnName = function () {\n            return (angular.isUndefined(_this.selectedSearchColumn)) ? 'All' : _this.selectedSearchColumn.title;\n        };\n        this.canDisplayColumn = function (column) {\n            if (!_this.listingColumns || !_this.listingColumns.length) {\n                return true;\n            }\n            if (angular.isDefined(_this.columnIsControllableMap[column.propertyIdentifier])) {\n                return _this.columnIsControllableMap[column.propertyIdentifier];\n            }\n            for (var i = 0; i < _this.listingColumns.length; i++) {\n                if (column.propertyIdentifier == _this.listingColumns[i].propertyIdentifier) {\n                    _this.columnIsControllableMap[column.propertyIdentifier] = true;\n                }\n            }\n            if (!_this.columnIsControllableMap[column.propertyIdentifier]) {\n                _this.columnIsControllableMap[column.propertyIdentifier] = false;\n            }\n            return _this.columnIsControllableMap[column.propertyIdentifier];\n        };\n        this.addSearchFilter = function () {\n            if (angular.isUndefined(_this.selectedSearchColumn) || !_this.searchText)\n                return;\n            var keywords = _this.searchText.split(\" \");\n            for (var i = 0; i < keywords.length; i++) {\n                _this.collectionConfig.addLikeFilter(_this.selectedSearchColumn.propertyIdentifier, keywords[i], '%w%', undefined, _this.selectedSearchColumn.title);\n            }\n            _this.searchText = '';\n            _this.collectionConfig.setKeywords(_this.searchText);\n            _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });\n        };\n        this.toggleDisplayOptions = function (closeButton) {\n            if (closeButton === void 0) { closeButton = false; }\n            if (closeButton) {\n                _this.displayOptionsClosed = true;\n            }\n            else {\n                _this.displayOptionsClosed = !_this.displayOptionsClosed;\n            }\n        };\n        this.setItemInUse = function (booleanValue) {\n            _this.itemInUse = booleanValue;\n        };\n        this.removeFilter = function (array, index, reloadCollection) {\n            if (reloadCollection === void 0) { reloadCollection = true; }\n            array.splice(index, 1);\n            if (reloadCollection) {\n                _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });\n            }\n        };\n        this.toggleFilters = function () {\n            if (_this.filtersClosed) {\n                if (_this.simple) {\n                    _this.newFilterPosition = _this.collectionService.newFilterItem(_this.collectionConfig.filterGroups[0].filterGroup, _this.setItemInUse);\n                }\n            }\n            _this.filtersClosed = !_this.filtersClosed;\n        };\n        this.togglePersonalCollections = function () {\n            _this.personalCollectionsClosed = !_this.personalCollectionsClosed;\n        };\n        this.selectFilterItem = function (filterItem) {\n            _this.filtersClosed = false;\n            _this.collectionService.selectFilterItem(filterItem);\n        };\n        this.saveCollection = function (collectionConfig) {\n            if (collectionConfig) {\n                _this.collectionConfig = collectionConfig;\n            }\n            _this.swListingDisplay.collectionConfig = _this.collectionConfig;\n            _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });\n        };\n        this.exportCollection = function () {\n            _this.swListingDisplay.exportCurrentList();\n        };\n        this.printCollection = function (printTemplateID) {\n            _this.swListingDisplay.printCurrentList(printTemplateID);\n        };\n        if (angular.isUndefined(this.showPrintOptions)) {\n            this.showPrintOptions = false;\n        }\n        if (angular.isUndefined(this.showExport)) {\n            this.showExport = true;\n        }\n        if (angular.isUndefined(this.showReport)) {\n            this.showReport = true;\n        }\n        if (angular.isUndefined(this.showToggleSearch)) {\n            this.showToggleSearch = true;\n        }\n        if (angular.isUndefined(this.showToggleFilters)) {\n            this.showToggleFilters = true;\n        }\n        if (angular.isUndefined(this.showToggleDisplayOptions)) {\n            this.showToggleDisplayOptions = true;\n        }\n        if (angular.isUndefined(this.showFilters)) {\n            this.showFilters = false;\n        }\n        this.backupColumnsConfig = this.collectionConfig.getColumns();\n        if (angular.isDefined(this.tableId)) {\n            this.listingColumns = this.listingService.getListingColumns(this.tableId);\n        }\n        if (angular.isUndefined(this.simple)) {\n            this.simple = true;\n        }\n        this.filterPropertiesList = {};\n        $hibachi.getFilterPropertiesByBaseEntityName(this.collectionConfig.baseEntityAlias).then(function (value) {\n            metadataService.setPropertiesList(value, _this.collectionConfig.baseEntityAlias);\n            _this.filterPropertiesList[_this.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias(_this.collectionConfig.baseEntityAlias);\n            metadataService.formatPropertiesList(_this.filterPropertiesList[_this.collectionConfig.baseEntityAlias], _this.collectionConfig.baseEntityAlias);\n        });\n        this.observerService.attach(this.filterActions, 'filterItemAction');\n    }\n    return SWListingControlsController;\n}());\nvar SWListingControls = /** @class */ (function () {\n    function SWListingControls(collectionPartialsPath, hibachiPathBuilder) {\n        this.collectionPartialsPath = collectionPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.restrict = 'E';\n        this.scope = {};\n        this.require = { swListingDisplay: '?^swListingDisplay' };\n        this.bindToController = {\n            collectionConfig: \"=\",\n            tableId: \"=?\",\n            getCollection: \"&\",\n            showReport: \"=?\",\n            showExport: \"=?\",\n            showFilters: \"=?\",\n            showPrintOptions: \"=?\",\n            showToggleSearch: \"=?\",\n            showToggleFilters: \"=?\",\n            showToggleDisplayOptions: \"=?\",\n            displayOptionsClosed: \"=?\",\n            simple: \"=?\"\n        };\n        this.controller = SWListingControlsController;\n        this.controllerAs = 'swListingControls';\n        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + \"listingcontrols.html\";\n    }\n    SWListingControls.Factory = function () {\n        var directive = function (listingPartialPath, hibachiPathBuilder) { return new SWListingControls(listingPartialPath, hibachiPathBuilder); };\n        directive.$inject = ['listingPartialPath', 'hibachiPathBuilder'];\n        return directive;\n    };\n    SWListingControls.$inject = ['listingPartialPath', 'hibachiPathBuilder'];\n    return SWListingControls;\n}());\nexports.SWListingControls = SWListingControls;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingcontrols.ts?")},"../../../org/Hibachi/client/src/listing/components/swlistingdisablerule.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingdisablerule.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\n/* SwListingDisableRule\n * defines a filter, by which to determine what rows will be disabled\n */\nvar SWListingDisableRuleController = /** @class */ (function () {\n    //@ngInject\n    function SWListingDisableRuleController($q) {\n        this.$q = $q;\n    }\n    return SWListingDisableRuleController;\n}());\nvar SWListingDisableRule = /** @class */ (function () {\n    function SWListingDisableRule(scopeService, $q) {\n        var _this = this;\n        this.scopeService = scopeService;\n        this.$q = $q;\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.template = "\\n        \\n    ";\n        this.bindToController = {\n            filterPropertyIdentifier: "@",\n            filterComparisonOperator: "@",\n            filterComparisonValue: "@"\n        };\n        this.controller = SWListingDisableRuleController;\n        this.controllerAs = "swListingDisableRule";\n        this.link = function (scope, element, attrs) {\n            var rule = {\n                filterPropertyIdentifier: scope.swListingDisableRule.filterPropertyIdentifier,\n                filterComparisonOperator: scope.swListingDisableRule.filterComparisonOperator,\n                filterComparisonValue: scope.swListingDisableRule.filterComparisonValue\n            };\n            var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");\n            if (angular.isDefined(listingDisplayScope.swListingDisplay)) {\n                listingDisplayScope = listingDisplayScope.swListingDisplay;\n            }\n            else {\n                throw ("listing display scope not available to sw-listing-disable-rule");\n            }\n            listingDisplayScope.disableRules.push(rule);\n        };\n    }\n    SWListingDisableRule.Factory = function () {\n        var directive = function (scopeService, $q) { return new SWListingDisableRule(scopeService, $q); };\n        directive.$inject = [\n            \'scopeService\',\n            \'$q\'\n        ];\n        return directive;\n    };\n    return SWListingDisableRule;\n}());\nexports.SWListingDisableRule = SWListingDisableRule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingdisablerule.ts?')},"../../../org/Hibachi/client/src/listing/components/swlistingdisplay.ts":
/*!***************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingdisplay.ts ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWListingDisplayController = /** @class */ (function () {\n    //@ngInject\n    function SWListingDisplayController($scope, $rootScope, $transclude, $timeout, $q, $hibachi, utilityService, collectionConfigService, listingService, paginationService, selectionService, observerService, rbkeyService, localStorageService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$rootScope = $rootScope;\n        this.$transclude = $transclude;\n        this.$timeout = $timeout;\n        this.$q = $q;\n        this.$hibachi = $hibachi;\n        this.utilityService = utilityService;\n        this.collectionConfigService = collectionConfigService;\n        this.listingService = listingService;\n        this.paginationService = paginationService;\n        this.selectionService = selectionService;\n        this.observerService = observerService;\n        this.rbkeyService = rbkeyService;\n        this.localStorageService = localStorageService;\n        /* local state variables */\n        this.actions = [];\n        this.allpropertyidentifiers = "";\n        this.allprocessobjectproperties = "false";\n        this.aggregates = [];\n        this.buttonGroup = [];\n        this.childCollectionConfigs = {};\n        this.collectionConfigs = [];\n        this.collectionObjects = [];\n        this.colorFilters = [];\n        this.columns = [];\n        this.disableRules = [];\n        this.expandableRules = [];\n        this.exampleEntity = "";\n        this.filters = [];\n        this.filterGroups = [];\n        this.hideRules = [];\n        this.multiselectable = false;\n        this.orderBys = [];\n        this.orderByStates = {};\n        this.orderByIndices = {};\n        this.pageRecordsWithManualSortOrder = {};\n        this.searching = false;\n        this.selectable = false;\n        this.showSearchFilters = false;\n        this.sortable = false;\n        this.processCollection = function () {\n            _this.initializeState();\n            if (angular.isDefined(_this.collectionPromise)) {\n                _this.hasCollectionPromise = true;\n                _this.multipleCollectionDeffered.reject();\n            }\n            if (_this.collectionConfig != null) {\n                _this.multipleCollectionDeffered.reject();\n            }\n            _this.listingService.setListingState(_this.tableID, _this);\n            if (_this.collectionConfig && _this.collectionConfig.keywords && _this.collectionConfig.keywords.length) {\n                _this.searchText = _this.collectionConfig.keywords;\n            }\n            //this is performed after the listing state is set above to populate columns and multiple collectionConfigs if present\n            _this.$transclude(_this.$scope, function () { });\n            _this.hasCollectionPromise = angular.isDefined(_this.collectionPromise);\n            if (_this.multiSlot) {\n                _this.singleCollectionPromise.then(function () {\n                    _this.multipleCollectionDeffered.reject();\n                });\n                _this.multipleCollectionPromise.then(function () {\n                    //now do the intial setup\n                    _this.listingService.setupInMultiCollectionConfigMode(_this.tableID);\n                }).catch(function () {\n                    //do the initial setup for single collection mode\n                    _this.listingService.setupInSingleCollectionConfigMode(_this.tableID, _this.$scope);\n                }).finally(function () {\n                    if (angular.isUndefined(_this.getCollection)) {\n                        _this.getCollection = _this.listingService.setupDefaultGetCollection(_this.tableID);\n                    }\n                    _this.paginator.getCollection = _this.getCollection;\n                    _this.observerService.attach(_this.getCollectionObserver, \'getCollection\', _this.tableID);\n                });\n            }\n            else if (_this.multiSlot == false) {\n                if (_this.columns && _this.columns.length) {\n                    _this.collectionConfig.columns = _this.columns;\n                }\n                //setup selectable\n                _this.listingService.setupSelect(_this.tableID);\n                _this.listingService.setupMultiselect(_this.tableID);\n                _this.listingService.setupExampleEntity(_this.tableID);\n                _this.setupCollectionPromise();\n            }\n            if (!_this.collectionObject && (_this.collectionConfig && _this.collectionConfig.baseEntityName)) {\n                _this.collectionObject = _this.collectionConfig.baseEntityName;\n            }\n            if (_this.collectionObject) {\n                _this.exampleEntity = _this.$hibachi.getEntityExample(_this.collectionObject);\n            }\n            _this.observerService.attach(_this.getCollectionByPagination, \'swPaginationAction\', _this.tableID);\n        };\n        this.getCollectionByPagination = function (state) {\n            if (state.type) {\n                switch (state.type) {\n                    case \'setCurrentPage\':\n                        _this.collectionConfig.currentPage = state.payload;\n                        break;\n                    case \'nextPage\':\n                        _this.collectionConfig.currentPage = state.payload;\n                        break;\n                    case \'prevPage\':\n                        _this.collectionConfig.currentPage = state.payload;\n                        break;\n                    case \'setPageShow\':\n                        _this.collectionConfig.currentPage = 1;\n                        _this.collectionConfig.setPageShow(state.payload);\n                        break;\n                }\n                if (_this.collectionId) {\n                    _this.collectionConfig.baseEntityNameType = \'Collection\';\n                    _this.collectionConfig.id = _this.collectionId;\n                }\n                _this.getCollection = _this.collectionConfig.getEntity().then(function (data) {\n                    _this.collectionData = data;\n                    _this.observerService.notifyById(\'swPaginationUpdate\', _this.tableID, _this.collectionData);\n                });\n            }\n        };\n        this.setupCollectionPromise = function () {\n            if (angular.isUndefined(_this.getCollection)) {\n                _this.getCollection = _this.listingService.setupDefaultGetCollection(_this.tableID);\n            }\n            _this.paginator.getCollection = _this.getCollection;\n            var getCollectionEventID = _this.tableID;\n            //this.observerService.attach(this.getCollectionObserver,\'getCollection\',getCollectionEventID);\n            _this.listingService.getCollection(_this.tableID);\n        };\n        this.getCollectionObserver = function (param) {\n            if (angular.isString(param.collectionConfig)) {\n                _this.collectionConfig.loadJson(param.collectionConfig);\n            }\n            else {\n                _this.collectionConfig = param.collectionConfig;\n            }\n            _this.collectionData = undefined;\n            _this.$timeout(function () {\n                _this.getCollection();\n            });\n        };\n        this.initializeState = function () {\n            if (_this.name != null) {\n                _this.tableID = _this.name;\n            }\n            else {\n                _this.tableID = \'LD\' + _this.utilityService.createID();\n            }\n            if (angular.isUndefined(_this.collectionConfig)) {\n                //make it available to swCollectionConfig\n                _this.collectionConfig = null;\n            }\n            if (angular.isUndefined(_this.multiSlot)) {\n                _this.multiSlot = false;\n            }\n            if (angular.isDefined(_this.administrativeCount)) {\n                _this.administrativeCount = parseInt(_this.administrativeCount);\n            }\n            else {\n                _this.administrativeCount = 0;\n            }\n            if (_this.recordDetailAction && _this.recordDetailAction.length) {\n                _this.administrativeCount++;\n                _this.adminattributes = _this.getAdminAttributesByType(\'detail\');\n            }\n            if (_this.recordEditAction && _this.recordEditAction.length) {\n                _this.administrativeCount++;\n                _this.adminattributes = _this.getAdminAttributesByType(\'edit\');\n            }\n            if (_this.recordDeleteAction && _this.recordDeleteAction.length) {\n                _this.administrativeCount++;\n                _this.adminattributes = _this.getAdminAttributesByType(\'delete\');\n            }\n            if (_this.recordAddAction && _this.recordAddAction.length) {\n                _this.administrativeCount++;\n                _this.adminattributes = _this.getAdminAttributesByType(\'add\');\n            }\n            if (_this.collectionConfig != null &&\n                angular.isDefined(_this.collection) &&\n                angular.isDefined(_this.collection.collectionConfig)) {\n                _this.collectionConfig = _this.collection.collectionConfig;\n            }\n            if (angular.isUndefined(_this.collectionObject) &&\n                angular.isDefined(_this.collection) &&\n                angular.isDefined(_this.collection.collectionObject)) {\n                _this.collectionObject = _this.collection.collectionObject;\n            }\n            //set defaults if value is not specifies\n            _this.processObjectProperties = _this.processObjectProperties || \'\';\n            _this.recordProcessButtonDisplayFlag = _this.recordProcessButtonDisplayFlag || true;\n            _this.norecordstext = _this.rbkeyService.getRBKey(\'entity.\' + _this.collectionObject + \'.norecords\');\n            if (angular.isUndefined(_this.defaultSelectEvent)) {\n                _this.defaultSelectEvent = \'swSelectionToggleSelection\' + _this.tableID;\n            }\n            if (angular.isUndefined(_this.isAngularRoute)) {\n                _this.isAngularRoute = true;\n            }\n            if (angular.isUndefined(_this.customListingControls)) {\n                _this.customListingControls = false;\n            }\n            if (angular.isUndefined(_this.hasSearch)) {\n                _this.hasSearch = true;\n                _this.showSearch = true;\n            }\n            if (angular.isUndefined(_this.showOrderBy)) {\n                _this.showOrderBy = true;\n            }\n            if (angular.isUndefined(_this.showReport)) {\n                _this.showReport = false;\n            }\n            if (angular.isUndefined(_this.showPrintOptions)) {\n                _this.showPrintOptions = false;\n            }\n            if (angular.isUndefined(_this.showToggleDisplayOptions)) {\n                _this.showToggleDisplayOptions = true;\n            }\n            if (angular.isUndefined(_this.expandable)) {\n                _this.expandable = false;\n            }\n            //setup export action\n            if (angular.isUndefined(_this.exportAction)) {\n                _this.exportAction = _this.$hibachi.buildUrl(\'main.collectionExport\') + \'&collectionExportID=\';\n            }\n            //setup print action\n            if (angular.isDefined(_this.printAction)) {\n                _this.printAction = _this.$hibachi.buildUrl(\'main.collectionPrint\') + \'&collectionExportID=\';\n            }\n            //setup email action\n            if (angular.isDefined(_this.emailAction)) {\n                _this.emailAction = _this.$hibachi.buildUrl(\'main.collectionEmail\') + \'&collectionExportID=\';\n            }\n            _this.paginator = _this.paginationService.createPagination(_this.tableID);\n            _this.hasCollectionPromise = false;\n            if (angular.isUndefined(_this.getChildCount)) {\n                _this.getChildCount = false;\n            }\n            //Setup table class\n            _this.tableclass = _this.tableclass || \'\';\n            _this.tableclass = _this.utilityService.listPrepend(_this.tableclass, \'table table-bordered table-hover\', \' \');\n            if (_this.collectionConfig) {\n                _this.collectionConfig.setEventID(_this.tableID);\n            }\n            if (angular.isDefined(_this.sortableFieldName)) {\n                _this.sortableFieldName = "sorting" + _this.tableID;\n            }\n        };\n        this.getListingPageRecordsUpdateEventString = function () {\n            return _this.listingService.getListingPageRecordsUpdateEventString(_this.tableID);\n        };\n        this.getKeyOfMatchedHideRule = function (pageRecord) {\n            return _this.listingService.getKeyOfMatchedHideRule(_this.tableID, pageRecord);\n        };\n        this.getPageRecordMatchesHideRule = function (pageRecord) {\n            return _this.listingService.getPageRecordMatchesHideRule(_this.tableID, pageRecord);\n        };\n        this.getPageRecordValueByColumn = function (pageRecord, column) {\n            return _this.listingService.getPageRecordValueByColumn(pageRecord, column);\n        };\n        this.getKeyOfMatchedDisableRule = function (pageRecord) {\n            return _this.listingService.getKeyOfMatchedExpandableRule(_this.tableID, pageRecord);\n        };\n        this.getPageRecordMatchesDisableRule = function (pageRecord) {\n            return _this.listingService.getPageRecordMatchesDisableRule(_this.tableID, pageRecord);\n        };\n        this.getKeyOfMatchedExpandableRule = function (pageRecord) {\n            return _this.listingService.getKeyOfMatchedExpandableRule(_this.tableID, pageRecord);\n        };\n        this.getPageRecordMatchesExpandableRule = function (pageRecord) {\n            return _this.listingService.getPageRecordMatchesExpandableRule(_this.tableID, pageRecord);\n        };\n        this.getPageRecordChildCollectionConfigForExpandableRule = function (pageRecord) {\n            return _this.listingService.getPageRecordChildCollectionConfigForExpandableRule(_this.tableID, pageRecord);\n        };\n        this.getPageRecordRefreshChildrenEvent = function (pageRecord) {\n            if (_this.listingService.hasPageRecordRefreshChildrenEvent(_this.tableID, pageRecord)) {\n                return _this.listingService.getPageRecordRefreshChildrenEvent(_this.tableID, pageRecord);\n            }\n            else {\n                return "";\n            }\n        };\n        this.getExampleEntityForExpandableRecord = function (pageRecord) {\n            return _this.listingService.getExampleEntityForExpandableRecord(_this.tableID, pageRecord);\n        };\n        this.getNGClassObjectForPageRecordRow = function (pageRecord) {\n            return _this.listingService.getNGClassObjectForPageRecordRow(_this.tableID, pageRecord);\n        };\n        this.getNGClassObjectForPageRecordCell = function (pageRecord, column) {\n            var classObjectString = "{";\n            return classObjectString + "}";\n        };\n        this.getColorFilterConditionString = function (colorFilter, pageRecord) {\n            return _this.listingService.getColorFilterConditionString(colorFilter, pageRecord);\n        };\n        this.hasSingleCollectionConfig = function () {\n            return _this.collectionConfig && _this.collectionConfigs.length == 0;\n        };\n        this.toggleOrderBy = function (column) {\n            _this.listingService.toggleOrderBy(_this.tableID, column);\n        };\n        this.showCalculation = function (show) {\n            if (show === void 0) { show = "total"; }\n            // Hide all other calculations\n            $(".sw-" + (show == "total" ? "average" : "total")).hide();\n            // Show all of the chosen calculations\n            $(".sw-" + show).show();\n        };\n        this.hasNumerical = function () {\n            // Iterate over columns, find out if we have any numericals and return\n            if (_this.columns != null && _this.columns.length) {\n                return _this.columns.reduce(function (totalNumericalCols, col) {\n                    return totalNumericalCols + (col.ormtype && \'big_decimal,integer,float,double\'.indexOf(col.ormtype) >= 0) ? 1 : 0;\n                });\n            }\n            return false;\n        };\n        this.columnOrderByIndex = function (column) {\n            return _this.listingService.columnOrderByIndex(_this.tableID, column);\n        };\n        this.updateMultiselectValues = function (res) {\n            _this.multiselectValues = _this.selectionService.getSelections(_this.tableID);\n            if (_this.selectionService.isAllSelected(_this.tableID)) {\n                _this.multiselectCount = _this.collectionData.recordsCount - _this.selectionService.getSelectionCount(_this.tableID);\n            }\n            else {\n                _this.multiselectCount = _this.selectionService.getSelectionCount(_this.tableID);\n            }\n            switch (res.action) {\n                case \'uncheck\':\n                    _this.isCurrentPageRecordsSelected = false;\n                    break;\n                case \'selectAll\':\n                    _this.allSelected = true;\n                    _this.isCurrentPageRecordsSelected = false;\n                    break;\n                case \'clear\':\n                    _this.allSelected = false;\n                    _this.isCurrentPageRecordsSelected = false;\n                    break;\n            }\n            //dispatch the update to the store.\n            _this.listingService.listingDisplayStore.dispatch({\n                type: "CURRENT_PAGE_RECORDS_SELECTED",\n                payload: { listingID: _this.tableID, selectionCount: _this.multiselectCount, values: _this.multiselectValues }\n            });\n        };\n        this.select = function (selectValue) {\n            _this.selectValue = selectValue;\n        };\n        this.getPageRecordKey = function (propertyIdentifier) {\n            return _this.listingService.getPageRecordKey(propertyIdentifier);\n        };\n        this.getAdminAttributesByType = function (type) {\n            var recordActionName = \'record\' + type.toUpperCase() + \'Action\';\n            var recordActionPropertyName = recordActionName + \'Property\';\n            var recordActionQueryStringName = recordActionName + \'QueryString\';\n            var recordActionModalName = recordActionName + \'Modal\';\n            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, \'data-\' + type + \'action="\' + _this[recordActionName] + \'"\', " ");\n            if (_this[recordActionPropertyName] && _this[recordActionPropertyName].length) {\n                _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, \'data-\' + type + \'actionproperty="\' + _this[recordActionPropertyName] + \'"\', " ");\n            }\n            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, \'data-\' + type + \'querystring="\' + _this[recordActionQueryStringName] + \'"\', " ");\n            _this.adminattributes = _this.utilityService.listAppend(_this.adminattributes, \'data-\' + type + \'modal="\' + _this[recordActionModalName] + \'"\', " ");\n        };\n        this.getExportAction = function () {\n            return _this.exportAction + _this.collectionID;\n        };\n        this.getPrintAction = function () {\n            return _this.printAction + _this.collectionID;\n        };\n        this.getEmailAction = function () {\n            return _this.emailAction + _this.collectionID;\n        };\n        this.exportCurrentList = function (selection) {\n            if (selection === void 0) { selection = false; }\n            if (_this.collectionId) {\n                $(\'body\').append(\'<form action="/?\' + _this.$hibachi.getConfigValue(\'action\') + \'=main.collectionExport" method="post" id="formExport"></form>\');\n                $(\'#formExport\')\n                    .append("<input type=\'hidden\' name=\'collectionExportID\' value=\'" + _this.collectionId + "\' />")\n                    .submit()\n                    .remove();\n            }\n            else {\n                if (_this.collectionConfigs.length == 0) {\n                    var exportCollectionConfig = angular.copy(_this.collectionConfig.getCollectionConfig());\n                    if (selection && !angular.isUndefined(_this.selectionService.getSelections(_this.tableID))\n                        && (_this.selectionService.getSelections(_this.tableID).length > 0)) {\n                        exportCollectionConfig.filterGroups[0].filterGroup = [\n                            {\n                                "displayPropertyIdentifier": _this.rbkeyService.getRBKey("entity." + exportCollectionConfig.baseEntityName.toLowerCase() + "." + _this.exampleEntity.$$getIDName().toLowerCase()),\n                                "propertyIdentifier": exportCollectionConfig.baseEntityAlias + "." + _this.exampleEntity.$$getIDName(),\n                                "comparisonOperator": (_this.allSelected) ? "not in" : "in",\n                                "value": _this.selectionService.getSelections(_this.tableID).join(),\n                                "displayValue": _this.selectionService.getSelections(_this.tableID).join(),\n                                "ormtype": "string",\n                                "fieldtype": "id",\n                                "conditionDisplay": "In List"\n                            }\n                        ];\n                    }\n                }\n                else {\n                    //multiCollectionConfig logic\n                }\n                $(\'body\').append(\'<form action="/?\' + _this.$hibachi.getConfigValue(\'action\') + \'=main.collectionConfigExport" method="post" id="formExport"></form>\');\n                $(\'#formExport\')\n                    .append("<input type=\'hidden\' name=\'collectionConfig\' value=\'" + angular.toJson(exportCollectionConfig).replace(/\'/g, \'&#39;\') + "\' />")\n                    .submit()\n                    .remove();\n            }\n        };\n        this.printCurrentList = function (printTemplateID) {\n            var exportCollectionConfig = angular.copy(_this.collectionConfig.getCollectionConfig());\n            $(\'body\').append(\'<form action="?s=1" method="post" id="formPrint"></form>\');\n            $(\'#formPrint\')\n                .append("<input type=\'hidden\' name=\'" + _this.$hibachi.getConfigValue(\'action\') + "\' value=\'entity.processPrint\' />")\n                .append("<input type=\'hidden\' name=\'redirectAction\' value=\'admin:entity.list" + _this.baseEntityName.toLowerCase() + "\' />")\n                .append("<input type=\'hidden\' name=\'processContext\' value=\'addToQueue\' />")\n                .append("<input type=\'hidden\' name=\'printID\' value=\'\' />")\n                .append("<input type=\'hidden\' name=\'printTemplateID\' value=\'" + printTemplateID + "\' />")\n                .append("<input type=\'hidden\' name=\'collectionConfig\' value=\'" + angular.toJson(exportCollectionConfig).replace(/\'/g, \'&#39;\') + "\' />");\n            $(\'#formPrint\')\n                .submit()\n                .remove();\n        };\n        this.paginationPageChange = function (res) {\n            _this.isCurrentPageRecordsSelected = false;\n        };\n        this.selectCurrentPageRecords = function () {\n            _this.listingService.selectCurrentPageRecords(_this.tableID);\n        };\n        //these are no longer going to work\n        this.clearSelection = function () {\n            _this.selectionService.clearSelection(_this.tableID);\n        };\n        this.selectAll = function () {\n            _this.selectionService.selectAll(_this.tableID);\n        };\n        this.getPersistedReports = function () {\n            var persistedReportsCollectionList = _this.collectionConfig.newCollectionConfig(\'Collection\');\n            persistedReportsCollectionList.setDisplayProperties(\'collectionID,collectionName,collectionConfig\');\n            persistedReportsCollectionList.addFilter(\'reportFlag\', 1);\n            persistedReportsCollectionList.addFilter(\'collectionObject\', _this.collectionConfig.baseEntityName);\n            persistedReportsCollectionList.addFilter(\'accountOwner.accountID\', _this.$rootScope.slatwall.account.accountID, \'=\', \'OR\', true, true, false, \'accountOwner\');\n            persistedReportsCollectionList.addFilter(\'accountOwner.accountID\', \'NULL\', \'IS\', \'OR\', true, true, false, \'accountOwner\');\n            persistedReportsCollectionList.setAllRecords(true);\n            persistedReportsCollectionList.getEntity().then(function (data) {\n                _this.persistedReportCollections = data.records;\n            });\n        };\n        //Invariant - We must have some way to instantiate. Everything can\'t be optional. --commented out due to breaking sku listing on product detail page\n        // if (!(this.collectionConfig) && !this.collectionConfigs.length && !this.collection){\n        //     return;\n        // }\n        if (angular.isUndefined(this.usingPersonalCollection)) {\n            this.usingPersonalCollection = false;\n        }\n        if (angular.isUndefined(this.showExport)) {\n            this.showExport = true;\n        }\n        if (angular.isUndefined(this.showFilters)) {\n            this.showFilters = true;\n        }\n        //promises to determine which set of logic will run\n        this.multipleCollectionDeffered = $q.defer();\n        this.multipleCollectionPromise = this.multipleCollectionDeffered.promise;\n        this.singleCollectionDeferred = $q.defer();\n        this.singleCollectionPromise = this.singleCollectionDeferred.promise;\n        if (angular.isDefined(this.collection) && angular.isString(this.collection)) {\n            //not sure why we have two properties for this\n            this.baseEntityName = this.collection;\n            this.collectionObject = this.collection;\n            this.collectionConfig = this.collectionConfigService.newCollectionConfig(this.collectionObject);\n            this.$timeout(function () {\n                _this.collection = _this.collectionConfig;\n                _this.columns = _this.collectionConfig.columns;\n            });\n            this.multipleCollectionDeffered.reject();\n        }\n        if ((this.baseEntityName)\n            && (this.usingPersonalCollection\n                && this.listingService.hasPersonalCollectionSelected(this.baseEntityName))\n            && (angular.isUndefined(this.personalCollectionIdentifier)\n                || (angular.isDefined(this.localStorageService.getItem(\'selectedPersonalCollection\')[this.baseEntityName.toLowerCase()][\'collectionDescription\'])\n                    && this.localStorageService.getItem(\'selectedPersonalCollection\')[this.baseEntityName.toLowerCase()][\'collectionDescription\'] == this.personalCollectionIdentifier))) {\n            var personalCollection = this.listingService.getPersonalCollectionByBaseEntityName(this.baseEntityName);\n            // personalCollection.addFilter(\'collectionDescription\',this.personalCollectionIdentifier);\n            var originalMultiSlotValue = angular.copy(this.multiSlot);\n            this.multiSlot = false;\n            personalCollection.getEntity().then(function (data) {\n                if (data.pageRecords.length) {\n                    _this.collectionConfig = _this.collectionConfigService.newCollectionConfig().loadJson(data.pageRecords[0].collectionConfig);\n                    _this.collectionConfig.setCurrentPage(1); //even if the saved collection config has a current page, we want to be on page 1 here\n                    _this.collectionObject = _this.baseEntityName;\n                    _this.$timeout(function () {\n                        _this.collection = _this.collectionConfig;\n                        _this.columns = _this.collectionConfig.columns;\n                    });\n                }\n                else {\n                    _this.multiSlot = originalMultiSlotValue;\n                }\n                _this.processCollection();\n            });\n        }\n        else {\n            $rootScope.hibachiScope.selectedPersonalCollection = undefined;\n            this.processCollection();\n        }\n        if (!this.reportAction && this.baseEntityName) {\n            this.reportAction = \'entity.reportlist\' + this.baseEntityName.toLowerCase();\n        }\n    }\n    return SWListingDisplayController;\n}());\nvar SWListingDisplay = /** @class */ (function () {\n    //@ngInject\n    function SWListingDisplay(listingPartialPath, hibachiPathBuilder) {\n        this.listingPartialPath = listingPartialPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.restrict = \'E\';\n        this.scope = {};\n        this.transclude = {\n            addAction: "?swListingAddAction",\n            detailAction: "?swListingDetailAction",\n            deleteAction: "?swListingDeleteAction",\n            editAction: "?swListingEditAction",\n            saveAction: "?swListingSaveAction",\n            columns: "?swListingColumns",\n            collectionConfigs: "?swCollectionConfigs",\n            disableRules: "?swDisabledRowRules",\n            expandableRules: "?swExpandableRowRules",\n            customListingControls: "?swCustomListingControls"\n        };\n        this.bindToController = {\n            usingPersonalCollection: "<?",\n            personalCollectionIdentifier: \'@?\',\n            isRadio: "<?",\n            angularLinks: "<?",\n            isAngularRoute: "<?",\n            name: "@?",\n            /*required*/\n            collection: "<?",\n            collectionId: "@?",\n            collectionConfig: "<?",\n            getCollection: "&?",\n            collectionPromise: "<?",\n            edit: "<?",\n            /*Optional*/\n            title: "<?",\n            childPropertyName: "@?",\n            baseEntity: "<?",\n            baseEntityName: "@?",\n            baseEntityId: "@?",\n            /*Admin Actions*/\n            actions: "<?",\n            administrativeCount: "@?",\n            recordEditAction: "@?",\n            recordEditActionProperty: "@?",\n            recordEditQueryString: "@?",\n            recordEditModal: "<?",\n            recordEditDisabled: "<?",\n            recordDetailAction: "@?",\n            recordDetailActionProperty: "@?",\n            recordDetailActionIdProperty: "@?",\n            recordDetailActionIdKey: "@?",\n            recordDetailQueryString: "@?",\n            recordDetailModal: "<?",\n            recordDeleteAction: "@?",\n            recordDeleteActionProperty: "@?",\n            recordDeleteQueryString: "@?",\n            recordAddAction: "@?",\n            recordAddActionProperty: "@?",\n            recordAddQueryString: "@?",\n            recordAddModal: "<?",\n            recordAddDisabled: "<?",\n            recordProcessesConfig: "<?",\n            reportAction: "@?",\n            /* record processes config is an array of actions. Example:\n            [\n            {\n                recordProcessAction:"@",\n                recordProcessActionProperty:"@",\n                recordProcessQueryString:"@",\n                recordProcessContext:"@",\n                recordProcessEntity:"=",\n                recordProcessEntityData:"=",\n                recordProcessUpdateTableID:"=",\n                recordProcessButtonDisplayFlag:"=",\n            }\n            ]\n            */\n            /*Hierachy Expandable*/\n            parentPropertyName: "@?",\n            //booleans\n            expandable: "<?",\n            expandableOpenRoot: "<?",\n            /*Searching*/\n            searchText: "<?",\n            /*Sorting*/\n            sortable: "<?",\n            sortableFieldName: "@?",\n            sortProperty: "@?",\n            sortContextIDColumn: "@?",\n            sortContextIDValue: "@?",\n            /*Single Select*/\n            selectFieldName: "@?",\n            selectValue: "@?",\n            selectTitle: "@?",\n            /*Multiselect*/\n            multiselectFieldName: "@?",\n            multiselectPropertyIdentifier: "@?",\n            multiselectIdPaths: "@?",\n            multiselectValues: "@?",\n            /*Helper / Additional / Custom*/\n            tableattributes: "@?",\n            tableclass: "@?",\n            typeaheadDataKey: "@?",\n            adminattributes: "@?",\n            /* Settings */\n            showheader: "<?",\n            showExport: "<?",\n            showOrderBy: "<?",\n            showTopPagination: "<?",\n            showToggleDisplayOptions: "<?",\n            showSearch: "<?",\n            showSearchFilters: "<?",\n            showFilters: "<?",\n            showSimpleListingControls: "<?",\n            showPrintOptions: "<?",\n            showReport: "<?",\n            /* Basic Action Caller Overrides*/\n            createModal: "<?",\n            createAction: "@?",\n            createQueryString: "@?",\n            exportAction: "@?",\n            getChildCount: "<?",\n            hasSearch: "<?",\n            hasActionBar: "<?",\n            multiSlot: "=?",\n            customListingControls: "<?"\n        };\n        this.controller = SWListingDisplayController;\n        this.controllerAs = "swListingDisplay";\n        this.compile = function (element, attrs) {\n            return {\n                pre: function ($scope, element, attrs, transclude) {\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.listingPartialPath = listingPartialPath;\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.listingPartialPath) + \'listingdisplay.html\';\n    }\n    SWListingDisplay.Factory = function () {\n        var directive = function (listingPartialPath, hibachiPathBuilder) { return new SWListingDisplay(listingPartialPath, hibachiPathBuilder); };\n        directive.$inject = [\n            \'listingPartialPath\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWListingDisplay;\n}());\nexports.SWListingDisplay = SWListingDisplay;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingdisplay.ts?')},"../../../org/Hibachi/client/src/listing/components/swlistingdisplaycell.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingdisplaycell.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWListingDisplayCellController = /** @class */ (function () {\n    //@ngInject\n    function SWListingDisplayCellController(listingPartialPath, hibachiPathBuilder, listingService, utilityService, $scope) {\n        var _this = this;\n        this.listingPartialPath = listingPartialPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.listingService = listingService;\n        this.utilityService = utilityService;\n        this.$scope = $scope;\n        this.expandable = false;\n        this.getDirectiveTemplate = function () {\n            var templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + \'listingdisplaycell.html\';\n            if (_this.expandable || (_this.swListingDisplay.expandable && _this.column.tdclass && _this.column.tdclass === \'primary\')) {\n                templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + \'listingdisplayselectablecellexpandable.html\';\n            }\n            if (!_this.swListingDisplay.expandable || !_this.column.tdclass || _this.column.tdclass !== \'primary\') {\n                if (_this.column.ormtype === \'timestamp\') {\n                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + \'listingdisplaycelldate.html\';\n                }\n                else if (_this.column.type === \'currency\') {\n                    if (_this.column.aggregate && _this.pageRecord) {\n                        var pageRecordKey = _this.swListingDisplay.getPageRecordKey(_this.column.aggregate.aggregateAlias);\n                        _this.value = _this.pageRecord[pageRecordKey];\n                    }\n                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + \'listingdisplaycellcurrency.html\';\n                }\n                else if ([\n                    "double",\n                    "float",\n                    "integer",\n                    "long",\n                    "short",\n                    "big_decimal"\n                ].indexOf(_this.column.ormtype) != -1) {\n                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + \'listingdisplaycellnumeric.html\';\n                }\n                else if (_this.column.aggregate) {\n                    _this.value = _this.pageRecord[_this.swListingDisplay.getPageRecordKey(_this.column.aggregate.aggregateAlias)];\n                    templateUrl = _this.hibachiPathBuilder.buildPartialsPath(_this.listingPartialPath) + \'listingdisplaycellaggregate.html\';\n                }\n            }\n            return templateUrl;\n        };\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.listingPartialPath = listingPartialPath;\n        this.$scope = $scope;\n        if (!this.value && this.pageRecord && this.column) {\n            this.value = this.listingService.getPageRecordValueByColumn(this.pageRecord, this.column);\n        }\n        this.popover = this.utilityService.replaceStringWithProperties(this.column.tooltip, this.pageRecord);\n        this.hasActionCaller = false;\n        if (this.column.action && this.column.queryString) {\n            this.hasActionCaller = true;\n            this.actionCaller = {\n                action: this.column.action\n            };\n            if (this.column.queryString) {\n                this.actionCaller.queryString = this.utilityService.replaceStringWithProperties(this.column.queryString, this.pageRecord);\n            }\n        }\n        if (this.cellView) {\n            var htmlCellView = this.utilityService.camelCaseToSnakeCase(this.cellView);\n            this.template = htmlCellView;\n            //convert the page records into attrs\n            this.templateVariables = this.pageRecord;\n            if (angular.isDefined(this.column.columnID)) {\n                this.templateVariables["column"] = this.column.columnID;\n            }\n            if (angular.isDefined(this.swListingDisplay.baseEntityName) && angular.isDefined(this.swListingDisplay.baseEntityId)) {\n                this.templateVariables["baseEntityId"] = this.swListingDisplay.baseEntityId;\n                this.templateVariables["baseEntityName"] = this.swListingDisplay.baseEntityName;\n            }\n            if (angular.isDefined(this.column.propertyIdentifier)) {\n                this.templateVariables["columnPropertyIdentifier"] = this.column.propertyIdentifier;\n            }\n            this.templateVariables["listingDisplayID"] = this.swListingDisplay.tableID;\n        }\n        else if (!this.hasActionCaller) {\n            this.templateUrl = this.getDirectiveTemplate();\n        }\n    }\n    return SWListingDisplayCellController;\n}());\nvar SWListingDisplayCell = /** @class */ (function () {\n    //@ngInject\n    function SWListingDisplayCell() {\n        this.restrict = \'E\';\n        this.scope = {};\n        this.bindToController = {\n            swListingDisplay: "=?",\n            column: "=?",\n            pageRecord: "=?",\n            value: "=?",\n            cellView: "@?",\n            expandableRules: "=?"\n        };\n        this.controller = SWListingDisplayCellController;\n        this.controllerAs = "swListingDisplayCell";\n        this.template = "\\n        <div ng-if=\\"swListingDisplayCell.template\\" sw-directive data-variables=\\"swListingDisplayCell.templateVariables\\" data-directive-template=\\"swListingDisplayCell.template\\"></div>\\n        <div ng-if=\\"swListingDisplayCell.templateUrl\\" ng-include src=\\"swListingDisplayCell.templateUrl\\"></div>\\n        <sw-action-caller ng-if=\\"swListingDisplayCell.hasActionCaller\\"\\n                    data-action=\\"{{swListingDisplayCell.actionCaller.action}}\\"\\n                    data-query-string=\\"{{swListingDisplayCell.actionCaller.queryString}}\\"\\n                    data-text=\\"{{swListingDisplayCell.value}}\\"\\n                    data-tooltip-text=\\"{{swListingDisplayCell.popover}}\\"\\n                    data-is-angular-route=\\"false\\"\\n\\n        >\\n        </sw-action-caller>\\n    ";\n    }\n    SWListingDisplayCell.Factory = function () {\n        var directive = function () { return new SWListingDisplayCell(); };\n        directive.$inject = [];\n        return directive;\n    };\n    return SWListingDisplayCell;\n}());\nexports.SWListingDisplayCell = SWListingDisplayCell;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingdisplaycell.ts?')},"../../../org/Hibachi/client/src/listing/components/swlistingexpandablerule.ts":
/*!**********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingexpandablerule.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\n/* SWListingExpandableRule\n * defines a filter, by which to determine what will be expanded\n * supplies the collection config and any other necessary rules for what will be loaded and displayed\n */\nvar SWListingExpandableRuleController = /** @class */ (function () {\n    //@ngInject\n    function SWListingExpandableRuleController($q) {\n        this.$q = $q;\n        this.hasChildrenCollectionConfigDeferred = $q.defer();\n        this.hasChildrenCollectionConfigPromise = this.hasChildrenCollectionConfigDeferred.promise;\n        //why did I need this? \n        this.childrenCollectionConfig = null;\n    }\n    return SWListingExpandableRuleController;\n}());\nvar SWListingExpandableRule = /** @class */ (function () {\n    function SWListingExpandableRule(scopeService, $q) {\n        var _this = this;\n        this.scopeService = scopeService;\n        this.$q = $q;\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.transclude = {\n            collectionConfig: "?swConfig"\n        };\n        this.template = "\\n        <div ng-transclude=\\"collectionConfig\\"></div> \\n    ";\n        this.bindToController = {\n            childrenCollectionConfig: "=?",\n            filterPropertyIdentifier: "@",\n            filterComparisonOperator: "@",\n            filterComparisonValue: "@",\n            refreshChildrenEvent: "@?"\n        };\n        this.controller = SWListingExpandableRuleController;\n        this.controllerAs = "swListingExpandableRule";\n        this.link = function (scope, element, attrs) {\n            scope.swListingExpandableRule.hasChildrenCollectionConfigPromise.then(function () {\n                var rule = {\n                    filterPropertyIdentifier: scope.swListingExpandableRule.filterPropertyIdentifier,\n                    filterComparisonOperator: scope.swListingExpandableRule.filterComparisonOperator,\n                    filterComparisonValue: scope.swListingExpandableRule.filterComparisonValue,\n                    childrenCollectionConfig: scope.swListingExpandableRule.childrenCollectionConfig,\n                    refreshChildrenEvent: scope.swListingExpandableRule.refreshChildrenEvent\n                };\n                var listingDisplayScope = _this.scopeService.getRootParentScope(scope, "swListingDisplay");\n                if (angular.isDefined(listingDisplayScope.swListingDisplay)) {\n                    listingDisplayScope = listingDisplayScope.swListingDisplay;\n                }\n                else {\n                    throw ("listing display scope not available to sw-listing-expandable-rule");\n                }\n                listingDisplayScope.expandableRules.push(rule);\n            });\n        };\n    }\n    SWListingExpandableRule.Factory = function () {\n        var directive = function (scopeService, $q) { return new SWListingExpandableRule(scopeService, $q); };\n        directive.$inject = [\n            \'scopeService\',\n            \'$q\'\n        ];\n        return directive;\n    };\n    return SWListingExpandableRule;\n}());\nexports.SWListingExpandableRule = SWListingExpandableRule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingexpandablerule.ts?')},"../../../org/Hibachi/client/src/listing/components/swlistingfilter.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingfilter.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWListingFilterController = /** @class */ (function () {\n    function SWListingFilterController() {\n        this.init = function () {\n        };\n        this.init();\n    }\n    return SWListingFilterController;\n}());\nvar SWListingFilter = /** @class */ (function () {\n    function SWListingFilter() {\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.bindToController = {\n            propertyIdentifier: "@",\n            comparisonOperator: "@",\n            comparisonValue: "@",\n            logicalOperator: "@",\n            hidden: "@?"\n        };\n        this.controller = SWListingFilterController;\n        this.controllerAs = "swListingFilter";\n        this.link = function (scope, element, attrs) {\n            var filter = {\n                propertyIdentifier: scope.swListingFilter.propertyIdentifier,\n                comparisonOperator: scope.swListingFilter.comparisonOperator,\n                comparisonValue: scope.swListingFilter.comparisonValue,\n                logicalOperator: scope.swListingFilter.logicalOperator,\n                hidden: false\n            };\n            if (angular.isDefined(scope.swListingFilter.hidden)) {\n                filter[\'hidden\'] = scope.swListingFilter.hidden;\n            }\n            if (angular.isDefined(scope.$parent.swListingFilterGroup)) {\n                scope.$parent.swListingFilterGroup.filters.push(filter);\n            }\n            else {\n                scope.$parent.swListingDisplay.filters.push(filter);\n            }\n        };\n    }\n    SWListingFilter.Factory = function () {\n        var directive = function () { return new SWListingFilter(); };\n        directive.$inject = [];\n        return directive;\n    };\n    return SWListingFilter;\n}());\nexports.SWListingFilter = SWListingFilter;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingfilter.ts?')},"../../../org/Hibachi/client/src/listing/components/swlistingfiltergroup.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingfiltergroup.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWListingFilterGroupController = /** @class */ (function () {\n    function SWListingFilterGroupController($scope, $transclude) {\n        this.$scope = $scope;\n        this.$transclude = $transclude;\n        this.filters = [];\n        $transclude($scope, function () { });\n        $scope.$parent.swListingDisplay.filterGroups.push(this.filters);\n    }\n    return SWListingFilterGroupController;\n}());\nvar SWListingFilterGroup = /** @class */ (function () {\n    function SWListingFilterGroup() {\n        this.restrict = 'EA';\n        this.transclude = true;\n        this.scope = true;\n        this.bindToController = {};\n        this.controller = SWListingFilterGroupController;\n        this.controllerAs = \"swListingFilterGroup\";\n    }\n    SWListingFilterGroup.Factory = function () {\n        var directive = function () { return new SWListingFilterGroup(); };\n        directive.$inject = [];\n        return directive;\n    };\n    SWListingFilterGroup.$inject = [];\n    return SWListingFilterGroup;\n}());\nexports.SWListingFilterGroup = SWListingFilterGroup;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingfiltergroup.ts?")},"../../../org/Hibachi/client/src/listing/components/swlistingglobalsearch.ts":
/*!********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingglobalsearch.ts ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWListingGlobalSearchController = /** @class */ (function () {\n    //@ngInject\n    function SWListingGlobalSearchController($timeout) {\n        var _this = this;\n        this.$timeout = $timeout;\n        this.init = function () {\n            _this.searching = false;\n        };\n        this.search = function () {\n            _this.searching = true;\n            if (_this._timeoutPromise) {\n                _this.$timeout.cancel(_this._timeoutPromise);\n            }\n            _this._timeoutPromise = _this.$timeout(function () {\n                _this.getCollection();\n            }, 500);\n        };\n        this.init();\n    }\n    return SWListingGlobalSearchController;\n}());\nvar SWListingGlobalSearch = /** @class */ (function () {\n    //@ngInject\n    function SWListingGlobalSearch(utilityService, listingPartialPath, hibachiPathBuilder) {\n        this.utilityService = utilityService;\n        this.restrict = 'EA';\n        this.scope = {};\n        this.bindToController = {\n            searching: \"=\",\n            searchText: \"=\",\n            getCollection: \"=\"\n        };\n        this.controller = SWListingGlobalSearchController;\n        this.controllerAs = \"swListingGlobalSearch\";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(listingPartialPath) + \"listingglobalsearch.html\";\n    }\n    SWListingGlobalSearch.Factory = function () {\n        var directive = function (utilityService, listingPartialPath, hibachiPathBuilder) { return new SWListingGlobalSearch(utilityService, listingPartialPath, hibachiPathBuilder); };\n        directive.$inject = ['utilityService', 'listingPartialPath', 'hibachiPathBuilder'];\n        return directive;\n    };\n    return SWListingGlobalSearch;\n}());\nexports.SWListingGlobalSearch = SWListingGlobalSearch;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingglobalsearch.ts?")},"../../../org/Hibachi/client/src/listing/components/swlistingorderby.ts":
/*!***************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingorderby.ts ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWListingOrderByController = /** @class */ (function () {\n    //@ngInject\n    function SWListingOrderByController() {\n        this.init = function () {\n        };\n        this.init();\n    }\n    return SWListingOrderByController;\n}());\nvar SWListingOrderBy = /** @class */ (function () {\n    //@ngInject\n    function SWListingOrderBy(utilityService) {\n        this.utilityService = utilityService;\n        this.restrict = 'EA';\n        this.scope = true;\n        this.bindToController = {\n            orderBy: \"@\",\n        };\n        this.controller = SWListingOrderByController;\n        this.controllerAs = \"swListingOrderBy\";\n        this.link = function (scope, element, attrs) {\n            var orderBy = {\n                orderBy: scope.swListingOrderBy.orderBy,\n            };\n            scope.$parent.swListingDisplay.orderBys.push(orderBy);\n        };\n    }\n    SWListingOrderBy.Factory = function () {\n        var directive = function (utilityService) { return new SWListingOrderBy(utilityService); };\n        directive.$inject = [\n            'utilityService'\n        ];\n        return directive;\n    };\n    return SWListingOrderBy;\n}());\nexports.SWListingOrderBy = SWListingOrderBy;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingorderby.ts?")},"../../../org/Hibachi/client/src/listing/components/swlistingreport.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingreport.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar chart_js_1 = __webpack_require__(/*! chart.js */ \"../../../node_modules/chart.js/src/chart.js\");\nvar SWListingReportController = /** @class */ (function () {\n    //@ngInject\n    function SWListingReportController($scope, $timeout, $rootScope, $hibachi, metadataService, listingService, observerService, collectionConfigService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$timeout = $timeout;\n        this.$rootScope = $rootScope;\n        this.$hibachi = $hibachi;\n        this.metadataService = metadataService;\n        this.listingService = listingService;\n        this.observerService = observerService;\n        this.collectionConfigService = collectionConfigService;\n        //key value for adding rbkeys later\n        this.periodIntervals = [{ value: 'Hour' }, { value: 'Day' }, { value: 'Week' }, { value: 'Month' }, { value: 'Year' }];\n        this.objectPath = [];\n        this.selectedPeriodPropertyIdentifierArray = [];\n        this.$onInit = function () {\n        };\n        this.updateReportFromListing = function (params) {\n            if (params.collectionConfig) {\n                _this.collectionConfig = params.collectionConfig;\n                _this.updatePeriod();\n            }\n        };\n        this.saveReportCollection = function (collectionName) {\n            if (collectionName || _this.collectionId) {\n                var serializedJSONData = {\n                    'collectionConfig': _this.collectionConfig.collectionConfigString,\n                    'collectionObject': _this.collectionConfig.baseEntityName,\n                    'accountOwner': {\n                        'accountID': _this.$rootScope.slatwall.account.accountID\n                    },\n                    'reportFlag': 1\n                };\n                if (collectionName) {\n                    serializedJSONData['collectionName'] = collectionName;\n                }\n                _this.$hibachi.saveEntity('Collection', _this.collectionId || \"\", {\n                    'serializedJSONData': angular.toJson(serializedJSONData),\n                    'propertyIdentifiersList': 'collectionID,collectionName,collectionObject,collectionConfig'\n                }, 'save').then(function (data) {\n                    if (_this.collectionId) {\n                        window.location.reload();\n                    }\n                    else {\n                        var url = window.location.href;\n                        if (url.indexOf('?') > -1) {\n                            url += '&collectionID=' + data.data.collectionID;\n                        }\n                        else {\n                            url += '?collectionID=' + data.data.collectionID;\n                        }\n                        window.location.href = url;\n                    }\n                });\n                return;\n            }\n            _this.collectionNameSaveIsOpen = true;\n        };\n        this.random_rgba = function () {\n            var o = Math.round, r = Math.random, s = 255;\n            return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + 1 + ')';\n        };\n        this.updateComparePeriod = function () {\n            _this.startDateCompare = new Date(_this.startDateCompare);\n            _this.startDateCompare.setHours(0, 0, 0, 0);\n            _this.endDateCompare = new Date(_this.endDateCompare);\n            _this.endDateCompare.setHours(23, 59, 59, 999);\n            //if date is in the wrong format then update those dates\n            if (_this.startDateCompare.indexOf && _this.startDateCompare.indexOf('000Z') != -1) {\n                _this.startDateCompare = new Date(_this.startDateCompare).toString('MMM dd, yyyy hh:mm tt');\n                _this.endDateCompare = new Date(_this.endDateCompare).toString('MMM dd, yyyy hh:mm tt');\n            }\n            if (_this.selectedPeriodInterval.value == 'hour') {\n                _this.endDateCompare = new Date(_this.startDateCompare).addDays(1).toString('MMM dd, yyyy hh:mm tt');\n            }\n            _this.compareReportCollectionConfig = _this.collectionConfig.clone();\n            for (var i in _this.compareReportCollectionConfig.columns) {\n                var column = _this.compareReportCollectionConfig.columns[i];\n                if (column.aggregate) {\n                    column.isMetric = true;\n                }\n                else {\n                    column.isVisible = false;\n                }\n            }\n            _this.compareReportCollectionConfig.setPeriodInterval(_this.selectedPeriodInterval.value);\n            _this.compareReportCollectionConfig.setReportFlag(1);\n            _this.compareReportCollectionConfig.addDisplayProperty(_this.selectedPeriodColumn.propertyIdentifier, '', { isHidden: true, isPeriod: true, isVisible: false });\n            _this.compareReportCollectionConfig.setAllRecords(true);\n            _this.compareReportCollectionConfig.setOrderBy(_this.selectedPeriodColumn.propertyIdentifier + '|ASC');\n            //TODO:should add as a filterGroup\n            _this.compareReportCollectionConfig.addFilter(_this.selectedPeriodColumn.propertyIdentifier, _this.startDateCompare, '>=', 'AND', true, true, false, 'dates');\n            _this.compareReportCollectionConfig.addFilter(_this.selectedPeriodColumn.propertyIdentifier, _this.endDateCompare, '<=', 'AND', true, true, false, 'dates');\n            _this.compareReportCollectionConfig.getEntity().then(function (reportingData) {\n                /*this.compareReportingData = reportingData;\n                this.compareReportingData.records.forEach(element=>{\n                    if(!this.chart.data.labels.includes(element[this.selectedPeriodColumn.name])){\n                       this.chart.data.labels.push(element[this.selectedPeriodColumn.name]);\n                    }\n                });\n                 this.reportCollectionConfig.columns.forEach(column=>{\n                     if(column.isMetric){\n                         let color = this.random_rgba();\n                         let title = `${column.title} (${this.startDateCompare.toDateString()} - ${new Date(this.endDateCompare).toDateString()})`;\n                         let metrics = [];\n                         this.compareReportingData.records.forEach(element=>{\n                              metrics.push(\n                                     {\n                                         y:element[column.aggregate.aggregateAlias],\n                                         x:element[this.selectedPeriodColumn.name]\n                                     }\n                           )\n                         });\n                         this.chart.data.datasets.push(\n                             {\n                             label:title,\n                             data:metrics,\n                             backgroundColor:color,\n                             borderColor:color,\n                             borderWidth: 2,\n                             fill:false\n                             }\n                         );\n                     }\n                 });\n                 this.chart.update();*/\n                var ctx = $(\"#myChartCompare\");\n                _this.renderReport(reportingData, ctx);\n            });\n        };\n        //decides if report comes from persisted collection or transient\n        this.getReportCollectionConfig = function () {\n            var reportCollectionConfig = _this.collectionConfig.clone();\n            return reportCollectionConfig;\n        };\n        this.selectReport = function (selectedReport) {\n            //populate inputs based on the collection\n            var collectionData = angular.fromJson(selectedReport.collectionConfig);\n            _this.selectedCollectionID = selectedReport.collectionID;\n            _this.collectionName = selectedReport.collectionName;\n            for (var i = collectionData.filterGroups[0].filterGroup.length - 1; i >= 0; i--) {\n                var filterGroup = collectionData.filterGroups[0].filterGroup[i];\n                if (filterGroup.filterGroupAlias && filterGroup.filterGroupAlias == 'dates') {\n                    var datesFilterGroup = filterGroup;\n                    for (var j in datesFilterGroup.filterGroup) {\n                        var filter = datesFilterGroup.filterGroup[j];\n                        if (filter.comparisonOperator == '>=') {\n                            _this.startDate = filter.value;\n                        }\n                        else if (filter.comparisonOperator == '<=') {\n                            _this.endDate = filter.value;\n                        }\n                    }\n                }\n            }\n            _this.selectedPeriodInterval = { value: collectionData.periodInterval };\n            _this.selectedPeriodColumn = _this.collectionConfigService.getPeriodColumnFromColumns(collectionData.columns);\n            //navigate propertyIdentifier to populate drop down\n            _this.selectedPeriodPropertyIdentifierArray = _this.selectedPeriodColumn.propertyIdentifier.split('.');\n            var lastObject = _this.$hibachi.getLastEntityNameInPropertyIdentifier(_this.collectionConfig.baseEntityName, _this.selectedPeriodColumn.propertyIdentifier);\n            _this.getPeriodColumns(lastObject).then(function () {\n                var propertyName = _this.selectedPeriodPropertyIdentifierArray[_this.selectedPeriodPropertyIdentifierArray.length - 1];\n                for (var j in _this.periodColumns) {\n                    var periodColumn = _this.periodColumns[j];\n                    if (periodColumn.name === propertyName) {\n                        if (periodColumn.cfc) {\n                            _this.selectPeriodColumn(periodColumn, false);\n                            break;\n                        }\n                        else {\n                            _this.selectPeriodColumn(periodColumn, false);\n                            break;\n                        }\n                    }\n                }\n            });\n            _this.clearPeriodColumn(collectionData);\n            _this.reportCollectionConfig = _this.collectionConfig.loadJson(angular.toJson(collectionData));\n            _this.updatePeriod();\n        };\n        this.clearPeriodColumn = function (collectionData) {\n            for (var i in collectionData.columns) {\n                var column = collectionData.columns[i];\n                if (column.isPeriod) {\n                    collectionData.columns.splice(i, 1);\n                }\n            }\n        };\n        this.updatePeriod = function () {\n            //if we have all the info we need then we can make a report\n            if (_this.selectedPeriodColumn\n                && _this.selectedPeriodInterval\n                && _this.startDate\n                && _this.endDate) {\n                _this.startDate = new Date(_this.startDate);\n                _this.startDate.setHours(0, 0, 0, 0);\n                _this.endDate = new Date(_this.endDate);\n                _this.endDate.setHours(23, 59, 59, 999);\n                //if date is in the wrong format then update those dates\n                if (_this.startDate.indexOf && _this.startDate.indexOf('000Z') != -1) {\n                    _this.startDate = new Date(_this.startDate).toString('MMM dd, yyyy hh:mm tt');\n                    _this.endDate = new Date(_this.endDate).toString('MMM dd, yyyy hh:mm tt');\n                }\n                _this.hasMetric = false;\n                _this.reportCollectionConfig = _this.getReportCollectionConfig();\n                //if the interval is an hour than we should only be able to show data for one day\n                if (_this.selectedPeriodInterval.value == 'hour') {\n                    _this.endDate = new Date(_this.startDate).addDays(1).toString('MMM dd, yyyy hh:mm tt');\n                }\n                for (var i = _this.reportCollectionConfig.columns.length - 1; i >= 0; i--) {\n                    var column = _this.reportCollectionConfig.columns[i];\n                    if (column.aggregate) {\n                        column.isMetric = true;\n                        _this.hasMetric = true;\n                    }\n                    else {\n                        _this.reportCollectionConfig.columns.splice(i, 1);\n                        //column.isVisible = false;\n                    }\n                }\n                if (_this.hasMetric) {\n                    _this.reportCollectionConfig.setPeriodInterval(_this.selectedPeriodInterval.value);\n                    _this.reportCollectionConfig.setReportFlag(1);\n                    _this.reportCollectionConfig.addDisplayProperty(_this.selectedPeriodColumn.propertyIdentifier, '', { isHidden: true, isPeriod: true, isVisible: false });\n                    _this.reportCollectionConfig.setAllRecords(true);\n                    _this.reportCollectionConfig.setOrderBy(_this.selectedPeriodColumn.propertyIdentifier + '|ASC');\n                    _this.reportCollectionConfig.removeFilterGroupByFilterGroupAlias('dates');\n                    _this.reportCollectionConfig.addFilter(_this.selectedPeriodColumn.propertyIdentifier, _this.startDate, '>=', 'AND', true, true, false, 'dates');\n                    _this.reportCollectionConfig.addFilter(_this.selectedPeriodColumn.propertyIdentifier, _this.endDate, '<=', 'AND', true, true, false, 'dates');\n                    _this.reportCollectionConfig.getEntity().then(function (reportingData) {\n                        var ctx = $(\"#myChart\");\n                        _this.renderReport(reportingData, ctx);\n                        if (_this.startDateCompare) {\n                            var diff = Math.abs(_this.endDate - _this.startDate);\n                            _this.endDateCompare = new Date(_this.startDateCompare).addMilliseconds(diff).toString('MMM dd, yyyy hh:mm tt');\n                            _this.updateComparePeriod();\n                        }\n                    });\n                    _this.collectionConfig.removeFilterGroupByFilterGroupAlias('dates');\n                    delete _this.collectionConfig.periodInterval;\n                    _this.collectionConfig.addFilter(_this.selectedPeriodColumn.propertyIdentifier, _this.startDate, '>=', 'AND', true, true, false, 'dates');\n                    _this.collectionConfig.addFilter(_this.selectedPeriodColumn.propertyIdentifier, _this.endDate, '<=', 'AND', true, true, false, 'dates');\n                    _this.collectionConfig.setPeriodInterval(_this.selectedPeriodInterval.value);\n                    _this.selectedPeriodColumn.isPeriod = true;\n                    //decide whether to add or replace the periodcolumn\n                    var hasPeriodColumn = _this.collectionConfig.hasPeriodColumnFromColumns(_this.collectionConfig.columns);\n                    if (!hasPeriodColumn) {\n                        _this.collectionConfig.columns.push(_this.selectedPeriodColumn);\n                    }\n                    else {\n                        _this.collectionConfig.removePeriodColumnFromColumns(_this.collectionConfig.columns);\n                        _this.collectionConfig.columns.push(_this.selectedPeriodColumn);\n                    }\n                    _this.observerService.notifyById('getCollection', _this.tableId, { collectionConfig: _this.collectionConfig.collectionConfigString });\n                    _this.observerService.notifyById('swPaginationAction', _this.tableId, { type: 'setCurrentPage', payload: 1 });\n                }\n            }\n        };\n        this.renderReport = function (reportingData, ctx) {\n            _this.reportingData = reportingData;\n            var dates = [];\n            var datasets = [];\n            _this.reportingData.records.forEach(function (element) {\n                var pidAliasArray = _this.selectedPeriodColumn.propertyIdentifier.split('.');\n                pidAliasArray.shift();\n                var pidAlias = pidAliasArray.join('_');\n                dates.push(element[pidAlias]);\n            });\n            _this.reportCollectionConfig.columns.forEach(function (column) {\n                if (column.isMetric) {\n                    var color = _this.random_rgba();\n                    var title = \"\" + column.title;\n                    var metrics_1 = [];\n                    _this.reportingData.records.forEach(function (element) {\n                        metrics_1.push({\n                            y: element[column.aggregate.aggregateAlias],\n                            x: element[_this.selectedPeriodColumn.name]\n                        });\n                    });\n                    datasets.push({\n                        label: title,\n                        data: metrics_1,\n                        backgroundColor: color,\n                        borderColor: color,\n                        borderWidth: 2,\n                        fill: false\n                    });\n                }\n            });\n            //used to clear old rendered charts before adding new ones\n            if (_this.chart != null) {\n                _this.chart.destroy();\n            }\n            _this.chart = new chart_js_1.Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: dates,\n                    datasets: datasets,\n                    spanGaps: true\n                },\n                options: {\n                    responsive: true,\n                    title: {\n                        display: true,\n                        text: \"(\" + (_this.startDate.toDateString ? _this.startDate.toDateString() : _this.startDate) + \" - \" + (_this.endDate.toDateString ? _this.endDate.toDateString() : _this.endDate) + \")\"\n                    },\n                    scales: {\n                        yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                }\n                            }],\n                        xAxes: [{\n                                display: true,\n                                scaleLabel: {\n                                    labelString: _this.selectedPeriodColumn.displayPropertyIdentifier + ' by ' + _this.selectedPeriodInterval.value,\n                                    display: true,\n                                },\n                            }]\n                    },\n                    tooltips: {\n                        mode: 'index',\n                        intersect: false,\n                    },\n                    hover: {\n                        intersect: true,\n                        mode: 'nearest',\n                    },\n                    elements: {\n                        line: {\n                            tension: 0\n                        }\n                    }\n                }\n            });\n            _this.chart.draw();\n            _this.observerService.notifyById('swListingReport_DrawChart', _this.tableId, _this.chart);\n        };\n        this.popObjectPath = function () {\n            if (_this.objectPath.length > 1) {\n                _this.objectPath.pop();\n                _this.selectedPeriodPropertyIdentifierArray.pop();\n                _this.getPeriodColumns(_this.objectPath[_this.objectPath.length - 1], false).then(function () {\n                });\n            }\n        };\n        this.getPeriodColumns = function (baseEntityAlias, adding) {\n            if (baseEntityAlias === void 0) { baseEntityAlias = _this.collectionConfig.baseEntityAlias; }\n            if (adding === void 0) { adding = true; }\n            if (adding) {\n                _this.objectPath.push(baseEntityAlias);\n            }\n            //get meta data we need for existing columns\n            var promise = _this.$hibachi.getFilterPropertiesByBaseEntityName(baseEntityAlias).then(function (value) {\n                _this.metadataService.setPropertiesList(value, baseEntityAlias);\n                if (!_this.filterPropertiesList) {\n                    _this.filterPropertiesList = {};\n                }\n                _this.filterPropertiesList[baseEntityAlias] = _this.metadataService.getPropertiesListByBaseEntityAlias(baseEntityAlias);\n                _this.metadataService.formatPropertiesList(_this.filterPropertiesList[baseEntityAlias], baseEntityAlias);\n                //figure out all the possible periods\n                var columns = {};\n                columns[baseEntityAlias] = angular.copy(_this.metadataService.getPropertiesListByBaseEntityAlias(baseEntityAlias));\n                _this.periodColumns = [];\n                for (var i in columns[baseEntityAlias].data) {\n                    var column = columns[baseEntityAlias].data[i];\n                    if ((column.ormtype && column.ormtype == 'timestamp') || (column.fieldtype && ['one-to-many', 'many-to-many', 'id'].indexOf(column.fieldtype) == -1)) {\n                        _this.periodColumns.push(column);\n                    }\n                }\n            });\n            return promise;\n        };\n        this.selectPeriodInterval = function (interval) {\n            _this.selectedPeriodInterval = { value: interval };\n            _this.updatePeriod();\n        };\n        this.selectPeriodColumn = function (column, update) {\n            if (update === void 0) { update = true; }\n            if (column && column.cfc) {\n                _this.selectedPeriodPropertyIdentifierArray.push(column.name);\n                _this.getPeriodColumns(column.cfc);\n            }\n            else if (column && column.name) {\n                if (_this.selectedPeriodPropertyIdentifierArray.length\n                    && _this.selectedPeriodPropertyIdentifierArray[_this.selectedPeriodPropertyIdentifierArray.length - 1] == column.name) {\n                    _this.selectedPeriodPropertyIdentifier = _this.selectedPeriodPropertyIdentifierArray.join('.');\n                }\n                else {\n                    _this.selectedPeriodPropertyIdentifier = _this.selectedPeriodPropertyIdentifierArray.join('.') + '.' + column.name;\n                }\n                //update the option so it remains selected\n                for (var i in _this.periodColumns) {\n                    if (column.name === _this.periodColumns[i].name) {\n                        _this.periodColumns[i].isPeriod = true;\n                        _this.periodColumns[i].propertyIdentifier = _this.selectedPeriodPropertyIdentifier;\n                    }\n                }\n                column.propertyIdentifier = _this.selectedPeriodPropertyIdentifier;\n                column.isPeriod = true;\n                column.isVisible = true;\n                column.title = column.displayPropertyIdentifier;\n                _this.selectedPeriodColumn = column;\n                if (update) {\n                    _this.updatePeriod();\n                }\n            }\n        };\n        this.collectionConfig = this.collectionConfig.loadJson(this.collectionConfig.collectionConfigString);\n        if (this.collectionId) {\n            var selectedReport = {\n                collectionID: this.collectionId,\n                collectionConfig: angular.fromJson(this.collectionConfig.collectionConfigString)\n            };\n            this.getPeriodColumns().then(function () {\n                _this.selectReport(selectedReport);\n            });\n        }\n        else {\n            this.getPeriodColumns();\n            this.selectedPeriodPropertyIdentifierArray = [this.collectionConfig.baseEntityAlias];\n        }\n        this.observerService.attach(this.updateReportFromListing, 'filterItemAction', this.tableId);\n    }\n    return SWListingReportController;\n}());\nvar SWListingReport = /** @class */ (function () {\n    //@ngInject\n    function SWListingReport(scopeService, collectionPartialsPath, hibachiPathBuilder) {\n        this.scopeService = scopeService;\n        this.collectionPartialsPath = collectionPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.restrict = 'EA';\n        this.scope = {};\n        this.bindToController = {\n            collectionConfig: \"=?\",\n            collectionId: \"=?\",\n            tableId: \"@?\"\n        };\n        this.controller = SWListingReportController;\n        this.controllerAs = 'swListingReport';\n        this.link = function (scope, element, attrs) {\n            scope.swListingReport.openCalendarStart = function ($event) {\n                $event.preventDefault();\n                $event.stopPropagation();\n                scope.swListingReport.openedCalendarStart = true;\n            };\n            scope.swListingReport.openCalendarEnd = function ($event) {\n                $event.preventDefault();\n                $event.stopPropagation();\n                scope.swListingReport.openedCalendarEnd = true;\n            };\n            scope.swListingReport.openCalendarStartCompare = function ($event) {\n                $event.preventDefault();\n                $event.stopPropagation();\n                scope.swListingReport.openedCalendarStartCompare = true;\n            };\n            scope.swListingReport.openCalendarEndCompare = function ($event) {\n                $event.preventDefault();\n                $event.stopPropagation();\n                scope.swListingReport.openedCalendarEndCompare = true;\n            };\n        };\n        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + \"listingreport.html\";\n    }\n    SWListingReport.Factory = function () {\n        var directive = function (scopeService, listingPartialPath, hibachiPathBuilder) { return new SWListingReport(scopeService, listingPartialPath, hibachiPathBuilder); };\n        directive.$inject = ['scopeService', 'listingPartialPath', 'hibachiPathBuilder'];\n        return directive;\n    };\n    return SWListingReport;\n}());\nexports.SWListingReport = SWListingReport;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingreport.ts?")},"../../../org/Hibachi/client/src/listing/components/swlistingrowsave.ts":
/*!***************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingrowsave.ts ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWListingRowSaveController = /** @class */ (function () {\n    //@ngInject\n    function SWListingRowSaveController(listingService) {\n        var _this = this;\n        this.listingService = listingService;\n        this.save = function () {\n            _this.listingService.markSaved(_this.listingID, _this.pageRecordIndex);\n        };\n    }\n    return SWListingRowSaveController;\n}());\nvar SWListingRowSave = /** @class */ (function () {\n    function SWListingRowSave(hibachiPathBuilder, listingPartialPath, utilityService, scopeService) {\n        var _this = this;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.listingPartialPath = listingPartialPath;\n        this.utilityService = utilityService;\n        this.scopeService = scopeService;\n        this.restrict = \'EA\';\n        this.scope = true;\n        this.bindToController = {};\n        this.controller = SWListingRowSaveController;\n        this.controllerAs = "swListingRowSave";\n        this.link = function ($scope, element, attrs) {\n            var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");\n            if (angular.isDefined(currentScope["pageRecord"])) {\n                $scope.swListingRowSave.pageRecord = currentScope["pageRecord"];\n            }\n            var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");\n            if (angular.isDefined(currentScope["pageRecordKey"])) {\n                $scope.swListingRowSave.pageRecordIndex = currentScope["pageRecordKey"];\n            }\n            var currentScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");\n            if (angular.isDefined(currentScope["swListingDisplay"])) {\n                $scope.swListingRowSave.listingID = currentScope["swListingDisplay"].tableID;\n            }\n        };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(this.listingPartialPath) + \'listingrowsave.html\';\n    }\n    SWListingRowSave.Factory = function () {\n        var directive = function (hibachiPathBuilder, listingPartialPath, utilityService, scopeService) { return new SWListingRowSave(hibachiPathBuilder, listingPartialPath, utilityService, scopeService); };\n        directive.$inject = [\n            \'hibachiPathBuilder\',\n            \'listingPartialPath\',\n            \'utilityService\',\n            \'scopeService\'\n        ];\n        return directive;\n    };\n    SWListingRowSave.$inject = [\'utilityService\'];\n    return SWListingRowSave;\n}());\nexports.SWListingRowSave = SWListingRowSave;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingrowsave.ts?')},"../../../org/Hibachi/client/src/listing/components/swlistingsearch.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingsearch.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWListingSearchController = /** @class */ (function () {\n    //@ngInject\n    function SWListingSearchController($rootScope, $hibachi, metadataService, listingService, collectionService, observerService, localStorageService, appConfig) {\n        var _this = this;\n        this.$rootScope = $rootScope;\n        this.$hibachi = $hibachi;\n        this.metadataService = metadataService;\n        this.listingService = listingService;\n        this.collectionService = collectionService;\n        this.observerService = observerService;\n        this.localStorageService = localStorageService;\n        this.appConfig = appConfig;\n        this.displayOptionsClosed = true;\n        this.filtersClosed = true;\n        this.hasPersonalCollections = false;\n        this.collectionNameSaveIsOpen = false;\n        this.$onInit = function () {\n            if (angular.isDefined(_this.swListingDisplay.personalCollectionIdentifier)) {\n                _this.personalCollectionIdentifier = _this.swListingDisplay.personalCollectionIdentifier;\n            }\n            //snapshot searchable options in the beginning\n            _this.searchableOptions = angular.copy(_this.swListingDisplay.collectionConfig.columns);\n            _this.selectedSearchColumn = { title: 'All' };\n            _this.configureSearchableColumns(_this.selectedSearchColumn);\n            if (_this.swListingControls.showPrintOptions) {\n                //load the options\n                //this will prevent icon from flashing on action bar\n                _this.swListingControls.showPrintOptions = false;\n                var printTemplateOptionsCollection = _this.collectionConfig.newCollectionConfig('PrintTemplate');\n                printTemplateOptionsCollection.addFilter('printTemplateObject', _this.swListingDisplay.collectionConfig.baseEntityName);\n                printTemplateOptionsCollection.setAllRecords(true);\n                printTemplateOptionsCollection.getEntity().then(function (response) {\n                    _this.printTemplateOptions = response.records;\n                    if (_this.printTemplateOptions.length !== 0) {\n                        _this.swListingControls.showPrintOptions = true;\n                    }\n                }, function (reason) {\n                    throw (\"swListingSearch couldn't load printTemplateOptions because: \" + reason);\n                });\n            }\n        };\n        this.selectSearchColumn = function (column) {\n            _this.selectedSearchColumn = column;\n            _this.configureSearchableColumns(column);\n            if (_this.swListingDisplay.searchText) {\n                _this.search();\n            }\n        };\n        this.selectPersonalCollection = function (personalCollection) {\n            if (!_this.localStorageService.hasItem('selectedPersonalCollection')) {\n                _this.localStorageService.setItem('selectedPersonalCollection', '{}');\n            }\n            var selectedPersonalCollection = angular.fromJson(_this.localStorageService.getItem('selectedPersonalCollection'));\n            if (personalCollection) {\n                selectedPersonalCollection[personalCollection.collectionObject.toLowerCase()] = personalCollection;\n                _this.localStorageService.setItem('selectedPersonalCollection', angular.toJson(selectedPersonalCollection));\n            }\n            else {\n                delete selectedPersonalCollection[_this.swListingDisplay.baseEntityName.toLowerCase()];\n                _this.localStorageService.setItem('selectedPersonalCollection', angular.toJson(selectedPersonalCollection));\n            }\n            window.location.href = _this.appConfig.baseURL + '?' + _this.appConfig.action + '=' + 'entity.list' + _this.swListingDisplay.baseEntityName.toLowerCase();\n        };\n        this.deleteReportCollection = function (persistedCollection) {\n            _this.$hibachi.saveEntity('Collection', persistedCollection.collectionID, {}, 'delete').then(function (data) {\n            });\n        };\n        this.deletePersonalCollection = function (personalCollection) {\n            _this.$hibachi.saveEntity('Collection', personalCollection.collectionID, {\n                'softDeleteFlag': true\n            }, 'save').then(function (data) {\n                if (_this.localStorageService.hasItem('selectedPersonalCollection')) {\n                    var selectedPersonalCollection = angular.fromJson(_this.localStorageService.getItem('selectedPersonalCollection'));\n                    var currentSelectedPersonalCollection = selectedPersonalCollection[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()];\n                    if (currentSelectedPersonalCollection) {\n                        var currentSelectedPersonalCollectionID = currentSelectedPersonalCollection.collectionID;\n                        if (personalCollection.collectionID === currentSelectedPersonalCollectionID) {\n                            _this.selectPersonalCollection();\n                        }\n                    }\n                }\n                _this.hasPersonalCollections = false;\n                _this.getPersonalCollections();\n            });\n        };\n        this.savePersonalCollection = function (collectionName) {\n            if (_this.localStorageService.hasItem('selectedPersonalCollection') &&\n                _this.localStorageService.getItem('selectedPersonalCollection')[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()] &&\n                (angular.isUndefined(_this.personalCollectionIdentifier) ||\n                    (angular.isDefined(_this.localStorageService.getItem('selectedPersonalCollection')[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()]['collectionDescription']) &&\n                        _this.localStorageService.getItem('selectedPersonalCollection')[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()]['collectionDescription'] == _this.personalCollectionIdentifier))) {\n                var selectedPersonalCollection = angular.fromJson(_this.localStorageService.getItem('selectedPersonalCollection'));\n                if (selectedPersonalCollection[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()]) {\n                    _this.$hibachi.saveEntity('Collection', selectedPersonalCollection[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()].collectionID, {\n                        'accountOwner.accountID': _this.$rootScope.slatwall.account.accountID,\n                        'collectionConfig': _this.swListingDisplay.collectionConfig.collectionConfigString\n                    }, 'save').then(function (data) {\n                    });\n                    return;\n                }\n            }\n            else if (collectionName) {\n                var serializedJSONData = {\n                    'collectionConfig': _this.swListingDisplay.collectionConfig.collectionConfigString,\n                    'collectionName': collectionName,\n                    'collectionDescription': _this.personalCollectionIdentifier,\n                    'collectionObject': _this.swListingDisplay.collectionConfig.baseEntityName,\n                    'accountOwner': {\n                        'accountID': _this.$rootScope.slatwall.account.accountID\n                    }\n                };\n                _this.$hibachi.saveEntity('Collection', \"\", {\n                    'serializedJSONData': angular.toJson(serializedJSONData),\n                    'propertyIdentifiersList': 'collectionID,collectionName,collectionObject,collectionDescription'\n                }, 'save').then(function (data) {\n                    if (!_this.localStorageService.hasItem('selectedPersonalCollection')) {\n                        _this.localStorageService.setItem('selectedPersonalCollection', '{}');\n                    }\n                    var selectedPersonalCollection = angular.fromJson(_this.localStorageService.getItem('selectedPersonalCollection'));\n                    selectedPersonalCollection[_this.swListingDisplay.collectionConfig.baseEntityName.toLowerCase()] = {\n                        collectionID: data.data.collectionID,\n                        collectionObject: data.data.collectionObject,\n                        collectionName: data.data.collectionName,\n                        collectionDescription: data.data.collectionDescription\n                    };\n                    _this.localStorageService.setItem('selectedPersonalCollection', angular.toJson(selectedPersonalCollection));\n                    _this.$rootScope.slatwall.selectedPersonalCollection = selectedPersonalCollection;\n                    _this.collectionNameSaveIsOpen = false;\n                    _this.hasPersonalCollections = false;\n                });\n                return;\n            }\n            _this.collectionNameSaveIsOpen = true;\n        };\n        this.getPersonalCollections = function () {\n            if (!_this.hasPersonalCollections) {\n                var personalCollectionList = _this.collectionConfig.newCollectionConfig('Collection');\n                personalCollectionList.setDisplayProperties('collectionID,collectionName,collectionObject,collectionDescription');\n                personalCollectionList.addFilter('accountOwner.accountID', _this.$rootScope.slatwall.account.accountID);\n                personalCollectionList.addFilter('collectionObject', _this.swListingDisplay.baseEntityName);\n                personalCollectionList.addFilter('reportFlag', 0);\n                personalCollectionList.addFilter('softDeleteFlag', true, \"!=\");\n                if (angular.isDefined(_this.personalCollectionIdentifier)) {\n                    personalCollectionList.addFilter('collectionDescription', _this.personalCollectionIdentifier);\n                }\n                personalCollectionList.setAllRecords(true);\n                personalCollectionList.getEntity().then(function (data) {\n                    _this.personalCollections = data.records;\n                });\n            }\n            _this.hasPersonalCollections = true;\n        };\n        this.clearPersonalCollection = function () {\n            _this.selectPersonalCollection();\n        };\n        this.search = function () {\n            if (_this.swListingDisplay.searchText.length > 0) {\n                _this.listingService.setExpandable(_this.listingId, false);\n            }\n            else {\n                _this.listingService.setExpandable(_this.listingId, true);\n            }\n            _this.collectionConfig.setKeywords(_this.swListingDisplay.searchText);\n            _this.swListingDisplay.collectionConfig = _this.collectionConfig;\n            _this.observerService.notifyById('swPaginationAction', _this.listingId, { type: 'setCurrentPage', payload: 1 });\n        };\n        this.configureSearchableColumns = function (column) {\n            var searchableColumn = \"\";\n            if (column.propertyIdentifier) {\n                searchableColumn = column.propertyIdentifier;\n                //default to All columns\n            }\n            for (var i = 0; i < _this.swListingDisplay.collectionConfig.columns.length; i++) {\n                if (searchableColumn.length) {\n                    if (searchableColumn === _this.swListingDisplay.collectionConfig.columns[i].propertyIdentifier) {\n                        _this.swListingDisplay.collectionConfig.columns[i].isSearchable = true;\n                    }\n                    else {\n                        _this.swListingDisplay.collectionConfig.columns[i].isSearchable = false;\n                    }\n                }\n                else {\n                    _this.swListingDisplay.collectionConfig.columns[i].isSearchable = true;\n                }\n            }\n        };\n    }\n    return SWListingSearchController;\n}());\nvar SWListingSearch = /** @class */ (function () {\n    //@ngInject\n    function SWListingSearch(scopeService, collectionPartialsPath, hibachiPathBuilder) {\n        this.scopeService = scopeService;\n        this.collectionPartialsPath = collectionPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.restrict = 'EA';\n        this.scope = {};\n        this.require = { swListingDisplay: \"?^swListingDisplay\", swListingControls: '?^swListingControls' };\n        this.bindToController = {\n            collectionConfig: \"<?\",\n            paginator: \"=?\",\n            listingId: \"@?\",\n            showToggleSearch: \"=?\"\n        };\n        this.controller = SWListingSearchController;\n        this.controllerAs = 'swListingSearch';\n        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.collectionPartialsPath) + \"listingsearch.html\";\n    }\n    SWListingSearch.Factory = function () {\n        var directive = function (scopeService, listingPartialPath, hibachiPathBuilder) { return new SWListingSearch(scopeService, listingPartialPath, hibachiPathBuilder); };\n        directive.$inject = ['scopeService', 'listingPartialPath', 'hibachiPathBuilder'];\n        return directive;\n    };\n    return SWListingSearch;\n}());\nexports.SWListingSearch = SWListingSearch;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/components/swlistingsearch.ts?")},"../../../org/Hibachi/client/src/listing/listing.module.ts":
/*!**************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/listing.module.ts ***!
  \**************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path="../../typings/tsd.d.ts" />\n/// <reference path="../../typings/hibachiTypescript.d.ts" />\nObject.defineProperty(exports, "__esModule", { value: true });\n//modules\nvar collection_module_1 = __webpack_require__(/*! ../collection/collection.module */ "../../../org/Hibachi/client/src/collection/collection.module.ts");\n//services\nvar listingservice_1 = __webpack_require__(/*! ./services/listingservice */ "../../../org/Hibachi/client/src/listing/services/listingservice.ts");\n//directives\nvar swlistingdisplay_1 = __webpack_require__(/*! ./components/swlistingdisplay */ "../../../org/Hibachi/client/src/listing/components/swlistingdisplay.ts");\nvar swlistingreport_1 = __webpack_require__(/*! ./components/swlistingreport */ "../../../org/Hibachi/client/src/listing/components/swlistingreport.ts");\nvar swlistingdisplaycell_1 = __webpack_require__(/*! ./components/swlistingdisplaycell */ "../../../org/Hibachi/client/src/listing/components/swlistingdisplaycell.ts");\nvar swlistingcontrols_1 = __webpack_require__(/*! ./components/swlistingcontrols */ "../../../org/Hibachi/client/src/listing/components/swlistingcontrols.ts");\nvar swlistingaggregate_1 = __webpack_require__(/*! ./components/swlistingaggregate */ "../../../org/Hibachi/client/src/listing/components/swlistingaggregate.ts");\nvar swlistingcolorfilter_1 = __webpack_require__(/*! ./components/swlistingcolorfilter */ "../../../org/Hibachi/client/src/listing/components/swlistingcolorfilter.ts");\nvar swlistingcolumn_1 = __webpack_require__(/*! ./components/swlistingcolumn */ "../../../org/Hibachi/client/src/listing/components/swlistingcolumn.ts");\nvar swlistingdisablerule_1 = __webpack_require__(/*! ./components/swlistingdisablerule */ "../../../org/Hibachi/client/src/listing/components/swlistingdisablerule.ts");\nvar swlistingexpandablerule_1 = __webpack_require__(/*! ./components/swlistingexpandablerule */ "../../../org/Hibachi/client/src/listing/components/swlistingexpandablerule.ts");\nvar swlistingfilter_1 = __webpack_require__(/*! ./components/swlistingfilter */ "../../../org/Hibachi/client/src/listing/components/swlistingfilter.ts");\nvar swlistingfiltergroup_1 = __webpack_require__(/*! ./components/swlistingfiltergroup */ "../../../org/Hibachi/client/src/listing/components/swlistingfiltergroup.ts");\nvar swlistingorderby_1 = __webpack_require__(/*! ./components/swlistingorderby */ "../../../org/Hibachi/client/src/listing/components/swlistingorderby.ts");\nvar swlistingrowsave_1 = __webpack_require__(/*! ./components/swlistingrowsave */ "../../../org/Hibachi/client/src/listing/components/swlistingrowsave.ts");\nvar swlistingsearch_1 = __webpack_require__(/*! ./components/swlistingsearch */ "../../../org/Hibachi/client/src/listing/components/swlistingsearch.ts");\nvar swlistingglobalsearch_1 = __webpack_require__(/*! ./components/swlistingglobalsearch */ "../../../org/Hibachi/client/src/listing/components/swlistingglobalsearch.ts");\nvar listingmodule = angular.module(\'hibachi.listing\', [collection_module_1.collectionmodule.name])\n    .run([function () {\n    }])\n    //services\n    .service(\'listingService\', listingservice_1.ListingService)\n    //directives\n    .directive(\'swListingDisplay\', swlistingdisplay_1.SWListingDisplay.Factory())\n    .directive(\'swListingReport\', swlistingreport_1.SWListingReport.Factory())\n    .directive(\'swListingControls\', swlistingcontrols_1.SWListingControls.Factory())\n    .directive(\'swListingAggregate\', swlistingaggregate_1.SWListingAggregate.Factory())\n    .directive(\'swListingColorFilter\', swlistingcolorfilter_1.SWListingColorFilter.Factory())\n    .directive(\'swListingColumn\', swlistingcolumn_1.SWListingColumn.Factory())\n    .directive(\'swListingDisableRule\', swlistingdisablerule_1.SWListingDisableRule.Factory())\n    .directive(\'swListingExpandableRule\', swlistingexpandablerule_1.SWListingExpandableRule.Factory())\n    .directive(\'swListingDisplayCell\', swlistingdisplaycell_1.SWListingDisplayCell.Factory())\n    .directive(\'swListingFilter\', swlistingfilter_1.SWListingFilter.Factory())\n    .directive(\'swListingFilterGroup\', swlistingfiltergroup_1.SWListingFilterGroup.Factory())\n    .directive(\'swListingOrderBy\', swlistingorderby_1.SWListingOrderBy.Factory())\n    .directive(\'swListingRowSave\', swlistingrowsave_1.SWListingRowSave.Factory())\n    .directive(\'swListingSearch\', swlistingsearch_1.SWListingSearch.Factory())\n    .directive(\'swListingGlobalSearch\', swlistingglobalsearch_1.SWListingGlobalSearch.Factory())\n    //constants\n    .constant(\'listingPartialPath\', \'listing/components/\');\nexports.listingmodule = listingmodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/listing.module.ts?')},"../../../org/Hibachi/client/src/listing/services/listingservice.ts":
/*!***********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/services/listingservice.ts ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Store = __webpack_require__(/*! ../../../../../../org/Hibachi/client/src/core/prototypes/swstore */ \"../../../org/Hibachi/client/src/core/prototypes/swstore.ts\");\nvar ListingService = /** @class */ (function () {\n    //@ngInject\n    function ListingService($timeout, $q, collectionConfigService, filterService, historyService, observerService, rbkeyService, selectionService, utilityService, $hibachi, localStorageService) {\n        var _this = this;\n        this.$timeout = $timeout;\n        this.$q = $q;\n        this.collectionConfigService = collectionConfigService;\n        this.filterService = filterService;\n        this.historyService = historyService;\n        this.observerService = observerService;\n        this.rbkeyService = rbkeyService;\n        this.selectionService = selectionService;\n        this.utilityService = utilityService;\n        this.$hibachi = $hibachi;\n        this.localStorageService = localStorageService;\n        this.listingDisplays = {};\n        this.state = {};\n        /**\n         * The reducer is responsible for modifying the state of the state object into a new state for listeners.\n         */\n        this.listingDisplayStateReducer = function (state, action) {\n            switch (action.type) {\n                case 'LISTING_PAGE_RECORDS_UPDATE':\n                    return __assign({}, state, { action: action });\n                case 'CURRENT_PAGE_RECORDS_SELECTED':\n                    return __assign({}, state, { action: action });\n                case 'ADD_SELECTION':\n                    return __assign({}, state, { action: action });\n                default:\n                    return state;\n            }\n        };\n        //Event Functions\n        this.getListingPageRecordsUpdateEventString = function (listingID) {\n            return listingID + \"pageRecordsUpdated\";\n        };\n        this.getListingOrderByChangedEventString = function (listingID) {\n            return listingID + \"orderByChanged\";\n        };\n        this.getListingInitiatedEventString = function (listingID) {\n            return listingID + \"initiated\";\n        };\n        this.notifyListingPageRecordsUpdate = function (listingID) {\n            //This is how we would dispatch so that controllers can get the updated state.\n            _this.listingDisplayStore.dispatch({\n                type: \"LISTING_PAGE_RECORDS_UPDATE\",\n                payload: { listingID: listingID, listingPageRecordsUpdateEventString: _this.getListingPageRecordsUpdateEventString(listingID) }\n            });\n            _this.observerService.notify(_this.getListingPageRecordsUpdateEventString(listingID), listingID);\n        };\n        this.attachToListingPageRecordsUpdate = function (listingID, callback, id) {\n            _this.observerService.attach(callback, _this.getListingPageRecordsUpdateEventString(listingID), id);\n        };\n        this.attachToOrderByChangedUpdate = function (listingID, callback, id) {\n            _this.observerService.attach(callback, _this.getListingOrderByChangedEventString(listingID), id);\n        };\n        this.attachToListingInitiated = function (listingID, callback) {\n            _this.observerService.attach(callback, _this.getListingInitiatedEventString(listingID));\n            if (_this.historyService.hasHistory(_this.getListingInitiatedEventString(listingID))) {\n                callback();\n            }\n        };\n        //End Event Functions\n        //core getters and setters\n        this.setListingState = function (listingID, state) {\n            _this.listingDisplays[listingID] = state;\n            _this.observerService.notifyAndRecord(_this.getListingInitiatedEventString(listingID));\n        };\n        this.getListing = function (listingID) {\n            return _this.listingDisplays[listingID];\n        };\n        this.getListingColumns = function (listingID) {\n            return _this.getListing(listingID).columns || _this.getListingCollectionConfigColumns(listingID);\n        };\n        this.getListingCollectionConfigColumns = function (listingID) {\n            if (_this.getListing(listingID).collectionConfig != null) {\n                return _this.getListing(listingID).collectionConfig.columns;\n            }\n        };\n        this.getListingExampleEntity = function (listingID) {\n            if (_this.getListing(listingID).exampleEntity != null) {\n                return _this.getListing(listingID).exampleEntity;\n            }\n            else {\n                _this.setupExampleEntity(listingID);\n            }\n        };\n        this.getListingCollectionConfigColumnIndexByPropertyIdentifier = function (listingID, propertyIdentifier) {\n            var columns = _this.getListingCollectionConfigColumns(listingID);\n            return _this.utilityService.ArrayFindByPropertyValue(columns, 'propertyIdentifier', propertyIdentifier);\n        };\n        this.getListingColumnIndexByPropertyIdentifier = function (listingID, propertyIdentifier) {\n            var columns = _this.getListingColumns(listingID);\n            return _this.utilityService.ArrayFindByPropertyValue(columns, 'propertyIdentifier', propertyIdentifier);\n        };\n        this.getListingBaseEntityName = function (listingID) {\n            var baseEntityName = _this.getListing(listingID).baseEntityName || _this.getListing(listingID).collectionObject;\n            if (baseEntityName == null && _this.getListing(listingID).collectionConfig != null) {\n                baseEntityName = _this.getListing(listingID).collectionConfig.baseEntityName;\n            }\n            if (baseEntityName == null && _this.getListing(listingID).collectionData != null) {\n                baseEntityName = _this.getListing(listingID).collectionData.collectionObject;\n            }\n            return baseEntityName;\n        };\n        this.getListingBaseEntityPrimaryIDPropertyName = function (listingID) {\n            if (_this.getListingExampleEntity(listingID) != null) {\n                return _this.getListingExampleEntity(listingID).$$getIDName();\n            }\n        };\n        this.getListingPrimaryEntityName = function (listingID) {\n            return _this.getListing(listingID).baseEntityName ||\n                _this.getListing(listingID).collectionObject ||\n                _this.getListing(listingID).collectionConfig.baseEntityName;\n        };\n        this.getListingEntityPrimaryIDPropertyName = function (listingID) {\n            return _this.$hibachi.getPrimaryIDPropertyNameByEntityName(_this.getListingPrimaryEntityName(listingID));\n        };\n        this.getListingPageRecords = function (listingID) {\n            if (angular.isDefined(_this.getListing(listingID)) &&\n                angular.isDefined(_this.getListing(listingID).collectionData) &&\n                angular.isDefined(_this.getListing(listingID).collectionData.pageRecords)) {\n                return _this.getListing(listingID).collectionData.pageRecords;\n            }\n        };\n        this.getCollection = function (listingID) {\n            return _this.getListing(listingID).getCollection();\n        };\n        this.getPageRecordsWithManualSortOrder = function (listingID) {\n            if (angular.isDefined(_this.getListing(listingID)) && _this.getListingPageRecords(listingID) != null) {\n                var pageRecords = _this.getListingPageRecords(listingID);\n                var primaryIDPropertyName = _this.getListingEntityPrimaryIDPropertyName(listingID);\n                var primaryIDWithBaseAlias = _this.getListing(listingID).collectionConfig.baseEntityAlias + '.' + primaryIDPropertyName;\n                var pageRecordsWithManualSortOrder = {};\n                _this.$timeout(function () {\n                    for (var j = 0; j < pageRecords.length; j++) {\n                        var pageRecord = pageRecords[j];\n                        var primaryID = pageRecords[j][primaryIDPropertyName];\n                        var sortOrder = j + 1;\n                        var primaryIDColumnIndex = _this.getListingCollectionConfigColumnIndexByPropertyIdentifier(listingID, primaryIDWithBaseAlias);\n                        if (angular.isDefined(primaryID)) {\n                            pageRecordsWithManualSortOrder[primaryID] = sortOrder;\n                        }\n                        else if (primaryIDColumnIndex !== -1) {\n                            var column = _this.getListingCollectionConfigColumns(listingID)[primaryIDColumnIndex];\n                            if (angular.isDefined(column.fallbackPropertyIdentifiers)) {\n                                var fallbackPropertyArray = column.fallbackPropertyIdentifiers.split(\",\");\n                                for (var i = 0; i < fallbackPropertyArray.length; i++) {\n                                    if (angular.isDefined(pageRecord[fallbackPropertyArray[i]])) {\n                                        pageRecordsWithManualSortOrder[pageRecord[fallbackPropertyArray[i]]] = sortOrder;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    _this.getListing(listingID).pageRecordsWithManualSortOrder = angular.toJson(pageRecordsWithManualSortOrder);\n                    return _this.getListing(listingID).pageRecordsWithManualSortOrders;\n                }, 0);\n            }\n            else {\n                return angular.toJson({});\n            }\n        };\n        //Begin Listing Page Record Functions\n        this.getListingPageRecordIndexByPageRecord = function (listingID, pageRecordToCompare) {\n            var pageRecords = _this.getListingPageRecords(listingID);\n            var primaryIDPropertyName = _this.getListingEntityPrimaryIDPropertyName(listingID);\n            for (var j = 0; j < pageRecords.length; j++) {\n                var pageRecord = pageRecords[j];\n                if (pageRecord[primaryIDPropertyName] == pageRecordToCompare[primaryIDPropertyName]) {\n                    return j;\n                }\n            }\n            return -1;\n        };\n        this.insertListingPageRecord = function (listingID, pageRecord) {\n            pageRecord.newFlag = true;\n            if (angular.isDefined(_this.getListingPageRecords(listingID))) {\n                _this.notifyListingPageRecordsUpdate(listingID);\n                _this.getListingPageRecords(listingID).unshift(pageRecord); //insert at beginning be default\n            }\n        };\n        this.removeListingPageRecord = function (listingID, pageRecord) {\n            var pageRecords = _this.getListingPageRecords(listingID);\n            if (_this.getListingPageRecordIndexByPageRecord(listingID, pageRecord) != -1) {\n                _this.notifyListingPageRecordsUpdate(listingID);\n                return pageRecords.splice(_this.getListingPageRecordIndexByPageRecord(listingID, pageRecord), 1)[0]; //this will always be an array of one element\n            }\n        };\n        this.getPageRecordKey = function (propertyIdentifier) {\n            if (propertyIdentifier) {\n                var propertyIdentifierWithoutAlias = '';\n                if (propertyIdentifier.indexOf('_') === 0) {\n                    var underscoreCount = (propertyIdentifier.match(new RegExp(\"_\", \"g\") || [])).length;\n                    if (underscoreCount > 1) {\n                        var properSubStr = propertyIdentifier.substring(1);\n                        propertyIdentifierWithoutAlias = properSubStr.substring(properSubStr.indexOf('_') + 1, properSubStr.length);\n                    }\n                    else {\n                        propertyIdentifierWithoutAlias = propertyIdentifier.substring(propertyIdentifier.indexOf('.') + 1);\n                    }\n                }\n                else {\n                    propertyIdentifierWithoutAlias = propertyIdentifier;\n                }\n                return _this.utilityService.replaceAll(propertyIdentifierWithoutAlias, '.', '_');\n            }\n            return '';\n        };\n        this.getPageRecordValueByColumn = function (pageRecord, column) {\n            var pageRecordValue = pageRecord[_this.getPageRecordKey(column.propertyIdentifier)] || \"\";\n            //try to find the property again if we need to...\n            if (pageRecordValue == \"\") {\n                for (var property in pageRecord) {\n                    if (property.indexOf(_this.getPageRecordKey(column.propertyIdentifier).trim()) != -1) {\n                        //use this record\n                        pageRecordValue = pageRecord[property];\n                    }\n                }\n            }\n            //last change to find the value\n            if ((angular.isUndefined(pageRecordValue) ||\n                (angular.isString(pageRecordValue) && pageRecordValue.trim().length == 0)) &&\n                angular.isDefined(column.fallbackPropertyIdentifiers)) {\n                var fallbackPropertyArray = column.fallbackPropertyIdentifiers.replace('.', '_').split(\",\");\n                for (var i = 0; i < fallbackPropertyArray.length; i++) {\n                    if (angular.isDefined(pageRecord[_this.getPageRecordKey(fallbackPropertyArray[i])])) {\n                        pageRecordValue = pageRecord[_this.getPageRecordKey(fallbackPropertyArray[i])];\n                        break;\n                    }\n                }\n            }\n            return pageRecordValue;\n        };\n        this.selectCurrentPageRecords = function (listingID) {\n            if (!_this.getListing(listingID).collectionData.pageRecords)\n                return;\n            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {\n                if (_this.getListing(listingID).isCurrentPageRecordsSelected == true) {\n                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);\n                }\n                else {\n                    _this.selectionService.removeSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);\n                }\n            }\n        };\n        /** returns the index of the item in the listing pageRecord by checking propertyName == recordID */\n        this.getSelectedBy = function (listingID, propertyName, value) {\n            if (!listingID || !propertyName || !value) {\n                return -1;\n            }\n            ;\n            return _this.getListing(listingID).collectionData.pageRecords.findIndex(function (record) { return record[propertyName] == value; });\n        };\n        /** returns the index of the item in the listing pageRecord by checking propertyName == recordID */\n        this.getAllSelected = function (listingID) {\n            if (!listingID)\n                return -1;\n            for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {\n                _this.selectionService.getSelections(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);\n            }\n        };\n        this.clearAllSelections = function (listingID) {\n            if (!listingID)\n                return -1;\n            if (_this.getListing(listingID)) {\n                for (var i = 0; i < _this.getListing(listingID).collectionData.pageRecords.length; i++) {\n                    _this.selectionService.removeSelection(_this.getListing(listingID).tableID, _this.getListingPageRecords(listingID)[i][_this.getListingBaseEntityPrimaryIDPropertyName(listingID)]);\n                }\n                _this.getListing(listingID).collectionConfig.getEntity().then(function (data) {\n                    _this.updatePageRecords(listingID, data);\n                });\n            }\n        };\n        this.updatePageRecords = function (listingID, data) {\n            _this.getListing(listingID).collectionData = data;\n            _this.setupDefaultCollectionInfo(listingID);\n            if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {\n                _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);\n            }\n            else {\n                _this.getListing(listingID).collectionConfig.loadJson(data.collectionConfig);\n            }\n            _this.notifyListingPageRecordsUpdate(listingID);\n            _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords ||\n                _this.getListing(listingID).collectionData.records;\n            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);\n            _this.getListing(listingID).searching = false;\n            _this.getListing(listingID).columnCount = _this.getListing(listingID).columns.length + 1;\n            if (_this.getListing(listingID).selectable || _this.getListing(listingID).multiselectable || _this.getListing(listingID).sortable) {\n                _this.getListing(listingID).columnCount++;\n            }\n        };\n        this.getNGClassObjectForPageRecordRow = function (listingID, pageRecord) {\n            var classObjectString = \"{\";\n            angular.forEach(_this.getListing(listingID).colorFilters, function (colorFilter, index) {\n                classObjectString = classObjectString.concat(\"'\" + colorFilter.colorClass + \"':\" + _this.getColorFilterConditionString(colorFilter, pageRecord));\n                classObjectString = classObjectString.concat(\",\");\n            });\n            classObjectString = classObjectString.concat(\" 's-child':\" + _this.getPageRecordIsChild(listingID, pageRecord));\n            var newFlag = false;\n            if (pageRecord && pageRecord.newFlag != null && typeof pageRecord.newFlag === 'string' && pageRecord.newFlag.trim() !== '') {\n                newFlag = pageRecord.newFlag;\n            }\n            classObjectString = classObjectString.concat(\",'s-selected-row':\" + newFlag);\n            classObjectString = classObjectString.concat(\",'s-disabled':\" + _this.getPageRecordMatchesDisableRule(listingID, pageRecord));\n            classObjectString = classObjectString.concat(\",'s-edited':pageRecord.edited\");\n            return classObjectString + \"}\";\n        };\n        this.getPageRecordIsChild = function (listingID, pageRecord) {\n            var isChild = false;\n            //todo implement\n            return isChild;\n        };\n        //End Listing Page Record Functions\n        //Row Save Functionality\n        this.determineRowEdited = function (pageRecords, pageRecordIndex) {\n            var fieldCount = 0;\n            for (var key in pageRecords[pageRecordIndex].editedFields) {\n                fieldCount++;\n                if (fieldCount > 1) {\n                    pageRecords[pageRecordIndex].edited = true;\n                    return true;\n                }\n            }\n            pageRecords[pageRecordIndex].edited = false;\n            return false;\n        };\n        this.markUnedited = function (listingID, pageRecordIndex, propertyDisplayID) {\n            var pageRecords = _this.getListingPageRecords(listingID);\n            if (angular.isDefined(pageRecords[pageRecordIndex].editedFields[propertyDisplayID])) {\n                delete pageRecords[pageRecordIndex].editedFields[propertyDisplayID];\n            }\n            return _this.determineRowEdited(pageRecords, pageRecordIndex);\n        };\n        this.markEdited = function (listingID, pageRecordIndex, propertyDisplayID, saveCallback) {\n            var pageRecords = _this.getListingPageRecords(listingID);\n            if (angular.isUndefined(pageRecords[pageRecordIndex].editedFields) && !angular.isObject(pageRecords[pageRecordIndex].editedFields)) {\n                pageRecords[pageRecordIndex].editedFields = {};\n            }\n            pageRecords[pageRecordIndex].editedFields[propertyDisplayID] = saveCallback;\n            return _this.determineRowEdited(pageRecords, pageRecordIndex);\n        };\n        this.markSaved = function (listingID, pageRecordIndex) {\n            var pageRecords = _this.getListingPageRecords(listingID);\n            var savePromises = [];\n            for (var key in pageRecords[pageRecordIndex].editedFields) {\n                if (angular.isFunction(pageRecords[pageRecordIndex].editedFields[key])) {\n                    savePromises.push(pageRecords[pageRecordIndex].editedFields[key]());\n                }\n            }\n            _this.$q.all(savePromises).then(function () {\n                delete pageRecords[pageRecordIndex].editedFields;\n                pageRecords[pageRecordIndex].edited = false;\n            });\n        };\n        //End Row Save Functionality\n        //Setup Functions\n        this.setupInSingleCollectionConfigMode = function (listingID, listingDisplayScope) {\n            if (_this.getListing(listingID).collectionObject != null &&\n                _this.getListing(listingID).collectionConfig != null) {\n                _this.getListing(listingID).collectionObject = _this.getListing(listingID).collectionConfig.baseEntityName;\n            }\n            _this.initCollectionConfigData(listingID, _this.getListing(listingID).collectionConfig);\n            _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);\n            listingDisplayScope.$watch('swListingDisplay.collectionPromise', function (newValue, oldValue) {\n                if (newValue) {\n                    _this.$q.when(_this.getListing(listingID).collectionPromise).then(function (data) {\n                        _this.getListing(listingID).collectionData = data;\n                        _this.setupDefaultCollectionInfo(listingID);\n                        if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {\n                            _this.setupColumns(listingID, _this.getListing(listingID).collectionConfig, _this.getListing(listingID).collectionObject);\n                        }\n                        else {\n                            _this.getListing(listingID).collectionConfig.loadJson(data.collectionConfig);\n                        }\n                        _this.notifyListingPageRecordsUpdate(listingID);\n                        _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords ||\n                            _this.getListing(listingID).collectionData.records;\n                        _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);\n                        _this.getListing(listingID).searching = false;\n                        _this.getListing(listingID).columnCount = _this.getListing(listingID).columns.length + 1;\n                        if (_this.getListing(listingID).selectable || _this.getListing(listingID).multiselectable || _this.getListing(listingID).sortable) {\n                            _this.getListing(listingID).columnCount++;\n                        }\n                    });\n                }\n            });\n        };\n        this.setupInMultiCollectionConfigMode = function (listingID) {\n            angular.forEach(_this.getListing(listingID).collectionConfigs, function (value, key) {\n                _this.getListing(listingID).collectionObjects[key] = value.baseEntityName;\n            });\n        };\n        this.setupDefaultCollectionInfo = function (listingID) {\n            if (_this.getListing(listingID).hasCollectionPromise\n                && angular.isDefined(_this.getListing(listingID).collection)\n                && _this.getListing(listingID).collectionConfig == null) {\n                _this.getListing(listingID).collectionObject = _this.getListing(listingID).collection.collectionObject;\n                _this.getListing(listingID).collectionConfig = _this.collectionConfigService.newCollectionConfig(_this.getListing(listingID).collectionObject);\n                _this.getListing(listingID).collectionConfig.loadJson(_this.getListing(listingID).collection.collectionConfig);\n            }\n            if (_this.getListing(listingID).multiSlot == false) {\n                _this.$timeout(function () {\n                    _this.getListing(listingID).collectionConfig.loadJson(_this.getListing(listingID).collectionData.collectionConfig);\n                    _this.getListing(listingID).columns = _this.getListing(listingID).collectionConfig.columns;\n                });\n            }\n            if (_this.getListing(listingID).paginator != null\n                && _this.getListing(listingID).collectionConfig != null) {\n                _this.getListing(listingID).collectionConfig.setPageShow(_this.getListing(listingID).paginator.getPageShow());\n                _this.getListing(listingID).collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.getCurrentPage());\n            }\n        };\n        this.addColumn = function (listingID, column) {\n            if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.baseEntityAlias != null) {\n                column.propertyIdentifier = _this.getListing(listingID).collectionConfig.baseEntityAlias + \".\" + column.propertyIdentifier;\n            }\n            else if (_this.getListingBaseEntityName(listingID) != null) {\n                column.propertyIdentifier = '_' + _this.getListingBaseEntityName(listingID).toLowerCase() + '.' + column.propertyIdentifier;\n            }\n            if (_this.getListingColumnIndexByPropertyIdentifier(listingID, column.propertyIdentifier) === -1) {\n                if (column.aggregate) {\n                    _this.getListing(listingID).aggregates.push(column.aggregate);\n                }\n                else {\n                    _this.getListing(listingID).columns.push(column);\n                }\n            }\n        };\n        this.setupColumns = function (listingID, collectionConfig, collectionObject) {\n            //assumes no alias formatting\n            if (_this.getListing(listingID).columns.length == 0 &&\n                collectionConfig != null) {\n                if (collectionConfig.columns == null) {\n                    collectionConfig.getEntity().then(function () {\n                        for (var j = 0; j < collectionConfig.columns.length; j++) {\n                            var column = collectionConfig.columns[j];\n                            if (column.isVisible) {\n                                _this.getListing(listingID).columns.push(column);\n                            }\n                        }\n                    }, function () {\n                        throw (\"listing display couldn't initiate no columns\");\n                    });\n                }\n                else {\n                    for (var j = 0; j < collectionConfig.columns.length; j++) {\n                        var column = collectionConfig.columns[j];\n                        if (column.isVisible) {\n                            _this.getListing(listingID).columns.push(column);\n                        }\n                    }\n                }\n            }\n            var length = _this.getListing(listingID).columns.length;\n            for (var i = 0; i < length; i++) {\n                var column = _this.getListing(listingID).columns[i];\n                _this.setupColumn(listingID, column, collectionConfig, collectionObject);\n            }\n        };\n        this.setupColumn = function (listingID, column, collectionConfig, collectionObject) {\n            if (_this.getListing(listingID).collectionConfig != null && !column.hasCellView) {\n                _this.getListing(listingID).collectionConfig.addColumn(column.propertyIdentifier, undefined, column);\n            }\n            if (!collectionConfig && _this.getListing(listingID).collectionConfig != null) {\n                collectionConfig = _this.getListing(listingID).collectionConfig != null;\n            }\n            var baseEntityName = _this.getListingBaseEntityName(listingID);\n            if (!collectionObject) {\n                collectionObject = baseEntityName;\n            }\n            //if we have entity information we can make some inferences about the column\n            if (baseEntityName != null) {\n                var lastEntity = _this.$hibachi.getLastEntityNameInPropertyIdentifier(baseEntityName, column.propertyIdentifier);\n                if (angular.isUndefined(column.title)) {\n                    column.title = _this.rbkeyService.getRBKey('entity.' + lastEntity.toLowerCase() + '.' + _this.utilityService.listLast(column.propertyIdentifier, '.'));\n                }\n                if (angular.isUndefined(column.isVisible)) {\n                    column.isVisible = true;\n                }\n                var metadata = _this.$hibachi.getPropertyByEntityNameAndPropertyName(lastEntity, _this.utilityService.listLast(column.propertyIdentifier, '.'));\n                if (metadata && angular.isDefined(metadata.persistent)) {\n                    column.persistent = metadata.persistent;\n                }\n                if (metadata && angular.isDefined(metadata.ormtype)) {\n                    column.ormtype = metadata.ormtype;\n                }\n                if (angular.isUndefined(column.type) || column.type == 'none') {\n                    if (angular.isDefined(metadata) && angular.isDefined(metadata.hb_formattype)) {\n                        column.type = metadata.hb_formattype;\n                    }\n                    else {\n                        column.type = \"none\";\n                    }\n                }\n                if (column.propertyIdentifier) {\n                    _this.getListing(listingID).allpropertyidentifiers = _this.utilityService.listAppend(_this.getListing(listingID).allpropertyidentifiers, column.propertyIdentifier);\n                }\n                else if (column.processObjectProperty) {\n                    column.searchable = false;\n                    column.sort = false;\n                    _this.getListing(listingID).allprocessobjectproperties = _this.utilityService.listAppend(_this.getListing(listingID).allprocessobjectproperties, column.processObjectProperty);\n                }\n                if (column.tdclass) {\n                    var tdclassArray = column.tdclass.split(' ');\n                    if (tdclassArray.indexOf(\"primary\") >= 0 && _this.getListing(listingID).expandable) {\n                        _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-expandsortproperty=' + column.propertyIdentifier, \" \");\n                        column.sort = false;\n                    }\n                }\n            }\n            if (angular.isDefined(column.tooltip)) {\n                var parsedProperties = _this.utilityService.getPropertiesFromString(column.tooltip);\n                if (parsedProperties && parsedProperties.length) {\n                    collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), \"\", { isVisible: false });\n                }\n            }\n            else {\n                column.tooltip = '';\n            }\n            if (angular.isDefined(column.queryString)) {\n                var parsedProperties = _this.utilityService.getPropertiesFromString(column.queryString);\n                if (parsedProperties && parsedProperties.length) {\n                    collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), \"\", { isVisible: false });\n                }\n            }\n            //if the passed in collection has columns perform some formatting\n            if (_this.getListing(listingID).hasCollectionPromise) {\n                var lastEntity = _this.$hibachi.getLastEntityNameInPropertyIdentifier(collectionObject, _this.utilityService.listRest(column.propertyIdentifier, '.'));\n                column.title = column.title || _this.rbkeyService.getRBKey('entity.' + lastEntity.toLowerCase() + '.' + _this.utilityService.listLast(column.propertyIdentifier, '.'));\n                if (angular.isUndefined(column.isVisible)) {\n                    column.isVisible = true;\n                }\n            }\n            _this.columnOrderBy(listingID, column);\n        };\n        this.initCollectionConfigData = function (listingID, collectionConfig) {\n            //kick off other essential setup\n            _this.setupSelect(listingID);\n            _this.setupMultiselect(listingID);\n            _this.setupExampleEntity(listingID);\n            if (collectionConfig != null) {\n                angular.forEach(_this.getListing(listingID).filterGroups, function (filterGroup) {\n                    collectionConfig.addFilterGroup(filterGroup);\n                });\n                angular.forEach(_this.getListing(listingID).filters, function (filter) {\n                    collectionConfig.addFilter(filter.propertyIdentifier, filter.comparisonValue, filter.comparisonOperator, filter.logicalOperator, filter.hidden);\n                });\n                angular.forEach(_this.getListing(listingID).orderBys, function (orderBy) {\n                    collectionConfig.addOrderBy(orderBy.orderBy);\n                });\n                angular.forEach(_this.getListing(listingID).aggregates, function (aggregate) {\n                    collectionConfig.addDisplayAggregate(aggregate.propertyIdentifier, aggregate.aggregateFunction, aggregate.aggregateAlias);\n                });\n                //make sure we have necessary properties to make the actions\n                angular.forEach(_this.getListing(listingID).actions, function (action) {\n                    if (angular.isDefined(action.queryString)) {\n                        var parsedProperties = _this.utilityService.getPropertiesFromString(action.queryString);\n                        if (parsedProperties && parsedProperties.length) {\n                            collectionConfig.addDisplayProperty(_this.utilityService.arrayToList(parsedProperties), \"\", { isVisible: false });\n                        }\n                    }\n                });\n                //also make sure we have necessary color filter properties\n                angular.forEach(_this.getListing(listingID).colorFilters, function (colorFilter) {\n                    if (angular.isDefined(colorFilter.propertyToCompare)) {\n                        collectionConfig.addDisplayProperty(colorFilter.propertyToCompare, \"\", { isVisible: false });\n                    }\n                });\n                if (_this.getListing(listingID).collectionConfig != null && _this.getListing(listingID).collectionConfig.hasColumns()) {\n                    collectionConfig.addDisplayProperty(_this.getListingExampleEntity(listingID).$$getIDName(), undefined, { isVisible: false });\n                }\n                collectionConfig.setPageShow(_this.getListing(listingID).paginator.pageShow);\n                collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.currentPage);\n                if (_this.getListing(listingID).multiselectable && (!_this.getListing(listingID).columns || !_this.getListing(listingID).columns.length)) {\n                    //check if it has an active flag and if so then add the active flag\n                    if (_this.getListing(listingID).exampleEntity.metaData.activeProperty && !_this.getListing(listingID).hasCollectionPromise) {\n                        collectionConfig.addFilter('activeFlag', 1, '=', undefined, true);\n                    }\n                }\n                _this.setupHierarchicalExpandable(listingID, collectionConfig);\n            }\n            _this.setupSortable(listingID);\n            _this.updateColumnAndAdministrativeCount(listingID);\n        };\n        this.setupSortable = function (listingID) {\n            _this.attachToListingPageRecordsUpdate(listingID, _this.getPageRecordsWithManualSortOrder, _this.utilityService.createID(32));\n        };\n        this.setupSelect = function (listingID) {\n            if (_this.getListing(listingID).selectFieldName && _this.getListing(listingID).selectFieldName.length) {\n                _this.getListing(listingID).selectable = true;\n                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-select', ' ');\n                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-selectfield=\"' + _this.getListing(listingID).selectFieldName + '\"', ' ');\n            }\n        };\n        this.setupMultiselect = function (listingID) {\n            if (_this.getListing(listingID).multiselectFieldName && _this.getListing(listingID).multiselectFieldName.length) {\n                _this.getListing(listingID).multiselectable = true;\n                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-multiselect', ' ');\n                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-multiselectpropertyidentifier=\"' + _this.getListing(listingID).multiselectPropertyIdentifier + '\"', ' ');\n                //attach observer so we know when a selection occurs\n                _this.getListing(listingID).observerService.attach(_this.getListing(listingID).updateMultiselectValues, _this.getListing(listingID).defaultSelectEvent, _this.getListing(listingID).collectionObject);\n                //attach observer so we know when a pagination change occurs\n                _this.getListing(listingID).observerService.attach(_this.getListing(listingID).paginationPageChange, 'swPaginationAction');\n            }\n            if (_this.getListing(listingID).multiselectValues && _this.getListing(listingID).multiselectValues.length) {\n                //select all owned ids\n                var multiSelectValuesArray = _this.getListing(listingID).multiselectValues.split(',');\n                angular.forEach(multiSelectValuesArray, function (value) {\n                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, value);\n                });\n            }\n            if (_this.getListing(listingID).multiselectIdPaths && _this.getListing(listingID).multiselectIdPaths.length) {\n                angular.forEach(_this.getListing(listingID).multiselectIdPaths.split(','), function (value) {\n                    var id = _this.getListing(listingID).utilityService.listLast(value, '/');\n                    _this.getListing(listingID).selectionService.addSelection(_this.getListing(listingID).tableID, id);\n                });\n            }\n        };\n        this.setupExampleEntity = function (listingID) {\n            _this.getListing(listingID).exampleEntity = _this.$hibachi.getEntityExample(_this.getListingBaseEntityName(listingID));\n            if (_this.getListing(listingID).exampleEntity != null) {\n                //Look for Hierarchy in example entity\n                if (!_this.getListing(listingID).parentPropertyName || (_this.getListing(listingID).parentPropertyName && !_this.getListing(listingID).parentPropertyName.length)) {\n                    if (_this.getListing(listingID).exampleEntity.metaData.hb_parentPropertyName) {\n                        _this.getListing(listingID).parentPropertyName = _this.getListing(listingID).exampleEntity.metaData.hb_parentPropertyName;\n                    }\n                }\n                if (!_this.getListing(listingID).childPropertyName || (_this.getListing(listingID).childPropertyName && !_this.getListing(listingID).childPropertyName.length)) {\n                    if (_this.getListing(listingID).exampleEntity.metaData.hb_childPropertyName) {\n                        _this.getListing(listingID).childPropertyName = _this.getListing(listingID).exampleEntity.metaData.hb_childPropertyName;\n                    }\n                }\n            }\n        };\n        this.setupHierarchicalExpandable = function (listingID, collectionConfig) {\n            //Setup Hierachy Expandable\n            if (_this.getListing(listingID).parentPropertyName && _this.getListing(listingID).parentPropertyName.length && _this.getListing(listingID).expandable != false) {\n                if (angular.isUndefined(_this.getListing(listingID).expandable)) {\n                    _this.getListing(listingID).expandable = true;\n                }\n                _this.getListing(listingID).tableclass = _this.utilityService.listAppend(_this.getListing(listingID).tableclass, 'table-expandable', ' ');\n                //add parent property root filter\n                if (!_this.getListing(listingID).hasCollectionPromise) {\n                    collectionConfig.addFilter(_this.getListing(listingID).parentPropertyName + '.' + _this.getListing(listingID).exampleEntity.$$getIDName(), 'NULL', 'IS', undefined, true, false, false);\n                }\n                //this.collectionConfig.addDisplayProperty(this.exampleEntity.$$getIDName()+'Path',undefined,{isVisible:false});\n                //add children column\n                if (_this.getListing(listingID).childPropertyName && _this.getListing(listingID).childPropertyName.length) {\n                    if (_this.getListing(listingID).getChildCount || !_this.getListing(listingID).hasCollectionPromise) {\n                        collectionConfig.addDisplayAggregate(_this.getListing(listingID).childPropertyName, 'COUNT', _this.getListing(listingID).childPropertyName + 'Count', { isVisible: false, isSearchable: false });\n                    }\n                }\n                _this.getListing(listingID).allpropertyidentifiers = _this.utilityService.listAppend(_this.getListing(listingID).allpropertyidentifiers, _this.getListing(listingID).exampleEntity.$$getIDName() + 'Path');\n                _this.getListing(listingID).tableattributes = _this.utilityService.listAppend(_this.getListing(listingID).tableattributes, 'data-parentidproperty=' + _this.getListing(listingID).parentPropertyName + '.' + _this.getListing(listingID).exampleEntity.$$getIDName(), ' ');\n            }\n        };\n        this.updateColumnAndAdministrativeCount = function (listingID) {\n            //Setup a variable for the number of columns so that the none can have a proper colspan\n            _this.getListing(listingID).columnCount = (_this.getListing(listingID).columns) ? _this.getListing(listingID).columns.length : 0;\n            if (_this.getListing(listingID).selectable) {\n                _this.getListing(listingID).columnCount++;\n            }\n            if (_this.getListing(listingID).multiselectable) {\n                _this.getListing(listingID).columnCount++;\n            }\n            if (_this.getListing(listingID).sortable) {\n                _this.getListing(listingID).columnCount++;\n            }\n            if (_this.getListing(listingID).administrativeCount) {\n                _this.getListing(listingID).administrativeCount++;\n            }\n        };\n        this.setupDefaultGetCollection = function (listingID) {\n            if (_this.getListing(listingID).collectionConfigs.length == 0) {\n                if (_this.getListing(listingID).collectionId) {\n                    _this.getListing(listingID).collectionConfig.baseEntityNameType = 'Collection';\n                    _this.getListing(listingID).collectionConfig.id = _this.getListing(listingID).collectionId;\n                }\n                _this.getListing(listingID).collectionPromise = _this.getListing(listingID).collectionConfig.getEntity();\n                return function () {\n                    _this.getListing(listingID).collectionConfig.setCurrentPage(_this.getListing(listingID).paginator.getCurrentPage());\n                    _this.getListing(listingID).collectionConfig.setPageShow(_this.getListing(listingID).paginator.getPageShow());\n                    if (_this.getListing(listingID).multiSlot) {\n                        _this.getListing(listingID).collectionConfig.getEntity().then(function (data) {\n                            _this.getListing(listingID).collectionData = data;\n                            _this.setupDefaultCollectionInfo(listingID);\n                            _this.getListing(listingID).collectionData.pageRecords = data.pageRecords || data.records;\n                            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);\n                        }, function (reason) {\n                            throw (\"Listing Service encounter a problem when trying to get collection. Reason: \" + reason);\n                        });\n                    }\n                    else {\n                        _this.getListing(listingID).collectionPromise.then(function (data) {\n                            _this.getListing(listingID).collectionData = data;\n                            _this.setupDefaultCollectionInfo(listingID);\n                            _this.getListing(listingID).collectionData.pageRecords = data.pageRecords || data.records;\n                            _this.getListing(listingID).paginator.setPageRecordsInfo(_this.getListing(listingID).collectionData);\n                        }, function (reason) {\n                            throw (\"Listing Service encounter a problem when trying to get collection. Reason: \" + reason);\n                        });\n                    }\n                };\n            }\n            else {\n                return function () {\n                    _this.getListing(listingID).collectionData = {};\n                    _this.getListing(listingID).collectionData.pageRecords = [];\n                    var allGetEntityPromises = [];\n                    angular.forEach(_this.getListing(listingID).collectionConfigs, function (collectionConfig, key) {\n                        allGetEntityPromises.push(collectionConfig.getEntity());\n                    });\n                    if (allGetEntityPromises.length) {\n                        _this.$q.all(allGetEntityPromises).then(function (results) {\n                            angular.forEach(results, function (result, key) {\n                                _this.getListing(listingID).listingService.setupColumns(listingID, _this.getListing(listingID).collectionConfigs[key], _this.getListing(listingID).collectionObjects[key]);\n                                _this.getListing(listingID).collectionData.pageRecords = _this.getListing(listingID).collectionData.pageRecords.concat(result.records);\n                            });\n                        }, function (reason) {\n                            throw (\"listing service had trouble getting collection data because: \" + reason);\n                        });\n                    }\n                };\n            }\n        };\n        //End Setup Functions\n        //Order By Functions\n        //for multi order by\n        this.columnOrderBy = function (listingID, column) {\n            var isfound = false;\n            if (_this.getListing(listingID).collectionConfigs != null) {\n                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {\n                    if (column.propertyIdentifier == orderBy.propertyIdentifier) {\n                        isfound = true;\n                        _this.getListing(listingID).orderByStates[column.propertyIdentifier] = orderBy.direction;\n                    }\n                });\n            }\n            if (!isfound) {\n                _this.getListing(listingID).orderByStates[column.propertyIdentifier] = '';\n            }\n            return _this.getListing(listingID).orderByStates[column.propertyIdentifier];\n        };\n        //for multi order by\n        this.columnOrderByIndex = function (listingID, column) {\n            var isfound = false;\n            if (column.sorting && column.sorting.active && column.sorting.sortOrder) {\n                return column.sorting.sortOrder.toUpperCase();\n            }\n            if (_this.getListing(listingID).collectionConfig != null) {\n                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {\n                    if (column.propertyIdentifier == orderBy.propertyIdentifier) {\n                        isfound = true;\n                        _this.getListing(listingID).orderByIndices[column.propertyIdentifier] = index + 1;\n                    }\n                });\n            }\n            if (!isfound) {\n                _this.getListing(listingID).orderByIndices[column.propertyIdentifier] = '';\n            }\n            return _this.getListing(listingID).orderByIndices[column.propertyIdentifier];\n        };\n        //for single column order by\n        this.setSingleColumnOrderBy = function (listingID, propertyIdentifier, direction, notify) {\n            if (notify === void 0) { notify = true; }\n            if (direction.toUpperCase() === \"ASC\") {\n                var oppositeDirection = \"DESC\";\n            }\n            else {\n                var oppositeDirection = \"ASC\";\n            }\n            if (_this.getListing(listingID).collectionConfig != null) {\n                var found = false;\n                angular.forEach(_this.getListing(listingID).collectionConfig.orderBy, function (orderBy, index) {\n                    if (propertyIdentifier == orderBy.propertyIdentifier) {\n                        orderBy.direction = direction;\n                        found = true;\n                    }\n                    else {\n                        orderBy.direction = oppositeDirection;\n                    }\n                });\n                if (!found) {\n                    _this.getListing(listingID).collectionConfig.addOrderBy(propertyIdentifier + \"|\" + direction);\n                }\n                if (notify) {\n                    _this.observerService.notify(_this.getListingOrderByChangedEventString(listingID));\n                }\n                _this.getCollection(listingID);\n            }\n        };\n        //for manual sort\n        this.setManualSort = function (listingID, toggle) {\n            _this.getListing(listingID).sortable = toggle;\n            if (toggle) {\n                _this.setSingleColumnOrderBy(listingID, \"sortOrder\", \"ASC\");\n            }\n        };\n        //for single column order by\n        this.toggleOrderBy = function (listingID, column) {\n            if (_this.getListing(listingID).hasSingleCollectionConfig()) {\n                var orderByPropertyIdentifier = column.propertyIdentifier;\n                if (column.aggregate && column.aggregate.aggregateFunction) {\n                    orderByPropertyIdentifier = column.aggregate.aggregateFunction + '(' + column.propertyIdentifier + ')';\n                }\n                _this.getListing(listingID).collectionConfig.toggleOrderBy(orderByPropertyIdentifier, true);\n            }\n        };\n        //End Order By Functions\n        this.getColorFilterConditionString = function (colorFilter, pageRecord) {\n            if (angular.isDefined(colorFilter.comparisonProperty)) {\n                return pageRecord[colorFilter.propertyToCompare.replace('.', '_')] + colorFilter.comparisonOperator + pageRecord[colorFilter.comparisonProperty.replace('.', '_')];\n            }\n            else {\n                return pageRecord[colorFilter.propertyToCompare.replace('.', '_')] + colorFilter.comparisonOperator + colorFilter.comparisonValue;\n            }\n        };\n        //Disable Row Functions\n        this.getKeyOfMatchedDisableRule = function (listingID, pageRecord) {\n            var disableRuleMatchedKey = -1;\n            if (angular.isDefined(_this.getListing(listingID).disableRules)) {\n                angular.forEach(_this.getListing(listingID).disableRules, function (rule, key) {\n                    if (angular.isDefined(pageRecord[rule.filterPropertyIdentifier])) {\n                        if (angular.isString(pageRecord[rule.filterPropertyIdentifier])) {\n                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier].trim();\n                        }\n                        else {\n                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier];\n                        }\n                        if (rule.filterComparisonValue == \"null\") {\n                            rule.filterComparisonValue = \"\";\n                        }\n                        if (_this.filterService.filterMatch(pageRecordValue, rule.filterComparisonOperator, rule.filterComparisonValue)) {\n                            disableRuleMatchedKey = key;\n                        }\n                        if (disableRuleMatchedKey != -1) {\n                            return disableRuleMatchedKey;\n                        }\n                    }\n                });\n            }\n            return disableRuleMatchedKey;\n        };\n        this.getPageRecordMatchesDisableRule = function (listingID, pageRecord) {\n            return _this.getKeyOfMatchedDisableRule(listingID, pageRecord) != -1;\n        };\n        //End disable rule functions\n        //Expandable Functions\n        this.setExpandable = function (listingID, value) {\n            if (angular.isDefined(_this.getListing(listingID))) {\n                _this.getListing(listingID).expandable = value;\n            }\n        };\n        this.getKeyOfMatchedExpandableRule = function (listingID, pageRecord) {\n            var expandableRuleMatchedKey = -1;\n            if (angular.isDefined(_this.getListing(listingID)) &&\n                angular.isDefined(_this.getListing(listingID).expandableRules)) {\n                angular.forEach(_this.getListing(listingID).expandableRules, function (rule, key) {\n                    if (angular.isDefined(pageRecord[rule.filterPropertyIdentifier])) {\n                        if (angular.isString(pageRecord[rule.filterPropertyIdentifier])) {\n                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier].trim();\n                        }\n                        else {\n                            var pageRecordValue = pageRecord[rule.filterPropertyIdentifier];\n                        }\n                        if (_this.filterService.filterMatch(pageRecordValue, rule.filterComparisonOperator, rule.filterComparisonValue)) {\n                            expandableRuleMatchedKey = key;\n                        }\n                        if (expandableRuleMatchedKey != -1) {\n                            return expandableRuleMatchedKey;\n                        }\n                    }\n                });\n            }\n            return expandableRuleMatchedKey;\n        };\n        this.getExampleEntityForExpandableRecord = function (listingID, pageRecord) {\n            var childCollectionConfig = _this.getListing(listingID).getPageRecordChildCollectionConfigForExpandableRule(pageRecord);\n            if (angular.isDefined(childCollectionConfig)) {\n                return _this.$hibachi.getEntityExample(_this.getListing(listingID).getPageRecordChildCollectionConfigForExpandableRule(pageRecord).baseEntityName);\n            }\n            return _this.getListing(listingID).exampleEntity;\n        };\n        this.getPageRecordMatchesExpandableRule = function (listingID, pageRecord) {\n            return _this.getKeyOfMatchedExpandableRule(listingID, pageRecord) != -1;\n        };\n        this.hasPageRecordRefreshChildrenEvent = function (listingID, pageRecord) {\n            return _this.getPageRecordRefreshChildrenEvent(listingID, pageRecord) != null;\n        };\n        this.getPageRecordRefreshChildrenEvent = function (listingID, pageRecord) {\n            var keyOfExpandableRuleMet = _this.getKeyOfMatchedExpandableRule(listingID, pageRecord);\n            if (keyOfExpandableRuleMet != -1) {\n                return _this.getListing(listingID).expandableRules[keyOfExpandableRuleMet].refreshChildrenEvent;\n            }\n        };\n        this.getPageRecordChildCollectionConfigForExpandableRule = function (listingID, pageRecord) {\n            var keyOfExpandableRuleMet = _this.getKeyOfMatchedExpandableRule(listingID, pageRecord);\n            if (_this.getListing(listingID) != null &&\n                angular.isFunction(_this.getListing(listingID).exampleEntity.$$getIDName) &&\n                angular.isDefined(pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]) &&\n                angular.isDefined(_this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]])) {\n                return _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]];\n            }\n            if (keyOfExpandableRuleMet != -1) {\n                var childCollectionConfig = _this.getListing(listingID).expandableRules[keyOfExpandableRuleMet].childrenCollectionConfig.clone();\n                angular.forEach(childCollectionConfig.filterGroups[0], function (filterGroup, key) {\n                    angular.forEach(filterGroup, function (filter, key) {\n                        if (angular.isString(filter.value)\n                            && filter.value.length\n                            && filter.value.charAt(0) == '$') {\n                            filter.value = _this.utilityService.replaceStringWithProperties(filter.value, pageRecord);\n                        }\n                    });\n                });\n                _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]] = childCollectionConfig;\n                return _this.getListing(listingID).childCollectionConfigs[pageRecord[_this.getListing(listingID).exampleEntity.$$getIDName()]];\n            }\n        };\n        //End Expandable Functions\n        //Begin Personal Collections Functions\n        this.hasPersonalCollectionSelected = function (baseEntityName) {\n            return _this.localStorageService.hasItem('selectedPersonalCollection')\n                && _this.localStorageService.getItem('selectedPersonalCollection')[baseEntityName.toLowerCase()];\n        };\n        this.getPersonalCollectionByBaseEntityName = function (baseEntityName) {\n            var personalCollection = _this.collectionConfigService.newCollectionConfig('Collection');\n            personalCollection.setDisplayProperties('collectionConfig');\n            personalCollection.addFilter('collectionID', _this.localStorageService.getItem('selectedPersonalCollection')[baseEntityName.toLowerCase()].collectionID);\n            return personalCollection;\n        };\n        //Setup a store so that controllers can listing for state changes and fire action requests.\n        //To create a store, we instantiate it using the object that holds the state variables,\n        //and the reducer. We can also add a middleware to the end if you need.\n        this.listingDisplayStore = new Store.IStore(this.state, this.listingDisplayStateReducer);\n    }\n    return ListingService;\n}());\nexports.ListingService = ListingService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/listing/services/listingservice.ts?")},"../../../org/Hibachi/client/src/pagination/components/swpaginationbar.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/pagination/components/swpaginationbar.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//import pagination = require('../services/paginationservice');\n//var PaginationService = pagination.PaginationService;\n//'use strict';\nvar SWPaginationBarController = /** @class */ (function () {\n    //@ngInject\n    function SWPaginationBarController(paginationService) {\n        this.paginationService = paginationService;\n        if (angular.isUndefined(this.paginator)) {\n            this.paginator = paginationService.createPagination();\n        }\n    }\n    return SWPaginationBarController;\n}());\nexports.SWPaginationBarController = SWPaginationBarController;\nvar SWPaginationBar = /** @class */ (function () {\n    //@ngInject\n    function SWPaginationBar(hibachiPathBuilder, partialsPath) {\n        this.restrict = 'E';\n        this.scope = {};\n        this.bindToController = {\n            paginator: \"=?\"\n        };\n        this.controller = SWPaginationBarController;\n        this.controllerAs = \"swPaginationBar\";\n        this.link = function (scope, element, attrs) { };\n        this.templateUrl = hibachiPathBuilder.buildPartialsPath(partialsPath) + 'paginationbar.html';\n    }\n    SWPaginationBar.Factory = function () {\n        var directive = function (hibachiPathBuilder, partialsPath) { return new SWPaginationBar(hibachiPathBuilder, partialsPath); };\n        directive.$inject = ['hibachiPathBuilder', 'partialsPath'];\n        return directive;\n    };\n    return SWPaginationBar;\n}());\nexports.SWPaginationBar = SWPaginationBar;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/pagination/components/swpaginationbar.ts?")},"../../../org/Hibachi/client/src/pagination/pagination.module.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/pagination/pagination.module.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../typings/tsd.d.ts\" />\n/// <reference path=\"../../typings/hibachiTypescript.d.ts\" />\n//services\nvar paginationservice_1 = __webpack_require__(/*! ./services/paginationservice */ \"../../../org/Hibachi/client/src/pagination/services/paginationservice.ts\");\nvar swpaginationbar_1 = __webpack_require__(/*! ./components/swpaginationbar */ \"../../../org/Hibachi/client/src/pagination/components/swpaginationbar.ts\");\nvar core_module_1 = __webpack_require__(/*! ../core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\nvar paginationmodule = angular.module('hibachi.pagination', [core_module_1.coremodule.name])\n    // .config(['$provide','baseURL',($provide,baseURL)=>{\n    // \t$provide.constant('paginationPartials', baseURL+basePartialsPath+'pagination/components/');\n    // }])\n    .run([function () {\n    }])\n    //services\n    .service('paginationService', paginationservice_1.PaginationService)\n    .directive('swPaginationBar', swpaginationbar_1.SWPaginationBar.Factory())\n    //constants\n    .constant('partialsPath', 'pagination/components/');\nexports.paginationmodule = paginationmodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/pagination/pagination.module.ts?")},"../../../org/Hibachi/client/src/pagination/services/paginationservice.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/pagination/services/paginationservice.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path=\"../../../typings/tsd.d.ts\" />\n/// <reference path=\"../../../typings/hibachiTypescript.d.ts\" />\n/*collection service is used to maintain the state of the ui*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Pagination = /** @class */ (function () {\n    //@ngInject\n    function Pagination(observerService, uuid) {\n        var _this = this;\n        this.observerService = observerService;\n        this.uuid = uuid;\n        this.pageShow = 10;\n        this.currentPage = 1;\n        this.pageStart = 0;\n        this.pageEnd = 0;\n        this.recordsCount = 0;\n        this.totalPages = 0;\n        this.pageShowOptions = [\n            { display: 10, value: 10 },\n            { display: 20, value: 20 },\n            { display: 50, value: 50 },\n            { display: 250, value: 250 },\n            { display: \"Auto\", value: \"Auto\" }\n        ];\n        this.autoScrollPage = 1;\n        this.autoScrollDisabled = false;\n        this.notifyById = true;\n        this.getSelectedPageShowOption = function () {\n            return _this.selectedPageShowOption;\n        };\n        this.pageShowOptionChanged = function (pageShowOption) {\n            _this.setPageShow(pageShowOption.value);\n            _this.currentPage = 1;\n            _this.notify('swPaginationAction', { type: 'setPageShow', payload: _this.getPageShow() });\n        };\n        this.getTotalPages = function () {\n            return _this.totalPages;\n        };\n        this.setTotalPages = function (totalPages) {\n            _this.totalPages = totalPages;\n        };\n        this.getPageStart = function () {\n            return _this.pageStart;\n        };\n        this.setPageStart = function (pageStart) {\n            _this.pageStart = pageStart;\n        };\n        this.getPageEnd = function () {\n            return _this.pageEnd;\n        };\n        this.setPageEnd = function (pageEnd) {\n            _this.pageEnd = pageEnd;\n        };\n        this.getRecordsCount = function () {\n            return _this.recordsCount;\n        };\n        this.setRecordsCount = function (recordsCount) {\n            _this.recordsCount = recordsCount;\n        };\n        this.getPageShowOptions = function () {\n            return _this.pageShowOptions;\n        };\n        this.setPageShowOptions = function (pageShowOptions) {\n            _this.pageShowOptions = pageShowOptions;\n        };\n        this.getPageShow = function () {\n            return _this.pageShow;\n        };\n        this.setPageShow = function (pageShow) {\n            _this.pageShow = pageShow;\n        };\n        this.getCurrentPage = function () {\n            return _this.currentPage;\n        };\n        this.setCurrentPage = function (currentPage) {\n            _this.currentPage = currentPage;\n            //this.observerService.notifyById('swPaginationAction', this.uuid,{action:'pageChange', currentPage});\n            _this.notify('swPaginationAction', { type: 'setCurrentPage', payload: _this.getCurrentPage() });\n        };\n        this.previousPage = function () {\n            if (_this.getCurrentPage() == 1)\n                return;\n            _this.setCurrentPage(_this.getCurrentPage() - 1);\n        };\n        this.nextPage = function () {\n            if (_this.getCurrentPage() < _this.getTotalPages()) {\n                _this.setCurrentPage(_this.getCurrentPage() + 1);\n                _this.notify('swPaginationAction', { type: 'nextPage', payload: _this.getCurrentPage() });\n            }\n        };\n        this.hasPrevious = function () {\n            return (_this.getPageStart() <= 1);\n        };\n        this.hasNext = function () {\n            return (_this.getPageEnd() === _this.getRecordsCount());\n        };\n        this.showPreviousJump = function () {\n            return (angular.isDefined(_this.getCurrentPage()) && _this.getCurrentPage() > 3);\n        };\n        this.showNextJump = function () {\n            return !!(_this.getCurrentPage() < _this.getTotalPages() - 3 && _this.getTotalPages() > 6);\n        };\n        this.previousJump = function () {\n            _this.setCurrentPage(_this.currentPage - 3);\n        };\n        this.nextJump = function () {\n            _this.setCurrentPage(_this.getCurrentPage() + 3);\n        };\n        this.showPageNumber = function (pageNumber) {\n            if (_this.getCurrentPage() >= _this.getTotalPages() - 3) {\n                if (pageNumber > _this.getTotalPages() - 6) {\n                    return true;\n                }\n            }\n            if (_this.getCurrentPage() <= 3) {\n                if (pageNumber < 6) {\n                    return true;\n                }\n            }\n            else {\n                var bottomRange = _this.getCurrentPage() - 2;\n                var topRange = _this.getCurrentPage() + 2;\n                if (pageNumber > bottomRange && pageNumber < topRange) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        this.setPageRecordsInfo = function (collection) {\n            _this.setRecordsCount(collection.recordsCount);\n            if (_this.getRecordsCount() === 0) {\n                _this.setPageStart(0);\n            }\n            else {\n                _this.setPageStart(collection.pageRecordsStart);\n            }\n            _this.setPageEnd(collection.pageRecordsEnd);\n            _this.setTotalPages(collection.totalPages);\n            _this.totalPagesArray = [];\n            if (angular.isUndefined(_this.getCurrentPage()) || _this.getCurrentPage() < 5) {\n                var start = 1;\n                var end = (_this.getTotalPages() <= 10) ? _this.getTotalPages() + 1 : 10;\n            }\n            else {\n                var start = (!_this.showNextJump()) ? _this.getTotalPages() - 4 : _this.getCurrentPage() - 3;\n                var end = (_this.showNextJump()) ? _this.getCurrentPage() + 5 : _this.getTotalPages() + 1;\n            }\n            for (var i = start; i < end; i++) {\n                _this.totalPagesArray.push(i);\n            }\n        };\n        this.uuid = uuid;\n        this.selectedPageShowOption = this.pageShowOptions[0];\n        this.observerService.attach(this.setPageRecordsInfo, 'swPaginationUpdate', this.uuid);\n    }\n    Pagination.prototype.notify = function (event, parameters) {\n        if (this.notifyById === true) {\n            this.observerService.notifyById(event, this.uuid, parameters);\n        }\n        else {\n            this.observerService.notify(event, parameters);\n        }\n    };\n    return Pagination;\n}());\nexports.Pagination = Pagination;\nvar PaginationService = /** @class */ (function () {\n    //@ngInject\n    function PaginationService(utilityService, observerService) {\n        var _this = this;\n        this.utilityService = utilityService;\n        this.observerService = observerService;\n        this.paginations = {};\n        this.createPagination = function (id) {\n            var uuid = _this.utilityService.createID(10);\n            if (angular.isDefined(id)) {\n                uuid = id;\n            }\n            _this.paginations[uuid] = new Pagination(_this.observerService, uuid);\n            return _this.paginations[uuid];\n        };\n        this.getPagination = function (uuid) {\n            if (!uuid)\n                return;\n            return _this.paginations[uuid];\n        };\n    }\n    return PaginationService;\n}());\nexports.PaginationService = PaginationService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/pagination/services/paginationservice.ts?")},"../../../org/Hibachi/client/src/validation/components/swvalidate.ts":
/*!************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidate.ts ***!
  \************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\n/**\n * This validate directive will look at the current element, figure out the context (save, edit, delete) and\n * validate based on that context as defined in the validation properties object.\n */\n// \'use strict\';\n// angular.module(\'slatwalladmin\').directive(\'swValidate\',\nObject.defineProperty(exports, "__esModule", { value: true });\n// [ \'$log\',\'$hibachi\', function($log, $hibachi) {\nvar SWValidate = /** @class */ (function () {\n    function SWValidate($log, $hibachi) {\n        return {\n            restrict: "A",\n            require: \'^ngModel\',\n            link: function (scope, elem, attr, ngModel) {\n                //Define our contexts and validation property enums.\n                var ContextsEnum = {\n                    SAVE: { name: "save", value: 0 },\n                    DELETE: { name: "delete", value: 1 },\n                    EDIT: { name: "edit", value: 2 }\n                };\n                var ValidationPropertiesEnum = {\n                    REGEX: { name: "regex", value: 0 },\n                    MIN_VALUE: { name: "minValue", value: 1 },\n                    MAX_VALUE: { name: "maxValue", value: 2 },\n                    EQ: { name: "eq", value: 3 },\n                    NEQ: { name: "neq", value: 4 },\n                    UNIQUE: { name: "unique", value: 5 },\n                    LTE: { name: "lte", value: 6 },\n                    GTE: { name: "gte", value: 7 },\n                    MIN_LENGTH: { name: "minLength", value: 8 },\n                    MAX_LENGTH: { name: "maxLength", value: 9 },\n                    DATA_TYPE: { name: "dataType", value: 10 },\n                    REQUIRED: { name: "required", value: 11 }\n                };\n                scope.validationPropertiesEnum = ValidationPropertiesEnum;\n                scope.contextsEnum = ContextsEnum;\n                var myCurrentContext = scope.contextsEnum.SAVE; //We are only checking the save context right now.\n                var contextNamesArray = getNamesFromObject(ContextsEnum); //Convert for higher order functions.\n                var validationPropertiesArray = getNamesFromObject(ValidationPropertiesEnum); //Convert for higher order functions.\n                var validationObject = scope.propertyDisplay.object.validations.properties; //Get the scope validation object.\n                var errors = scope.propertyDisplay.errors;\n                var errorMessages = [];\n                var failFlag = 0;\n                /**\n                * Iterates over the validation object looking for the current elements validations, maps that to a validation function list\n                * and calls those validate functions. When a validation fails, an error is set, the elements border turns red.\n                */\n                function validate(name, context, elementValue) {\n                    var validationResults = {};\n                    validationResults = { "name": "name", "context": "context", "required": "required", "error": "none", "errorkey": "none" };\n                    for (var key in validationObject) {\n                        // Look for the current attribute in the\n                        // validation parameters.\n                        if (key === name || key === name + "Flag") {\n                            // Now that we have found the current\n                            // validation parameters, iterate\n                            // through them looking for\n                            // the required parameters that match\n                            // the current page context (save,\n                            // delete, etc.)\n                            for (var inner in validationObject[key]) {\n                                var required = validationObject[key][inner].required || "false"; // Get\n                                // the\n                                // required\n                                // value\n                                var context = validationObject[key][inner].contexts || "none"; // Get\n                                // the\n                                // element\n                                // context\n                                //Setup the validation results object to pass back to caller.\n                                validationResults = { "name": key, "context": context, "required": required, "error": "none", "errorkey": "none" };\n                                var elementValidationArr = map(checkHasValidationType, validationPropertiesArray, validationObject[key][inner]);\n                                //Iterate over the array and call the validate function if it has that property.\n                                for (var i = 0; i < elementValidationArr.length; i++) {\n                                    if (elementValidationArr[i] == true) {\n                                        if (validationPropertiesArray[i] === "regex" && elementValue !== "") { //If element is zero, need to check required \n                                            //Get the regex string to match and send to validation function.\n                                            var re = validationObject[key][inner].regex;\n                                            var result = validate_RegExp(elementValue, re); //true if pattern match, fail otherwise.\n                                            if (result != true) {\n                                                errorMessages\n                                                    .push("Invalid input");\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["REGEX"].name;\n                                                validationResults.fail = true;\n                                            }\n                                            else {\n                                                errorMessages\n                                                    .push("Valid input");\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["REGEX"].name;\n                                                validationResults.fail = false;\n                                            }\n                                            return validationResults;\n                                        }\n                                        if (validationPropertiesArray[i] === "minValue") {\n                                            var validationMinValue = validationObject[key][inner].minValue;\n                                            $log.debug(validationMinValue);\n                                            var result = validate_MinValue(elementValue, validationMinValue);\n                                            $log.debug("e>v" + result + " :" + elementValue, ":" + validationMinValue);\n                                            if (result != true) {\n                                                errorMessages\n                                                    .push("Minimum value is: "\n                                                    + validationMinValue);\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_VALUE"].name;\n                                                validationResults.fail = true;\n                                            }\n                                            else {\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_VALUE"].name;\n                                                validationResults.fail = false;\n                                            }\n                                            return validationResults;\n                                        }\n                                        if (validationPropertiesArray[i] === "maxValue") {\n                                            var validationMaxValue = validationObject[key][inner].maxValue;\n                                            var result = validate_MaxValue(elementValue, validationMaxValue);\n                                            $log.debug("Max Value result is: " + result);\n                                            if (result != true) {\n                                                errorMessages\n                                                    .push("Maximum value is: "\n                                                    + validationMaxValue);\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MAX_VALUE"].name;\n                                                validationResults.fail = true;\n                                            }\n                                            return validationResults;\n                                        }\n                                        if (validationPropertiesArray[i] === "minLength") {\n                                            var validationMinLength = validationObject[key][inner].minLength;\n                                            var result = validate_MinLength(elementValue, validationMinLength);\n                                            $log.debug("Min Length result is: " + result);\n                                            if (result != true) {\n                                                errorMessages\n                                                    .push("Minimum length must be: "\n                                                    + validationMinLength);\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MIN_LENGTH"].name;\n                                                validationResults.fail = true;\n                                            }\n                                            return validationResults;\n                                        }\n                                        if (validationPropertiesArray[i] === "maxLength") {\n                                            var validationMaxLength = validationObject[key][inner].maxLength;\n                                            var result = validate_MaxLength(elementValue, validationMaxLength);\n                                            $log.debug("Max Length result is: " + result);\n                                            if (result != true) {\n                                                errorMessages\n                                                    .push("Maximum length is: "\n                                                    + validationMaxLength);\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["MAX_LENGTH"].name;\n                                                validationResults.fail = true;\n                                            }\n                                            return validationResults;\n                                        }\n                                        if (validationPropertiesArray[i] === "eq") {\n                                            var validationEq = validationObject[key][inner].eq;\n                                            var result = validate_Eq(elementValue, validationEq);\n                                            if (result != true) {\n                                                errorMessages\n                                                    .push("Must equal "\n                                                    + validationEq);\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["EQ"].name;\n                                                validationResults.fail = true;\n                                            }\n                                            return validationResults;\n                                        }\n                                        if (validationPropertiesArray[i] === "neq") {\n                                            var validationNeq = validationObject[key][inner].neq;\n                                            var result = validate_Neq(elementValue, validationNeq);\n                                            if (result != true) {\n                                                errorMessages\n                                                    .push("Must not equal: "\n                                                    + validationNeq);\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["NEQ"].name;\n                                                validationResults.fail = true;\n                                            }\n                                            return validationResults;\n                                        }\n                                        if (validationPropertiesArray[i] === "lte") {\n                                            var validationLte = validationObject[key][inner].lte;\n                                            var result = validate_Lte(elementValue, validationLte);\n                                            if (result != true) {\n                                                errorMessages\n                                                    .push("Must be less than "\n                                                    + validationLte);\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["LTE"].name;\n                                                validationResults.fail = true;\n                                            }\n                                            return validationResults;\n                                        }\n                                        if (validationPropertiesArray[i] === "gte") {\n                                            var validationGte = validationObject[key][inner].gte;\n                                            var result = validate_Gte(elementValue, validationGte);\n                                            if (result != true) {\n                                                errorMessages\n                                                    .push("Must be greater than: "\n                                                    + validationGte);\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = "invalid-" + ValidationPropertiesEnum["GTE"].name;\n                                                validationResults.fail = true;\n                                            }\n                                            return validationResults;\n                                        }\n                                        if (validationPropertiesArray[i] === "required") {\n                                            var validationRequire = validationObject[key][inner].require;\n                                            var result = validate_Required(elementValue, validationRequire);\n                                            if (result != true) {\n                                                errorMessages\n                                                    .push("Required");\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = ValidationPropertiesEnum["REQUIRED"].name;\n                                                validationResults.fail = true;\n                                            }\n                                            else {\n                                                errorMessages\n                                                    .push("Required");\n                                                validationResults.error = errorMessages[errorMessages.length - 1];\n                                                validationResults.errorkey = ValidationPropertiesEnum["REQUIRED"].name;\n                                                validationResults.fail = false;\n                                            }\n                                            return validationResults;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } //<---end validate.\t\t\t\n                }\n                /**\n                * Function to map if we need a validation on this element.\n                */\n                function checkHasValidationType(validationProp, validationType) {\n                    if (validationProp[validationType] != undefined) {\n                        return true;\n                    }\n                    else {\n                        return false;\n                    }\n                }\n                /**\n                * Iterates over the properties object finding which types of validation are needed.\n                */\n                function map(func, array, obj) {\n                    var result = [];\n                    forEach(array, function (element) {\n                        result.push(func(obj, element));\n                    });\n                    return result;\n                }\n                /**\n                * Array iteration helper.\n                */\n                function forEach(array, action) {\n                    for (var i = 0; i < array.length; i++)\n                        action(array[i]);\n                }\n                /**\n                * Helper function to read all the names in our enums into an array that the higher order functions can use.\n                */\n                function getNamesFromObject(obj) {\n                    var result = [];\n                    for (var i in obj) {\n                        var name = obj[i].name || "stub";\n                        result.push(name);\n                    }\n                    return result;\n                }\n                /**\n                * Tests the value for a RegExp match given by the pattern string.\n                * Validates true if pattern match, false otherwise.\n                */\n                function validate_RegExp(value, pattern) {\n                    var regex = new RegExp(pattern);\n                    if (regex.test(value)) {\n                        return true;\n                    }\n                    return false;\n                }\n                /**\n                * Validates true if userValue >= minValue (inclusive)\n                */\n                function validate_MinValue(userValue, minValue) {\n                    return (userValue >= minValue);\n                }\n                /**\n                * Validates true if userValue <= maxValue (inclusive)\n                */\n                function validate_MaxValue(userValue, maxValue) {\n                    return (userValue <= maxValue) ? true : false;\n                }\n                /**\n                * Validates true if length of the userValue >= minLength (inclusive)\n                */\n                function validate_MinLength(userValue, minLength) {\n                    return (userValue.length >= minLength) ? true : false;\n                }\n                /**\n                * Validates true if length of the userValue <= maxLength (inclusive)\n                */\n                function validate_MaxLength(userValue, maxLength) {\n                    return (userValue.length <= maxLength) ? true : false;\n                }\n                /**\n                * Validates true if the userValue == eqValue\n                */\n                function validate_Eq(userValue, eqValue) {\n                    return (userValue == eqValue) ? true : false;\n                }\n                /**\n                * Validates true if the userValue != neqValue\n                */\n                function validate_Neq(userValue, neqValue) {\n                    return (userValue != neqValue) ? true : false;\n                }\n                /**\n                * Validates true if the userValue < decisionValue (exclusive)\n                */\n                function validate_Lte(userValue, decisionValue) {\n                    return (userValue < decisionValue) ? true : false;\n                }\n                /**\n                * Validates true if the userValue > decisionValue (exclusive)\n                */\n                function validate_Gte(userValue, decisionValue) {\n                    return (userValue > decisionValue) ? true : false;\n                }\n                /**\n                * Validates true if the userValue === property\n                */\n                function validate_EqProperty(userValue, property) {\n                    return (userValue === property) ? true : false;\n                }\n                /**\n                * Validates true if the given value is !NaN (Negate, Not a Number).\n                */\n                function validate_IsNumeric(value) {\n                    return !isNaN(value) ? true : false;\n                }\n                /**\n                * Validates true if the given userValue is empty and the field is required.\n                */\n                function validate_Required(property, userValue) {\n                    return (userValue == "" && property == true) ? true : false;\n                }\n                /**\n                * Handles the \'eager\' validation on every key press.\n                */\n                ngModel.$parsers.unshift(function (value) {\n                    var name = elem.context.name; //Get the element name for the validate function.\n                    var currentValue = elem.val(); //Get the current element value to check validations against.\n                    var val = validate(name, myCurrentContext, currentValue) || {};\n                    //Check if field is required.\t\t\t\t\n                    $log.debug(scope);\n                    $log.debug(val);\n                    ngModel.$setValidity(val.errorkey, !val.fail);\n                    return true;\n                }); //<---end $parsers\n                /**\n                * This handles \'lazy\' validation on blur.\n                */\n                elem.bind(\'blur\', function (e) {\n                });\n            }\n        };\n    }\n    SWValidate.Factory = function () {\n        var directive = function ($log, $hibachi) { return new SWValidate($log, $hibachi); };\n        directive.$inject = [\'$log\', \'$hibachi\'];\n        return directive;\n    };\n    return SWValidate;\n}());\nexports.SWValidate = SWValidate;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidate.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationdatatype.ts":
/*!**********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationdatatype.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationDataType = /** @class */ (function () {\n    //@ngInject\n    function SWValidationDataType(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                var isValidFunction = function (modelValue) {\n                    return validationService.validateDataType(modelValue, attributes.swvalidationdatatype);\n                };\n                ngModel.$validators.swvalidationdatatype = isValidFunction;\n                ngModel.$validators[\'swvalidation\' + attributes.swvalidationdatatype] = isValidFunction;\n            }\n        };\n    }\n    SWValidationDataType.Factory = function () {\n        var directive = function (validationService) { return new SWValidationDataType(validationService); };\n        directive.$inject = [\'validationService\'];\n        return directive;\n    };\n    return SWValidationDataType;\n}());\nexports.SWValidationDataType = SWValidationDataType;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationdatatype.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationeq.ts":
/*!****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationeq.ts ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationEq = /** @class */ (function () {\n    //@ngInject\n    function SWValidationEq(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationeq =\n                    function (modelValue, viewValue) {\n                        return validationService.validateEq(modelValue, attributes.swvalidationeq);\n                    }; //<--end function\n            } //<--end link\n        };\n    }\n    SWValidationEq.Factory = function () {\n        var directive = function (validationService) { return new SWValidationEq(validationService); };\n        directive.$inject = [\n            \'validationService\'\n        ];\n        return directive;\n    };\n    return SWValidationEq;\n}());\nexports.SWValidationEq = SWValidationEq;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationeq.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationeqproperty.ts":
/*!************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationeqproperty.ts ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\n/**\n * SWValidationEqProperty: Validates true if the user value == another field's value.\n * @usage <input type='text' swvalidationgte='nameOfAnotherInput' /> will validate false if the user enters\n * value other than 5.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWValidationEqPropertyController = /** @class */ (function () {\n    function SWValidationEqPropertyController($rootScope, validationService, $scope) {\n        var _this = this;\n        this.$rootScope = $rootScope;\n        this.validationService = validationService;\n        this.$scope = $scope;\n        this.$onChanges = function (changes) {\n            if (_this.$scope.ngModel && _this.$scope.ngModel.$validators && changes.swvalidationeqproperty) {\n                _this.$scope.ngModel.$validators.swvalidationeqproperty = function (modelValue, viewValue) {\n                    var confirmValue;\n                    if (changes.swvalidationeqproperty) {\n                        confirmValue = changes.swvalidationeqproperty.currentValue;\n                    }\n                    return confirmValue === modelValue;\n                };\n            }\n            if (_this.$scope.ngModel) {\n                _this.$scope.ngModel.$validate();\n            }\n        };\n    }\n    return SWValidationEqPropertyController;\n}());\nvar SWValidationEqProperty = /** @class */ (function () {\n    //@ngInject\n    function SWValidationEqProperty($rootScope, validationService, observerService) {\n        return {\n            controller: SWValidationEqPropertyController,\n            controllerAs: \"swValidationEqProperty\",\n            restrict: \"A\",\n            require: \"^ngModel\",\n            scope: {},\n            bindToController: {\n                swvalidationeqproperty: \"<\"\n            },\n            link: function (scope, element, attributes, ngModel) {\n                scope.ngModel = ngModel;\n            }\n        };\n    }\n    SWValidationEqProperty.Factory = function () {\n        var directive = function ($rootScope, validationService, observerService) { return new SWValidationEqProperty($rootScope, validationService, observerService); };\n        directive.$inject = ['$rootScope', 'validationService', 'observerService'];\n        return directive;\n    };\n    return SWValidationEqProperty;\n}());\nexports.SWValidationEqProperty = SWValidationEqProperty;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationeqproperty.ts?")},"../../../org/Hibachi/client/src/validation/components/swvalidationgte.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationgte.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationGte = /** @class */ (function () {\n    function SWValidationGte(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationGte =\n                    function (modelValue, viewValue) {\n                        return validationService.validateGte(modelValue, attributes.swvalidationGte);\n                    }; //<--end function\n            } //<--end link\n        };\n    }\n    SWValidationGte.Factory = function () {\n        var directive = function (validationService) { return new SWValidationGte(validationService); };\n        directive.$inject = [\'validationService\'];\n        return directive;\n    };\n    return SWValidationGte;\n}());\nexports.SWValidationGte = SWValidationGte;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationgte.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationlte.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationlte.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationLte = /** @class */ (function () {\n    function SWValidationLte(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationlte =\n                    function (modelValue, viewValue) {\n                        return validationService.validateLte(modelValue, attributes.swvalidationlte);\n                    };\n            }\n        };\n    }\n    SWValidationLte.Factory = function () {\n        var directive = function (validationService) { return new SWValidationLte(validationService); };\n        directive.$inject = [\'validationService\'];\n        return directive;\n    };\n    return SWValidationLte;\n}());\nexports.SWValidationLte = SWValidationLte;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationlte.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationmaxlength.ts":
/*!***********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationmaxlength.ts ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationMaxLength = /** @class */ (function () {\n    function SWValidationMaxLength(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationmaxlength =\n                    function (modelValue, viewValue) {\n                        var length = 0;\n                        if (viewValue && viewValue.length) {\n                            length = viewValue.length;\n                        }\n                        return validationService.validateMaxLength(length || 0, attributes.swvalidationmaxlength);\n                    };\n            }\n        };\n    }\n    SWValidationMaxLength.Factory = function () {\n        var directive = function (validationService) { return new SWValidationMaxLength(validationService); };\n        directive.$inject = [\'validationService\'];\n        return directive;\n    };\n    return SWValidationMaxLength;\n}());\nexports.SWValidationMaxLength = SWValidationMaxLength;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationmaxlength.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationmaxvalue.ts":
/*!**********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationmaxvalue.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationMaxValue = /** @class */ (function () {\n    function SWValidationMaxValue(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationmaxvalue =\n                    function (modelValue, viewValue) {\n                        if (viewValue == null) {\n                            return true;\n                        }\n                        validationService.validateMaxValue(viewValue, attributes.swvalidationmaxvalue);\n                    };\n            }\n        };\n    }\n    SWValidationMaxValue.Factory = function () {\n        var directive = function (validationService) { return new SWValidationMaxValue(validationService); };\n        directive.$inject = [\'validationService\'];\n        return directive;\n    };\n    return SWValidationMaxValue;\n}());\nexports.SWValidationMaxValue = SWValidationMaxValue;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationmaxvalue.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationminlength.ts":
/*!***********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationminlength.ts ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationMinLength = /** @class */ (function () {\n    function SWValidationMinLength($log, validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationminlength =\n                    function (modelValue, viewValue) {\n                        var length = 0;\n                        if (viewValue && viewValue.length) {\n                            length = viewValue.length;\n                        }\n                        return validationService.validateMinLength(length || 0, attributes.swvalidationminlength);\n                    };\n            }\n        };\n    }\n    SWValidationMinLength.Factory = function () {\n        var directive = function ($log, validationService) { return new SWValidationMinLength($log, validationService); };\n        directive.$inject = [\'$log\', \'validationService\'];\n        return directive;\n    };\n    return SWValidationMinLength;\n}());\nexports.SWValidationMinLength = SWValidationMinLength;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationminlength.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationminvalue.ts":
/*!**********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationminvalue.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationMinValue = /** @class */ (function () {\n    function SWValidationMinValue(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationminvalue =\n                    function (modelValue, viewValue) {\n                        if (viewValue == null) {\n                            return true;\n                        }\n                        return validationService.validateMinValue(viewValue, attributes.swvalidationminvalue);\n                    };\n            }\n        };\n    }\n    SWValidationMinValue.Factory = function () {\n        var directive = function (validationService) { return new SWValidationMinValue(validationService); };\n        directive.$inject = [\'validationService\'];\n        return directive;\n    };\n    return SWValidationMinValue;\n}());\nexports.SWValidationMinValue = SWValidationMinValue;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationminvalue.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationneq.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationneq.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationNeq = /** @class */ (function () {\n    function SWValidationNeq(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationneq =\n                    function (modelValue) {\n                        return validationService.validateNeq(modelValue, attributes.swvalidationneq);\n                    };\n            }\n        };\n    }\n    SWValidationNeq.Factory = function () {\n        var directive = function (validationService) { return new SWValidationNeq(validationService); };\n        directive.$inject = [\'validationService\'];\n        return directive;\n    };\n    return SWValidationNeq;\n}());\nexports.SWValidationNeq = SWValidationNeq;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationneq.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationnumeric.ts":
/*!*********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationnumeric.ts ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationNumeric = /** @class */ (function () {\n    function SWValidationNumeric(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationnumeric =\n                    function (modelValue, viewValue) {\n                        return validationService.validateNumeric(viewValue);\n                    };\n            }\n        };\n    }\n    SWValidationNumeric.Factory = function () {\n        var directive = function (validationService) { return new SWValidationNumeric(validationService); };\n        directive.$inject = [\'validationService\'];\n        return directive;\n    };\n    return SWValidationNumeric;\n}());\nexports.SWValidationNumeric = SWValidationNumeric;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationnumeric.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationregex.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationregex.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationRegex = /** @class */ (function () {\n    function SWValidationRegex(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationregex =\n                    function (modelValue) {\n                        //Returns true if this user value (model value) does match the pattern\n                        return validationService.validateRegex(modelValue, attributes.swvalidationregex);\n                    };\n            }\n        };\n    }\n    SWValidationRegex.Factory = function () {\n        var directive = function (validationService) { return new SWValidationRegex(validationService); };\n        directive.$inject = [\'validationService\'];\n        return directive;\n    };\n    return SWValidationRegex;\n}());\nexports.SWValidationRegex = SWValidationRegex;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationregex.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationrequired.ts":
/*!**********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationrequired.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWValidationRequired = /** @class */ (function () {\n    //@ngInject\n    function SWValidationRequired(validationService) {\n        return {\n            restrict: "A",\n            require: "^ngModel",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$validators.swvalidationrequired =\n                    function (modelValue, viewValue) {\n                        var value = modelValue || viewValue;\n                        if (attributes.swvalidationrequired === "true") {\n                            return validationService.validateRequired(value);\n                        }\n                        else {\n                            return true;\n                        }\n                    };\n            }\n        };\n    }\n    SWValidationRequired.Factory = function () {\n        var directive = function (validationService) { return new SWValidationRequired(validationService); };\n        directive.$inject = [\'validationService\'];\n        return directive;\n    };\n    return SWValidationRequired;\n}());\nexports.SWValidationRequired = SWValidationRequired;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationrequired.ts?')},"../../../org/Hibachi/client/src/validation/components/swvalidationunique.ts":
/*!********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationunique.ts ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWValidationUnique = /** @class */ (function () {\n    //@ngInject\n    function SWValidationUnique($http, $q, $hibachi, $log, validationService) {\n        return {\n            restrict: \"A\",\n            require: [\"ngModel\", \"^?swFormField\"],\n            link: function (scope, element, attributes, controllers) {\n                var ngModel = controllers[0];\n                ngModel.$asyncValidators.swvalidationunique = function (modelValue, viewValue) {\n                    var currentValue = modelValue || viewValue;\n                    var property = controllers[1].property;\n                    return validationService.validateUnique(currentValue, controllers[1].object, property);\n                };\n            }\n        };\n    }\n    SWValidationUnique.Factory = function () {\n        var directive = function ($http, $q, $hibachi, $log, validationService) { return new SWValidationUnique($http, $q, $hibachi, $log, validationService); };\n        directive.$inject = ['$http', '$q', '$hibachi', '$log', 'validationService'];\n        return directive;\n    };\n    return SWValidationUnique;\n}());\nexports.SWValidationUnique = SWValidationUnique;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationunique.ts?")},"../../../org/Hibachi/client/src/validation/components/swvalidationuniqueornull.ts":
/*!**************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationuniqueornull.ts ***!
  \**************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWValidationUniqueOrNull = /** @class */ (function () {\n    //@ngInject\n    function SWValidationUniqueOrNull($http, $q, $hibachi, $log, validationService) {\n        return {\n            restrict: \"A\",\n            require: \"ngModel\",\n            link: function (scope, element, attributes, ngModel) {\n                ngModel.$asyncValidators.swvalidationuniqueornull = function (modelValue, viewValue) {\n                    var currentValue = modelValue || viewValue;\n                    if (scope && scope.propertyDisplay && scope.propertyDisplay.property) {\n                        var property = scope.propertyDisplay.property;\n                        return validationService.validateUniqueOrNull(currentValue, scope.propertyDisplay.object, property);\n                    }\n                    else {\n                        return $q.resolve(); //nothing to validate yet.\n                    }\n                };\n            }\n        };\n    }\n    SWValidationUniqueOrNull.Factory = function () {\n        var directive = function ($http, $q, $hibachi, $log, validationService) { return new SWValidationUniqueOrNull($http, $q, $hibachi, $log, validationService); };\n        directive.$inject = ['$http', '$q', '$hibachi', '$log', 'validationService'];\n        return directive;\n    };\n    return SWValidationUniqueOrNull;\n}());\nexports.SWValidationUniqueOrNull = SWValidationUniqueOrNull;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/components/swvalidationuniqueornull.ts?")},"../../../org/Hibachi/client/src/validation/services/validationservice.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/services/validationservice.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\n/*services return promises which can be handled uniquely based on success or failure by the controller*/\nObject.defineProperty(exports, "__esModule", { value: true });\nvar ValidationService = /** @class */ (function () {\n    //@ngInject\n    function ValidationService($hibachi, $q) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.$q = $q;\n        this.MY_EMAIL_REGEXP = /^(([^<>()\\[\\]\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        this.validateUnique = function (value, object, property) {\n            var deferred = _this.$q.defer();\n            //First time the asyncValidators function is loaded the\n            //key won\'t be set  so ensure that we have\n            //key and propertyName before checking with the server\n            if (object && property) {\n                _this.$hibachi.checkUniqueValue(object, property, value)\n                    .then(function (unique) {\n                    if (unique) {\n                        deferred.resolve(); //It\'s unique\n                    }\n                    else {\n                        deferred.reject(); //Add unique to $errors\n                    }\n                });\n            }\n            else {\n                deferred.resolve(); //Ensure promise is resolved if we hit this\n            }\n            return deferred.promise;\n        };\n        this.validateUniqueOrNull = function (value, object, property) {\n            var deferred = _this.$q.defer();\n            //First time the asyncValidators function is loaded the\n            //key won\'t be set  so ensure that we have\n            //key and propertyName before checking with the server\n            if (object && property) {\n                _this.$hibachi.checkUniqueOrNullValue(object, property, value)\n                    .then(function (unique) {\n                    if (unique) {\n                        deferred.resolve(); //It\'s unique\n                    }\n                    else {\n                        deferred.reject(); //Add unique to $errors\n                    }\n                });\n            }\n            else {\n                deferred.resolve(); //Ensure promise is resolved if we hit this\n            }\n            return deferred.promise;\n        };\n        this.validateEmail = function (value) {\n            return _this.validateDataType(value, \'email\');\n        };\n        this.validateDataType = function (value, type) {\n            if (value == null) {\n                return true;\n            } //let required validate this\n            if (angular.isString(value) && type === "string") {\n                return true;\n            }\n            if (angular.isNumber(parseInt(value)) && type === "numeric") {\n                return true;\n            }\n            if (angular.isArray(value) && type === "array") {\n                return true;\n            }\n            if (angular.isDate(value) && type === "date") {\n                return true;\n            }\n            if (angular.isObject(value) && type === "object") {\n                return true;\n            }\n            if (type === \'email\') {\n                return _this.MY_EMAIL_REGEXP.test(value);\n            }\n            if (angular.isUndefined(value && type === "undefined")) {\n                return true;\n            }\n            return false;\n        };\n        this.validateEq = function (value, expectedValue) {\n            return (value === expectedValue);\n        };\n        this.validateEqProperty = function (value, expectedValue) {\n            return (value === expectedValue);\n        };\n        this.validateNeq = function (value, expectedValue) {\n            return (value !== expectedValue);\n        };\n        this.validateGte = function (value, comparisonValue) {\n            if (comparisonValue === void 0) { comparisonValue = 0; }\n            if (angular.isString(value)) {\n                value = parseInt(value);\n            }\n            if (angular.isString(comparisonValue)) {\n                comparisonValue = parseInt(comparisonValue);\n            }\n            return (value >= comparisonValue);\n        };\n        this.validateLte = function (value, comparisonValue) {\n            if (comparisonValue === void 0) { comparisonValue = 0; }\n            if (angular.isString(value)) {\n                value = parseInt(value);\n            }\n            if (angular.isString(comparisonValue)) {\n                comparisonValue = parseInt(comparisonValue);\n            }\n            return (value <= comparisonValue);\n        };\n        this.validateMaxLength = function (value, comparisonValue) {\n            if (comparisonValue === void 0) { comparisonValue = 0; }\n            return _this.validateLte(value, comparisonValue);\n        };\n        this.validateMaxValue = function (value, comparisonValue) {\n            if (comparisonValue === void 0) { comparisonValue = 0; }\n            return _this.validateLte(value, comparisonValue);\n        };\n        this.validateMinLength = function (value, comparisonValue) {\n            if (comparisonValue === void 0) { comparisonValue = 0; }\n            return _this.validateGte(value, comparisonValue);\n        };\n        this.validateMinValue = function (value, comparisonValue) {\n            if (comparisonValue === void 0) { comparisonValue = 0; }\n            return _this.validateGte(value, comparisonValue);\n        };\n        this.validateNumeric = function (value) {\n            return !isNaN(value);\n        };\n        this.validateRegex = function (value, pattern) {\n            var regex = new RegExp(pattern);\n            return regex.test(value);\n        };\n        this.validateRequired = function (value) {\n            if (value) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        };\n        this.$hibachi = $hibachi;\n        this.$q = $q;\n    }\n    return ValidationService;\n}());\nexports.ValidationService = ValidationService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/services/validationservice.ts?')},"../../../org/Hibachi/client/src/validation/validation.module.ts":
/*!********************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/validation.module.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path="../../typings/tsd.d.ts" />\n/// <reference path="../../typings/hibachiTypescript.d.ts" />\nObject.defineProperty(exports, "__esModule", { value: true });\n//components\nvar swvalidate_1 = __webpack_require__(/*! ./components/swvalidate */ "../../../org/Hibachi/client/src/validation/components/swvalidate.ts");\nvar swvalidationminlength_1 = __webpack_require__(/*! ./components/swvalidationminlength */ "../../../org/Hibachi/client/src/validation/components/swvalidationminlength.ts");\nvar swvalidationdatatype_1 = __webpack_require__(/*! ./components/swvalidationdatatype */ "../../../org/Hibachi/client/src/validation/components/swvalidationdatatype.ts");\nvar swvalidationeq_1 = __webpack_require__(/*! ./components/swvalidationeq */ "../../../org/Hibachi/client/src/validation/components/swvalidationeq.ts");\nvar swvalidationeqproperty_1 = __webpack_require__(/*! ./components/swvalidationeqproperty */ "../../../org/Hibachi/client/src/validation/components/swvalidationeqproperty.ts");\nvar swvalidationgte_1 = __webpack_require__(/*! ./components/swvalidationgte */ "../../../org/Hibachi/client/src/validation/components/swvalidationgte.ts");\nvar swvalidationlte_1 = __webpack_require__(/*! ./components/swvalidationlte */ "../../../org/Hibachi/client/src/validation/components/swvalidationlte.ts");\nvar swvalidationmaxlength_1 = __webpack_require__(/*! ./components/swvalidationmaxlength */ "../../../org/Hibachi/client/src/validation/components/swvalidationmaxlength.ts");\nvar swvalidationmaxvalue_1 = __webpack_require__(/*! ./components/swvalidationmaxvalue */ "../../../org/Hibachi/client/src/validation/components/swvalidationmaxvalue.ts");\nvar swvalidationminvalue_1 = __webpack_require__(/*! ./components/swvalidationminvalue */ "../../../org/Hibachi/client/src/validation/components/swvalidationminvalue.ts");\nvar swvalidationneq_1 = __webpack_require__(/*! ./components/swvalidationneq */ "../../../org/Hibachi/client/src/validation/components/swvalidationneq.ts");\nvar swvalidationnumeric_1 = __webpack_require__(/*! ./components/swvalidationnumeric */ "../../../org/Hibachi/client/src/validation/components/swvalidationnumeric.ts");\nvar swvalidationregex_1 = __webpack_require__(/*! ./components/swvalidationregex */ "../../../org/Hibachi/client/src/validation/components/swvalidationregex.ts");\nvar swvalidationrequired_1 = __webpack_require__(/*! ./components/swvalidationrequired */ "../../../org/Hibachi/client/src/validation/components/swvalidationrequired.ts");\nvar swvalidationunique_1 = __webpack_require__(/*! ./components/swvalidationunique */ "../../../org/Hibachi/client/src/validation/components/swvalidationunique.ts");\nvar swvalidationuniqueornull_1 = __webpack_require__(/*! ./components/swvalidationuniqueornull */ "../../../org/Hibachi/client/src/validation/components/swvalidationuniqueornull.ts");\n//services\nvar validationservice_1 = __webpack_require__(/*! ./services/validationservice */ "../../../org/Hibachi/client/src/validation/services/validationservice.ts");\nvar core_module_1 = __webpack_require__(/*! ../core/core.module */ "../../../org/Hibachi/client/src/core/core.module.ts");\nvar validationmodule = angular.module(\'hibachi.validation\', [core_module_1.coremodule.name])\n    .run([function () {\n    }])\n    //directives\n    .directive(\'swValidate\', swvalidate_1.SWValidate.Factory())\n    .directive(\'swvalidationminlength\', swvalidationminlength_1.SWValidationMinLength.Factory())\n    .directive(\'swvalidationdatatype\', swvalidationdatatype_1.SWValidationDataType.Factory())\n    .directive(\'swvalidationeq\', swvalidationeq_1.SWValidationEq.Factory())\n    .directive("swvalidationgte", swvalidationgte_1.SWValidationGte.Factory())\n    .directive("swvalidationlte", swvalidationlte_1.SWValidationLte.Factory())\n    .directive(\'swvalidationmaxlength\', swvalidationmaxlength_1.SWValidationMaxLength.Factory())\n    .directive("swvalidationmaxvalue", swvalidationmaxvalue_1.SWValidationMaxValue.Factory())\n    .directive("swvalidationminvalue", swvalidationminvalue_1.SWValidationMinValue.Factory())\n    .directive("swvalidationneq", swvalidationneq_1.SWValidationNeq.Factory())\n    .directive("swvalidationnumeric", swvalidationnumeric_1.SWValidationNumeric.Factory())\n    .directive("swvalidationregex", swvalidationregex_1.SWValidationRegex.Factory())\n    .directive("swvalidationrequired", swvalidationrequired_1.SWValidationRequired.Factory())\n    .directive("swvalidationunique", swvalidationunique_1.SWValidationUnique.Factory())\n    .directive("swvalidationuniqueornull", swvalidationuniqueornull_1.SWValidationUniqueOrNull.Factory())\n    .directive("swvalidationeqproperty", swvalidationeqproperty_1.SWValidationEqProperty.Factory())\n    //services\n    .service("validationService", validationservice_1.ValidationService);\nexports.validationmodule = validationmodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/validation/validation.module.ts?')},"../../../org/Hibachi/client/src/workflow/components/swadmincreatesuperuser.ts":
/*!**********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swadmincreatesuperuser.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWAdminCreateSuperUser = /** @class */ (function () {\n    function SWAdminCreateSuperUser($hibachi, workflowPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'E',\n            scope: {},\n            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + \"admincreatesuperuser.html\",\n            link: function (scope, element, attrs) {\n                scope.Account_SetupInitialAdmin = $hibachi.newAccount_SetupInitialAdmin();\n            }\n        };\n    }\n    SWAdminCreateSuperUser.Factory = function () {\n        var directive = function ($hibachi, workflowPartialsPath, hibachiPathBuilder) { return new SWAdminCreateSuperUser($hibachi, workflowPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$hibachi',\n            'workflowPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWAdminCreateSuperUser;\n}());\nexports.SWAdminCreateSuperUser = SWAdminCreateSuperUser;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swadmincreatesuperuser.ts?")},"../../../org/Hibachi/client/src/workflow/components/swschedulepreview.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swschedulepreview.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWSchedulePreviewController = /** @class */ (function () {\n    function SWSchedulePreviewController() {\n    }\n    return SWSchedulePreviewController;\n}());\nvar SWSchedulePreview = /** @class */ (function () {\n    function SWSchedulePreview(workflowPartialsPath, hibachiPathBuilder) {\n        this.workflowPartialsPath = workflowPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.restrict = 'AE';\n        this.scope = {};\n        this.bindToController = {\n            schedule: \"=\"\n        };\n        this.controller = SWSchedulePreviewController;\n        this.controllerAs = \"swSchedulePreview\";\n        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath) + \"schedulepreview.html\";\n    }\n    SWSchedulePreview.Factory = function () {\n        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWSchedulePreview(workflowPartialsPath, hibachiPathBuilder); };\n        directive.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];\n        return directive;\n    };\n    SWSchedulePreview.$inject = ['workflowPartialsPath', 'hibachiPathBuilder'];\n    return SWSchedulePreview;\n}());\nexports.SWSchedulePreview = SWSchedulePreview;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swschedulepreview.ts?")},"../../../org/Hibachi/client/src/workflow/components/swworkflowbasic.ts":
/*!***************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowbasic.ts ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWWorkflowBasic = /** @class */ (function () {\n    function SWWorkflowBasic(workflowPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'A',\n            scope: {\n                workflow: \"=\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + \"workflowbasic.html\",\n            link: function (scope, element, attrs) {\n            }\n        };\n    }\n    SWWorkflowBasic.Factory = function () {\n        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowBasic(workflowPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            'workflowPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWWorkflowBasic;\n}());\nexports.SWWorkflowBasic = SWWorkflowBasic;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowbasic.ts?")},"../../../org/Hibachi/client/src/workflow/components/swworkflowcondition.ts":
/*!*******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowcondition.ts ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWWorkflowCondition = /** @class */ (function () {\n    function SWWorkflowCondition($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'E',\n            scope: {\n                workflowCondition: \"=\",\n                workflowConditionIndex: \"=\",\n                workflow: \"=\",\n                filterPropertiesList: \"=\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + \"workflowcondition.html\",\n            link: function (scope, element, attrs) {\n                $log.debug('workflowCondition init');\n                $log.debug(scope);\n                scope.selectBreadCrumb = function (breadCrumbIndex) {\n                    //splice out array items above index\n                    var removeCount = scope.filterItem.breadCrumbs.length - 1 - breadCrumbIndex;\n                    scope.filterItem.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);\n                    scope.selectedFilterPropertyChanged(null);\n                };\n                scope.selectedFilterPropertyChanged = function (selectedFilterProperty) {\n                    $log.debug('selectedFilterProperty');\n                    $log.debug(selectedFilterProperty);\n                    scope.selectedFilterProperty = selectedFilterProperty;\n                };\n                if (angular.isUndefined(scope.workflowCondition.breadCrumbs)) {\n                    scope.workflowCondition.breadCrumbs = [];\n                    if (scope.workflowCondition.propertyIdentifier === \"\") {\n                        scope.workflowCondition.breadCrumbs = [\n                            {\n                                entityAlias: scope.workflow.data.workflowObject,\n                                cfc: scope.workflow.data.workflowObject,\n                                propertyIdentifier: scope.workflow.data.workflowObject\n                            }\n                        ];\n                    }\n                    else {\n                        var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');\n                        entityAliasArrayFromString.pop();\n                        for (var i in entityAliasArrayFromString) {\n                            var breadCrumb = {\n                                entityAlias: entityAliasArrayFromString[i],\n                                cfc: entityAliasArrayFromString[i],\n                                propertyIdentifier: entityAliasArrayFromString[i]\n                            };\n                            scope.workflowCondition.breadCrumbs.push(breadCrumb);\n                        }\n                    }\n                }\n                else {\n                    angular.forEach(scope.workflowCondition.breadCrumbs, function (breadCrumb, key) {\n                        if (angular.isUndefined(scope.filterPropertiesList[breadCrumb.propertyIdentifier])) {\n                            var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(breadCrumb.cfc, true);\n                            filterPropertiesPromise.then(function (value) {\n                                metadataService.setPropertiesList(value, breadCrumb.propertyIdentifier);\n                                scope.filterPropertiesList[breadCrumb.propertyIdentifier] = metadataService.getPropertiesListByBaseEntityAlias(breadCrumb.propertyIdentifier);\n                                metadataService.formatPropertiesList(scope.filterPropertiesList[breadCrumb.propertyIdentifier], breadCrumb.propertyIdentifier);\n                                var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');\n                                entityAliasArrayFromString.pop();\n                                entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();\n                                if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {\n                                    for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {\n                                        var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];\n                                        if (filterProperty.propertyIdentifier === scope.workflowCondition.propertyIdentifier) {\n                                            //selectItem from drop down\n                                            scope.selectedFilterProperty = filterProperty;\n                                            //decorate with value and comparison Operator so we can use it in the Condition section\n                                            scope.selectedFilterProperty.value = scope.workflowCondition.value;\n                                            scope.selectedFilterProperty.comparisonOperator = scope.workflowCondition.comparisonOperator;\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                        else {\n                            var entityAliasArrayFromString = scope.workflowCondition.propertyIdentifier.split('.');\n                            entityAliasArrayFromString.pop();\n                            entityAliasArrayFromString = entityAliasArrayFromString.join('.').trim();\n                            if (angular.isDefined(scope.filterPropertiesList[entityAliasArrayFromString])) {\n                                for (var i in scope.filterPropertiesList[entityAliasArrayFromString].data) {\n                                    var filterProperty = scope.filterPropertiesList[entityAliasArrayFromString].data[i];\n                                    if (filterProperty.propertyIdentifier === scope.workflowCondition.propertyIdentifier) {\n                                        //selectItem from drop down\n                                        scope.selectedFilterProperty = filterProperty;\n                                        //decorate with value and comparison Operator so we can use it in the Condition section\n                                        scope.selectedFilterProperty.value = scope.workflowCondition.value;\n                                        scope.selectedFilterProperty.comparisonOperator = scope.workflowCondition.comparisonOperator;\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        };\n    }\n    SWWorkflowCondition.Factory = function () {\n        var directive = function ($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowCondition($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$log',\n            '$hibachi',\n            'metadataService',\n            'workflowPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWWorkflowCondition;\n}());\nexports.SWWorkflowCondition = SWWorkflowCondition;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowcondition.ts?")},"../../../org/Hibachi/client/src/workflow/components/swworkflowconditiongroupitem.ts":
/*!****************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowconditiongroupitem.ts ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWWorkflowConditionGroupItem = /** @class */ (function () {\n    function SWWorkflowConditionGroupItem(workflowPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'E',\n            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + \"workflowconditiongroupitem.html\",\n            link: function (scope, element, attrs) {\n            }\n        };\n    }\n    SWWorkflowConditionGroupItem.Factory = function () {\n        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowConditionGroupItem(workflowPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            'workflowPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWWorkflowConditionGroupItem;\n}());\nexports.SWWorkflowConditionGroupItem = SWWorkflowConditionGroupItem;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowconditiongroupitem.ts?")},"../../../org/Hibachi/client/src/workflow/components/swworkflowconditiongroups.ts":
/*!*************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowconditiongroups.ts ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWWorkflowConditionGroups = /** @class */ (function () {\n    function SWWorkflowConditionGroups($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'E',\n            scope: {\n                workflowConditionGroupItem: \"=\",\n                workflowConditionGroup: \"=\",\n                workflow: \"=\",\n                filterPropertiesList: \"=\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + \"workflowconditiongroups.html\",\n            link: function (scope, element, attrs) {\n                $log.debug('workflowconditiongroups init');\n                scope.addWorkflowCondition = function () {\n                    $log.debug('addWorkflowCondition');\n                    var workflowCondition = workflowConditionService.newWorkflowCondition();\n                    workflowConditionService.addWorkflowCondition(scope.workflowConditionGroupItem, workflowCondition);\n                };\n                scope.addWorkflowGroupItem = function () {\n                    $log.debug('addWorkflowGrouptItem');\n                    var workflowConditionGroupItem = workflowConditionService.newWorkflowConditionGroupItem();\n                    workflowConditionService.addWorkflowConditionGroupItem(scope.workflowConditionItem, workflowConditionGroupItem);\n                };\n            }\n        };\n    }\n    SWWorkflowConditionGroups.Factory = function () {\n        var directive = function ($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowConditionGroups($log, workflowConditionService, workflowPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            '$log',\n            'workflowConditionService',\n            'workflowPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWWorkflowConditionGroups;\n}());\nexports.SWWorkflowConditionGroups = SWWorkflowConditionGroups;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowconditiongroups.ts?")},"../../../org/Hibachi/client/src/workflow/components/swworkflowtask.ts":
/*!**************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtask.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWWorkflowTask = /** @class */ (function () {\n    function SWWorkflowTask(workflowPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: 'E',\n            scope: {\n                workflowTask: \"=\",\n                workflowTasks: \"=\",\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + \"workflowtask.html\",\n            link: function (scope, element, attrs) {\n                scope.removeWorkflowTask = function (workflowTask) {\n                    var deletePromise = workflowTask.$$delete();\n                    deletePromise.then(function () {\n                        if (workflowTask === scope.workflowTasks.selectedTask) {\n                            delete scope.workflowTasks.selectedTask;\n                        }\n                        scope.workflowTasks.splice(workflowTask.$$index, 1);\n                        for (var i in scope.workflowTasks) {\n                            scope.workflowTasks[i].$$index = i;\n                        }\n                    });\n                };\n            }\n        };\n    }\n    SWWorkflowTask.Factory = function () {\n        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTask(workflowPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            'workflowPartialsPath',\n            'hibachiPathBuilder'\n        ];\n        return directive;\n    };\n    return SWWorkflowTask;\n}());\nexports.SWWorkflowTask = SWWorkflowTask;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtask.ts?")},"../../../org/Hibachi/client/src/workflow/components/swworkflowtaskactions.ts":
/*!*********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtaskactions.ts ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWWorkflowTaskActionsController = /** @class */ (function () {\n    //@ngInject\n    function SWWorkflowTaskActionsController($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder, collectionConfigService, observerService) {\n        var _this = this;\n        this.$log = $log;\n        this.$hibachi = $hibachi;\n        this.metadataService = metadataService;\n        this.workflowPartialsPath = workflowPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.$log.debug(\'Workflow Task Actions Init\');\n        this.$log.debug(this.workflowTask);\n        this.openActions = false;\n        this.observerService.attach(function (item) {\n            if (angular.isDefined(_this.emailTemplateCollectionConfig)) {\n                _this.emailTemplateCollectionConfig.clearFilters();\n                _this.emailTemplateCollectionConfig.addFilter("emailTemplateObject", item.value);\n            }\n            if (angular.isDefined(_this.printTemplateCollectionConfig)) {\n                _this.printTemplateCollectionConfig.clearFilters();\n                _this.printTemplateCollectionConfig.addFilter("printTemplateObject", item.value);\n            }\n        }, \'WorkflowWorkflowObjectOnChange\');\n        /**\n         * Returns the correct object based on the selected object type.\n         */\n        var getObjectByActionType = function (workflowTaskAction) {\n            if (workflowTaskAction.data.actionType === \'email\') {\n                workflowTaskAction.$$getEmailTemplate();\n            }\n            else if (workflowTaskAction.data.actionType === \'print\') {\n                workflowTaskAction.$$getPrintTemplate();\n            }\n        };\n        /**\n         * --------------------------------------------------------------------------------------------------------\n         * Returns workflow task action, and saves them to the scope variable workflowtaskactions\n         * --------------------------------------------------------------------------------------------------------\n         */\n        this.getWorkflowTaskActions = function () {\n            /***\n             Note:\n             This conditional is checking whether or not we need to be retrieving to\n             items all over again. If we already have them, we won\'t make another\n             trip to the database.\n\n             ***/\n            if (angular.isUndefined(_this.workflowTask.data.workflowTaskActions)) {\n                var workflowTaskPromise = _this.workflowTask.$$getWorkflowTaskActions();\n                workflowTaskPromise.then(function () {\n                    _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;\n                    angular.forEach(_this.workflowTaskActions, function (workflowTaskAction) {\n                        getObjectByActionType(workflowTaskAction);\n                    });\n                    _this.$log.debug(_this.workflowTaskActions);\n                });\n            }\n            else {\n                _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;\n            }\n            if (angular.isUndefined(_this.workflowTask.data.workflowTaskActions)) {\n                _this.workflowTask.data.workflowTaskActions = [];\n                _this.workflowTaskActions = _this.workflowTask.data.workflowTaskActions;\n            }\n        };\n        this.getWorkflowTaskActions(); //Call get\n        /**\n         * --------------------------------------------------------------------------------------------------------\n         * Saves the workflow task actions by calling the objects $$save method.\n         * @param taskAction\n         * --------------------------------------------------------------------------------------------------------\n         */\n        this.saveWorkflowTaskAction = function (taskAction, context) {\n            _this.$log.debug("Context: " + context);\n            _this.$log.debug("saving task action and parent task");\n            _this.$log.debug(taskAction);\n            var savePromise = _this.workflowTaskActions.selectedTaskAction.$$save();\n            savePromise.then(function () {\n                var taSavePromise = taskAction.$$save;\n                //Clear the form by adding a new task action if \'save and add another\' otherwise, set save and set finished\n                if (context == \'add\') {\n                    _this.$log.debug("Save and New");\n                    _this.addWorkflowTaskAction(taskAction);\n                    _this.finished = false;\n                }\n                else if (context == "finish") {\n                    _this.finished = true;\n                }\n                //Auto save the workflow now that the task action is saved.\n                _this.workflowTask.data.workflow.$$save();\n            }, function (err) {\n                angular.element(\'a[href="/##j-basic-2"]\').click();\n                console.warn(err);\n            });\n        }; //<--end save\n        /**\n         * Sets the editing state to show/hide the edit screen.\n         */\n        this.setHidden = function (task) {\n            if (!angular.isObject(task)) {\n                task = {};\n            }\n            if (angular.isUndefined(task.hidden)) {\n                task.hidden = false;\n            }\n            else {\n                _this.$log.debug("setHidden()", "Setting Hide Value To " + !task.hidden);\n                task.hidden = !task.hidden;\n            }\n        };\n        /**\n         * --------------------------------------------------------------------------------------------------------\n         * Adds workflow action items by calling the workflowTask objects $$addWorkflowTaskAction() method\n         * and sets the result to scope.\n         * @param taskAction\n         * --------------------------------------------------------------------------------------------------------\n         */\n        this.addWorkflowTaskAction = function (taskAction) {\n            var workflowTaskAction = _this.workflowTask.$$addWorkflowTaskAction();\n            _this.selectWorkflowTaskAction(workflowTaskAction);\n            _this.$log.debug(_this.workflow);\n        };\n        /**\n         * --------------------------------------------------------------------------------------------------------\n         * Selects a new task action and populates the task action properties.\n         * --------------------------------------------------------------------------------------------------------\n         */\n        this.selectWorkflowTaskAction = function (workflowTaskAction) {\n            _this.$log.debug("Selecting new task action for editing: ");\n            _this.$log.debug(workflowTaskAction);\n            _this.finished = false;\n            _this.workflowTaskActions.selectedTaskAction = undefined;\n            var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName(_this.workflowTask.data.workflow.data.workflowObject, true);\n            filterPropertiesPromise.then(function (value) {\n                _this.filterPropertiesList = {\n                    baseEntityName: _this.workflowTask.data.workflow.data.workflowObject,\n                    baseEntityAlias: "_" + _this.workflowTask.data.workflow.data.workflowObject\n                };\n                _this.metadataService.setPropertiesList(value, _this.workflowTask.data.workflow.data.workflowObject);\n                _this.filterPropertiesList[_this.workflowTask.data.workflow.data.workflowObject] = _this.metadataService.getPropertiesListByBaseEntityAlias(_this.workflowTask.data.workflow.data.workflowObject);\n                _this.metadataService.formatPropertiesList(_this.filterPropertiesList[_this.workflowTask.data.workflow.data.workflowObject], _this.workflowTask.data.workflow.data.workflowObject);\n                _this.workflowTaskActions.selectedTaskAction = workflowTaskAction;\n                _this.emailTemplateSelected = (_this.workflowTaskActions.selectedTaskAction.data.emailTemplate) ? _this.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateName : \'\';\n                _this.emailTemplateCollectionConfig = _this.collectionConfigService.newCollectionConfig("EmailTemplate");\n                _this.emailTemplateCollectionConfig.setDisplayProperties("emailTemplateID,emailTemplateName");\n                _this.emailTemplateCollectionConfig.addFilter("emailTemplateObject", _this.workflowTask.data.workflow.data.workflowObject);\n                _this.printTemplateSelected = (_this.workflowTaskActions.selectedTaskAction.data.printTemplate) ? _this.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateName : \'\';\n                _this.printTemplateCollectionConfig = _this.collectionConfigService.newCollectionConfig("PrintTemplate");\n                _this.printTemplateCollectionConfig.setDisplayProperties("printTemplateID,printTemplateName");\n                _this.printTemplateCollectionConfig.addFilter("printTemplateObject", _this.workflowTask.data.workflow.data.workflowObject);\n            });\n        };\n        /**\n         * Overrides the confirm directive method deleteEntity. This is needed for the modal popup.\n         */\n        this.deleteEntity = function (entity) {\n            _this.removeWorkflowTaskAction(entity);\n        };\n        /**\n         * --------------------------------------------------------------------------------------------------------\n         * Removes a workflow task action by calling the selected tasks $$delete method\n         * and reindexes the list.\n         * --------------------------------------------------------------------------------------------------------\n         */\n        this.removeWorkflowTaskAction = function (workflowTaskAction) {\n            var deletePromise = workflowTaskAction.$$delete();\n            deletePromise.then(function () {\n                if (workflowTaskAction === _this.workflowTaskActions.selectedTaskAction) {\n                    delete _this.workflowTaskActions.selectedTaskAction;\n                }\n                _this.$log.debug("removeWorkflowTaskAction");\n                _this.$log.debug(workflowTaskAction);\n                _this.workflowTaskActions.splice(workflowTaskAction.$$actionIndex, 1);\n                for (var i in _this.workflowTaskActions) {\n                    _this.workflowTaskActions[i].$$actionIndex = i;\n                }\n            });\n        };\n        this.searchProcess = {\n            name: \'\'\n        };\n        /**\n         * Watches for changes in the proccess\n         */\n        this.showProcessOptions = false;\n        this.processOptions = [];\n        //this.$scope.$watch(\'swWorkflowTaskActions.searchProcess.name\', (newValue, oldValue)=>{\n        //    if(newValue !== oldValue){\n        //        this.getProcessOptions(this.workflowTask.data.workflow.data.workflowObject);\n        //    }\n        //});\n        /**\n         * Retrieves the proccess options for a workflow trigger action.\n         */\n        this.getProcessOptions = function (objectName) {\n            if (!_this.processOptions.length) {\n                var proccessOptionsPromise = _this.$hibachi.getProcessOptions(objectName);\n                proccessOptionsPromise.then(function (value) {\n                    _this.processOptions = value.data;\n                });\n            }\n            _this.showProcessOptions = true;\n        };\n        /**\n         * Changes the selected process option value.\n         */\n        this.selectProcess = function (processOption) {\n            _this.workflowTaskActions.selectedTaskAction.data.processMethod = processOption.value;\n            _this.searchProcess.name = processOption.value;\n            _this.workflowTaskActions.selectedTaskAction.forms.selectedTaskAction.$setDirty();\n            //this.searchProcess = processOption.name;\n            _this.showProcessOptions = false;\n        };\n        this.selectEmailTemplate = function (item) {\n            if (angular.isDefined(_this.workflowTaskActions.selectedTaskAction.data.emailTemplate)) {\n                _this.workflowTaskActions.selectedTaskAction.data.emailTemplate.data.emailTemplateID = item.emailTemplateID;\n            }\n            else {\n                var templateEmail = _this.$hibachi.newEmailTemplate();\n                templateEmail.data.emailTemplateID = item.emailTemplateID;\n                _this.workflowTaskActions.selectedTaskAction.$$setEmailTemplate(templateEmail);\n            }\n        };\n        this.selectPrintTemplate = function (item) {\n            if (angular.isDefined(_this.workflowTaskActions.selectedTaskAction.data.printTemplate)) {\n                _this.workflowTaskActions.selectedTaskAction.data.printTemplate.data.printTemplateID = item.printTemplateID;\n            }\n            else {\n                var templatePrint = _this.$hibachi.newPrintTemplate();\n                templatePrint.data.printTemplateID = item.printTemplateID;\n                _this.workflowTaskActions.selectedTaskAction.$$setPrintTemplate(templatePrint);\n            }\n        };\n    }\n    return SWWorkflowTaskActionsController;\n}());\nvar SWWorkflowTaskActions = /** @class */ (function () {\n    function SWWorkflowTaskActions(workflowPartialsPath, hibachiPathBuilder) {\n        this.workflowPartialsPath = workflowPartialsPath;\n        this.hibachiPathBuilder = hibachiPathBuilder;\n        this.restrict = \'AE\';\n        this.scope = {};\n        this.bindToController = {\n            workflowTask: "="\n        };\n        this.controller = SWWorkflowTaskActionsController;\n        this.controllerAs = "swWorkflowTaskActions";\n        this.link = function ($scope, element, attrs) {\n        };\n        this.templateUrl = this.hibachiPathBuilder.buildPartialsPath(this.workflowPartialsPath) + "workflowtaskactions.html";\n    }\n    SWWorkflowTaskActions.Factory = function () {\n        var directive = function (workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTaskActions(workflowPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\'workflowPartialsPath\', \'hibachiPathBuilder\'];\n        return directive;\n    };\n    SWWorkflowTaskActions.$inject = [\'workflowPartialsPath\', \'hibachiPathBuilder\'];\n    return SWWorkflowTaskActions;\n}());\nexports.SWWorkflowTaskActions = SWWorkflowTaskActions;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtaskactions.ts?')},"../../../org/Hibachi/client/src/workflow/components/swworkflowtasks.ts":
/*!***************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtasks.ts ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\n/**\n * Handles adding, editing, and deleting Workflows Tasks.\n */\nvar SWWorkflowTasks = /** @class */ (function () {\n    function SWWorkflowTasks($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) {\n        return {\n            restrict: \'A\',\n            scope: {\n                workflow: "="\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtasks.html",\n            link: function (scope, element, attrs) {\n                scope.workflowPartialsPath = hibachiPathBuilder.buildPartialsPath(workflowPartialsPath);\n                scope.propertiesList = {};\n                function logger(context, message) {\n                    $log.debug("SwWorkflowTasks :" + context + " : " + message);\n                }\n                /**\n                 * Sets workflowTasks on the scope by populating with $$getWorkflowTasks()\n                 */\n                scope.getWorkflowTasks = function () {\n                    logger("getWorkflowTasks", "Retrieving items");\n                    logger("getWorkflowTasks", "Workflow Tasks");\n                    $log.debug(scope.workflowTasks);\n                    if (!scope.workflow.$$isPersisted()) {\n                        scope.workflow.data.workflowTasks = [];\n                        scope.workflowTasks = scope.workflow.data.workflowTasks;\n                        return;\n                    }\n                    /***\n                       Note:\n                       This conditional is checking whether or not we need to be retrieving to\n                       items all over again. If we already have them, we won\'t make another\n                       trip to the database.\n\n                     ***/\n                    if (angular.isUndefined(scope.workflow.data.workflowTasks)) {\n                        var workflowTasksPromise = scope.workflow.$$getWorkflowTasks();\n                        workflowTasksPromise.then(function () {\n                            scope.workflowTasks = scope.workflow.data.workflowTasks;\n                        });\n                    }\n                    else {\n                        logger("getWorkflowTasks", "Retrieving cached Items");\n                        scope.workflowTasks = scope.workflow.data.workflowTasks;\n                    }\n                    if (angular.isUndefined(scope.workflow.data.workflowTasks)) {\n                        //Reset the workflowTasks.\n                        logger("getWorkflowTasks", "workflowTasks is undefined.");\n                        scope.workflow.data.workflowTasks = [];\n                        scope.workflowTasks = scope.workflow.data.workflowTasks;\n                    }\n                };\n                scope.getWorkflowTasks(); //call tasks\n                /**\n                 * Sets the editing state to show/hide the edit screen.\n                 */\n                scope.setHidden = function (task) {\n                    if (!angular.isObject(task) || angular.isUndefined(task.hidden)) {\n                        task.hidden = false;\n                    }\n                    else {\n                        logger("setHidden()", "Setting Hide Value To " + !task.hidden);\n                        task.hidden = !task.hidden;\n                    }\n                };\n                /**\n                 * Add a workflow task and logs the result.\n                 */\n                scope.addWorkflowTask = function () {\n                    var newWorkflowTask = scope.workflow.$$addWorkflowTask();\n                    logger("var newWorkflowTask", newWorkflowTask);\n                    scope.selectWorkflowTask(newWorkflowTask);\n                };\n                /**\n                  * Watches the select for changes.\n                  */\n                scope.$watch(\'workflowTasks.selectedTask.data.workflow.data.workflowObject\', function (newValue, oldValue) {\n                    logger("scope.$watch", "Change Detected " + newValue + " from " + oldValue);\n                    if ((newValue !== oldValue && angular.isDefined(scope.workflowTasks.selectedTask))) {\n                        logger("scope.$watch", "Change to " + newValue);\n                        scope.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityAlias = \'_\' + newValue.charAt(0).toLowerCase() + newValue.slice(1);\n                        scope.workflowTasks.selectedTask.data.taskConditionsConfig.baseEntityName = newValue;\n                    }\n                });\n                /**\n                   * --------------------------------------------------------------------------------------------------------\n                   * Saves the workflow task by calling the objects $$save method. In addition to calling save here,\n                   * we also refresh the data by calling getWorkflowTasks followed by calling the global entity.$$save.\n                   * @param task\n                   * --------------------------------------------------------------------------------------------------------\n                   */\n                scope.saveWorkflowTask = function (task, context) {\n                    //scope.workflowTasks.selectedTask.$$setWorkflow(scope.workflow);\n                    scope.workflowTasks.selectedTask.$$save().then(function (res) {\n                        scope.done = true;\n                        delete scope.workflowTasks.selectedTask;\n                        if (context === \'add\') {\n                            scope.addWorkflowTask();\n                            scope.finished = true;\n                        }\n                        else if (context == "finish") {\n                            scope.finished = false;\n                        }\n                        //refresh the task information.\n                        delete scope.workflow.data.workflowTasks;\n                        scope.getWorkflowTasks();\n                        //Save the workflow entity automatically.\n                        scope.workflow.$$save();\n                    }, function (err) {\n                    });\n                }; //<--end save*/\n                /**\n                 * Select a workflow task.\n                 */\n                scope.selectWorkflowTask = function (workflowTask) {\n                    scope.done = false;\n                    $log.debug(workflowTask);\n                    scope.finished = false;\n                    scope.workflowTasks.selectedTask = undefined;\n                    var workflowObject = scope.workflow.data.workflowObject;\n                    var workflowObjectAlias = "_" + workflowObject.toLowerCase();\n                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(workflowObject, true);\n                    filterPropertiesPromise.then(function (value) {\n                        scope.filterPropertiesList = {\n                            baseEntityName: workflowObject,\n                            baseEntityAlias: workflowObjectAlias\n                        };\n                        metadataService.setPropertiesList(value, workflowObject);\n                        scope.filterPropertiesList[workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(workflowObject);\n                        metadataService.formatPropertiesList(scope.filterPropertiesList[workflowObject], workflowObject);\n                        metadataService.setPropertiesList(value, workflowObjectAlias);\n                        scope.filterPropertiesList[workflowObjectAlias] = metadataService.getPropertiesListByBaseEntityAlias(workflowObjectAlias);\n                        metadataService.formatPropertiesList(scope.filterPropertiesList[workflowObjectAlias], workflowObjectAlias);\n                        scope.workflowTasks.selectedTask = workflowTask;\n                    });\n                };\n                /* Does a delete of the property using delete */\n                scope.softRemoveTask = function (workflowTask) {\n                    if (workflowTask === scope.workflowTasks.selectedTask) {\n                        delete scope.workflowTasks.selectedTask;\n                    }\n                    scope.removeIndexFromTasks(workflowTask.$$index);\n                    scope.reindexTaskList();\n                };\n                /* Does an API call delete using $$delete */\n                scope.hardRemoveTask = function (workflowTask) {\n                    var deletePromise = workflowTask.$$delete();\n                    deletePromise.then(function () {\n                        if (workflowTask === scope.workflowTasks.selectedTask) {\n                            delete scope.workflowTasks.selectedTask;\n                        }\n                        scope.removeIndexFromTasks(workflowTask.$$index);\n                        scope.reindexTaskList();\n                    });\n                };\n                /*Override the delete entity in the confirmation controller*/\n                scope.deleteEntity = function (entity) {\n                    scope.hardRemoveTask(entity);\n                };\n                /* Re-indexes the task list */\n                scope.reindexTaskList = function () {\n                    for (var i in scope.workflowTasks) {\n                        logger("ReIndexing the list", i);\n                        scope.workflowTasks[i].$$index = i;\n                    }\n                };\n                /* Removes the tasks index from the tasks array */\n                scope.removeIndexFromTasks = function (index) {\n                    logger("RemoveIndexFromTasks", index);\n                    scope.workflowTasks.splice(index, 1);\n                };\n            }\n        };\n    }\n    SWWorkflowTasks.Factory = function () {\n        var directive = function ($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder) { return new SWWorkflowTasks($log, $hibachi, metadataService, workflowPartialsPath, hibachiPathBuilder); };\n        directive.$inject = [\n            \'$log\',\n            \'$hibachi\',\n            \'metadataService\',\n            \'workflowPartialsPath\',\n            \'hibachiPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWWorkflowTasks;\n}());\nexports.SWWorkflowTasks = SWWorkflowTasks;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtasks.ts?')},"../../../org/Hibachi/client/src/workflow/components/swworkflowtrigger.ts":
/*!*****************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtrigger.ts ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWWorkflowTrigger = /** @class */ (function () {\n    //@ngInject\n    function SWWorkflowTrigger($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService, collectionConfigService) {\n        return {\n            restrict: 'A',\n            replace: true,\n            scope: {\n                workflowTrigger: \"=\",\n                workflowTriggers: \"=\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + \"workflowtrigger.html\",\n            link: function (scope, element, attrs) {\n                /**\n                 * Selects the current workflow trigger.\n                 */\n                scope.selectWorkflowTrigger = function (workflowTrigger) {\n                    scope.done = false;\n                    scope.finished = false;\n                    scope.workflowTriggers.selectedTrigger = undefined;\n                    var filterPropertiesPromise = $hibachi.getFilterPropertiesByBaseEntityName(scope.workflowTrigger.data.workflow.data.workflowObject, true);\n                    filterPropertiesPromise.then(function (value) {\n                        scope.filterPropertiesList = {\n                            baseEntityName: scope.workflowTrigger.data.workflow.data.workflowObject,\n                            baseEntityAlias: \"_\" + scope.workflowTrigger.data.workflow.data.workflowObject\n                        };\n                        metadataService.setPropertiesList(value, scope.workflowTrigger.data.workflow.data.workflowObject);\n                        scope.filterPropertiesList[scope.workflowTrigger.data.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflowTrigger.data.workflow.data.workflowObject);\n                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflowTrigger.data.workflow.data.workflowObject], scope.workflowTrigger.data.workflow.data.workflowObject);\n                        scope.workflowTriggers.selectedTrigger = workflowTrigger;\n                        scope.workflowTriggers.selectedTrigger.workflowTriggerCollectionConfig = collectionConfigService.newCollectionConfig().loadJson(scope.workflowTriggers.selectedTrigger.data.scheduleCollectionConfig.toString());\n                    });\n                };\n                scope.executingTrigger = false;\n                scope.executeWorkflowTrigger = function (workflowTrigger) {\n                    if (scope.executingTrigger)\n                        return;\n                    if (!workflowTrigger.data.workflow.data.workflowTasks || !workflowTrigger.data.workflow.data.workflowTasks.length) {\n                        var alert = alertService.newAlert();\n                        alert.msg = \"You don't have any Task yet!\";\n                        alert.type = \"error\";\n                        alert.fade = true;\n                        alertService.addAlert(alert);\n                        return;\n                    }\n                    scope.executingTrigger = true;\n                    var appConfig = $hibachi.getConfig();\n                    var urlString = appConfig.baseURL + '/index.cfm/?' + appConfig.action + '=api:workflow.executeScheduleWorkflowTrigger&workflowTriggerID=' + workflowTrigger.data.workflowTriggerID + '&x=' + utilityService.createID();\n                    $http.get(urlString).finally(function () {\n                        scope.executingTrigger = false;\n                        var alert = alertService.newAlert();\n                        alert.msg = \"Task Triggered Successfully. Check History for Status\";\n                        alert.type = \"success\";\n                        alert.fade = true;\n                        alertService.addAlert(alert);\n                    });\n                };\n                /**\n                 * Overrides the delete function for the confirmation modal. Delegates to the normal delete method.\n                 */\n                scope.deleteEntity = function (entity, index) {\n                    scope.deleteTrigger(entity, index);\n                };\n                /**\n                 * Hard deletes a workflow trigger\n                 */\n                scope.deleteTrigger = function (workflowTrigger, index) {\n                    var deleteTriggerPromise = $hibachi.saveEntity('WorkflowTrigger', workflowTrigger.data.workflowTriggerID, {}, 'Delete');\n                    deleteTriggerPromise.then(function (value) {\n                        scope.workflowTriggers.splice(index, 1);\n                    });\n                };\n            }\n        };\n    }\n    SWWorkflowTrigger.Factory = function () {\n        var directive = function ($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService, collectionConfigService) { return new SWWorkflowTrigger($http, $hibachi, alertService, metadataService, workflowPartialsPath, hibachiPathBuilder, utilityService, collectionConfigService); };\n        directive.$inject = [\n            '$http',\n            '$hibachi',\n            'alertService',\n            'metadataService',\n            'workflowPartialsPath',\n            'hibachiPathBuilder',\n            'utilityService',\n            'collectionConfigService'\n        ];\n        return directive;\n    };\n    return SWWorkflowTrigger;\n}());\nexports.SWWorkflowTrigger = SWWorkflowTrigger;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtrigger.ts?")},"../../../org/Hibachi/client/src/workflow/components/swworkflowtriggerhistory.ts":
/*!************************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtriggerhistory.ts ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWWorkflowTriggerHistory = /** @class */ (function () {\n    function SWWorkflowTriggerHistory(workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService) {\n        return {\n            restrict: \'A\',\n            scope: {\n                workflow: "="\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + "workflowtriggerhistory.html",\n            link: function (scope, element, attrs) {\n                $rootScope.workflowID = scope.workflow.data.workflowID;\n                //Build the history collection.\n                scope.workflowTriggerHistoryCollection = collectionConfigService.newCollectionConfig("WorkflowTriggerHistory");\n                scope.workflowTriggerHistoryCollection.addFilter("workflowTrigger.workflow.workflowID", $rootScope.workflowID, "=");\n                scope.workflowTriggerHistoryCollection.addDisplayProperty("workflowTrigger.triggerType");\n                scope.workflowTriggerHistoryCollection.addDisplayProperty("response");\n                scope.workflowTriggerHistoryCollection.addDisplayProperty("endTime");\n                scope.workflowTriggerHistoryCollection.addDisplayProperty("startTime");\n                scope.workflowTriggerHistoryCollection.addDisplayProperty("successFlag");\n            }\n        };\n    }\n    SWWorkflowTriggerHistory.Factory = function () {\n        var directive = function (workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService) { return new SWWorkflowTriggerHistory(workflowPartialsPath, hibachiPathBuilder, $rootScope, collectionConfigService); };\n        directive.$inject = [\n            \'workflowPartialsPath\',\n            \'hibachiPathBuilder\',\n            \'$rootScope\',\n            \'collectionConfigService\'\n        ];\n        return directive;\n    };\n    return SWWorkflowTriggerHistory;\n}());\nexports.SWWorkflowTriggerHistory = SWWorkflowTriggerHistory;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtriggerhistory.ts?')},"../../../org/Hibachi/client/src/workflow/components/swworkflowtriggers.ts":
/*!******************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtriggers.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWWorkflowTriggers = /** @class */ (function () {\n    function SWWorkflowTriggers($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService) {\n        return {\n            restrict: 'E',\n            scope: {\n                workflow: \"=\"\n            },\n            templateUrl: hibachiPathBuilder.buildPartialsPath(workflowPartialsPath) + \"workflowtriggers.html\",\n            link: function (scope, element, attrs, formController) {\n                scope.schedule = {};\n                scope.$watch('workflowTriggers.selectedTrigger', function (newValue, oldValue) {\n                    if (newValue !== undefined && newValue !== oldValue) {\n                        if (newValue.data.triggerType == 'Schedule') {\n                            if (angular.isDefined(newValue.data.schedule)) {\n                                scope.schedule.selectedName = newValue.data.schedule.data.scheduleName;\n                                scope.selectSchedule(newValue.data.schedule.data);\n                            }\n                            if (angular.isDefined(newValue.data.scheduleCollection)) {\n                                scope.selectedCollection = newValue.data.scheduleCollection.data.collectionName;\n                            }\n                        }\n                        else {\n                            scope.searchEvent.name = scope.workflowTriggers.selectedTrigger.triggerEventTitle;\n                        }\n                    }\n                });\n                scope.collectionCollectionConfig = collectionConfigService.newCollectionConfig(\"Collection\");\n                scope.collectionCollectionConfig.setDisplayProperties(\"collectionID,collectionName\");\n                scope.collectionCollectionConfig.addFilter(\"collectionObject\", scope.workflow.data.workflowObject);\n                scope.updateCollection = function (collectionConfigData) {\n                    if (scope.workflowTriggers && scope.workflowTriggers.selectedTrigger && collectionConfigData.collectionConfig && collectionConfigData.collectionConfig.collectionConfigString) {\n                        scope.workflowTriggers.selectedTrigger.data.scheduleCollectionConfig = angular.copy(collectionConfigData.collectionConfig.collectionConfigString);\n                        scope.workflowTriggers.selectedTrigger.workflowTriggerCollectionConfig = collectionConfigService.newCollectionConfig().loadJson(scope.workflowTriggers.selectedTrigger.data.scheduleCollectionConfig.toString());\n                        //update the property display programatically\n                        observerService.notifyById('pullBindings', 'WorkflowTriggerscheduleCollectionConfigpullBindings').then(function () {\n                        });\n                    }\n                };\n                observerService.attach(function (item) {\n                    scope.collectionCollectionConfig.clearFilters();\n                    scope.collectionCollectionConfig.addFilter(\"collectionObject\", item.value);\n                    scope.eventOptions = [];\n                }, 'WorkflowWorkflowObjectOnChange');\n                observerService.attach(scope.updateCollection, 'filterItemAction');\n                scope.scheduleCollectionConfig = collectionConfigService.newCollectionConfig(\"Schedule\");\n                scope.scheduleCollectionConfig.setDisplayProperties(\"scheduleID,scheduleName,daysOfMonthToRun,daysOfWeekToRun,recuringType,frequencyStartTime,frequencyEndTime,frequencyInterval\");\n                scope.daysOfweek = [];\n                scope.daysOfMonth = [];\n                scope.$id = 'swWorkflowTriggers';\n                /**\n                 * Retrieves the workflow triggers.\n                 */\n                scope.getWorkflowTriggers = function () {\n                    /***\n                       Note:\n                       This conditional is checking whether or not we need to be retrieving to\n                       items all over again. If we already have them, we won't make another\n                       trip to the database.\n\n                    ***/\n                    if (!scope.workflow.$$isPersisted()) {\n                        scope.workflow.data.workflowTriggers = [];\n                        scope.workflowTriggers = scope.workflow.data.workflowTriggers;\n                        return;\n                    }\n                    if (angular.isUndefined(scope.workflow.data.workflowTriggers)) {\n                        var workflowTriggersPromise = scope.workflow.$$getWorkflowTriggers();\n                        workflowTriggersPromise.then(function () {\n                            scope.workflowTriggers = scope.workflow.data.workflowTriggers;\n                            /* resets the workflow trigger */\n                            if (angular.isUndefined(scope.workflow.data.workflowTriggers)) {\n                                scope.workflow.data.workflowTriggers = [];\n                                scope.workflowTriggers = scope.workflow.data.workflowTriggers;\n                            }\n                            angular.forEach(scope.workflowTriggers, function (workflowTrigger, key) {\n                                if (workflowTrigger.data.triggerType === 'Schedule') {\n                                    workflowTrigger.$$getSchedule();\n                                    workflowTrigger.$$getScheduleCollection();\n                                } //<---end if\n                            }); //<---end forEach\n                        }); //<---end workflow triggers promise\n                    }\n                    else {\n                        //Use the cached versions.\n                        scope.workflowTriggers = scope.workflow.data.workflowTriggers;\n                    } //<---end else\n                };\n                scope.getWorkflowTriggers(); //call triggers\n                scope.showCollections = false;\n                scope.collections = [];\n                scope.searchEvent = {\n                    name: ''\n                };\n                /**\n                 * Watches for changes in the event\n                 */\n                scope.showEventOptions = false;\n                scope.eventOptions = [];\n                /**\n                 * Retrieves the event options for a workflow trigger item.\n                 */\n                scope.getEventOptions = function (objectName) {\n                    if (!scope.eventOptions.length) {\n                        var eventOptionsPromise = $hibachi.getEventOptions(objectName);\n                        eventOptionsPromise.then(function (value) {\n                            scope.eventOptions = value.data;\n                        });\n                    }\n                    scope.showEventOptions = !scope.showEventOptions;\n                };\n                /**\n                 * Saves the workflow triggers then cascade a save to the workflow object as well.\n                 */\n                scope.saveWorkflowTrigger = function (context) {\n                    if (!scope.workflowTriggers.selectedTrigger.$$isPersisted()) {\n                        scope.workflowTriggers.selectedTrigger.$$setWorkflow(scope.workflow);\n                    }\n                    var saveWorkflowTriggerPromise = scope.workflowTriggers.selectedTrigger.$$save();\n                    saveWorkflowTriggerPromise.then(function () {\n                        scope.showEventOptions = true;\n                        scope.searchEvent = {\n                            name: ''\n                        };\n                        scope.schedule.selectedName = '';\n                        scope.schedulePreview = {};\n                        //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished\n                        if (context == 'add') {\n                            scope.addWorkflowTrigger();\n                        }\n                        else if (context == \"finish\") {\n                            scope.workflowTriggers.selectedTrigger = undefined;\n                        }\n                        //auto saves the workflow as well.\n                        scope.workflow.$$save();\n                    });\n                };\n                scope.closeTrigger = function () {\n                    if (!scope.workflowTriggers.selectedTrigger.$$isPersisted()) {\n                        scope.workflowTriggers.selectedTrigger.$$setWorkflow();\n                    }\n                    scope.workflowTriggers.selectedTrigger = undefined;\n                };\n                /**\n                 * Changes the selected trigger value.\n                 */\n                scope.selectEvent = function (eventOption) {\n                    //Needs to clear old and set new.\n                    scope.workflowTriggers.selectedTrigger.data.triggerEventTitle = eventOption.name;\n                    scope.workflowTriggers.selectedTrigger.data.triggerEvent = eventOption.value;\n                    if (eventOption.entityName == scope.workflow.data.workflowObject) {\n                        scope.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier = '';\n                    }\n                    else {\n                        scope.workflowTriggers.selectedTrigger.data.objectPropertyIdentifier = eventOption.entityName;\n                    }\n                    scope.searchEvent.name = eventOption.name;\n                    scope.showEventOptions = false;\n                    observerService.notifyById('pullBindings', 'WorkflowTriggertriggerEventpullBindings').then(function () {\n                    });\n                    observerService.notifyById('pullBindings', 'WorkflowTriggertriggerEventTitlepullBindings').then(function () {\n                    });\n                };\n                /**\n                 * Selects a new collection.\n                 */\n                scope.selectCollection = function (collection) {\n                    scope.workflowTriggers.selectedTrigger.data.scheduleCollection = collection;\n                    scope.showCollections = false;\n                };\n                /**\n                 * Removes a workflow trigger\n                 */\n                scope.removeWorkflowTrigger = function (workflowTrigger) {\n                    if (workflowTrigger === scope.workflowTriggers.selectedTrigger) {\n                        delete scope.workflowTriggers.selectedTrigger;\n                    }\n                    scope.workflowTriggers.splice(workflowTrigger.$$index, 1);\n                };\n                scope.setAsEvent = function (workflowTrigger) {\n                    if (!workflowTrigger.$$isPersisted()) {\n                        workflowTrigger.data.saveTriggerHistoryFlag = 0;\n                    }\n                    //add event,  clear schedule\n                };\n                scope.setAsSchedule = function (workflowTrigger) {\n                    if (!workflowTrigger.$$isPersisted()) {\n                        workflowTrigger.data.saveTriggerHistoryFlag = 1;\n                    }\n                };\n                /**\n                 * Adds a workflow trigger.\n                 */\n                scope.addWorkflowTrigger = function () {\n                    var newWorkflowTrigger = $hibachi.newWorkflowTrigger();\n                    scope.workflowTriggers.selectedTrigger = newWorkflowTrigger;\n                };\n                scope.addNewSchedule = function () {\n                    scope.createSchedule = true;\n                    scope.scheduleEntity = $hibachi.newSchedule();\n                };\n                scope.saveSchedule = function () {\n                    if (scope.scheduleEntity.data.recuringType == 'weekly') {\n                        scope.scheduleEntity.data.daysOfWeekToRun = scope.daysOfweek.filter(Number).join();\n                    }\n                    else if (scope.scheduleEntity.data.recuringType == 'monthly') {\n                        scope.scheduleEntity.data.daysOfMonthToRun = scope.daysOfMonth.filter(Number).join();\n                    }\n                    scope.scheduleEntity.$$save().then(function (res) {\n                        scope.schedule.selectedName = angular.copy(scope.scheduleEntity.data.scheduleName);\n                        scope.selectSchedule(angular.copy(scope.scheduleEntity.data));\n                        formService.resetForm(scope.scheduleEntity.forms['scheduleForm']);\n                        scope.createSchedule = false;\n                    }, function () {\n                    });\n                };\n                scope.selectCollection = function (item) {\n                    if (item === undefined) {\n                        scope.workflowTriggers.selectedTrigger.$$setScheduleCollection();\n                        return;\n                    }\n                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.scheduleCollection)) {\n                        scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID = item.collectionID;\n                        scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionName = item.collectionName;\n                    }\n                    else {\n                        var _collection = $hibachi.newCollection();\n                        _collection.data.collectionID = item.collectionID;\n                        _collection.data.collectionName = item.collectionName;\n                        scope.workflowTriggers.selectedTrigger.$$setScheduleCollection(_collection);\n                    }\n                };\n                scope.viewCollection = function () {\n                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.scheduleCollection)) {\n                        dialogService.addPageDialog('org/Hibachi/client/src/collection/components/criteriacreatecollection', {\n                            entityName: 'Collection',\n                            entityId: scope.workflowTriggers.selectedTrigger.data.scheduleCollection.data.collectionID,\n                            readOnly: true\n                        });\n                    }\n                };\n                scope.selectSchedule = function (item) {\n                    if (item === undefined) {\n                        scope.schedulePreview = {};\n                        scope.workflowTriggers.selectedTrigger.$$setSchedule();\n                        return;\n                    }\n                    scope.schedulePreview = scheduleService.buildSchedulePreview(item, 6);\n                    if (angular.isDefined(scope.workflowTriggers.selectedTrigger.data.schedule)) {\n                        scope.workflowTriggers.selectedTrigger.data.schedule.data.scheduleID = item.scheduleID;\n                        scope.workflowTriggers.selectedTrigger.data.schedule.data.scheduleName = item.scheduleName;\n                    }\n                    else {\n                        var _schedule = $hibachi.newSchedule();\n                        _schedule.data.scheduleID = item.scheduleID;\n                        _schedule.data.scheduleName = item.scheduleName;\n                        scope.workflowTriggers.selectedTrigger.$$setSchedule(_schedule);\n                    }\n                };\n            }\n        };\n    }\n    SWWorkflowTriggers.Factory = function () {\n        var directive = function ($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService) { return new SWWorkflowTriggers($hibachi, workflowPartialsPath, formService, observerService, hibachiPathBuilder, collectionConfigService, scheduleService, dialogService); };\n        directive.$inject = [\n            '$hibachi',\n            'workflowPartialsPath',\n            'formService',\n            'observerService',\n            'hibachiPathBuilder',\n            'collectionConfigService',\n            'scheduleService',\n            'dialogService'\n        ];\n        return directive;\n    };\n    return SWWorkflowTriggers;\n}());\nexports.SWWorkflowTriggers = SWWorkflowTriggers;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/components/swworkflowtriggers.ts?")},"../../../org/Hibachi/client/src/workflow/services/scheduleservice.ts":
/*!*************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/services/scheduleservice.ts ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar baseentityservice_1 = __webpack_require__(/*! ../../core/services/baseentityservice */ \"../../../org/Hibachi/client/src/core/services/baseentityservice.ts\");\nvar ScheduleService = /** @class */ (function (_super) {\n    __extends(ScheduleService, _super);\n    //@ngInject\n    function ScheduleService($injector, $hibachi, utilityService) {\n        var _this = _super.call(this, $injector, $hibachi, utilityService, 'Schedule') || this;\n        _this.$injector = $injector;\n        _this.$hibachi = $hibachi;\n        _this.utilityService = utilityService;\n        _this.schedulePreview = {};\n        _this.clearSchedulePreview = function () {\n            _this.schedulePreview = {};\n        };\n        _this.addSchedulePreviewItem = function (cdate, longMonthName) {\n            if (longMonthName === void 0) { longMonthName = true; }\n            var weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n            var month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n            var monthShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n            var currentDate = (cdate.getMonth() + 1) + '-' + cdate.getDate() + '-' + cdate.getFullYear();\n            if (_this.schedulePreview[currentDate] === undefined) {\n                _this.schedulePreview[currentDate] = {\n                    day: cdate.getDate(),\n                    month: (longMonthName) ? month[cdate.getMonth()] : monthShort[cdate.getMonth()],\n                    year: cdate.getFullYear(),\n                    weekday: weekday[cdate.getDay()],\n                    times: []\n                };\n            }\n            _this.schedulePreview[currentDate].times.push(cdate.toLocaleTimeString());\n        };\n        _this.buildSchedulePreview = function (scheduleObject, totalOfPreviews) {\n            if (totalOfPreviews === void 0) { totalOfPreviews = 10; }\n            _this.clearSchedulePreview();\n            var startTime = new Date(Date.parse(scheduleObject.frequencyStartTime));\n            var endTime = (scheduleObject.frequencyEndTime.trim()) ? new Date(Date.parse(scheduleObject.frequencyEndTime)) : false;\n            var now = new Date();\n            var startPoint = new Date();\n            startPoint.setHours(startTime.getHours());\n            startPoint.setMinutes(startTime.getMinutes());\n            startPoint.setSeconds(startTime.getSeconds());\n            var daysToRun = [];\n            if (scheduleObject.recuringType == 'weekly') {\n                daysToRun = scheduleObject.daysOfWeekToRun.toString().split(',');\n                if (!daysToRun.length || scheduleObject.daysOfWeekToRun.toString().trim() == '') {\n                    return _this.schedulePreview;\n                }\n            }\n            if (scheduleObject.recuringType == 'monthly') {\n                daysToRun = scheduleObject.daysOfMonthToRun.toString().split(',');\n                if (!daysToRun.length || !scheduleObject.daysOfWeekToRun || scheduleObject.daysOfWeekToRun.toString().trim() == '') {\n                    return _this.schedulePreview;\n                }\n            }\n            var datesAdded = 0;\n            for (var i = 0;; i++) {\n                if (datesAdded >= totalOfPreviews || i >= 500)\n                    break;\n                var timeToadd = (scheduleObject.frequencyInterval && scheduleObject.frequencyInterval.toString().trim()) ? (scheduleObject.frequencyInterval * i) * 60000 : i * 24 * 60 * 60 * 1000;\n                var currentDatetime = new Date(startPoint.getTime() + timeToadd);\n                if (currentDatetime < now)\n                    continue;\n                if (scheduleObject.recuringType == 'weekly') {\n                    if (daysToRun.indexOf((currentDatetime.getDay() + 1).toString()) == -1)\n                        continue;\n                }\n                else if (scheduleObject.recuringType == 'monthly') {\n                    if (daysToRun.indexOf(currentDatetime.getDate().toString()) == -1)\n                        continue;\n                }\n                if (!endTime) {\n                    _this.addSchedulePreviewItem(currentDatetime);\n                    datesAdded++;\n                }\n                else {\n                    if (_this.utilityService.minutesOfDay(startTime) <= _this.utilityService.minutesOfDay(currentDatetime)\n                        && _this.utilityService.minutesOfDay(endTime) >= _this.utilityService.minutesOfDay(currentDatetime)) {\n                        _this.addSchedulePreviewItem(currentDatetime);\n                        datesAdded++;\n                    }\n                }\n            }\n            return _this.schedulePreview;\n        };\n        return _this;\n    }\n    return ScheduleService;\n}(baseentityservice_1.BaseEntityService));\nexports.ScheduleService = ScheduleService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/services/scheduleservice.ts?")},"../../../org/Hibachi/client/src/workflow/services/workflowconditionservice.ts":
/*!**********************************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/services/workflowconditionservice.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/hibachiTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar WorkflowCondition = /** @class */ (function () {\n    function WorkflowCondition() {\n        this.propertyIdentifer = "";\n        this.comparisonOperator = "";\n        this.value = "";\n        this.displayPropertyIdentifier = "";\n        this.$$disabled = false;\n        this.$$isClosed = true;\n        this.$$isNew = true;\n    }\n    return WorkflowCondition;\n}());\nexports.WorkflowCondition = WorkflowCondition;\nvar WorkflowConditionGroupItem = /** @class */ (function () {\n    function WorkflowConditionGroupItem() {\n        this.workflowConditionGroup = [];\n    }\n    return WorkflowConditionGroupItem;\n}());\nexports.WorkflowConditionGroupItem = WorkflowConditionGroupItem;\nvar WorkflowConditionService = /** @class */ (function () {\n    function WorkflowConditionService($log, $hibachi, alertService) {\n        var _this = this;\n        this.$log = $log;\n        this.newWorkflowCondition = function () {\n            return new WorkflowCondition;\n        };\n        this.addWorkflowCondition = function (groupItem, condition) {\n            _this.$log.debug(\'addWorkflowCondition\');\n            _this.$log.debug(groupItem);\n            _this.$log.debug(condition);\n            if (groupItem.length >= 1) {\n                condition.logicalOperator = \'AND\';\n            }\n            groupItem.push(condition);\n        };\n        this.newWorkflowConditionGroupItem = function () {\n            return new WorkflowConditionGroupItem;\n        };\n        this.addWorkflowConditionGroupItem = function (group, groupItem) {\n            group.push(groupItem);\n        };\n    }\n    WorkflowConditionService.$inject = ["$log", "$hibachi", "alertService"];\n    return WorkflowConditionService;\n}());\nexports.WorkflowConditionService = WorkflowConditionService;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/services/workflowconditionservice.ts?')},"../../../org/Hibachi/client/src/workflow/workflow.module.ts":
/*!****************************************************************************************************************!*\
  !*** /home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/workflow.module.ts ***!
  \****************************************************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/hibachiTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//services\nvar workflowconditionservice_1 = __webpack_require__(/*! ./services/workflowconditionservice */ \"../../../org/Hibachi/client/src/workflow/services/workflowconditionservice.ts\");\nvar scheduleservice_1 = __webpack_require__(/*! ./services/scheduleservice */ \"../../../org/Hibachi/client/src/workflow/services/scheduleservice.ts\");\n//directives\nvar swadmincreatesuperuser_1 = __webpack_require__(/*! ./components/swadmincreatesuperuser */ \"../../../org/Hibachi/client/src/workflow/components/swadmincreatesuperuser.ts\");\nvar swworkflowbasic_1 = __webpack_require__(/*! ./components/swworkflowbasic */ \"../../../org/Hibachi/client/src/workflow/components/swworkflowbasic.ts\");\nvar swworkflowcondition_1 = __webpack_require__(/*! ./components/swworkflowcondition */ \"../../../org/Hibachi/client/src/workflow/components/swworkflowcondition.ts\");\nvar swworkflowconditiongroupitem_1 = __webpack_require__(/*! ./components/swworkflowconditiongroupitem */ \"../../../org/Hibachi/client/src/workflow/components/swworkflowconditiongroupitem.ts\");\nvar swworkflowconditiongroups_1 = __webpack_require__(/*! ./components/swworkflowconditiongroups */ \"../../../org/Hibachi/client/src/workflow/components/swworkflowconditiongroups.ts\");\nvar swworkflowtask_1 = __webpack_require__(/*! ./components/swworkflowtask */ \"../../../org/Hibachi/client/src/workflow/components/swworkflowtask.ts\");\nvar swworkflowtaskactions_1 = __webpack_require__(/*! ./components/swworkflowtaskactions */ \"../../../org/Hibachi/client/src/workflow/components/swworkflowtaskactions.ts\");\nvar swworkflowtasks_1 = __webpack_require__(/*! ./components/swworkflowtasks */ \"../../../org/Hibachi/client/src/workflow/components/swworkflowtasks.ts\");\nvar swworkflowtrigger_1 = __webpack_require__(/*! ./components/swworkflowtrigger */ \"../../../org/Hibachi/client/src/workflow/components/swworkflowtrigger.ts\");\nvar swworkflowtriggers_1 = __webpack_require__(/*! ./components/swworkflowtriggers */ \"../../../org/Hibachi/client/src/workflow/components/swworkflowtriggers.ts\");\nvar swworkflowtriggerhistory_1 = __webpack_require__(/*! ./components/swworkflowtriggerhistory */ \"../../../org/Hibachi/client/src/workflow/components/swworkflowtriggerhistory.ts\");\nvar swschedulepreview_1 = __webpack_require__(/*! ./components/swschedulepreview */ \"../../../org/Hibachi/client/src/workflow/components/swschedulepreview.ts\");\n//filters\nvar workflowmodule = angular.module('hibachi.workflow', ['hibachi.collection']).config(function () {\n})\n    //constants\n    .constant('workflowPartialsPath', 'workflow/components/')\n    //services\n    .service('workflowConditionService', workflowconditionservice_1.WorkflowConditionService)\n    .service('scheduleService', scheduleservice_1.ScheduleService)\n    //directives\n    .directive('swAdminCreateSuperUser', swadmincreatesuperuser_1.SWAdminCreateSuperUser.Factory())\n    .directive('swWorkflowBasic', swworkflowbasic_1.SWWorkflowBasic.Factory())\n    .directive('swWorkflowCondition', swworkflowcondition_1.SWWorkflowCondition.Factory())\n    .directive('swWorkflowConditionGroupItem', swworkflowconditiongroupitem_1.SWWorkflowConditionGroupItem.Factory())\n    .directive('swWorkflowConditionGroups', swworkflowconditiongroups_1.SWWorkflowConditionGroups.Factory())\n    .directive('swWorkflowTask', swworkflowtask_1.SWWorkflowTask.Factory())\n    .directive('swWorkflowTaskActions', swworkflowtaskactions_1.SWWorkflowTaskActions.Factory())\n    .directive('swWorkflowTasks', swworkflowtasks_1.SWWorkflowTasks.Factory())\n    .directive('swWorkflowTrigger', swworkflowtrigger_1.SWWorkflowTrigger.Factory())\n    .directive('swWorkflowTriggers', swworkflowtriggers_1.SWWorkflowTriggers.Factory())\n    .directive('swWorkflowTriggerHistory', swworkflowtriggerhistory_1.SWWorkflowTriggerHistory.Factory())\n    .directive('swSchedulePreview', swschedulepreview_1.SWSchedulePreview.Factory());\nexports.workflowmodule = workflowmodule;\n\n\n//# sourceURL=webpack:////home/ec2-user/environment/dev-ops/projects/slatwall2/org/Hibachi/client/src/workflow/workflow.module.ts?")},"./bootstrap.ts":
/*!**********************!*\
  !*** ./bootstrap.ts ***!
  \**********************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/// <reference path='../typings/slatwallTypescript.d.ts' />\n/// <reference path='../typings/tsd.d.ts' />\n/*jshint browser:true */\nvar basebootstrap_1 = __webpack_require__(/*! ../../../org/Hibachi/client/src/basebootstrap */ \"../../../org/Hibachi/client/src/basebootstrap.ts\");\nvar slatwalladmin_module_1 = __webpack_require__(/*! ./slatwall/slatwalladmin.module */ \"./slatwall/slatwalladmin.module.ts\");\n//custom bootstrapper\nvar bootstrapper = /** @class */ (function (_super) {\n    __extends(bootstrapper, _super);\n    function bootstrapper() {\n        var _this = this;\n        var angular = _this = _super.call(this, slatwalladmin_module_1.slatwalladminmodule.name) || this;\n        angular.bootstrap();\n        return _this;\n    }\n    return bootstrapper;\n}(basebootstrap_1.BaseBootStrapper));\nmodule.exports = new bootstrapper();\n\n\n//# sourceURL=webpack:///./bootstrap.ts?")},"./content/components/swassignedproducts.ts":
/*!**************************************************!*\
  !*** ./content/components/swassignedproducts.ts ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWAssignedProductsController = /** @class */ (function () {\n    //@ngInject\n    function SWAssignedProductsController(collectionConfigService, utilityService) {\n        this.collectionConfigService = collectionConfigService;\n        this.utilityService = utilityService;\n        this.collectionConfig = collectionConfigService.newCollectionConfig("Product");\n        this.collectionConfig.addDisplayProperty("productID,productName,productCode,calculatedSalePrice,activeFlag,publishedFlag,productType.productTypeNamePath,productType.productTypeName,defaultSku.price");\n        this.alreadySelectedProductsCollectionConfig = collectionConfigService.newCollectionConfig("ProductListingPage");\n        this.alreadySelectedProductsCollectionConfig.addDisplayProperty("productListingPageID,sortOrder,product.productID,product.productName,product.productCode,product.calculatedSalePrice,product.activeFlag,product.publishedFlag");\n        this.alreadySelectedProductsCollectionConfig.addFilter("content.contentID", this.contentId, "=");\n        this.typeaheadDataKey = utilityService.createID(32);\n    }\n    return SWAssignedProductsController;\n}());\nexports.SWAssignedProductsController = SWAssignedProductsController;\nvar SWAssignedProducts = /** @class */ (function () {\n    //@ngInject\n    function SWAssignedProducts($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder) {\n        this.$http = $http;\n        this.$hibachi = $hibachi;\n        this.paginationService = paginationService;\n        this.contentPartialsPath = contentPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            contentId: "@?",\n            edit: "=?",\n            productSortProperty: "@?",\n            productSortDefaultDirection: "@?"\n        };\n        this.controller = SWAssignedProductsController;\n        this.controllerAs = "swAssignedProducts";\n        this.link = function ($scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "/assignedproducts.html";\n    }\n    SWAssignedProducts.Factory = function () {\n        var directive = function ($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder) { return new SWAssignedProducts($http, $hibachi, paginationService, contentPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$http\',\n            \'$hibachi\',\n            \'paginationService\',\n            \'contentPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWAssignedProducts;\n}());\nexports.SWAssignedProducts = SWAssignedProducts;\n\n\n//# sourceURL=webpack:///./content/components/swassignedproducts.ts?')},"./content/components/swcontentbasic.ts":
/*!**********************************************!*\
  !*** ./content/components/swcontentbasic.ts ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWContentBasic = /** @class */ (function () {\n    function SWContentBasic($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) {\n        return {\n            restrict: 'EA',\n            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + \"contentbasic.html\",\n            link: function (scope, element, attrs) {\n                if (!scope.content.$$isPersisted()) {\n                    if (angular.isDefined($routeParams.siteID)) {\n                        var sitePromise;\n                        var options = {\n                            id: $routeParams.siteID\n                        };\n                        sitePromise = $hibachi.getSite(options);\n                        sitePromise.promise.then(function () {\n                            var site = sitePromise.value;\n                            scope.content.$$setSite(site);\n                        });\n                    }\n                    else {\n                        var site = $hibachi.newSite();\n                        scope.content.$$setSite(site);\n                    }\n                    var parentContent;\n                    if (angular.isDefined($routeParams.parentContentID)) {\n                        var parentContentPromise;\n                        var options = {\n                            id: $routeParams.parentContentID\n                        };\n                        parentContentPromise = $hibachi.getContent(options);\n                        parentContentPromise.promise.then(function () {\n                            var parentContent = parentContentPromise.value;\n                            scope.content.$$setParentContent(parentContent);\n                            $log.debug('contenttest');\n                            $log.debug(scope.content);\n                        });\n                    }\n                    else {\n                        var parentContent = $hibachi.newContent();\n                        scope.content.$$setParentContent(parentContent);\n                    }\n                    var contentTemplateType = $hibachi.newType();\n                    scope.content.$$setContentTemplateType(contentTemplateType);\n                }\n                else {\n                    scope.content.$$getSite();\n                    scope.content.$$getParentContent();\n                    scope.content.$$getContentTemplateType();\n                }\n            }\n        };\n    }\n    SWContentBasic.Factory = function () {\n        var directive = function ($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) { return new SWContentBasic($log, $routeParams, $hibachi, formService, contentPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            '$log',\n            '$routeParams',\n            '$hibachi',\n            'formService',\n            'contentPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWContentBasic;\n}());\nexports.SWContentBasic = SWContentBasic;\n\n\n//# sourceURL=webpack:///./content/components/swcontentbasic.ts?")},"./content/components/swcontenteditor.ts":
/*!***********************************************!*\
  !*** ./content/components/swcontenteditor.ts ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWContentEditor = /** @class */ (function () {\n    function SWContentEditor($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) {\n        return {\n            restrict: 'EA',\n            scope: {\n                content: \"=\"\n            },\n            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + \"contenteditor.html\",\n            link: function (scope, element, attrs) {\n                scope.editorOptions = CKEDITOR.editorConfig;\n                scope.onContentChange = function () {\n                    var form = formService.getForm('contentEditor');\n                    form.contentBody.$setDirty();\n                };\n                //                scope.saveContent = function(){\n                //                   var urlString = _config.baseURL+'/index.cfm/?slatAction=api:main.post';\n                //                   var params = {\n                //                        entityID:scope.content.contentID,\n                //                        templateHTML:scope.content.templateHTML,\n                //                        context:'saveTemplateHTML',\n                //                        entityName:'content'\n                //                   }\n                //                   $http.post(urlString,\n                //                        {\n                //                            params:params\n                //                        }\n                //                    )\n                //                    .success(function(data){\n                //                    }).error(function(reason){\n                //                    });\n                //                }\n            }\n        };\n    }\n    SWContentEditor.Factory = function () {\n        var directive = function ($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder) { return new SWContentEditor($log, $location, $http, $hibachi, formService, contentPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            '$log',\n            '$location',\n            '$http',\n            '$hibachi',\n            'formService',\n            'contentPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWContentEditor;\n}());\nexports.SWContentEditor = SWContentEditor;\n\n\n//# sourceURL=webpack:///./content/components/swcontenteditor.ts?")},"./content/components/swcontentlist.ts":
/*!*********************************************!*\
  !*** ./content/components/swcontentlist.ts ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWContentListController = /** @class */ (function () {\n    //@ngInject\n    function SWContentListController($scope, $log, $timeout, $hibachi, paginationService, observerService, collectionConfigService, localStorageService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$log = $log;\n        this.$timeout = $timeout;\n        this.$hibachi = $hibachi;\n        this.paginationService = paginationService;\n        this.observerService = observerService;\n        this.collectionConfigService = collectionConfigService;\n        this.localStorageService = localStorageService;\n        this.openRoot = true;\n        this.$log.debug('slatwallcontentList init');\n        var pageShow = 50;\n        if (this.pageShow !== 'Auto') {\n            pageShow = this.pageShow;\n        }\n        this.pageShowOptions = [\n            { display: 10, value: 10 },\n            { display: 20, value: 20 },\n            { display: 50, value: 50 },\n            { display: 250, value: 250 }\n        ];\n        this.loadingCollection = false;\n        if (this.localStorageService.hasItem('selectedSiteOption')) {\n            this.selectedSite = this.localStorageService.getItem('selectedSiteOption');\n        }\n        this.orderBy;\n        var orderByConfig;\n        this.getCollection = function (isSearching) {\n            _this.collectionConfig = collectionConfigService.newCollectionConfig('Content');\n            var columnsConfig = [\n                //{\"propertyIdentifier\":\"_content_childContents\",\"title\":\"\",\"isVisible\":true,\"isDeletable\":true,\"isSearchable\":true,\"isExportable\":true,\"ormtype\":\"string\",\"aggregate\":{\"aggregateFunction\":\"COUNT\",\"aggregateAlias\":\"childContentsCount\"}},\n                {\n                    propertyIdentifier: '_content.contentID',\n                    isVisible: false,\n                    ormtype: 'id',\n                    isSearchable: true\n                },\n                {\n                    propertyIdentifier: '_content.urlTitlePath',\n                    isVisible: false,\n                    isSearchable: true\n                },\n                //need to get template via settings\n                {\n                    propertyIdentifier: '_content.allowPurchaseFlag',\n                    isVisible: true,\n                    ormtype: 'boolean',\n                    isSearchable: false\n                },\n                {\n                    propertyIdentifier: '_content.productListingPageFlag',\n                    isVisible: true,\n                    ormtype: 'boolean',\n                    isSearchable: false\n                },\n                {\n                    propertyIdentifier: '_content.activeFlag',\n                    isVisible: true,\n                    ormtype: 'boolean',\n                    isSearchable: false\n                }\n            ];\n            var options = {\n                currentPage: '1',\n                pageShow: '1',\n                keywords: _this.keywords\n            };\n            var column = {};\n            if (!isSearching || _this.keywords === '') {\n                _this.isSearching = false;\n                var filterGroupsConfig = [\n                    {\n                        \"filterGroup\": [\n                            {\n                                \"propertyIdentifier\": \"parentContent\",\n                                \"comparisonOperator\": \"is\",\n                                \"value\": 'null'\n                            }\n                        ]\n                    }\n                ];\n                column = {\n                    propertyIdentifier: '_content.title',\n                    isVisible: true,\n                    ormtype: 'string',\n                    isSearchable: true,\n                    tdclass: 'primary'\n                };\n                columnsConfig.unshift(column);\n            }\n            else {\n                _this.collectionConfig.setKeywords(_this.keywords);\n                _this.isSearching = true;\n                var filterGroupsConfig = [\n                    {\n                        \"filterGroup\": [\n                            {\n                                \"propertyIdentifier\": \"excludeFromSearch\",\n                                \"comparisonOperator\": \"!=\",\n                                \"value\": true\n                            }\n                        ]\n                    }\n                ];\n                column = {\n                    propertyIdentifier: '_content.title',\n                    isVisible: false,\n                    ormtype: 'string',\n                    isSearchable: true\n                };\n                columnsConfig.unshift(column);\n                var titlePathColumn = {\n                    propertyIdentifier: '_content.titlePath',\n                    isVisible: true,\n                    ormtype: 'string',\n                    isSearchable: false\n                };\n                columnsConfig.unshift(titlePathColumn);\n            }\n            //if we have a selected Site add the filter\n            if (_this.selectedSite && _this.selectedSite.siteID) {\n                var selectedSiteFilter = {\n                    logicalOperator: \"AND\",\n                    propertyIdentifier: \"site.siteID\",\n                    comparisonOperator: \"=\",\n                    value: _this.selectedSite.siteID\n                };\n                filterGroupsConfig[0].filterGroup.push(selectedSiteFilter);\n            }\n            if (angular.isDefined(_this.orderBy)) {\n                var orderByConfig = [];\n                orderByConfig.push(_this.orderBy);\n                options.orderByConfig = angular.toJson(orderByConfig);\n            }\n            angular.forEach(columnsConfig, function (column) {\n                _this.collectionConfig.addColumn(column.propertyIdentifier, column.title, column);\n            });\n            _this.collectionConfig.addDisplayAggregate('childContents', 'COUNT', 'childContentsCount', { isVisible: false, isSearchable: false, title: 'test' });\n            _this.collectionConfig.addDisplayProperty('site.siteID', undefined, {\n                isVisible: false,\n                ormtype: 'id',\n                isSearchable: false\n            });\n            _this.collectionConfig.addDisplayProperty('site.domainNames', undefined, {\n                isVisible: false,\n                isSearchable: true\n            });\n            angular.forEach(filterGroupsConfig[0].filterGroup, function (filter) {\n                _this.collectionConfig.addFilter(filter.propertyIdentifier, filter.value, filter.comparisonOperator, filter.logicalOperator);\n            });\n            _this.collectionListingPromise = _this.collectionConfig.getEntity();\n            _this.collectionListingPromise.then(function (value) {\n                _this.$timeout(function () {\n                    _this.collection = value;\n                    _this.collection.collectionConfig = _this.collectionConfig;\n                    _this.firstLoad = true;\n                    _this.loadingCollection = false;\n                });\n            });\n            return _this.collectionListingPromise;\n        };\n        //this.getCollection(false);\n        this.loadingCollection = false;\n        this.searchCollection = function () {\n            $log.debug('search with keywords');\n            $log.debug(_this.keywords);\n            $('.childNode').remove();\n            //Set current page here so that the pagination does not break when getting collection\n            _this.loadingCollection = true;\n            var promise = _this.getCollection(true);\n            promise.then(function () {\n                _this.collection.collectionConfig = _this.collectionConfig;\n                _this.loadingCollection = false;\n            });\n        };\n        var siteChanged = function (selectedSiteOption) {\n            _this.localStorageService.setItem('selectedSiteOption', selectedSiteOption);\n            _this.selectedSite = _this.localStorageService.getItem('selectedSiteOption');\n            _this.openRoot = true;\n            _this.getCollection();\n        };\n        this.observerService.attach(siteChanged, 'optionsChanged', 'siteOptions');\n        var sortChanged = function (orderBy) {\n            _this.orderBy = orderBy;\n            _this.getCollection();\n        };\n        this.observerService.attach(sortChanged, 'sortByColumn', 'siteSorting');\n        var optionsLoaded = function () {\n            var option;\n            if (_this.selectedSite) {\n                option = _this.selectedSite;\n            }\n            _this.observerService.notify('selectOption', option);\n        };\n        this.observerService.attach(optionsLoaded, 'optionsLoaded', 'siteOptionsLoaded');\n    }\n    return SWContentListController;\n}());\nvar SWContentList = /** @class */ (function () {\n    //@ngInject\n    function SWContentList(contentPartialsPath, observerService, slatwallPathBuilder) {\n        this.restrict = 'E';\n        //public bindToController=true;\n        this.controller = SWContentListController;\n        this.controllerAs = \"swContentList\";\n        this.link = function (scope, element, attrs, controller, transclude) {\n            scope.$on('$destroy', function handler() {\n                this.observerService.detachByEvent('optionsChanged');\n                this.observerService.detachByEvent('sortByColumn');\n            });\n        };\n        this.observerService = observerService;\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + 'contentlist.html';\n    }\n    SWContentList.Factory = function () {\n        var directive = function (contentPartialsPath, observerService, slatwallPathBuilder) { return new SWContentList(contentPartialsPath, observerService, slatwallPathBuilder); };\n        directive.$inject = [\n            'contentPartialsPath',\n            'observerService',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWContentList;\n}());\nexports.SWContentList = SWContentList;\n\n\n//# sourceURL=webpack:///./content/components/swcontentlist.ts?")},"./content/components/swcontentnode.ts":
/*!*********************************************!*\
  !*** ./content/components/swcontentnode.ts ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWContentNode = /** @class */ (function () {\n    function SWContentNode($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder) {\n        return {\n            restrict: 'A',\n            scope: {\n                contentData: '=',\n                loadChildren: \"=\"\n            },\n            templateUrl: slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + 'contentnode.html',\n            link: function (scope, element, attr) {\n                if (angular.isUndefined(scope.depth)) {\n                    scope.depth = 0;\n                }\n                if (angular.isDefined(scope.$parent.depth)) {\n                    scope.depth = scope.$parent.depth + 1;\n                }\n                var childContentColumnsConfig = [{\n                        propertyIdentifier: '_content.contentID',\n                        isVisible: false,\n                        isSearchable: false\n                    },\n                    {\n                        propertyIdentifier: '_content.title',\n                        isVisible: true,\n                        isSearchable: true\n                    },\n                    {\n                        propertyIdentifier: '_content.urlTitlePath',\n                        isVisible: true,\n                        isSearchable: true\n                    },\n                    {\n                        propertyIdentifier: '_content.site.siteID',\n                        isVisible: false,\n                        isSearchable: false\n                    },\n                    {\n                        propertyIdentifier: '_content.site.siteName',\n                        isVisible: true,\n                        isSearchable: true\n                    },\n                    {\n                        propertyIdentifier: '_content.site.domainNames',\n                        isVisible: true,\n                        isSearchable: true\n                    },\n                    //                            {\n                    //                                propertyIdentifier: '_content.contentTemplateFile',\n                    //                                persistent: false,\n                    //                                setting: true,\n                    //                                isVisible: true\n                    //                            },\n                    //need to get template via settings\n                    {\n                        propertyIdentifier: '_content.allowPurchaseFlag',\n                        isVisible: true,\n                        isSearchable: true\n                    }, {\n                        propertyIdentifier: '_content.productListingPageFlag',\n                        isVisible: true,\n                        isSearchable: true\n                    }, {\n                        propertyIdentifier: '_content.activeFlag',\n                        isVisible: true,\n                        isSearchable: true\n                    }\n                ];\n                var childContentOrderBy = [\n                    {\n                        \"propertyIdentifier\": \"_content.sortOrder\",\n                        \"direction\": \"DESC\"\n                    }\n                ];\n                scope.toggleChildContent = function (parentContentRecord) {\n                    if (angular.isUndefined(scope.childOpen) || scope.childOpen === false) {\n                        scope.childOpen = true;\n                        if (!scope.childrenLoaded) {\n                            scope.getChildContent(parentContentRecord);\n                        }\n                    }\n                    else {\n                        scope.childOpen = false;\n                    }\n                };\n                scope.getChildContent = function (parentContentRecord) {\n                    var childContentfilterGroupsConfig = [{\n                            \"filterGroup\": [{\n                                    \"propertyIdentifier\": \"_content.parentContent.contentID\",\n                                    \"comparisonOperator\": \"=\",\n                                    \"value\": parentContentRecord.contentID\n                                }]\n                        }];\n                    var collectionListingPromise = $hibachi.getEntity('Content', {\n                        columnsConfig: angular.toJson(childContentColumnsConfig),\n                        filterGroupsConfig: angular.toJson(childContentfilterGroupsConfig),\n                        orderByConfig: angular.toJson(childContentOrderBy),\n                        allRecords: true\n                    });\n                    collectionListingPromise.then(function (value) {\n                        parentContentRecord.children = value.records;\n                        var index = 0;\n                        angular.forEach(parentContentRecord.children, function (child) {\n                            child.site_domainNames = child.site_domainNames.split(\",\")[0];\n                            scope['child' + index] = child;\n                            element.after($compile('<tr class=\"childNode\" style=\"margin-left:{{depth*15||0}}px\" ng-if=\"childOpen\"  sw-content-node data-content-data=\"child' + index + '\"></tr>')(scope));\n                            index++;\n                        });\n                        scope.childrenLoaded = true;\n                    });\n                };\n                scope.childrenLoaded = false;\n                //if the children have never been loaded and we are not in search mode based on the title received\n                if (angular.isDefined(scope.loadChildren) && scope.loadChildren === true && !(scope.contentData.titlePath && scope.contentData.titlePath.trim().length)) {\n                    scope.toggleChildContent(scope.contentData);\n                }\n            }\n        };\n    }\n    SWContentNode.Factory = function () {\n        var directive = function ($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder) { return new SWContentNode($log, $compile, $hibachi, contentPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            '$log',\n            '$compile',\n            '$hibachi',\n            'contentPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWContentNode;\n}());\nexports.SWContentNode = SWContentNode;\n\n\n//# sourceURL=webpack:///./content/components/swcontentnode.ts?")},"./content/components/swsiteselector.ts":
/*!**********************************************!*\
  !*** ./content/components/swsiteselector.ts ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWSiteSelectorController = /** @class */ (function () {\n    //@ngInject\n    function SWSiteSelectorController(collectionConfigService, listingService, localStorageService, typeaheadService, utilityService) {\n        var _this = this;\n        this.collectionConfigService = collectionConfigService;\n        this.listingService = listingService;\n        this.localStorageService = localStorageService;\n        this.typeaheadService = typeaheadService;\n        this.utilityService = utilityService;\n        this.selectSite = function () {\n            _this.collectionConfigToFilter.removeFilterByDisplayPropertyIdentifier(_this.simpleFilterPropertyIdentifier);\n            console.log("selectSite", _this.selectedSite);\n            switch (_this.selectedSite) {\n                case "all":\n                    //do nothing\n                    console.log("donothing");\n                    break;\n                case "default":\n                    _this.updateDefaultSiteID();\n                    if (_this.defaultEstablished) {\n                        console.log("adding filter", _this.defaultSiteID);\n                        _this.collectionConfigToFilter.addFilter(_this.filterPropertyIdentifier, _this.defaultSiteID, "=");\n                    }\n                    break;\n                case undefined:\n                    //do nothing\n                    break;\n                default:\n                    _this.localStorageService.setItem("defaultSiteID", _this.selectedSite);\n                    _this.collectionConfigToFilter.addFilter(_this.filterPropertyIdentifier, _this.selectedSite, "=");\n                    break;\n            }\n            if (_this.withTypeahead && _this.typeaheadDataKey != null) {\n                _this.typeaheadService.getData(_this.typeaheadDataKey);\n            }\n            if (_this.inListingDisplay && _this.listingID != null) {\n                _this.listingService.getCollection(_this.listingID);\n            }\n        };\n        this.updateDefaultSiteID = function () {\n            console.log("updating default established");\n            if (_this.localStorageService.hasItem("defaultSiteID")) {\n                _this.defaultEstablished = true;\n                _this.defaultSiteID = _this.localStorageService.getItem("defaultSiteID");\n            }\n            else {\n                console.log("default established false");\n                _this.defaultEstablished = false;\n            }\n        };\n        if (angular.isUndefined(this.disabled)) {\n            this.disabled = false;\n        }\n        if (angular.isUndefined(this.simpleFilterPropertyIdentifier)) {\n            this.simpleFilterPropertyIdentifier = "siteID";\n        }\n        this.sitesCollectionConfig = collectionConfigService.newCollectionConfig("Site");\n        this.sitesCollectionConfig.addDisplayProperty("siteID, siteName, siteCode");\n        this.sitesCollectionConfig.setAllRecords(true);\n        this.sitesCollectionConfig.getEntity().then(function (data) {\n            _this.sites = data.records;\n            if (_this.sites[0]) {\n                _this.selectedSite = _this.sites[0].siteID;\n            }\n        }, function (reason) {\n            throw ("SWProductListingPages had trouble fetching sites because of " + reason);\n        }).finally(function () {\n            _this.selectSite();\n        });\n    }\n    return SWSiteSelectorController;\n}());\nexports.SWSiteSelectorController = SWSiteSelectorController;\nvar SWSiteSelector = /** @class */ (function () {\n    //@ngInject\n    function SWSiteSelector($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder) {\n        var _this = this;\n        this.$http = $http;\n        this.$hibachi = $hibachi;\n        this.listingService = listingService;\n        this.scopeService = scopeService;\n        this.contentPartialsPath = contentPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            inListingDisplay: "=?",\n            filterPropertyIdentifier: "@?",\n            collectionConfigToFilter: "=?",\n            withTypeahead: "=?",\n            typeaheadDataKey: "@?",\n            disabled: "=?"\n        };\n        this.controller = SWSiteSelectorController;\n        this.controllerAs = "swSiteSelector";\n        this.link = function ($scope, element, attrs) {\n            if ($scope.swSiteSelector.withTypeahead == null) {\n                $scope.swSiteSelector.withTypeahead = false;\n            }\n            if ($scope.swSiteSelector.inListingDisplay == null) {\n                $scope.swSiteSelector.inListingDisplay = !$scope.swSiteSelector.withTypeahead;\n            }\n            if ($scope.swSiteSelector.inListingDisplay == true && _this.scopeService.hasParentScope($scope, "swListingDisplay")) {\n                var listingDisplayScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay")["swListingDisplay"];\n                $scope.swSiteSelector.listingID = listingDisplayScope.tableID;\n                if (listingDisplayScope.collectionConfig != null) {\n                    $scope.swSiteSelector.collectionConfigToFilter = listingDisplayScope.collectionConfig;\n                }\n                _this.listingService.attachToListingInitiated($scope.swSiteSelector.listingID, $scope.swSiteSelector.selectSite);\n            }\n            else {\n                $scope.swSiteSelector.selectSite();\n            }\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(contentPartialsPath) + "/siteselector.html";\n    }\n    SWSiteSelector.Factory = function () {\n        var directive = function ($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder) { return new SWSiteSelector($http, $hibachi, listingService, scopeService, contentPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$http\',\n            \'$hibachi\',\n            \'listingService\',\n            \'scopeService\',\n            \'contentPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWSiteSelector;\n}());\nexports.SWSiteSelector = SWSiteSelector;\n\n\n//# sourceURL=webpack:///./content/components/swsiteselector.ts?')},"./content/content.module.ts":
/*!***********************************!*\
  !*** ./content/content.module.ts ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//modules\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//services\n//filters\n//directives\nvar swcontentbasic_1 = __webpack_require__(/*! ./components/swcontentbasic */ \"./content/components/swcontentbasic.ts\");\nvar swcontenteditor_1 = __webpack_require__(/*! ./components/swcontenteditor */ \"./content/components/swcontenteditor.ts\");\nvar swcontentlist_1 = __webpack_require__(/*! ./components/swcontentlist */ \"./content/components/swcontentlist.ts\");\nvar swcontentnode_1 = __webpack_require__(/*! ./components/swcontentnode */ \"./content/components/swcontentnode.ts\");\nvar swassignedproducts_1 = __webpack_require__(/*! ./components/swassignedproducts */ \"./content/components/swassignedproducts.ts\");\nvar swsiteselector_1 = __webpack_require__(/*! ./components/swsiteselector */ \"./content/components/swsiteselector.ts\");\nvar contentmodule = angular.module('hibachi.content', [core_module_1.coremodule.name]).config(function () {\n})\n    .constant('contentPartialsPath', 'content/components/')\n    //services\n    //filters\n    //directives\n    .directive('swContentBasic', swcontentbasic_1.SWContentBasic.Factory())\n    .directive('swContentEditor', swcontenteditor_1.SWContentEditor.Factory())\n    .directive('swContentList', swcontentlist_1.SWContentList.Factory())\n    .directive('swContentNode', swcontentnode_1.SWContentNode.Factory())\n    .directive('swAssignedProducts', swassignedproducts_1.SWAssignedProducts.Factory())\n    .directive('swSiteSelector', swsiteselector_1.SWSiteSelector.Factory());\nexports.contentmodule = contentmodule;\n\n\n//# sourceURL=webpack:///./content/content.module.ts?")},"./formbuilder/components/swformresponselisting.ts":
/*!*********************************************************!*\
  !*** ./formbuilder/components/swformresponselisting.ts ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWFormResponseListingController = /** @class */ (function () {\n    //@ngInject\n    function SWFormResponseListingController($filter, $http, $hibachi, paginationService, requestService) {\n        var _this = this;\n        this.$filter = $filter;\n        this.$http = $http;\n        this.$hibachi = $hibachi;\n        this.paginationService = paginationService;\n        this.requestService = requestService;\n        this.init = function () {\n            if (angular.isUndefined(_this.formId)) {\n                throw (\"Form ID is required for swFormResponseListing\");\n            }\n            _this.paginator = _this.paginationService.createPagination();\n            _this.paginator.getCollection = _this.updateFormResponses;\n            _this.updateFormResponses();\n        };\n        this.export = function () {\n            var exportFormResponseRequest = _this.requestService.newAdminRequest(_this.$hibachi.getUrlWithActionPrefix() + 'api:main.exportformresponses&formID=' + _this.formId, {}, 'GET');\n            exportFormResponseRequest.promise.then(function (response) {\n                var anchor = angular.element('<a/>');\n                anchor.attr({\n                    href: 'data:attachment/csv;charset=utf-8,' + encodeURI(response),\n                    target: '_blank',\n                    download: 'formresponses' + _this.formId + '.csv'\n                })[0].click();\n            });\n        };\n        this.updateFormResponses = function () {\n            var formResponsesRequestUrl = _this.$hibachi.getUrlWithActionPrefix() + \"api:main.getformresponses&formID=\" + _this.formId;\n            var params = {};\n            params.currentPage = _this.paginator.currentPage || 1;\n            params.pageShow = _this.paginator.pageShow || 10;\n            var formResponsesPromise = _this.$http({\n                method: 'GET',\n                url: formResponsesRequestUrl,\n                params: params\n            });\n            formResponsesPromise.then(function (response) {\n                _this.columns = response.data.columnRecords;\n                _this.pageRecords = response.data.pageRecords;\n                _this.paginator.recordsCount = response.data.recordsCount;\n                _this.paginator.totalPages = response.data.totalPages;\n                _this.paginator.pageStart = response.data.pageRecordsStart;\n                _this.paginator.pageEnd = response.data.pageRecordsEnd;\n                for (var i = 0; i < _this.pageRecords.length; i++) {\n                    if (angular.isDefined(_this.pageRecords[i].createdDateTime)) {\n                        _this.pageRecords[i].createdDateTime = _this.dateFilter(_this.pageRecords[i].createdDateTime, \"MMM dd, yyyy - hh:mm a\");\n                    }\n                }\n            }, function (response) {\n                throw (\"There was a problem collecting the form responses\");\n            });\n        };\n        this.dateFilter = $filter(\"dateFilter\");\n        this.init();\n    }\n    return SWFormResponseListingController;\n}());\nexports.SWFormResponseListingController = SWFormResponseListingController;\nvar SWFormResponseListing = /** @class */ (function () {\n    //@ngInject\n    function SWFormResponseListing($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder) {\n        this.$http = $http;\n        this.$hibachi = $hibachi;\n        this.paginationService = paginationService;\n        this.formBuilderPartialsPath = formBuilderPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = \"EA\";\n        this.scope = {};\n        this.bindToController = {\n            \"formId\": \"@\"\n        };\n        this.controller = SWFormResponseListingController;\n        this.controllerAs = \"swFormResponseListing\";\n        this.link = function ($scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(formBuilderPartialsPath) + \"/formresponselisting.html\";\n    }\n    SWFormResponseListing.Factory = function () {\n        var directive = function ($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder) { return new SWFormResponseListing($http, $hibachi, paginationService, formBuilderPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            '$http',\n            '$hibachi',\n            'paginationService',\n            'formBuilderPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWFormResponseListing;\n}());\nexports.SWFormResponseListing = SWFormResponseListing;\n\n\n//# sourceURL=webpack:///./formbuilder/components/swformresponselisting.ts?")},"./formbuilder/formbuilder.module.ts":
/*!*******************************************!*\
  !*** ./formbuilder/formbuilder.module.ts ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//modules\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//controllers\n//directives\nvar swformresponselisting_1 = __webpack_require__(/*! ./components/swformresponselisting */ \"./formbuilder/components/swformresponselisting.ts\");\n//models\nvar formbuildermodule = angular.module('formbuilder', [core_module_1.coremodule.name])\n    .config([function () {\n    }]).run([function () {\n    }])\n    //constants\n    .constant('formBuilderPartialsPath', 'formbuilder/components/')\n    //controllers\n    //directives\n    .directive('swFormResponseListing', swformresponselisting_1.SWFormResponseListing.Factory());\nexports.formbuildermodule = formbuildermodule;\n\n\n//# sourceURL=webpack:///./formbuilder/formbuilder.module.ts?")},"./fulfillmentbatch/actions/fulfillmentbatchactions.ts":
/*!*************************************************************!*\
  !*** ./fulfillmentbatch/actions/fulfillmentbatchactions.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/**\n * ------------------------\n * Importing these Actions:\n *\n * Action constants are used in both the controller (to dispatch to the correct reducer)\n * as well as the service (where the reducer lives).\n * These can be imported using * and then aliased (such as action) such that\n * they can be referenced from multiple places as action.TOGGLE_EDITCOMMENT.\n * The naming convention is slightly different for UI actions and server actions.\n * ---\n * Server Based Actions:\n *\n * A server action example would be any object CRUD like SAVE_COMMENT, DELETE_PRODUCT, ETC.\n * A server action also has a third part added: Requested | Success | Fail so the action may be\n * dispatched as SAVE_COMMENT_REQUESTED but would be returned as SAVE_COMMENT_SUCCESS or SAVE_COMMENT_FAILED.\n * ---\n * UI Based Actions:\n *\n * UI actions do not include the REQUESTED|SUCCESS|FAILED part because they are simple enough that\n * they should not do anything other than success.\n *\n */\nObject.defineProperty(exports, "__esModule", { value: true });\n/**\n * This action will toggle the comment edit and allow a user to start editing or stop editing a comment.\n */\nexports.TOGGLE_EDITCOMMENT = "TOGGLE_EDITCOMMENT";\n/**\n * This action will toggle the page loader.\n */\nexports.TOGGLE_LOADER = "TOGGLE_LOADER";\n/**\n * This will toggle the batch listing to its full or half size view.\n */\nexports.TOGGLE_BATCHLISTING = "TOGGLE_BATCHLISTING";\n/**\n * This will toggle the fulfillment listing between fulfillment and order items on the order fulfillments list screen\n */\nexports.TOGGLE_FULFILLMENT_LISTING = "TOGGLE_FULFILLMENT_LISTING";\n/**\n * This sets up all the state data on page start and should only be called once in a constructor.\n */\nexports.SETUP_BATCHDETAIL = "SETUP_BATCHDETAIL";\n/**\n * This updates all of the state for the batch detail page.\n */\nexports.UPDATE_BATCHDETAIL = "UPDATE_BATCHDETAIL";\n/**\n * This will refresh all of the batch detail state.\n */\nexports.REFRESH_BATCHDETAIL = "REFRESH_BATCHDETAIL";\n/**\n * This will create a new batch by passing all batch data.\n */\nexports.ADD_BATCH = "ADD_BATCH";\n/**\n * This will add a box to a shipment.\n */\nexports.ADD_BOX = "ADD_BOX";\n/**\n * This will remove a box from a shipment.\n */\nexports.REMOVE_BOX = "REMOVE_BOX";\n/**\n * This will fire when the current page records selected on a table are updated.\n */\nexports.CURRENT_PAGE_RECORDS_SELECTED = "CURRENT_PAGE_RECORDS_SELECTED";\n/**\n * This setups the page that displays the order delivery custom attributes and should only be called once.\n */\nexports.SETUP_ORDERDELIVERYATTRIBUTES = "SETUP_ORDERDELIVERYATTRIBUTES";\n/**\n * This will delete a comment permenently.\n */\nexports.DELETE_COMMENT_REQUESTED = "DELETE_COMMENT_REQUESTED";\n/** This action coming back from the reducer indicated that the action was a success. */\nexports.DELETE_COMMENT_SUCCESS = "DELETE_COMMENT_SUCCESS";\n/** This action coming back from the reducer indicated that the action was a failure. */\nexports.DELETE_COMMENT_FAILURE = "DELETE_COMMENT_FAILURE";\n/**\n * This will delete a fulfillment batch item permenently and from the fulfillment batch.\n */\nexports.DELETE_FULFILLMENTBATCHITEM_REQUESTED = "DELETE_FULFILLMENTBATCHITEM_REQUESTED";\n/** This action coming back from the reducer indicated that the action was a success. */\nexports.DELETE_FULFILLMENTBATCHITEM_SUCCESS = "DELETE_FULFILLMENTBATCHITEM_SUCCESS";\n/** This action coming back from the reducer indicated that the action was a failure. */\nexports.DELETE_FULFILLMENTBATCHITEM_FAILURE = "DELETE_FULFILLMENTBATCHITEM_FAILURE";\n/**\n * This will save a comment.\n */\nexports.SAVE_COMMENT_REQUESTED = "SAVE_COMMENT_REQUESTED";\n/** This action coming back from the reducer indicated that the action was a success. */\nexports.SAVE_COMMENT_SUCCESS = "SAVE_COMMENT_SUCCESS";\n/** This action coming back from the reducer indicated that the action was a failure. */\nexports.SAVE_COMMENT_FAILURE = "SAVE_COMMENT_FAILURE";\n/**\n * This will fulfill the batch item if it has all needed information.\n */\nexports.CREATE_FULFILLMENT_REQUESTED = "CREATE_FULFILLMENT_REQUESTED";\n/** This action coming back from the reducer indicated that the action was a success. */\nexports.CREATE_FULFILLMENT_SUCCESS = "CREATE_FULFILLMENT_SUCCESS";\n/** This action coming back from the reducer indicated that the action was a failure. */\nexports.CREATE_FULFILLMENT_FAILURE = "CREATE_FULFILLMENT_FAILURE";\n/**\n * This will print the picking list that the user has defined.\n */\nexports.PRINT_PICKINGLIST_REQUESTED = "PRINT_PICKINGLIST_REQUESTED";\n/** This action coming back from the reducer indicated that the action was a success. */\nexports.PRINT_PICKINGLIST_SUCCESS = "PRINT_PICKINGLIST_SUCCESS";\n/** This action coming back from the reducer indicated that the action was a failure. */\nexports.PRINT_PICKINGLIST_FAILURE = "PRINT_PICKINGLIST_FAILURE";\n/**\n * This will print the packing list that the user has defined.\n */\nexports.PRINT_PACKINGLIST_REQUESTED = "PRINT_PACKINGLIST_REQUESTED";\n/** This action coming back from the reducer indicated that the action was a success. */\nexports.PRINT_PACKINGLIST_SUCCESS = "PRINT_PACKINGLIST_SUCCESS";\n/** This action coming back from the reducer indicated that the action was a failure. */\nexports.PRINT_PACKINGLIST_FAILURE = "PRINT_PACKINGLIST_FAILURE";\n/**\n * This will return a list of print templates that are defined for fulfillment batches.\n */\nexports.PRINT_LIST_REQUESTED = "PRINT_LIST_REQUESTED";\n/** This action coming back from the reducer indicated that the action was a success. */\nexports.PRINT_LIST_SUCCESS = "PRINT_LIST_SUCCESS";\n/** This action coming back from the reducer indicated that the action was a failure. */\nexports.PRINT_LIST_FAILURE = "PRINT_LIST_FAILURE";\n/**\n * This will return a list of emails that are defined for orderFulfillments\n */\nexports.EMAIL_LIST_REQUESTED = "EMAIL_LIST_REQUESTED";\n/** This action coming back from the reducer indicated that the action was a success. */\nexports.EMAIL_LIST_SUCCESS = "EMAIL_LIST_SUCCESS";\n/** This action coming back from the reducer indicated that the action was a failure. */\nexports.EMAIL_LIST_FAILURE = "EMAIL_LIST_FAILURE";\n\n\n//# sourceURL=webpack:///./fulfillmentbatch/actions/fulfillmentbatchactions.ts?')},"./fulfillmentbatch/components/swfulfillmentbatchdetail.ts":
/*!*****************************************************************!*\
  !*** ./fulfillmentbatch/components/swfulfillmentbatchdetail.ts ***!
  \*****************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar actions = __webpack_require__(/*! ../actions/fulfillmentbatchactions */ \"./fulfillmentbatch/actions/fulfillmentbatchactions.ts\");\n/**\n * Fulfillment Batch Detail Controller\n */\nvar SWFulfillmentBatchDetailController = /** @class */ (function () {\n    // @ngInject\n    function SWFulfillmentBatchDetailController($hibachi, $timeout, collectionConfigService, observerService, utilityService, $location, $http, $window, typeaheadService, listingService, orderFulfillmentService, rbkeyService) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.utilityService = utilityService;\n        this.$location = $location;\n        this.$http = $http;\n        this.$window = $window;\n        this.typeaheadService = typeaheadService;\n        this.listingService = listingService;\n        this.orderFulfillmentService = orderFulfillmentService;\n        this.rbkeyService = rbkeyService;\n        this.orderItem = {};\n        this.userViewingFulfillmentBatchDetail = function (batchID) {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.SETUP_BATCHDETAIL,\n                payload: { fulfillmentBatchId: batchID }\n            });\n        };\n        this.userToggleFulfillmentBatchListing = function () {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.TOGGLE_BATCHLISTING,\n                payload: {}\n            });\n        };\n        //toggle_editcomment for action based\n        this.userEditingComment = function (comment) {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.TOGGLE_EDITCOMMENT,\n                payload: { comment: comment }\n            });\n        };\n        //requested | failed | succeded\n        this.userDeletingComment = function (comment) {\n            //Only fire the event if the user agrees.\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.DELETE_COMMENT_REQUESTED,\n                payload: { comment: comment }\n            });\n        };\n        //Try to delete the fulfillment batch item.\n        this.deleteFulfillmentBatchItem = function () {\n            //Only fire the event if the user agrees.\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.DELETE_FULFILLMENTBATCHITEM_REQUESTED,\n                payload: {}\n            });\n        };\n        this.userSavingComment = function (comment, commentText) {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.SAVE_COMMENT_REQUESTED,\n                payload: { comment: comment, commentText: commentText }\n            });\n        };\n        this.userViewingOrderDeliveryAttributes = function () {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.SETUP_ORDERDELIVERYATTRIBUTES,\n                payload: {}\n            });\n        };\n        this.userCaptureAndFulfill = function () {\n            //request the fulfillment process.\n            _this.state.loading = true;\n            _this.state.orderItem = _this.orderItem;\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.CREATE_FULFILLMENT_REQUESTED,\n                payload: { viewState: _this.state }\n            });\n        };\n        this.userPrintPickingList = function () {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.PRINT_PICKINGLIST_REQUESTED,\n                payload: {}\n            });\n        };\n        this.userPrintPackingList = function () {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.PRINT_PACKINGLIST_REQUESTED,\n                payload: {}\n            });\n        };\n        /** Returns a list of print templates related to fulfillment batches. */\n        this.userRequiresPrintList = function () {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.PRINT_LIST_REQUESTED,\n                payload: {}\n            });\n        };\n        /** Returns a list of all emails related to orderfulfillments */\n        this.userRequiresEmailList = function () {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: actions.EMAIL_LIST_REQUESTED,\n                payload: {}\n            });\n        };\n        /** Todo - Thiswill be for the barcode search which is currently commented out. */\n        this.userBarcodeSearch = function () {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({\n                type: \"BAR_CODE_SEARCH_ACTION\",\n                payload: {}\n            });\n        };\n        //setup a state change listener and send over the fulfillmentBatchID\n        this.orderFulfillmentService.orderFulfillmentStore.store$.subscribe(function (stateChanges) {\n            //Handle basic requests\n            if ((stateChanges.action && stateChanges.action.type) && (stateChanges.action.type == actions.TOGGLE_EDITCOMMENT ||\n                stateChanges.action.type == actions.SAVE_COMMENT_REQUESTED ||\n                stateChanges.action.type == actions.DELETE_COMMENT_REQUESTED ||\n                stateChanges.action.type == actions.CREATE_FULFILLMENT_REQUESTED ||\n                stateChanges.action.type == actions.PRINT_LIST_REQUESTED ||\n                stateChanges.action.type == actions.EMAIL_LIST_REQUESTED ||\n                stateChanges.action.type == actions.UPDATE_BATCHDETAIL ||\n                stateChanges.action.type == actions.SETUP_BATCHDETAIL ||\n                stateChanges.action.type == actions.SETUP_ORDERDELIVERYATTRIBUTES ||\n                stateChanges.action.type == actions.TOGGLE_LOADER)) {\n                //set the new state.\n                _this.orderItem = {};\n                _this.state = stateChanges;\n            }\n        });\n        //Get the attributes to display in the custom section.\n        this.userViewingOrderDeliveryAttributes();\n        //Dispatch the fulfillmentBatchID and setup the state.\n        this.userViewingFulfillmentBatchDetail(this.fulfillmentBatchId);\n    }\n    return SWFulfillmentBatchDetailController;\n}());\nexports.SWFulfillmentBatchDetailController = SWFulfillmentBatchDetailController;\n/**\n * This is a view helper class that uses the collection helper class.\n */\nvar SWFulfillmentBatchDetail = /** @class */ (function () {\n    // @ngInject\n    function SWFulfillmentBatchDetail($hibachi, $timeout, collectionConfigService, observerService, fulfillmentBatchDetailPartialsPath, slatwallPathBuilder) {\n        this.$hibachi = $hibachi;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.fulfillmentBatchDetailPartialsPath = fulfillmentBatchDetailPartialsPath;\n        this.restrict = \"EA\";\n        this.scope = {};\n        this.bindToController = {\n            fulfillmentBatchId: \"@?\"\n        };\n        this.controller = SWFulfillmentBatchDetailController;\n        this.controllerAs = \"swFulfillmentBatchDetailController\";\n        this.link = function ($scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(fulfillmentBatchDetailPartialsPath) + \"fulfillmentbatchdetail.html\";\n    }\n    SWFulfillmentBatchDetail.Factory = function () {\n        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, fulfillmentBatchDetailPartialsPath, slatwallPathBuilder) { return new SWFulfillmentBatchDetail($hibachi, $timeout, collectionConfigService, observerService, fulfillmentBatchDetailPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            '$hibachi',\n            '$timeout',\n            'collectionConfigService',\n            'observerService',\n            'fulfillmentBatchDetailPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWFulfillmentBatchDetail;\n}());\nexports.SWFulfillmentBatchDetail = SWFulfillmentBatchDetail;\n\n\n//# sourceURL=webpack:///./fulfillmentbatch/components/swfulfillmentbatchdetail.ts?")},"./fulfillmentbatch/fulfillmentbatchdetail.module.ts":
/*!***********************************************************!*\
  !*** ./fulfillmentbatch/fulfillmentbatchdetail.module.ts ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//modules\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//services\nvar orderfulfillmentservice_1 = __webpack_require__(/*! ../orderfulfillment/services/orderfulfillmentservice */ \"./orderfulfillment/services/orderfulfillmentservice.ts\");\n//controllers\n//directives\nvar swfulfillmentbatchdetail_1 = __webpack_require__(/*! ./components/swfulfillmentbatchdetail */ \"./fulfillmentbatch/components/swfulfillmentbatchdetail.ts\");\n//models \nvar fulfillmentbatchdetailmodule = angular.module('fulfillmentbatchdetail', [core_module_1.coremodule.name])\n    .config([function () {\n    }]).run([function () {\n    }])\n    //constants\n    .constant('fulfillmentBatchDetailPartialsPath', 'fulfillmentbatch/components/')\n    //services\n    .service('orderFulfillmentService', orderfulfillmentservice_1.OrderFulfillmentService)\n    //controllers\n    //directives\n    .directive('swFulfillmentBatchDetail', swfulfillmentbatchdetail_1.SWFulfillmentBatchDetail.Factory());\nexports.fulfillmentbatchdetailmodule = fulfillmentbatchdetailmodule;\n\n\n//# sourceURL=webpack:///./fulfillmentbatch/fulfillmentbatchdetail.module.ts?")},"./giftcard/components/swaddorderitemgiftrecipient.ts":
/*!************************************************************!*\
  !*** ./giftcard/components/swaddorderitemgiftrecipient.ts ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar giftrecipient_1 = __webpack_require__(/*! ../models/giftrecipient */ "./giftcard/models/giftrecipient.ts");\nvar SWAddOrderItemRecipientController = /** @class */ (function () {\n    //@ngInject\n    function SWAddOrderItemRecipientController($hibachi, collectionConfigService, entityService, observerService) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.collectionConfigService = collectionConfigService;\n        this.entityService = entityService;\n        this.observerService = observerService;\n        this.unassignedCountArray = [];\n        this.addGiftRecipientFromAccountList = function (account) {\n            var giftRecipient = new giftrecipient_1.GiftRecipient();\n            giftRecipient.firstName = account.firstName;\n            giftRecipient.lastName = account.lastName;\n            giftRecipient.emailAddress = account.primaryEmailAddress_emailAddress;\n            giftRecipient.account = true;\n            _this.orderItemGiftRecipients.push(giftRecipient);\n            _this.searchText = "";\n        };\n        this.getUnassignedCountArray = function () {\n            if (_this.getUnassignedCount() < _this.unassignedCountArray.length) {\n                _this.unassignedCountArray.splice(_this.getUnassignedCount(), _this.unassignedCountArray.length);\n            }\n            if (_this.getUnassignedCount() > _this.unassignedCountArray.length) {\n                for (var i = _this.unassignedCountArray.length + 1; i <= _this.getUnassignedCount(); i++) {\n                    _this.unassignedCountArray.push({ name: i, value: i });\n                }\n            }\n            return _this.unassignedCountArray;\n        };\n        this.getAssignedCount = function () {\n            _this.assignedCount = 0;\n            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {\n                _this.assignedCount += orderItemGiftRecipient.quantity;\n            });\n            return _this.assignedCount;\n        };\n        this.getUnassignedCount = function () {\n            _this.unassignedCount = _this.quantity;\n            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {\n                _this.unassignedCount -= orderItemGiftRecipient.quantity;\n            });\n            return _this.unassignedCount;\n        };\n        this.addGiftRecipient = function () {\n            if (_this.currentGiftRecipient.forms.createRecipient.$valid) {\n                _this.observerService.notify(\'updateBindings\').then(function () {\n                    _this.showInvalidAddFormMessage = true;\n                    _this.adding = false;\n                    var giftRecipient = new giftrecipient_1.GiftRecipient();\n                    angular.extend(giftRecipient, _this.currentGiftRecipient.data);\n                    _this.orderItemGiftRecipients.push(giftRecipient);\n                    _this.searchText = "";\n                    _this.currentGiftRecipient = _this.entityService.newEntity("OrderItemGiftRecipient");\n                });\n            }\n            else {\n                _this.showInvalidAddFormMessage = true;\n            }\n        };\n        this.cancelAddRecipient = function () {\n            _this.adding = false;\n            _this.currentGiftRecipient.reset();\n            _this.searchText = "";\n            _this.showInvalidAddFormMessage = false;\n        };\n        this.startFormWithName = function (searchString) {\n            if (searchString === void 0) { searchString = _this.searchText; }\n            _this.adding = !_this.adding;\n            if (_this.adding) {\n                _this.currentGiftRecipient.forms.createRecipient.$setUntouched();\n                _this.currentGiftRecipient.forms.createRecipient.$setPristine();\n                if (searchString != "") {\n                    _this.currentGiftRecipient.firstName = searchString;\n                    _this.searchText = "";\n                }\n            }\n        };\n        this.getTotalQuantity = function () {\n            var totalQuantity = 0;\n            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {\n                totalQuantity += orderItemGiftRecipient.quantity;\n            });\n            return totalQuantity;\n        };\n        this.getMessageCharactersLeft = function () {\n            if (_this.currentGiftRecipient.giftMessage && _this.currentGiftRecipient.giftMessage != null) {\n                return 250 - _this.currentGiftRecipient.giftMessage.length;\n            }\n            else {\n                return 250;\n            }\n        };\n        if (angular.isUndefined(this.adding)) {\n            this.adding = false;\n        }\n        if (angular.isUndefined(this.assignedCount)) {\n            this.assignedCount = 0;\n        }\n        if (angular.isUndefined(this.searchText)) {\n            this.searchText = "";\n        }\n        var count = 1;\n        this.currentGiftRecipient = this.entityService.newEntity("OrderItemGiftRecipient");\n        if (angular.isUndefined(this.orderItemGiftRecipients)) {\n            this.orderItemGiftRecipients = [];\n        }\n        if (angular.isUndefined(this.showInvalidAddFormMessage)) {\n            this.showInvalidAddFormMessage = false;\n        }\n        this.typeaheadCollectionConfig = collectionConfigService.newCollectionConfig(\'Account\');\n        this.typeaheadCollectionConfig.addDisplayProperty("accountID,firstName,lastName,primaryEmailAddress.emailAddress");\n        this.typeaheadCollectionConfig.addFilter("primaryEmailAddress", "null", "is not");\n    }\n    return SWAddOrderItemRecipientController;\n}());\nexports.SWAddOrderItemRecipientController = SWAddOrderItemRecipientController;\nvar SWAddOrderItemGiftRecipient = /** @class */ (function () {\n    function SWAddOrderItemGiftRecipient($hibachi, giftCardPartialsPath, slatwallPathBuilder) {\n        this.$hibachi = $hibachi;\n        this.giftCardPartialsPath = giftCardPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.require = "^form";\n        this.restrict = "EA";\n        this.transclude = true;\n        this.scope = {};\n        this.bindToController = {\n            "quantity": "=?",\n            "orderItemGiftRecipients": "=?",\n            "adding": "=?",\n            "searchText": "=?",\n            "currentgiftRecipient": "=?",\n            "showInvalidAddFormMessage": "=?",\n            "showInvalidRowMessage": "=?",\n            "tableForm": "=?",\n            "recipientAddForm": "=?"\n        };\n        this.controller = SWAddOrderItemRecipientController;\n        this.controllerAs = "addGiftRecipientControl";\n        this.link = function ($scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/addorderitemgiftrecipient.html";\n    }\n    SWAddOrderItemGiftRecipient.Factory = function () {\n        var directive = function ($hibachi, giftCardPartialsPath, slatwallPathBuilder) { return new SWAddOrderItemGiftRecipient($hibachi, giftCardPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$hibachi\',\n            \'giftCardPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    SWAddOrderItemGiftRecipient.$inject = ["$hibachi"];\n    return SWAddOrderItemGiftRecipient;\n}());\nexports.SWAddOrderItemGiftRecipient = SWAddOrderItemGiftRecipient;\n\n\n//# sourceURL=webpack:///./giftcard/components/swaddorderitemgiftrecipient.ts?')},"./giftcard/components/swgiftcardbalance.ts":
/*!**************************************************!*\
  !*** ./giftcard/components/swgiftcardbalance.ts ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWGiftCardBalanceController = /** @class */ (function () {\n    function SWGiftCardBalanceController(collectionConfigService) {\n        var _this = this;\n        this.collectionConfigService = collectionConfigService;\n        this.init = function () {\n            _this.initialBalance = 0;\n            var totalDebit = 0;\n            var totalCredit = 0;\n            var transactionConfig = _this.collectionConfigService.newCollectionConfig(\'GiftCardTransaction\');\n            transactionConfig.setDisplayProperties("giftCardTransactionID, creditAmount, debitAmount, giftCard.giftCardID");\n            transactionConfig.addFilter(\'giftCard.giftCardID\', _this.giftCard.giftCardID);\n            transactionConfig.setAllRecords(true);\n            transactionConfig.setOrderBy("createdDateTime|DESC");\n            var transactionPromise = transactionConfig.getEntity();\n            transactionPromise.then(function (response) {\n                _this.transactions = response.records;\n                var initialCreditIndex = _this.transactions.length - 1;\n                _this.initialBalance = _this.transactions[initialCreditIndex].creditAmount;\n                angular.forEach(_this.transactions, function (transaction, index) {\n                    if (!angular.isString(transaction.debitAmount)) {\n                        totalDebit += transaction.debitAmount;\n                    }\n                    if (!angular.isString(transaction.creditAmount)) {\n                        totalCredit += transaction.creditAmount;\n                    }\n                });\n                _this.currentBalance = totalCredit - totalDebit;\n                _this.balancePercentage = parseInt(((_this.currentBalance / _this.initialBalance) * 100).toString());\n            });\n        };\n        this.init();\n    }\n    SWGiftCardBalanceController.$inject = ["collectionConfigService"];\n    return SWGiftCardBalanceController;\n}());\nexports.SWGiftCardBalanceController = SWGiftCardBalanceController;\nvar SWGiftCardBalance = /** @class */ (function () {\n    function SWGiftCardBalance(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {\n        this.collectionConfigService = collectionConfigService;\n        this.giftCardPartialsPath = giftCardPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.scope = {};\n        this.bindToController = {\n            giftCard: "=?",\n            transactions: "=?",\n            initialBalance: "=?",\n            currentBalance: "=?",\n            balancePercentage: "=?"\n        };\n        this.controller = SWGiftCardBalanceController;\n        this.controllerAs = "swGiftCardBalance";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/balance.html";\n        this.restrict = "EA";\n    }\n    SWGiftCardBalance.Factory = function () {\n        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardBalance(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'collectionConfigService\',\n            \'giftCardPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWGiftCardBalance;\n}());\nexports.SWGiftCardBalance = SWGiftCardBalance;\n\n\n//# sourceURL=webpack:///./giftcard/components/swgiftcardbalance.ts?')},"./giftcard/components/swgiftcarddetail.ts":
/*!*************************************************!*\
  !*** ./giftcard/components/swgiftcarddetail.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWGiftCardDetailController = /** @class */ (function () {\n    function SWGiftCardDetailController(collectionConfigService) {\n        var _this = this;\n        this.collectionConfigService = collectionConfigService;\n        this.init = function () {\n            var giftCardConfig = _this.collectionConfigService.newCollectionConfig(\'GiftCard\');\n            giftCardConfig.setDisplayProperties("giftCardID, giftCardCode, currencyCode, giftCardPin, expirationDate, ownerFirstName, ownerLastName, ownerEmailAddress, activeFlag, calculatedBalanceAmount,  originalOrderItem.sku.product.productName, originalOrderItem.sku.product.productID, originalOrderItem.order.orderID, originalOrderItem.orderItemID, orderItemGiftRecipient.firstName, orderItemGiftRecipient.lastName, orderItemGiftRecipient.emailAddress, orderItemGiftRecipient.giftMessage, ownerAccount.accountID, ownerAccount.firstName, ownerAccount.lastName");\n            giftCardConfig.addFilter(\'giftCardID\', _this.giftCardId);\n            giftCardConfig.setAllRecords(true);\n            giftCardConfig.getEntity().then(function (response) {\n                _this.giftCard = response.records[0];\n            });\n        };\n        this.init();\n    }\n    SWGiftCardDetailController.$inject = ["collectionConfigService"];\n    return SWGiftCardDetailController;\n}());\nexports.SWGiftCardDetailController = SWGiftCardDetailController;\nvar SWGiftCardDetail = /** @class */ (function () {\n    function SWGiftCardDetail(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {\n        this.collectionConfigService = collectionConfigService;\n        this.giftCardPartialsPath = giftCardPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.scope = {};\n        this.bindToController = {\n            giftCardId: "@",\n            giftCard: "=?"\n        };\n        this.controller = SWGiftCardDetailController;\n        this.controllerAs = "swGiftCardDetail";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/basic.html";\n        this.restrict = "E";\n    }\n    SWGiftCardDetail.Factory = function () {\n        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardDetail(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'collectionConfigService\',\n            \'giftCardPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWGiftCardDetail;\n}());\nexports.SWGiftCardDetail = SWGiftCardDetail;\n\n\n//# sourceURL=webpack:///./giftcard/components/swgiftcarddetail.ts?')},"./giftcard/components/swgiftcardhistory.ts":
/*!**************************************************!*\
  !*** ./giftcard/components/swgiftcardhistory.ts ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWGiftCardHistoryController = /** @class */ (function () {\n    //@ngInject\n    function SWGiftCardHistoryController(collectionConfigService, $hibachi) {\n        var _this = this;\n        this.collectionConfigService = collectionConfigService;\n        this.$hibachi = $hibachi;\n        var initialBalance = 0;\n        var totalDebit = 0;\n        var transactionConfig = this.collectionConfigService.newCollectionConfig(\'GiftCardTransaction\');\n        transactionConfig.setDisplayProperties("giftCardTransactionID, creditAmount, debitAmount, createdDateTime, giftCard.giftCardID, orderPayment.order.orderID, orderPayment.order.orderNumber, orderPayment.order.orderOpenDateTime", "id,credit,debit,created,giftcardID,ordernumber,orderdatetime");\n        transactionConfig.addFilter(\'giftCard.giftCardID\', this.giftCard.giftCardID);\n        transactionConfig.setAllRecords(true);\n        transactionConfig.setOrderBy("createdDateTime|DESC");\n        var emailBounceConfig = this.collectionConfigService.newCollectionConfig(\'EmailBounce\');\n        emailBounceConfig.setDisplayProperties("emailBounceID, rejectedEmailTo, rejectedEmailSendTime, relatedObject, relatedObjectID");\n        emailBounceConfig.addFilter(\'relatedObjectID\', this.giftCard.giftCardID);\n        emailBounceConfig.setAllRecords(true);\n        emailBounceConfig.setOrderBy("rejectedEmailSendTime|DESC");\n        var emailConfig = this.collectionConfigService.newCollectionConfig(\'Email\');\n        emailConfig.setDisplayProperties(\'emailID, emailTo, relatedObject, relatedObjectID, createdDateTime\');\n        emailConfig.addFilter(\'relatedObjectID\', this.giftCard.giftCardID);\n        emailConfig.setAllRecords(true);\n        emailConfig.setOrderBy("createdDateTime|DESC");\n        emailConfig.getEntity().then(function (response) {\n            _this.emails = response.records;\n            emailBounceConfig.getEntity().then(function (response) {\n                _this.bouncedEmails = response.records;\n                transactionConfig.getEntity().then(function (response) {\n                    _this.transactions = response.records;\n                    var initialCreditIndex = _this.transactions.length - 1;\n                    var initialBalance = _this.transactions[initialCreditIndex].creditAmount;\n                    var currentBalance = initialBalance;\n                    for (var i = initialCreditIndex; i >= 0; i--) {\n                        var transaction = _this.transactions[i];\n                        if (typeof transaction.debitAmount !== "string") {\n                            transaction.debit = true;\n                            totalDebit += transaction.debitAmount;\n                        }\n                        else if (typeof transaction.creditAmount !== "string") {\n                            if (i != initialCreditIndex) {\n                                currentBalance += transaction.creditAmount;\n                            }\n                            transaction.debit = false;\n                        }\n                        transaction.detailOrderLink = $hibachi.buildUrl(\'admin:entity.detailOrder\', \'orderID=\' + transaction.orderPayment_order_orderID);\n                        var tempCurrentBalance = currentBalance - totalDebit;\n                        transaction.balance = tempCurrentBalance;\n                        if (i == initialCreditIndex) {\n                            var activeCard = {\n                                activated: true,\n                                debit: false,\n                                activeAt: transaction.orderPayment_order_orderOpenDateTime,\n                                balance: initialBalance\n                            };\n                            _this.transactions.splice(i, 0, activeCard);\n                            if (angular.isDefined(_this.bouncedEmails)) {\n                                angular.forEach(_this.bouncedEmails, function (email, bouncedEmailIndex) {\n                                    email.bouncedEmail = true;\n                                    email.balance = initialBalance;\n                                    _this.transactions.splice(i, 0, email);\n                                });\n                            }\n                            if (angular.isDefined(_this.emails)) {\n                                angular.forEach(_this.emails, function (email) {\n                                    email.emailSent = true;\n                                    email.debit = false;\n                                    email.sentAt = email.createdDateTime;\n                                    email.balance = initialBalance;\n                                    _this.transactions.splice(i, 0, email);\n                                });\n                            }\n                        }\n                    }\n                });\n            });\n        });\n        var orderConfig = this.collectionConfigService.newCollectionConfig(\'Order\');\n        orderConfig.setDisplayProperties("orderID,orderNumber,orderOpenDateTime,account.firstName,account.lastName,account.accountID,account.primaryEmailAddress.emailAddress");\n        orderConfig.addFilter(\'orderID\', this.giftCard.originalOrderItem_order_orderID);\n        orderConfig.setAllRecords(true);\n        orderConfig.getEntity().then(function (response) {\n            _this.order = response.records[0];\n        });\n    }\n    return SWGiftCardHistoryController;\n}());\nexports.SWGiftCardHistoryController = SWGiftCardHistoryController;\nvar SWGiftCardHistory = /** @class */ (function () {\n    //@ngInject\n    function SWGiftCardHistory(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {\n        this.collectionConfigService = collectionConfigService;\n        this.giftCardPartialsPath = giftCardPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.scope = {};\n        this.bindToController = {\n            giftCard: "=?",\n            transactions: "=?",\n            bouncedEmails: "=?",\n            order: "=?"\n        };\n        this.controller = SWGiftCardHistoryController;\n        this.controllerAs = "swGiftCardHistory";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/history.html";\n        this.restrict = "EA";\n    }\n    SWGiftCardHistory.Factory = function () {\n        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardHistory(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'collectionConfigService\',\n            \'giftCardPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWGiftCardHistory;\n}());\nexports.SWGiftCardHistory = SWGiftCardHistory;\n\n\n//# sourceURL=webpack:///./giftcard/components/swgiftcardhistory.ts?')},"./giftcard/components/swgiftcardorderinfo.ts":
/*!****************************************************!*\
  !*** ./giftcard/components/swgiftcardorderinfo.ts ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWGiftCardOrderInfoController = /** @class */ (function () {\n    function SWGiftCardOrderInfoController(collectionConfigService) {\n        var _this = this;\n        this.collectionConfigService = collectionConfigService;\n        this.init = function () {\n            var orderConfig = _this.collectionConfigService.newCollectionConfig(\'Order\');\n            orderConfig.setDisplayProperties("orderID, orderNumber, orderOpenDateTime, orderOrigin.orderOriginName, account.firstName, account.lastName");\n            orderConfig.addFilter(\'orderID\', _this.giftCard.originalOrderItem_order_orderID);\n            orderConfig.setAllRecords(true);\n            orderConfig.getEntity().then(function (response) {\n                _this.order = response.records[0];\n            });\n        };\n        this.init();\n    }\n    SWGiftCardOrderInfoController.$inject = ["collectionConfigService"];\n    return SWGiftCardOrderInfoController;\n}());\nexports.SWGiftCardOrderInfoController = SWGiftCardOrderInfoController;\nvar SWGiftCardOrderInfo = /** @class */ (function () {\n    function SWGiftCardOrderInfo(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) {\n        this.collectionConfigService = collectionConfigService;\n        this.giftCardPartialsPath = giftCardPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.scope = {};\n        this.bindToController = {\n            giftCard: "=?",\n            order: "=?"\n        };\n        this.controller = SWGiftCardOrderInfoController;\n        this.controllerAs = "swGiftCardOrderInfo";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/orderinfo.html";\n        this.restrict = "EA";\n    }\n    SWGiftCardOrderInfo.Factory = function () {\n        var directive = function (collectionConfigService, giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardOrderInfo(collectionConfigService, giftCardPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'collectionConfigService\',\n            \'giftCardPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    SWGiftCardOrderInfo.$inject = ["collectionConfigService", "partialsPath"];\n    return SWGiftCardOrderInfo;\n}());\nexports.SWGiftCardOrderInfo = SWGiftCardOrderInfo;\n\n\n//# sourceURL=webpack:///./giftcard/components/swgiftcardorderinfo.ts?')},"./giftcard/components/swgiftcardoverview.ts":
/*!***************************************************!*\
  !*** ./giftcard/components/swgiftcardoverview.ts ***!
  \***************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWGiftCardOverviewController = /** @class */ (function () {\n    function SWGiftCardOverviewController() {\n    }\n    return SWGiftCardOverviewController;\n}());\nexports.SWGiftCardOverviewController = SWGiftCardOverviewController;\nvar SWGiftCardOverview = /** @class */ (function () {\n    function SWGiftCardOverview(giftCardPartialsPath, slatwallPathBuilder) {\n        this.giftCardPartialsPath = giftCardPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.scope = {};\n        this.bindToController = {\n            giftCard: "=?"\n        };\n        this.controller = SWGiftCardOverviewController;\n        this.controllerAs = "swGiftCardOverview";\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + "/overview.html";\n        this.restrict = "EA";\n    }\n    SWGiftCardOverview.Factory = function () {\n        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardOverview(giftCardPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'giftCardPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWGiftCardOverview;\n}());\nexports.SWGiftCardOverview = SWGiftCardOverview;\n\n\n//# sourceURL=webpack:///./giftcard/components/swgiftcardoverview.ts?')},"./giftcard/components/swgiftcardrecipientinfo.ts":
/*!********************************************************!*\
  !*** ./giftcard/components/swgiftcardrecipientinfo.ts ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWGiftCardRecipientInfoController = /** @class */ (function () {\n    //@ngInject\n    function SWGiftCardRecipientInfoController($hibachi) {\n        this.$hibachi = $hibachi;\n        if (angular.isDefined(this.giftCard.ownerAccount_accountID)) {\n            this.detailAccountLink = $hibachi.buildUrl('admin:entity.detailaccount', 'accountID=' + this.giftCard.ownerAccount_accountID);\n        }\n    }\n    return SWGiftCardRecipientInfoController;\n}());\nexports.SWGiftCardRecipientInfoController = SWGiftCardRecipientInfoController;\nvar SWGiftCardRecipientInfo = /** @class */ (function () {\n    function SWGiftCardRecipientInfo(giftCardPartialsPath, slatwallPathBuilder) {\n        this.giftCardPartialsPath = giftCardPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.scope = {};\n        this.bindToController = {\n            giftCard: \"=?\"\n        };\n        this.controller = SWGiftCardRecipientInfoController;\n        this.controllerAs = \"swGiftCardRecipientInfo\";\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(giftCardPartialsPath) + \"/recipientinfo.html\";\n        this.restrict = \"EA\";\n    }\n    SWGiftCardRecipientInfo.Factory = function () {\n        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWGiftCardRecipientInfo(giftCardPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            'giftCardPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWGiftCardRecipientInfo;\n}());\nexports.SWGiftCardRecipientInfo = SWGiftCardRecipientInfo;\n\n\n//# sourceURL=webpack:///./giftcard/components/swgiftcardrecipientinfo.ts?")},"./giftcard/components/sworderitemgiftrecipientrow.ts":
/*!************************************************************!*\
  !*** ./giftcard/components/sworderitemgiftrecipientrow.ts ***!
  \************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWOrderItemGiftRecipientRowController = /** @class */ (function () {\n    function SWOrderItemGiftRecipientRowController() {\n        var _this = this;\n        this.edit = function (recipient) {\n            angular.forEach(_this.recipients, function (recipient) {\n                recipient.editing = false;\n            });\n            if (!recipient.editing) {\n                recipient.editing = true;\n            }\n        };\n        this.delete = function (recipient) {\n            _this.recipients.splice(_this.recipients.indexOf(recipient), 1);\n        };\n        this.saveGiftRecipient = function (recipient) {\n            if (_this.tableForm.$valid) {\n                _this.showInvalidRecipientMessage = false;\n                recipient.editing = false;\n            }\n            else {\n                _this.showInvalidRecipientMessage = true;\n            }\n        };\n        this.getQuantity = function () {\n            if (isNaN(_this.quantity)) {\n                return 0;\n            }\n            else {\n                return _this.quantity;\n            }\n        };\n        this.getUnassignedCount = function () {\n            var unassignedCount = _this.getQuantity();\n            angular.forEach(_this.recipients, function (recipient) {\n                unassignedCount -= recipient.quantity;\n            });\n            return unassignedCount;\n        };\n        this.getMessageCharactersLeft = function () {\n            if (angular.isDefined(_this.recipient.giftMessage) && _this.recipient.giftMessage != null) {\n                return 250 - _this.recipient.giftMessage.length;\n            }\n            else {\n                return 250;\n            }\n        };\n        this.getUnassignedCountArray = function () {\n            var unassignedCountArray = new Array();\n            for (var i = 1; i <= _this.recipient.quantity + _this.getUnassignedCount(); i++) {\n                unassignedCountArray.push(i);\n            }\n            return unassignedCountArray;\n        };\n    }\n    return SWOrderItemGiftRecipientRowController;\n}());\nexports.SWOrderItemGiftRecipientRowController = SWOrderItemGiftRecipientRowController;\nvar SWOrderItemGiftRecipientRow = /** @class */ (function () {\n    function SWOrderItemGiftRecipientRow(giftCardPartialsPath, slatwallPathBuilder) {\n        var _this = this;\n        this.giftCardPartialsPath = giftCardPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = \'AE\';\n        this.scope = {\n            recipient: "=",\n            recipients: "=",\n            quantity: "=",\n            showInvalidRecipientMessage: "=",\n            tableForm: "=?",\n            index: "="\n        };\n        this.bindToController = {\n            recipient: "=",\n            recipients: "=",\n            quantity: "=",\n            showInvalidRecipientMessage: "=",\n            tableForm: "=?",\n            index: "="\n        };\n        this.controller = SWOrderItemGiftRecipientRowController;\n        this.controllerAs = "giftRecipientRowControl";\n        this.init = function () {\n            _this.templateUrl = _this.slatwallPathBuilder.buildPartialsPath(_this.giftCardPartialsPath) + "/orderitemgiftrecipientrow.html";\n        };\n        this.init();\n    }\n    SWOrderItemGiftRecipientRow.Factory = function () {\n        var directive = function (giftCardPartialsPath, slatwallPathBuilder) { return new SWOrderItemGiftRecipientRow(giftCardPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'giftCardPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWOrderItemGiftRecipientRow;\n}());\nexports.SWOrderItemGiftRecipientRow = SWOrderItemGiftRecipientRow;\n\n\n//# sourceURL=webpack:///./giftcard/components/sworderitemgiftrecipientrow.ts?')},"./giftcard/controllers/preprocessorderitem_addorderitemgiftrecipient.ts":
/*!*******************************************************************************!*\
  !*** ./giftcard/controllers/preprocessorderitem_addorderitemgiftrecipient.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nvar OrderItemGiftRecipientControl = /** @class */ (function () {\n    //@ngInject\n    function OrderItemGiftRecipientControl($scope, $hibachi) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$hibachi = $hibachi;\n        this.getUnassignedCountArray = function () {\n            var unassignedCountArray = new Array();\n            for (var i = 1; i <= _this.getUnassignedCount(); i++) {\n                unassignedCountArray.push(i);\n            }\n            return unassignedCountArray;\n        };\n        this.getAssignedCount = function () {\n            var assignedCount = 0;\n            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {\n                assignedCount += orderItemGiftRecipient.quantity;\n            });\n            return assignedCount;\n        };\n        this.getUnassignedCount = function () {\n            var unassignedCount = _this.quantity;\n            angular.forEach(_this.orderItemGiftRecipients, function (orderItemGiftRecipient) {\n                unassignedCount -= orderItemGiftRecipient.quantity;\n            });\n            return unassignedCount;\n        };\n        this.orderItemGiftRecipients = $scope.orderItemGiftRecipients = [];\n        $scope.collection = {};\n        this.adding = false;\n        this.searchText = "";\n        var count = 1;\n    }\n    OrderItemGiftRecipientControl.$inject = ["$scope", "$hibachi"];\n    return OrderItemGiftRecipientControl;\n}());\nexports.OrderItemGiftRecipientControl = OrderItemGiftRecipientControl;\n\n\n//# sourceURL=webpack:///./giftcard/controllers/preprocessorderitem_addorderitemgiftrecipient.ts?')},"./giftcard/giftcard.module.ts":
/*!*************************************!*\
  !*** ./giftcard/giftcard.module.ts ***!
  \*************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//modules\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//controllers\nvar preprocessorderitem_addorderitemgiftrecipient_1 = __webpack_require__(/*! ./controllers/preprocessorderitem_addorderitemgiftrecipient */ \"./giftcard/controllers/preprocessorderitem_addorderitemgiftrecipient.ts\");\n//directives\nvar swaddorderitemgiftrecipient_1 = __webpack_require__(/*! ./components/swaddorderitemgiftrecipient */ \"./giftcard/components/swaddorderitemgiftrecipient.ts\");\nvar swgiftcardbalance_1 = __webpack_require__(/*! ./components/swgiftcardbalance */ \"./giftcard/components/swgiftcardbalance.ts\");\nvar swgiftcarddetail_1 = __webpack_require__(/*! ./components/swgiftcarddetail */ \"./giftcard/components/swgiftcarddetail.ts\");\nvar swgiftcardhistory_1 = __webpack_require__(/*! ./components/swgiftcardhistory */ \"./giftcard/components/swgiftcardhistory.ts\");\nvar swgiftcardoverview_1 = __webpack_require__(/*! ./components/swgiftcardoverview */ \"./giftcard/components/swgiftcardoverview.ts\");\nvar swgiftcardorderinfo_1 = __webpack_require__(/*! ./components/swgiftcardorderinfo */ \"./giftcard/components/swgiftcardorderinfo.ts\");\nvar swgiftcardrecipientinfo_1 = __webpack_require__(/*! ./components/swgiftcardrecipientinfo */ \"./giftcard/components/swgiftcardrecipientinfo.ts\");\nvar sworderitemgiftrecipientrow_1 = __webpack_require__(/*! ./components/sworderitemgiftrecipientrow */ \"./giftcard/components/sworderitemgiftrecipientrow.ts\");\nvar giftcardmodule = angular.module('giftcard', [core_module_1.coremodule.name])\n    .config([function () {\n    }]).run([function () {\n    }])\n    //constants\n    .constant('giftCardPartialsPath', 'giftcard/components/')\n    //controllers\n    .controller('preprocessorderitem_addorderitemgiftrecipient', preprocessorderitem_addorderitemgiftrecipient_1.OrderItemGiftRecipientControl)\n    //directives\n    .directive('swAddOrderItemGiftRecipient', swaddorderitemgiftrecipient_1.SWAddOrderItemGiftRecipient.Factory())\n    .directive('swGiftCardBalance', swgiftcardbalance_1.SWGiftCardBalance.Factory())\n    .directive('swGiftCardOverview', swgiftcardoverview_1.SWGiftCardOverview.Factory())\n    .directive('swGiftCardDetail', swgiftcarddetail_1.SWGiftCardDetail.Factory())\n    .directive('swGiftCardHistory', swgiftcardhistory_1.SWGiftCardHistory.Factory())\n    .directive('swGiftCardRecipientInfo', swgiftcardrecipientinfo_1.SWGiftCardRecipientInfo.Factory())\n    .directive('swGiftCardOrderInfo', swgiftcardorderinfo_1.SWGiftCardOrderInfo.Factory())\n    .directive('swOrderItemGiftRecipientRow', sworderitemgiftrecipientrow_1.SWOrderItemGiftRecipientRow.Factory());\nexports.giftcardmodule = giftcardmodule;\n\n\n//# sourceURL=webpack:///./giftcard/giftcard.module.ts?")},"./giftcard/models/giftrecipient.ts":
/*!******************************************!*\
  !*** ./giftcard/models/giftrecipient.ts ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar GiftRecipient = /** @class */ (function () {\n    function GiftRecipient(firstName, lastName, emailAddress, giftMessage, quantity, account, editing) {\n        var _this = this;\n        this.reset = function () {\n            _this.firstName = null;\n            _this.lastName = null;\n            _this.emailAddress = null;\n            _this.account = null;\n            _this.editing = false;\n            _this.quantity = 1;\n        };\n        this.quantity = 1;\n        this.editing = false;\n        this.account = false;\n    }\n    return GiftRecipient;\n}());\nexports.GiftRecipient = GiftRecipient;\n\n\n//# sourceURL=webpack:///./giftcard/models/giftrecipient.ts?")},"./optiongroup/components/swaddoptiongroup.ts":
/*!****************************************************!*\
  !*** ./optiongroup/components/swaddoptiongroup.ts ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar md5 = __webpack_require__(/*! md5 */ "../../../node_modules/md5/md5.js");\nvar optionWithGroup = /** @class */ (function () {\n    function optionWithGroup(optionID, optionGroupID, match) {\n        var _this = this;\n        this.optionID = optionID;\n        this.optionGroupID = optionGroupID;\n        this.match = match;\n        this.toString = function () {\n            return _this.optionID;\n        };\n    }\n    return optionWithGroup;\n}());\nexports.optionWithGroup = optionWithGroup;\nvar SWAddOptionGroupController = /** @class */ (function () {\n    // @ngInject\n    function SWAddOptionGroupController($hibachi, $timeout, collectionConfigService, observerService, utilityService) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.utilityService = utilityService;\n        this.getOptionList = function () {\n            _this.selection.sort();\n            return _this.utilityService.arrayToList(_this.selection);\n        };\n        this.validateOptions = function (args) {\n            _this.addToSelection(args[0], args[1].optionGroupId);\n            if (_this.hasCompleteSelection()) {\n                _this.validateSelection();\n            }\n        };\n        this.validateSelection = function () {\n            var optionList = _this.getOptionList();\n            var validateSkuCollectionConfig = _this.collectionConfigService.newCollectionConfig("Sku");\n            if (_this.optionGroupIds.length > 1) {\n                validateSkuCollectionConfig.addDisplayProperty("calculatedOptionsHash");\n                validateSkuCollectionConfig.addFilter("product.productID", _this.productId);\n                validateSkuCollectionConfig.addFilter("skuID", _this.skuId, "!=");\n                validateSkuCollectionConfig.addFilter("calculatedOptionsHash", md5(optionList));\n                validateSkuCollectionConfig.setAllRecords(true);\n                validateSkuCollectionConfig.getEntity().then(function (response) {\n                    if (response.records && response.records.length == 0) {\n                        _this.selectedOptionList = _this.getOptionList();\n                        _this.showValidFlag = true;\n                        _this.showInvalidFlag = false;\n                    }\n                    else {\n                        _this.showValidFlag = false;\n                        _this.showInvalidFlag = true;\n                    }\n                });\n            }\n            else {\n                validateSkuCollectionConfig.addFilter("product.productID", _this.productId);\n                validateSkuCollectionConfig.addFilter("options.optionID", optionList);\n                validateSkuCollectionConfig.setAllRecords(true);\n                validateSkuCollectionConfig.getEntity().then(function (response) {\n                    if (response.records && response.records.length == 0) {\n                        _this.selectedOptionList = _this.getOptionList();\n                        _this.showValidFlag = true;\n                        _this.showInvalidFlag = false;\n                    }\n                    else {\n                        _this.showValidFlag = false;\n                        _this.showInvalidFlag = true;\n                    }\n                });\n            }\n        };\n        this.hasCompleteSelection = function () {\n            var answer = true;\n            angular.forEach(_this.selection, function (pair) {\n                if (pair.optionID.length === 0) {\n                    answer = false;\n                }\n            });\n            return answer;\n        };\n        this.addToSelection = function (optionId, optionGroupId) {\n            angular.forEach(_this.selection, function (pair) {\n                if (pair.optionGroupID === optionGroupId) {\n                    pair.optionID = optionId;\n                    return true;\n                }\n            });\n            return false;\n        };\n        this.optionGroupIds = this.optionGroups.split(",");\n        this.optionGroupIds.sort();\n        this.selection = [];\n        this.showValidFlag = false;\n        this.showInvalidFlag = false;\n        for (var i = 0; i < this.optionGroupIds.length; i++) {\n            this.selection.push(new optionWithGroup("", this.optionGroupIds[i], false));\n        }\n        //get current selections\n        this.optionCollectionConfig = collectionConfigService.newCollectionConfig("Option");\n        this.optionCollectionConfig.setDisplayProperties(\'optionID,optionGroup.optionGroupID\');\n        this.optionCollectionConfig.addFilter(\'skus.skuID\', this.skuId);\n        this.optionCollectionConfig.setAllRecords(true);\n        this.optionCollectionConfig.getEntity().then(function (response) {\n            _this.savedOptions = {};\n            if (response.records) {\n                for (var kk in response.records) {\n                    var record = response.records[kk];\n                    _this.savedOptions[record[\'optionGroup_optionGroupID\']] = record[\'optionID\'];\n                    _this.addToSelection(record[\'optionID\'], record[\'optionGroup_optionGroupID\']);\n                }\n            }\n        });\n        this.observerService.attach(this.validateOptions, "validateOptions");\n    }\n    return SWAddOptionGroupController;\n}());\nexports.SWAddOptionGroupController = SWAddOptionGroupController;\nvar SWAddOptionGroup = /** @class */ (function () {\n    // @ngInject\n    function SWAddOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.optionGroupPartialsPath = optionGroupPartialsPath;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            productId: "@",\n            skuId: "@",\n            optionGroups: "="\n        };\n        this.controller = SWAddOptionGroupController;\n        this.controllerAs = "swAddOptionGroup";\n        this.link = function (scope, element, attrs) {\n            // element used for when jquery is deleting DOM instead of angular such as a jQuery(\'#adminModal\').html(html);\n            element.on(\'$destroy\', function () {\n                _this.observerService.detachByEvent(\'validateOptions\');\n            });\n            scope.$on(\'$destroy\', function () {\n                _this.observerService.detachByEvent(\'validateOptions\');\n            });\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(optionGroupPartialsPath) + "addoptiongroup.html";\n    }\n    SWAddOptionGroup.Factory = function () {\n        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) { return new SWAddOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$hibachi\',\n            \'$timeout\',\n            \'collectionConfigService\',\n            \'observerService\',\n            \'optionGroupPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWAddOptionGroup;\n}());\nexports.SWAddOptionGroup = SWAddOptionGroup;\n\n\n//# sourceURL=webpack:///./optiongroup/components/swaddoptiongroup.ts?')},"./optiongroup/components/swoptionsforoptiongroup.ts":
/*!***********************************************************!*\
  !*** ./optiongroup/components/swoptionsforoptiongroup.ts ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWOptionsForOptionGroupController = /** @class */ (function () {\n    // @ngInject\n    function SWOptionsForOptionGroupController($hibachi, $timeout, collectionConfigService, observerService) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.validateChoice = function () {\n            _this.observerService.notify(\"validateOptions\", [_this.selectedOption, _this.optionGroup]);\n        };\n        this.optionCollectionConfig = collectionConfigService.newCollectionConfig(\"Option\");\n        this.optionCollectionConfig.setDisplayProperties(\"optionID, optionName, optionGroup.optionGroupID,optionGroup.optionGroupName\");\n        this.optionCollectionConfig.addFilter(\"optionGroup.optionGroupID\", this.optionGroupId);\n        this.optionCollectionConfig.setOrderBy('sortOrder|ASC');\n        this.optionCollectionConfig.setAllRecords(true);\n        this.optionCollectionConfig.getEntity().then(function (response) {\n            _this.options = response.records;\n            if (_this.options.length) {\n                _this.optionGroup = {\n                    optionGroupId: _this.options[0]['optionGroup_optionGroupID'],\n                    optionGroupName: _this.options[0]['optionGroup_optionGroupName']\n                };\n                _this.selectedOption = _this.savedOptions[_this.optionGroup.optionGroupId];\n            }\n        });\n    }\n    return SWOptionsForOptionGroupController;\n}());\nexports.SWOptionsForOptionGroupController = SWOptionsForOptionGroupController;\nvar SWOptionsForOptionGroup = /** @class */ (function () {\n    // @ngInject\n    function SWOptionsForOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) {\n        this.$hibachi = $hibachi;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.optionGroupPartialsPath = optionGroupPartialsPath;\n        this.restrict = \"EA\";\n        this.scope = {};\n        this.bindToController = {\n            optionGroupId: \"@\",\n            savedOptions: \"=\"\n        };\n        this.controller = SWOptionsForOptionGroupController;\n        this.controllerAs = \"swOptionsForOptionGroup\";\n        this.link = function ($scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(optionGroupPartialsPath) + \"optionsforoptiongroup.html\";\n    }\n    SWOptionsForOptionGroup.Factory = function () {\n        var directive = function ($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder) { return new SWOptionsForOptionGroup($hibachi, $timeout, collectionConfigService, observerService, optionGroupPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            '$hibachi',\n            '$timeout',\n            'collectionConfigService',\n            'observerService',\n            'optionGroupPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWOptionsForOptionGroup;\n}());\nexports.SWOptionsForOptionGroup = SWOptionsForOptionGroup;\n\n\n//# sourceURL=webpack:///./optiongroup/components/swoptionsforoptiongroup.ts?")},"./optiongroup/optiongroup.module.ts":
/*!*******************************************!*\
  !*** ./optiongroup/optiongroup.module.ts ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//modules\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//controllers\n//directives\nvar swaddoptiongroup_1 = __webpack_require__(/*! ./components/swaddoptiongroup */ \"./optiongroup/components/swaddoptiongroup.ts\");\nvar swoptionsforoptiongroup_1 = __webpack_require__(/*! ./components/swoptionsforoptiongroup */ \"./optiongroup/components/swoptionsforoptiongroup.ts\");\nvar optiongroupmodule = angular.module('optiongroup', [core_module_1.coremodule.name])\n    .config([function () {\n    }]).run([function () {\n    }])\n    //constants\n    .constant('optionGroupPartialsPath', 'optiongroup/components/')\n    //controllers\n    //directives\n    .directive('swAddOptionGroup', swaddoptiongroup_1.SWAddOptionGroup.Factory())\n    .directive('swOptionsForOptionGroup', swoptionsforoptiongroup_1.SWOptionsForOptionGroup.Factory());\nexports.optiongroupmodule = optiongroupmodule;\n\n\n//# sourceURL=webpack:///./optiongroup/optiongroup.module.ts?")},"./orderfulfillment/components/sworderfulfillmentlist.ts":
/*!***************************************************************!*\
  !*** ./orderfulfillment/components/sworderfulfillmentlist.ts ***!
  \***************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar FulfillmentsList;\n(function (FulfillmentsList) {\n    var Views;\n    (function (Views) {\n        Views[Views["Fulfillments"] = 0] = "Fulfillments";\n        Views[Views["Items"] = 1] = "Items";\n    })(Views = FulfillmentsList.Views || (FulfillmentsList.Views = {}));\n    var ofisStatusType;\n    (function (ofisStatusType) {\n        ofisStatusType[ofisStatusType["unavailable"] = 0] = "unavailable";\n        ofisStatusType[ofisStatusType["partial"] = 1] = "partial";\n        ofisStatusType[ofisStatusType["available"] = 2] = "available";\n    })(ofisStatusType = FulfillmentsList.ofisStatusType || (FulfillmentsList.ofisStatusType = {}));\n})(FulfillmentsList || (FulfillmentsList = {}));\n/**\n * Fulfillment List Controller\n */\nvar SWOrderFulfillmentListController = /** @class */ (function () {\n    // @ngInject\n    function SWOrderFulfillmentListController($hibachi, $timeout, collectionConfigService, observerService, utilityService, $location, $http, $window, typeaheadService, orderFulfillmentService, listingService) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.utilityService = utilityService;\n        this.$location = $location;\n        this.$http = $http;\n        this.$window = $window;\n        this.typeaheadService = typeaheadService;\n        this.orderFulfillmentService = orderFulfillmentService;\n        this.listingService = listingService;\n        this.usingRefresh = false;\n        this.addingBatch = false;\n        this.FulfillmentsList = FulfillmentsList;\n        this.getBaseCollection = function (entity) {\n            console.log(entity);\n            var collection = _this.collectionConfigService.newCollectionConfig(entity);\n            switch (entity) {\n                case "OrderFulfillment":\n                    if (_this.customOrderFulfillmentCollectionConfig) {\n                        collection.loadJson(_this.customOrderFulfillmentCollectionConfig);\n                    }\n                    break;\n                case "OrderItem":\n                    if (_this.customOrderItemCollectionConfig) {\n                        collection.loadJson(_this.customOrderItemCollectionConfig);\n                    }\n                    break;\n                default:\n                    break;\n            }\n            return collection;\n        };\n        /**\n         * Implements a listener for the orderFulfillment selections\n         */\n        this.swSelectionToggleSelectionorderFulfillmentCollectionTableListener = function (callBackData) {\n            var processObject = _this.getProcessObject();\n            if (_this.isSelected(callBackData.action)) {\n                processObject[\'data\'][\'orderFulfillmentIDList\'] = _this.listAppend(processObject.data[\'orderFulfillmentIDList\'], callBackData.selection);\n            }\n            else {\n                processObject[\'data\'][\'orderFulfillmentIDList\'] = _this.listRemove(processObject.data[\'orderFulfillmentIDList\'], callBackData.selection);\n            }\n            _this.setProcessObject(processObject);\n        };\n        this.collectionConfigUpdatedListener = function (callBackData) {\n            if (_this.usingRefresh == true) {\n                _this.refreshFlag = true;\n            }\n        };\n        this.orderFulfillmentCollectionTablepageRecordsUpdatedListener = function (callBackData) {\n            if (callBackData) {\n                _this.updateCollectionsInView();\n                _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));\n            }\n        };\n        /**\n         * Implements a listener for the orderItem selections\n         */\n        this.swSelectionToggleSelectionorderItemCollectionTableListener = function (callBackData) {\n            var processObject = _this.getProcessObject();\n            if (_this.isSelected(callBackData.action)) {\n                processObject[\'data\'][\'orderItemIDList\'] = _this.listAppend(processObject[\'data\'][\'orderItemIDList\'], callBackData.selection);\n            }\n            else {\n                processObject[\'data\'][\'orderItemIDList\'] = _this.listRemove(processObject[\'data\'][\'orderItemIDList\'], callBackData.selection);\n            }\n        };\n        /**\n         * returns true if the action is selected\n         */\n        this.isSelected = function (test) {\n            if (test == "check") {\n                return true;\n            }\n            else {\n                return false;\n            }\n            ;\n        };\n        /**\n         * Each collection has a view. The view is maintained by the enum. This Returns\n         * the collection for that view.\n         */\n        this.getCollectionByView = function (view) {\n            if (view == undefined || _this.collections == undefined) {\n                return;\n            }\n            return _this.collections[view];\n        };\n        this.updateCollectionsInView = function () {\n            _this.collections = [];\n            _this.collections.push(_this.orderFulfillmentCollection);\n            _this.collections.push(_this.orderItemCollection);\n        };\n        /**\n         * Setup the initial orderFulfillment Collection.\n         */\n        this.createOrderFulfillmentCollection = function () {\n            _this.orderFulfillmentCollection = _this.getBaseCollection("OrderFulfillment");\n            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentID", "ID");\n            _this.orderFulfillmentCollection.addDisplayProperty("order.orderType.systemCode", "Order Type");\n            _this.orderFulfillmentCollection.addDisplayProperty("fulfillmentMethod.fulfillmentMethodType", "Fulfillment Method Type");\n            _this.orderFulfillmentCollection.addDisplayProperty("order.orderNumber", "Order Number");\n            _this.orderFulfillmentCollection.addDisplayProperty("order.account.calculatedFullName", "Full Name");\n            _this.orderFulfillmentCollection.addDisplayProperty("order.orderOpenDateTime", "Date Started");\n            _this.orderFulfillmentCollection.addDisplayProperty("shippingMethod.shippingMethodName", "Shipping Method");\n            _this.orderFulfillmentCollection.addDisplayProperty("shippingAddress.stateCode", "State");\n            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentStatusType.typeName", "Status");\n            _this.orderFulfillmentCollection.addDisplayProperty("estimatedShippingDate");\n            //this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentItems.stock.location.locationID", "Stock Location");\n            //this.orderFulfillmentCollection.addFilter("orderFulfillmentInvStatType.systemCode", "ofisAvailable", "=");\n            _this.orderFulfillmentCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstUnfulfilled", "=");\n            _this.orderFulfillmentCollection.addFilter("order.orderStatusType.systemCode", "ostNew", "=");\n            _this.orderFulfillmentCollection.addFilter("order.orderNumber", "", "!=");\n            _this.orderFulfillmentCollection.addFilter("fulfillmentMethod.fulfillmentMethodType", "shipping", "=");\n        };\n        this.createOrderFulfillmentCollectionWithStatus = function (status) {\n            status = status.trim();\n            _this.orderFulfillmentCollection = _this.getBaseCollection("OrderFulfillment");\n            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentID", "ID");\n            _this.orderFulfillmentCollection.addDisplayProperty("order.orderNumber", "Order Number");\n            _this.orderFulfillmentCollection.addDisplayProperty("order.orderOpenDateTime", "Date Started");\n            _this.orderFulfillmentCollection.addDisplayProperty("shippingMethod.shippingMethodName", "Shipping Method");\n            _this.orderFulfillmentCollection.addDisplayProperty("shippingAddress.stateCode", "State");\n            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentStatusType.typeName", "Status");\n            //this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentInvStatType.systemCode", "Availability");\n            //this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentItems.stock.location.locationID", "Stock Location");\n            _this.orderFulfillmentCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstUnfulfilled", "!=");\n            _this.orderFulfillmentCollection.addFilter("fulfillmentMethod.fulfillmentMethodType", "shipping", "=");\n            //Shipping\n            _this.orderFulfillmentCollection.addFilter("order.orderStatusType.systemCode", "ostNew", "=");\n            _this.orderFulfillmentCollection.addFilter("order.orderNumber", "", "!=");\n            if (status) {\n                console.log("S", status, status == "available");\n                if (status == "unavailable") {\n                    _this.orderFulfillmentCollection.addFilter("orderFulfillmentItems.sku.calculatedQOH", "0", "<=");\n                }\n                else if (status == "available") {\n                    console.log("Made it.");\n                    _this.orderFulfillmentCollection.addFilter("orderFulfillmentItems.sku.calculatedQOH", "0", ">");\n                }\n                else if (status == "paid") {\n                    _this.orderFulfillmentCollection.addFilter("order.calculatedPaymentAmountReceivedTotal", "0", ">");\n                }\n            }\n            _this.orderFulfillmentCollection.getEntity().then(function (result) {\n                //refreshes the page.\n                _this.collections[0] = _this.orderFulfillmentCollection;\n                _this.view = _this.views.Fulfillments;\n                _this.refreshFlag = false;\n            });\n        };\n        this.createOrderItemCollectionWithStatus = function (status) {\n            delete _this.orderItemCollection;\n            _this.view = undefined;\n            _this.orderItemCollection = _this.getBaseCollection("OrderItem");\n            _this.orderItemCollection.addDisplayProperty("orderItemID", "ID");\n            _this.orderItemCollection.addDisplayProperty("order.orderNumber", "Order Number");\n            _this.orderItemCollection.addDisplayProperty("order.orderOpenDateTime", "Date Started");\n            _this.orderItemCollection.addDisplayProperty("shippingMethod.shippingMethodName", "Shipping Method");\n            _this.orderItemCollection.addDisplayProperty("shippingAddress.stateCode", "State");\n            _this.orderItemCollection.addDisplayProperty("orderFulfillmentStatusType.typeName", "Status");\n            _this.orderItemCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstUnfulfilled", "==");\n            _this.orderItemCollection.addFilter("fulfillmentMethod.fulfillmentMethodName", "Shipping", "=");\n            //Shipping\n            _this.orderItemCollection.addFilter("order.orderStatusType.systemCode", "ostNew", "=");\n            _this.orderItemCollection.addFilter("order.orderNumber", "", "!=");\n            //"order.paymentAmountDue", "0", ">", {persistent: false}\n            if (status) {\n                if (status == "partial") {\n                    _this.orderFulfillmentCollection.addFilter("sku.calculatedQOH", "0", ">", "AND");\n                }\n                else if (status == "unavailable") {\n                    _this.orderFulfillmentCollection.addFilter("sku.calculatedQOH", "0", "<=", "AND");\n                }\n                else if (status == "available") {\n                    _this.orderFulfillmentCollection.addFilter("sku.calculatedQOH", "0", ">", "AND");\n                }\n                else if (status == "paid") {\n                    _this.orderFulfillmentCollection.addFilter("order.calculatedPaymentAmountReceivedTotal", "0", ">", "AND");\n                }\n            }\n            _this.orderItemCollection.getEntity().then(function (result) {\n                //refreshes the page.\n                _this.collections[0] = _this.orderItemCollection;\n                _this.view = _this.views.Fulfillments;\n            });\n        };\n        this.createOrderFulfillmentCollectionWithFilterMap = function (filterMap) {\n            delete _this.orderFulfillmentCollection;\n            _this.view = undefined;\n            _this.orderFulfillmentCollection = _this.getBaseCollection("OrderFulfillment");\n            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentID", "ID");\n            _this.orderFulfillmentCollection.addDisplayProperty("order.orderNumber", "Order Number");\n            _this.orderFulfillmentCollection.addDisplayProperty("order.orderOpenDateTime", "Date Started");\n            _this.orderFulfillmentCollection.addDisplayProperty("shippingMethod.shippingMethodName", "Shipping Method");\n            _this.orderFulfillmentCollection.addDisplayProperty("shippingAddress.stateCode", "State");\n            _this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentStatusType.typeName", "Status");\n            _this.orderFulfillmentCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstUnfulfilled", "=");\n            _this.orderFulfillmentCollection.addFilter("fulfillmentMethod.fulfillmentMethodType", "shipping", "=");\n            //Shipping\n            _this.orderFulfillmentCollection.addFilter("order.orderStatusType.systemCode", "ostNew", "=");\n            _this.orderFulfillmentCollection.addFilter("order.orderNumber", "", "!=");\n            //this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentInvStatType.systemCode", "Availability");\n            //this.orderFulfillmentCollection.addDisplayProperty("orderFulfillmentItems.stock.location.locationID", "Stock Location");\n            //Build the collection using just the correct filters.\n            //Check the filters for multiple true\n            var hasMultipleEnabled = false;\n            var filterCount = 0;\n            filterMap.forEach(function (v, k) {\n                if (filterMap.get(k) === true) {\n                    filterCount++;\n                }\n            });\n            if (filterCount > 1) {\n                hasMultipleEnabled = true;\n            }\n            //Add the filters.\n            filterMap.forEach(function (v, k) {\n                var systemCode = k;\n                //handle truth\n                if (filterMap.get(k) === true) {\n                    if (k) {\n                        if (k == "unavailable") {\n                            _this.orderFulfillmentCollection.addFilter("sku.calculatedQOH", "0", "=", "AND");\n                        }\n                        else if (k == "available") {\n                            _this.orderFulfillmentCollection.addFilter("sku.calculatedQOH", "0", ">", "AND");\n                        }\n                        else if (k == "paid") {\n                            console.log("Apply Paid Filter");\n                            _this.orderFulfillmentCollection.addFilter("order.calculatedPaymentAmountReceivedTotal", "0", ">", "AND");\n                        }\n                    }\n                }\n                //handle false\n                if (filterMap.get(k) === false && filterMap.get(k) != undefined) {\n                    if (systemCode.length) {\n                        //this.orderFulfillmentCollection.addFilter("orderFulfillmentItems.sku.calculatedQATS", systemCode, "!=", \'AND\');\n                        //this.orderFulfillmentCollection.addFilter("orderFulfillmentStatusType.systemCode", "ofstFulfilled", "!=", "AND");\n                        //this.orderFulfillmentCollection.addFilter("order.orderNumber", "", "!=", "AND");\n                    }\n                }\n            });\n            if (_this.getCollectionByView(_this.getView())) {\n                _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));\n            }\n        };\n        /**\n         * Setup the initial orderItem Collection.\n         */\n        this.createOrderItemCollection = function () {\n            _this.orderItemCollection = _this.getBaseCollection("OrderItem");\n            _this.orderItemCollection.addDisplayProperty("orderItemID");\n            _this.orderItemCollection.addDisplayProperty("sku.skuCode");\n            _this.orderItemCollection.addDisplayProperty("sku.calculatedSkuDefinition");\n            _this.orderItemCollection.addDisplayProperty("sku.calculatedQOH");\n            _this.orderItemCollection.addDisplayProperty("stock.location.locationName");\n            _this.orderItemCollection.addDisplayProperty("orderFulfillment.fulfillmentMethod.fulfillmentMethodType", "Fulfillment Method Type");\n            _this.orderItemCollection.addDisplayProperty("quantity");\n            _this.orderItemCollection.addDisplayProperty("order.orderNumber");\n            _this.orderItemCollection.addDisplayProperty("order.orderOpenDateTime");\n            _this.orderItemCollection.addDisplayProperty("orderFulfillment.orderFulfillmentStatusType.typeName");\n            _this.orderItemCollection.addDisplayProperty("sku.product.productName");\n            _this.orderItemCollection.addFilter("orderFulfillment.orderFulfillmentStatusType.systemCode", "ofstUnfulfilled", "=");\n            _this.orderItemCollection.addFilter("orderFulfillment.fulfillmentMethod.fulfillmentMethodType", "shipping", "=");\n            _this.orderItemCollection.addFilter("order.orderNumber", "", "!=");\n        };\n        /**\n         * Toggle the Status Type filters on and off.\n         */\n        this.toggleFilter = function (filterName) {\n            _this.filters[filterName] = !_this.filters[filterName];\n            if (_this.filters[filterName]) {\n                _this.addFilter(filterName, true);\n                return;\n            }\n            _this.removeFilter(filterName, false);\n        };\n        /**\n         * Toggle between views. We refresh the collection everytime we set the view.\n         */\n        this.setView = function (view) {\n            _this.view = view;\n            if (_this.getCollectionByView(_this.getView())) {\n                _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));\n            }\n        };\n        //ACTION CREATOR: This will toggle the listing between its 2 states (orderfulfillments and orderitems)\n        this.toggleOrderFulfillmentListing = function () {\n            _this.orderFulfillmentService.orderFulfillmentStore.dispatch({ type: "TOGGLE_FULFILLMENT_LISTING", payload: {} });\n            //reset the selections because you can\'t mix and match.\n            _this.getProcessObject().data.orderFulfillmentIDList = "";\n            _this.getProcessObject().data.orderItemIDList = "";\n            try {\n                _this.orderFulfillmentService.listingService.clearAllSelections("orderFulfillmentCollectionTable");\n                _this.orderFulfillmentService.listingService.clearAllSelections("orderItemCollectionTable");\n            }\n            catch (e) {\n                //no need to say anything.\n            }\n            _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));\n        };\n        /**\n         * Returns the current view.\n         */\n        this.getView = function () {\n            return _this.view;\n        };\n        /**\n         * Refreshes the view\n         */\n        this.refreshPage = function () {\n            if (_this.utilityService.isMultiPageMode()) {\n                window.location.reload();\n            }\n        };\n        /**\n         * Initialized the collection so that the listingDisplay can you it to display its data.\n         */\n        this.refreshCollectionTotal = function (collection) {\n            if (collection) {\n                collection.getEntity().then(function (response) {\n                    _this.total = response.recordsCount;\n                    _this.refreshFlag = false;\n                });\n                return collection;\n            }\n        };\n        this.getRecordsCount = function (collection) {\n            _this.total = collection.recordsCount;\n            _this.refreshFlag = false;\n        };\n        /**\n         * Adds one of the status type filters into the collectionConfigService\n         * @param key: FulfillmentsList.CollectionFilterValues {\'partial\' | \'available\' | \'unavailable\' | \'location\'}\n         * @param Vvalue: boolean: {true|false}\n         */\n        this.addFilter = function (key, value) {\n            _this.$timeout(function () {\n                _this.refreshFlag = true;\n            }, 1);\n            //Always keep the orderNumber filter.\n            //If there is only one filter group add a second. otherwise add to the second.\n            var filterGroup = [];\n            var filter = {};\n            if (_this.getCollectionByView(_this.getView()) && _this.getCollectionByView(_this.getView()).baseEntityName == "OrderFulfillment") {\n                if (value == true) {\n                    if (key == "partial") {\n                        _this.createOrderFulfillmentCollectionWithStatus("partial");\n                    }\n                    if (key == "available") {\n                        _this.createOrderFulfillmentCollectionWithStatus("available");\n                    }\n                    if (key == "unavailable") {\n                        _this.createOrderFulfillmentCollectionWithStatus("unavailable");\n                    }\n                    if (key == "location" && value != undefined) {\n                        filter = _this.getCollectionByView(_this.getView()).createFilter("orderFulfillmentItems.stock.location.locationName", value, "=", "OR", false);\n                    }\n                    if (key == "paid" && value != undefined) {\n                        console.log("Applied Paid Filter");\n                        _this.getCollectionByView(_this.getView()).addFilter("order.calculatedPaymentAmountReceivedTotal", "0", ">");\n                    }\n                }\n                if (value = false) {\n                    _this.createOrderFulfillmentCollection();\n                }\n            }\n            else {\n                if (value == true) {\n                    if (key == "partial") {\n                        _this.createOrderItemCollectionWithStatus("partial");\n                    }\n                    if (key == "available") {\n                        _this.createOrderItemCollectionWithStatus("available");\n                    }\n                    if (key == "unavailable") {\n                        _this.createOrderItemCollectionWithStatus("unavailable");\n                    }\n                    if (key == "location" && value != undefined) {\n                        filter = _this.getCollectionByView(_this.getView()).createFilter("stock.location.locationName", value, "=", "OR", false);\n                    }\n                    if (key == "paid" && value != undefined) {\n                        console.log("Applied Paid Filter");\n                        _this.getCollectionByView(_this.getView()).addFilter("order.calculatedPaymentAmountReceivedTotal", "0", ">");\n                    }\n                }\n                if (value = false) {\n                    _this.createOrderItemCollection();\n                }\n            }\n            _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));\n        };\n        /**\n         * Adds one of the status type filters into the collectionConfigService\n         * @param key: FulfillmentsList.CollectionFilterValues {\'partial\' | \'available\' | \'unavailable\' | \'location\'}\n         * @param Vvalue: boolean: {true|false}\n         */\n        this.removeFilter = function (key, value) {\n            _this.refreshFlag = true;\n            //Always keep the orderNumber filter.\n            if (_this.getCollectionByView(_this.getView()) && _this.getCollectionByView(_this.getView()).baseEntityName == "OrderFulfillment") {\n                var filterMap = new Map();\n                filterMap.set("partial", _this.filters[\'partial\']);\n                filterMap.set("available", _this.filters[\'available\']);\n                filterMap.set("unavailable", _this.filters[\'unavailable\']);\n                filterMap.set("location", _this.filters[\'location\']);\n                filterMap.set("paid", _this.filters[\'paid\']);\n                _this.createOrderFulfillmentCollectionWithFilterMap(filterMap);\n            }\n            else if (_this.getCollectionByView(_this.getView()).baseEntityName == "OrderItem") {\n                console.warn("Adding orderItem Filters", _this.getCollectionByView(_this.getView()));\n            }\n            //Calls to auto refresh the collection since a filter was added.\n            _this.createOrderFulfillmentCollection();\n            _this.createOrderItemCollection();\n            //some view setup.\n            _this.views = FulfillmentsList.Views;\n            _this.setView(_this.views.Fulfillments);\n            //add both collections into the collection object. Removed 0 elements (insert only).\n            _this.collections.push(_this.orderFulfillmentCollection);\n            _this.collections.push(_this.orderItemCollection);\n            _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));\n        };\n        /**\n         * This applies or removes a location filter from the collection.\n         */\n        this.addLocationFilter = function (locationID) {\n            var currentCollection = _this.getCollectionByView(_this.getView());\n            if (currentCollection && currentCollection.baseEntityName == "OrderFulfillment") {\n                //If this is the fulfillment collection, the location is against, orderItems.stock.location\n                currentCollection.addFilter("orderFulfillmentItems.stock.location.locationID", locationID, "=");\n            }\n            if (currentCollection && currentCollection.baseEntityName == "OrderItem") {\n                //If this is the fulfillment collection, the location is against, stock.location\n                currentCollection.addFilter("stock.location.locationID", locationID, "=");\n            }\n            //this.toggleOrderFulfillmentListing();\n            //this.toggleOrderFulfillmentListing();\n            _this.refreshCollectionTotal(_this.getCollectionByView(_this.getView()));\n        };\n        /**\n         * Saved the batch using the data stored in the processObject. This delegates to the service method.\n         */\n        this.addBatch = function () {\n            _this.addingBatch = true;\n            if (_this.getProcessObject()) {\n                _this.orderFulfillmentService.addBatch(_this.getProcessObject()).then(_this.processCreateSuccess, _this.processCreateError);\n            }\n        };\n        /**\n         * Handles a successful post of the processObject\n         */\n        this.processCreateSuccess = function (result) {\n            //Redirect to the created fulfillmentBatch.\n            _this.addingBatch = false;\n            if (result.data && result.data[\'fulfillmentBatchID\']) {\n                //if url contains /Slatwall use that\n                var slatwall = "";\n                slatwall = _this.$hibachi.appConfig.baseURL;\n                if (slatwall == "")\n                    slatwall = "/";\n                _this.$window.location.href = slatwall + "?slataction=entity.detailfulfillmentbatch&fulfillmentBatchID=" + result.data[\'fulfillmentBatchID\'];\n            }\n        };\n        /**\n         * Handles a successful post of the processObject\n         */\n        this.processCreateError = function (data) {\n            console.warn("Process Errors", data);\n        };\n        /**\n         * Returns the processObject\n         */\n        this.getProcessObject = function () {\n            return _this.processObject;\n        };\n        /**\n         * Sets the processObject\n         */\n        this.setProcessObject = function (processObject) {\n            _this.processObject = processObject;\n        };\n        /**\n         * This will recieve all the notifications from all typeaheads on the page.\n         * When I revieve a notification, it will be an object that has a name and data.\n         * The name is the name of the form and the data is the selected id. The three types,\n         * that I\'m currently looking for are:\n         * "locationIDfilter", "locationID", or "accountID" These are the same as the names of the forms.\n         */\n        this.recieveNotification = function (message) {\n            switch (message.payload.name) {\n                case "locationIDfilter":\n                    //If this is called, then the filter needs to be updated based on this id.\n                    _this.addLocationFilter(message.payload.data);\n                    break;\n                case "locationID":\n                    //If this is called, then a location for the batch has been selected.\n                    _this.getProcessObject().data[\'locationID\'] = message.payload.data || "";\n                    break;\n                case "accountID":\n                    //If this is called, then an account to assign to the batch has been selected.\n                    _this.getProcessObject().data[\'assignedAccountID\'] = message.payload.data || "";\n                    break;\n                default:\n                    console.log("Warning: A default case was hit with the data: ", message);\n            }\n        };\n        /**\n         * Returns the number of selected fulfillments\n         */\n        this.getTotalFulfillmentsSelected = function () {\n            var total = 0;\n            if (_this.getProcessObject() && _this.getProcessObject().data) {\n                try {\n                    if (_this.getProcessObject().data.orderFulfillmentIDList && _this.getProcessObject().data.orderFulfillmentIDList.split(",").length > 0 && _this.getProcessObject().data.orderItemIDList && _this.getProcessObject().data.orderItemIDList.split(",").length > 0) {\n                        return _this.getProcessObject().data.orderFulfillmentIDList.split(",").length + _this.getProcessObject().data.orderItemIDList.split(",").length;\n                    }\n                    else if (_this.getProcessObject().data.orderFulfillmentIDList && _this.getProcessObject().data.orderFulfillmentIDList.split(",").length > 0) {\n                        return _this.getProcessObject().data.orderFulfillmentIDList.split(",").length;\n                    }\n                    else if (_this.getProcessObject().data.orderItemIDList && _this.getProcessObject().data.orderItemIDList.split(",").length > 0) {\n                        return _this.getProcessObject().data.orderItemIDList.split(",").length;\n                    }\n                    else {\n                        return 0;\n                    }\n                }\n                catch (error) {\n                    return 0; //default\n                }\n            }\n        };\n        //Set the initial state for the filters.\n        this.filters = { "unavailable": false, "partial": false, "available": false, "paid": false };\n        this.collections = [];\n        //Some setup for the fulfillments collection.\n        this.createOrderFulfillmentCollection();\n        this.createOrderItemCollection();\n        //some view setup.\n        this.views = FulfillmentsList.Views;\n        this.setView(this.views.Fulfillments);\n        //add both collections into the collection object. Removed 0 elements (insert only).\n        this.collections.push(this.orderFulfillmentCollection);\n        this.collections.push(this.orderItemCollection);\n        //Setup the processObject\n        this.setProcessObject(this.$hibachi.newFulfillmentBatch_Create());\n        //adds the two default filters to start.\n        //this.addFilter(\'available\', true);\n        //this.addFilter(\'partial\', true);\n        var collection = this.refreshCollectionTotal(this.getCollectionByView(this.getView()));\n        if (collection.entityName = "OrderFulfillment") {\n            this.orderFulfillmentCollection = collection;\n        }\n        else {\n            this.orderItemCollection = collection;\n        }\n        //Attach our listeners for selections on both listing displays.\n        this.observerService.attach(this.swSelectionToggleSelectionorderFulfillmentCollectionTableListener, "swSelectionToggleSelectionorderFulfillmentCollectionTable", "swSelectionToggleSelectionorderFulfillmentCollectionTableListener");\n        this.observerService.attach(this.swSelectionToggleSelectionorderItemCollectionTableListener, "swSelectionToggleSelectionorderItemCollectionTable", "swSelectionToggleSelectionorderItemCollectionTableListener");\n        this.observerService.attach(this.collectionConfigUpdatedListener, "collectionConfigUpdated", "collectionConfigUpdatedListener");\n        //Subscribe to state changes in orderFulfillmentService\n        this.orderFulfillmentService.orderFulfillmentStore.store$.subscribe(function (state) {\n            _this.state = state;\n            if (state && state.showFulfillmentListing == true) {\n                //set the view.\n                _this.setView(_this.views.Fulfillments);\n            }\n            else {\n                _this.setView(_this.views.Items);\n            }\n            _this.getCollectionByView(_this.getView());\n        });\n        //Subscribe for state changes to the typeahead.\n        this.typeaheadService.typeaheadStore.store$.subscribe(function (update) {\n            if (update.action && update.action.payload) {\n                _this.recieveNotification(update.action);\n            }\n        });\n    }\n    /**\n     * Adds a string to a list.\n     */\n    SWOrderFulfillmentListController.prototype.listAppend = function (str, subStr) {\n        return this.utilityService.listAppend(str, subStr, ",");\n    };\n    /**\n     * Removes a substring from a string.\n     * str: The original string.\n     * subStr: The string to remove.\n     */\n    SWOrderFulfillmentListController.prototype.listRemove = function (str, subStr) {\n        return this.utilityService.listRemove(str, subStr);\n    };\n    return SWOrderFulfillmentListController;\n}());\nexports.SWOrderFulfillmentListController = SWOrderFulfillmentListController;\n/**\n * This is a view helper class that uses the collection helper class.\n */\nvar SWOrderFulfillmentList = /** @class */ (function () {\n    // @ngInject\n    function SWOrderFulfillmentList(slatwallPathBuilder, orderFulfillmentPartialsPath) {\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            customOrderFulfillmentCollectionConfig: \'=?\',\n            customOrderItemCollectionConfig: \'=?\'\n        };\n        this.controller = SWOrderFulfillmentListController;\n        this.controllerAs = "swOrderFulfillmentListController";\n        this.link = function ($scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(orderFulfillmentPartialsPath) + "orderfulfillmentlist.html";\n    }\n    SWOrderFulfillmentList.Factory = function () {\n        var directive = function (slatwallPathBuilder, orderFulfillmentPartialsPath) { return new SWOrderFulfillmentList(slatwallPathBuilder, orderFulfillmentPartialsPath); };\n        directive.$inject = [\n            \'slatwallPathBuilder\',\n            \'orderFulfillmentPartialsPath\'\n        ];\n        return directive;\n    };\n    return SWOrderFulfillmentList;\n}());\nexports.SWOrderFulfillmentList = SWOrderFulfillmentList;\n\n\n//# sourceURL=webpack:///./orderfulfillment/components/sworderfulfillmentlist.ts?')},"./orderfulfillment/orderfulfillment.module.ts":
/*!*****************************************************!*\
  !*** ./orderfulfillment/orderfulfillment.module.ts ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//modules\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//services\nvar orderfulfillmentservice_1 = __webpack_require__(/*! ./services/orderfulfillmentservice */ \"./orderfulfillment/services/orderfulfillmentservice.ts\");\n//controllers\n//directives\nvar sworderfulfillmentlist_1 = __webpack_require__(/*! ./components/sworderfulfillmentlist */ \"./orderfulfillment/components/sworderfulfillmentlist.ts\");\n//models \nvar orderfulfillmentmodule = angular.module('orderFulfillment', [core_module_1.coremodule.name])\n    .config([function () {\n    }]).run([function () {\n    }])\n    //constants\n    .constant('orderFulfillmentPartialsPath', 'orderfulfillment/components/')\n    //services\n    .service('orderFulfillmentService', orderfulfillmentservice_1.OrderFulfillmentService)\n    //controllers\n    //directives\n    .directive('swOrderFulfillmentList', sworderfulfillmentlist_1.SWOrderFulfillmentList.Factory());\nexports.orderfulfillmentmodule = orderfulfillmentmodule;\n\n\n//# sourceURL=webpack:///./orderfulfillment/orderfulfillment.module.ts?")},"./orderfulfillment/services/orderfulfillmentservice.ts":
/*!**************************************************************!*\
  !*** ./orderfulfillment/services/orderfulfillmentservice.ts ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path="../../../../../node_modules/typescript/lib/lib.es6.d.ts" />\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nvar FluxStore = __webpack_require__(/*! ../../../../../org/Hibachi/client/src/core/prototypes/swstore */ "../../../org/Hibachi/client/src/core/prototypes/swstore.ts");\nvar actions = __webpack_require__(/*! ../../../../../admin/client/src/fulfillmentbatch/actions/fulfillmentbatchactions */ "./fulfillmentbatch/actions/fulfillmentbatchactions.ts");\n/**\n * Fulfillment List Controller\n */\nvar OrderFulfillmentService = /** @class */ (function () {\n    //@ngInject\n    function OrderFulfillmentService($timeout, observerService, $hibachi, collectionConfigService, listingService, $rootScope, selectionService) {\n        var _this = this;\n        this.$timeout = $timeout;\n        this.observerService = observerService;\n        this.$hibachi = $hibachi;\n        this.collectionConfigService = collectionConfigService;\n        this.listingService = listingService;\n        this.$rootScope = $rootScope;\n        this.selectionService = selectionService;\n        //This is the single object that contains all state for the component.\n        this.state = {\n            //boolean\n            showFulfillmentListing: true,\n            expandedFulfillmentBatchListing: true,\n            editComment: false,\n            useShippingIntegrationForTrackingNumber: true,\n            //objects\n            commentBeingEdited: undefined,\n            emailTemplates: undefined,\n            //strings\n            currentSelectedFulfillmentBatchItemID: "",\n            fulfillmentBatchId: undefined,\n            reference1: "",\n            //empty collections\n            smFulfillmentBatchItemCollection: undefined,\n            lgFulfillmentBatchItemCollection: undefined,\n            currentRecordOrderDetail: undefined,\n            commentsCollection: undefined,\n            orderFulfillmentItemsCollection: undefined,\n            emailCollection: undefined,\n            printCollection: undefined,\n            //arrays\n            accountNames: [],\n            orderDeliveryAttributes: [],\n            orderItem: [],\n            loading: false,\n            tableSelections: {\n                table1: [],\n                table2: []\n            },\n            boxes: [{}]\n        };\n        this.updateLock = false;\n        this.selectedValue = "";\n        // Middleware - Logger - add this into the store declaration to log all calls to the reducer.\n        this.loggerEpic = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return args;\n        };\n        /**\n         * The reducer is responsible for modifying the state of the state object into a new state.\n         */\n        this.orderFulfillmentStateReducer = function (state, action) {\n            switch (action.type) {\n                case actions.TOGGLE_FULFILLMENT_LISTING:\n                    _this.state.showFulfillmentListing = !_this.state.showFulfillmentListing;\n                    return __assign({}, _this.state, { action: action });\n                case actions.ADD_BATCH:\n                    return __assign({}, state, { action: action });\n                case actions.SETUP_BATCHDETAIL:\n                    //Setup the detail\n                    if (action.payload.fulfillmentBatchId != undefined) {\n                        _this.state.fulfillmentBatchId = action.payload.fulfillmentBatchId;\n                    }\n                    _this.setupFulfillmentBatchDetail();\n                    return __assign({}, _this.state, { action: action });\n                case actions.UPDATE_BATCHDETAIL:\n                    return __assign({}, _this.state, { action: action });\n                case actions.TOGGLE_BATCHLISTING:\n                    //Toggle the listing from expanded to half size.\n                    _this.state.expandedFulfillmentBatchListing = !_this.state.expandedFulfillmentBatchListing;\n                    return __assign({}, _this.state, { action: action });\n                case actions.TOGGLE_EDITCOMMENT:\n                    //Update the comment.\n                    _this.state.editComment = !_this.state.editComment;\n                    if (_this.state.editComment == true) {\n                        _this.state.commentBeingEdited = action.payload.comment;\n                    }\n                    else {\n                        _this.state.commentBeingEdited = undefined;\n                    }\n                    return __assign({}, _this.state, { action: action });\n                case actions.SAVE_COMMENT_REQUESTED:\n                    if (action.payload.comment && action.payload.commentText) {\n                        //saving\n                        _this.saveComment(action.payload.comment, action.payload.commentText);\n                    }\n                    else {\n                        //editing\n                        _this.saveComment({}, action.payload.commentText);\n                    }\n                    //toggle edit mode. so we are no longer editing.\n                    _this.state.editComment = false;\n                    _this.state.commentBeingEdited = undefined;\n                    return __assign({}, _this.state, { action: action });\n                case actions.DELETE_COMMENT_REQUESTED:\n                    _this.deleteComment(action.payload.comment);\n                    _this.state.editComment = false;\n                    _this.state.commentBeingEdited = undefined;\n                    return __assign({}, _this.state, { action: action });\n                case actions.CREATE_FULFILLMENT_REQUESTED:\n                    //create all the data\n                    _this.fulfillItems(action.payload.viewState, false);\n                    return __assign({}, _this.state, { action: action });\n                case actions.SETUP_ORDERDELIVERYATTRIBUTES:\n                    _this.createOrderDeliveryAttributeCollection();\n                    return __assign({}, _this.state, { action: action });\n                case actions.DELETE_FULFILLMENTBATCHITEM_REQUESTED:\n                    _this.deleteFulfillmentBatchItem();\n                    return __assign({}, _this.state, { action: action });\n                case actions.PRINT_LIST_REQUESTED:\n                    _this.getPrintList();\n                    return __assign({}, _this.state, { action: action });\n                case actions.EMAIL_LIST_REQUESTED:\n                    _this.getEmailList();\n                    return __assign({}, _this.state, { action: action });\n                case actions.ADD_BOX:\n                    _this.addNewBox(action.payload.viewState);\n                    return __assign({}, _this.state, { action: action });\n                case actions.REMOVE_BOX:\n                    _this.removeBox(action.payload.index);\n                    return __assign({}, _this.state, { action: action });\n                case actions.TOGGLE_LOADER:\n                    _this.state.loading = !_this.state.loading;\n                    return __assign({}, _this.state, { action: action });\n                default:\n                    return _this.state;\n            }\n        };\n        /** When a row is selected, remove the other selections.  */\n        this.swSelectionToggleSelectionfulfillmentBatchItemTable2 = function (args) {\n            if (args.selectionid != "fulfillmentBatchItemTable2") {\n                return;\n            }\n            if (args.action === "uncheck") {\n                if (_this.selectedValue == args.selection) {\n                    _this.selectedValue = undefined;\n                }\n                return;\n            }\n            //Are any previously checked?\n            if (args.action === "check"\n                && args.selection != undefined\n                && args.selection != _this.selectedValue\n                && args.selectionid == "fulfillmentBatchItemTable2") {\n                //set the selection.\n                //save the selected value\n                var current = "";\n                if (_this.selectedValue != undefined && _this.selectedValue.length) {\n                    current = _this.selectedValue;\n                    //remove that old value\n                    _this.selectedValue = args.selection;\n                    _this.selectionService.removeSelection("fulfillmentBatchItemTable2", current);\n                    _this.state.currentSelectedFulfillmentBatchItemID = _this.selectedValue;\n                    _this.state.useShippingIntegrationForTrackingNumber = true;\n                    _this.state.orderItem = [];\n                    _this.state.boxes = [{}];\n                    _this.state.smFulfillmentBatchItemCollection.getEntity().then(function (results) {\n                        for (var result in results.pageRecords) {\n                            var currentRecord = results[\'pageRecords\'][result];\n                            if (currentRecord[\'fulfillmentBatchItemID\'] === _this.state.currentSelectedFulfillmentBatchItemID) {\n                                //Matched - Save some items from the currentRecord to display.\n                                //Get the orderItems for this fulfillment\n                                _this.createOrderFulfillmentItemCollection(currentRecord[\'orderFulfillment_orderFulfillmentID\']);\n                                _this.createCurrentRecordDetailCollection(currentRecord);\n                                _this.createShippingIntegrationOptions(currentRecord);\n                                _this.emitUpdateToClient();\n                            }\n                        }\n                    });\n                }\n                else {\n                    _this.selectedValue = args.selection;\n                }\n            }\n        };\n        /** Sets up the batch detail page including responding to listing changes. */\n        this.setupFulfillmentBatchDetail = function () {\n            //Create the fulfillmentBatchItemCollection\n            _this.createLgOrderFulfillmentBatchItemCollection();\n            _this.createSmOrderFulfillmentBatchItemCollection();\n            _this.getOrderFulfillmentEmailTemplates();\n            //Select the initial table row\n            //get the listingDisplay store and listen for changes to the listing display state.\n            _this.listingService.listingDisplayStore.store$.subscribe(function (update) {\n                if (update.action && update.action.type && update.action.type == actions.CURRENT_PAGE_RECORDS_SELECTED) {\n                    /*  Check for the tables we care about fulfillmentBatchItemTable1, fulfillmentBatchItemTable2\n                        Outer table, will need to toggle and set the floating cards to this data.\n                        on the first one being selected, go to the shrink view and set the selection on there as well.*/\n                    if (angular.isDefined(update.action.payload)) {\n                        if (angular.isDefined(update.action.payload.listingID) && update.action.payload.listingID == "fulfillmentBatchItemTable1") {\n                            //If there is only one item selected, show that detail.\n                            if (angular.isDefined(update.action.payload.values) && update.action.payload.values.length === 1) {\n                                if (_this.state.expandedFulfillmentBatchListing) {\n                                    _this.state.expandedFulfillmentBatchListing = !_this.state.expandedFulfillmentBatchListing;\n                                }\n                                _this.state.currentSelectedFulfillmentBatchItemID = update.action.payload.values[0];\n                                //set the selection.\n                                if (update.action.payload.values.length && _this.state.currentSelectedFulfillmentBatchItemID) {\n                                    var selectedRowIndex = _this.listingService.getSelectedBy("fulfillmentBatchItemTable1", "fulfillmentBatchItemID", _this.state.currentSelectedFulfillmentBatchItemID);\n                                    if (selectedRowIndex != -1) {\n                                        _this.listingService\n                                            .getListing("fulfillmentBatchItemTable2").selectionService\n                                            .addSelection(_this.listingService.getListing("fulfillmentBatchItemTable2").tableID, _this.listingService.getListingPageRecords("fulfillmentBatchItemTable2")[selectedRowIndex][_this.listingService.getListingBaseEntityPrimaryIDPropertyName("fulfillmentBatchItemTable2")]);\n                                    }\n                                }\n                                //use this id to get the record and set it to currentRecordOrderDetail.\n                                //*****Need to iterate over the collection and find the ID to match against and get the orderfulfillment collection that matches this record.\n                                _this.state.smFulfillmentBatchItemCollection.getEntity().then(function (results) {\n                                    for (var result in results.pageRecords) {\n                                        var currentRecord = results[\'pageRecords\'][result];\n                                        if (currentRecord[\'fulfillmentBatchItemID\'] === _this.state.currentSelectedFulfillmentBatchItemID) {\n                                            //Matched - Save some items from the currentRecord to display.\n                                            //Get the orderItems for this fulfillment\n                                            _this.createOrderFulfillmentItemCollection(currentRecord[\'orderFulfillment_orderFulfillmentID\']);\n                                            _this.createCurrentRecordDetailCollection(currentRecord);\n                                            _this.createShippingIntegrationOptions(currentRecord);\n                                            _this.emitUpdateToClient();\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                        if (angular.isDefined(update.action.payload.listingID) && update.action.payload.listingID == "fulfillmentBatchItemTable2") {\n                            //if nothing is selected, go back to the outer view.\n                            if (!angular.isDefined(update.action.payload.values) || update.action.payload.values.length == 0) {\n                                if (_this.state.expandedFulfillmentBatchListing == false) {\n                                    _this.state.expandedFulfillmentBatchListing = !_this.state.expandedFulfillmentBatchListing;\n                                    //Clear all selections.\n                                    _this.listingService.clearAllSelections("fulfillmentBatchItemTable2");\n                                    _this.listingService.clearAllSelections("fulfillmentBatchItemTable1");\n                                    _this.emitUpdateToClient();\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        };\n        /** During key times when data changes, we would like to alert the client to those changes. This allows us to do that. */\n        this.emitUpdateToClient = function () {\n            _this.orderFulfillmentStore.dispatch({\n                type: actions.UPDATE_BATCHDETAIL,\n                payload: { noop: angular.noop() }\n            });\n        };\n        /**\n         * Creates a batch. This should use api:main.post with a context of process and an entityName instead of doAction.\n         * The process object should have orderItemIdList or orderFulfillmentIDList defined and should have\n         * optionally an accountID, and or locationID (or locationIDList).\n         */\n        this.addBatch = function (processObject) {\n            if (processObject) {\n                processObject.data.entityName = "FulfillmentBatch";\n                processObject.data[\'fulfillmentBatch\'] = {};\n                processObject.data[\'fulfillmentBatch\'][\'fulfillmentBatchID\'] = "";\n                //If only 1, add that to the list.\n                if (processObject.data.locationID) {\n                    processObject.data.locationIDList = processObject.data.locationID;\n                }\n                return _this.$hibachi.saveEntity("fulfillmentBatch", \'\', processObject.data, "create");\n            }\n        };\n        /** Creates the orderDelivery - fulfilling the items quantity of items specified, capturing as needed. */\n        this.fulfillItems = function (state, ignoreCapture) {\n            if (state === void 0) { state = {}; }\n            if (ignoreCapture === void 0) { ignoreCapture = false; }\n            _this.state.loading = true;\n            if (state.useShippingIntegrationForTrackingNumber && (state.shippingIntegrationID == "" || state.shippingIntegrationID == null)) {\n                _this.state.loading = false;\n                alert(_this.$rootScope.rbKey(\'define.invalidShippingIntegration\'));\n                return;\n            }\n            var data = {};\n            //Add the order information\n            data.order = {};\n            data.order[\'orderID\'] = _this.state.currentRecordOrderDetail[\'order_orderID\'];\n            //Add the orderFulfillment.\n            data[\'orderDeliveryID\'] = ""; //this indicates the the orderDelivery is being created.\n            data[\'orderFulfillment\'] = {};\n            data[\'orderFulfillment\'][\'orderFulfillmentID\'] = _this.state.currentRecordOrderDetail[\'fulfillmentBatchItem\'][\'orderFulfillment_orderFulfillmentID\'];\n            data[\'trackingNumber\'] = state.trackingCode || "";\n            data[\'containers\'] = state.boxes || [];\n            if (data[\'trackingNumber\'] == undefined || !data[\'trackingNumber\'].length) {\n                data[\'useShippingIntegrationForTrackingNumber\'] = state.useShippingIntegrationForTrackingNumber || "false";\n            }\n            //console.log("Batch Information: ", this.state.currentRecordOrderDetail[\'fulfillmentBatchItem\']);\n            //Add the orderDelivertyItems as an array with the quantity set to the quantity.\n            //Make sure all of the deliveryitems have a quantity set by the user.\n            var idx = 1; //coldfusion indexes at 1\n            data[\'orderDeliveryItems\'] = [];\n            for (var orderDeliveryItem in state.orderItem) {\n                if (state.orderItem[orderDeliveryItem] != undefined) {\n                    if (state.orderItem[orderDeliveryItem] && state.orderItem[orderDeliveryItem] > 0) {\n                        data[\'orderDeliveryItems\'].push({ orderItem: { orderItemID: orderDeliveryItem }, quantity: state.orderItem[orderDeliveryItem] });\n                    }\n                }\n                idx++;\n            }\n            //Add the payment information\n            if (_this.state.currentRecordOrderDetail[\'order_paymentAmountDue\'] > 0 && !ignoreCapture) {\n                data.captureAuthorizedPaymentsFlag = true;\n                data.capturableAmount = _this.state.currentRecordOrderDetail[\'order_paymentAmountDue\'];\n            }\n            //If the user input a captuable amount, use that instead.\n            if (state.capturableAmount != undefined) {\n                data[\'capturableAmount\'] = state.capturableAmount;\n                data[\'captureAuthorizedPaymentsFlag\'] = false;\n                //hidden fields\n                data[\'order\'] = {};\n                data[\'order\'][\'orderID\'] = _this.state.currentRecordOrderDetail[\'order_orderID\'] || "";\n                //shippingMethod.shippingMethodID\n                data[\'shippingMethod\'] = {};\n                data[\'shippingMethod\'][\'shippingMethodID\'] = _this.state.currentRecordOrderDetail[\'shippingMethod_shippingMethodID\'];\n                //shippingAddress.addressID\n                data[\'shippingAddress\'] = {};\n                data[\'shippingAddress\'][\'addressID\'] = _this.state.currentRecordOrderDetail[\'shippingAddress_addressID\'];\n                if (data[\'useShippingIntegrationForTrackingNumber\']) {\n                    data[\'shippingIntegration\'] = { integrationID: state.shippingIntegrationID };\n                }\n            }\n            //Create the process object.\n            var processObject = _this.$hibachi.newOrderDelivery_Create();\n            processObject.data = data;\n            processObject.data.entityName = "OrderDelivery";\n            //Basic Information\n            processObject.data[\'location\'] = { \'locationID\': _this.$rootScope.slatwall.defaultLocation || "5cacb1d00b20aa339bc5585e13549dda" }; //sets a random location for now until batch issue with location is resolved.\n            //Shipping information.\n            processObject.data[\'containerLabel\'] = data.containerLabel || "";\n            processObject.data[\'orderFulfillment\'][\'shippingIntegration\'] = data.shippingIntegration || "";\n            processObject.data[\'shippingAddress\'] = data.shippingAddress || "";\n            processObject.data[\'containers\'] = data.containers;\n            processObject.data[\'useShippingIntegrationForTrackingNumber\'] = data.useShippingIntegrationForTrackingNumber || false;\n            if (state.orderDeliveryAttributes) {\n                for (var i = 0; i < state.orderDeliveryAttributes.length; i++) {\n                    var attribute = state.orderDeliveryAttributes[i];\n                    processObject.data[attribute.code] = state[attribute.code];\n                }\n            }\n            _this.$hibachi.saveEntity("OrderDelivery", \'\', processObject.data, "create").then(function (result) {\n                _this.state.loading = false;\n                if (result.orderDeliveryID != undefined && result.orderDeliveryID != \'\') {\n                    return result;\n                }\n                //Sets the next selected value.\n                var selectedRowIndex = _this.listingService.getSelectedBy("fulfillmentBatchItemTable1", "fulfillmentBatchItemID", _this.state.currentSelectedFulfillmentBatchItemID);\n                //clear first\n                _this.listingService.clearAllSelections("fulfillmentBatchItemTable1");\n                _this.listingService.clearAllSelections("fulfillmentBatchItemTable2");\n                //then select the next.\n                if (selectedRowIndex != -1) {\n                    //Set the next one.\n                    selectedRowIndex = selectedRowIndex + 1;\n                    _this.listingService\n                        .getListing("fulfillmentBatchItemTable1").selectionService\n                        .addSelection(_this.listingService.getListing("fulfillmentBatchItemTable1").tableID, _this.listingService.getListingPageRecords("fulfillmentBatchItemTable1")[selectedRowIndex][_this.listingService.getListingBaseEntityPrimaryIDPropertyName("fulfillmentBatchItemTable1")]);\n                    var args = {\n                        selection: _this.listingService.getListingPageRecords("fulfillmentBatchItemTable2")[selectedRowIndex][_this.listingService.getListingBaseEntityPrimaryIDPropertyName("fulfillmentBatchItemTable2")],\n                        selectionid: "fulfillmentBatchItemTable2",\n                        action: "check"\n                    };\n                    _this.swSelectionToggleSelectionfulfillmentBatchItemTable2(args);\n                }\n                //refresh.\n                //Scroll to the quantity div.\n                //scrollTo(orderItemQuantity_402828ee57e7a75b0157fc89b45b05c4)\n            }, function (error) {\n                _this.state.loading = false;\n            });\n        };\n        /** Saves a comment. */\n        this.saveComment = function (comment, newCommentText) {\n            //Editing\n            if (angular.isDefined(comment) && angular.isDefined(comment.comment) && angular.isDefined(comment.commentID)) {\n                comment.comment = newCommentText;\n                return _this.$hibachi.saveEntity("comment", comment.commentID, comment, "save");\n                //New\n            }\n            else {\n                //this is a new comment.\n                var commentObject = {\n                    comment: "",\n                    fulfillmentBatchItem: {\n                        fulfillmentBatchItemID: ""\n                    },\n                    fulfillmentBatchItemID: "",\n                    createdByAccountID: ""\n                };\n                commentObject.comment = newCommentText;\n                commentObject.fulfillmentBatchItem.fulfillmentBatchItemID = _this.state.currentSelectedFulfillmentBatchItemID;\n                commentObject.createdByAccountID = _this.$rootScope.slatwall.account.accountID || "";\n                _this.$hibachi.saveEntity("comment", \'\', commentObject, "save").then(function (result) {\n                    //now regrab all comments so they are redisplayed.\n                    return _this.createCommentsCollectionForFulfillmentBatchItem(_this.state.currentSelectedFulfillmentBatchItemID);\n                });\n            }\n        };\n        /** Deletes a comment. */\n        this.deleteComment = function (comment) {\n            if (comment != undefined) {\n                _this.$hibachi.saveEntity("comment", comment.commentID, comment, "delete").then(function (result) {\n                    return _this.createCommentsCollectionForFulfillmentBatchItem(_this.state.currentSelectedFulfillmentBatchItemID);\n                });\n            }\n        };\n        /** Deletes a fulfillment batch item. */\n        this.deleteFulfillmentBatchItem = function () {\n            if (_this.state.currentSelectedFulfillmentBatchItemID) {\n                var fulfillmentBatchItem = { "fulfillmentBatchItemID": _this.state.currentSelectedFulfillmentBatchItemID }; //get current fulfillmentBatchItem;\n                if (fulfillmentBatchItem.fulfillmentBatchItemID != undefined) {\n                    _this.$hibachi.saveEntity("fulfillmentBatchItem", fulfillmentBatchItem.fulfillmentBatchItemID, fulfillmentBatchItem, "delete").then(function (result) {\n                        window.location.reload(false);\n                    });\n                }\n            }\n        };\n        this.createShippingIntegrationOptions = function (currentRecord) {\n            _this.$hibachi.getPropertyDisplayOptions("OrderFulfillment", { property: "ShippingIntegration", entityID: currentRecord[\'orderFulfillment_orderFulfillmentID\'] }).then(function (response) {\n                _this.state.shippingIntegrationOptions = response.data;\n                if (currentRecord[\'orderFulfillment_shippingIntegration_integrationID\'].trim() != "" && currentRecord[\'orderFulfillment_shippingIntegration_integrationID\'] != null) {\n                    _this.state.shippingIntegrationID = currentRecord[\'orderFulfillment_shippingIntegration_integrationID\'];\n                }\n                else {\n                    _this.state.shippingIntegrationID = _this.state.shippingIntegrationOptions[0][\'VALUE\'];\n                }\n            });\n        };\n        /**\n         * Returns the comments for the selectedFulfillmentBatchItem\n         */\n        this.createCommentsCollectionForFulfillmentBatchItem = function (fulfillmentBatchItemID) {\n            _this.state.commentsCollection = _this.collectionConfigService.newCollectionConfig("Comment");\n            _this.state.commentsCollection.addDisplayProperty("createdDateTime");\n            _this.state.commentsCollection.addDisplayProperty("createdByAccountID");\n            _this.state.commentsCollection.addDisplayProperty("commentID");\n            _this.state.commentsCollection.addDisplayProperty("comment");\n            _this.state.commentsCollection.addFilter("fulfillmentBatchItem.fulfillmentBatchItemID", fulfillmentBatchItemID, "=");\n            _this.state.commentsCollection.getEntity().then(function (comments) {\n                if (comments && comments.pageRecords.length) {\n                    _this.state.commentsCollection = comments[\'pageRecords\'];\n                    for (var account in _this.state.commentsCollection) {\n                        if (angular.isDefined(_this.state.commentsCollection[account][\'createdByAccountID\'])) {\n                            //sets the account name to the account names object indexed by the account id.\n                            _this.getAccountNameByAccountID(_this.state.commentsCollection[account][\'createdByAccountID\']);\n                        }\n                    }\n                }\n                else {\n                    _this.state.commentsCollection = comments.pageRecords;\n                    _this.emitUpdateToClient();\n                }\n            });\n        };\n        /**\n         * Returns the comments for the selectedFulfillmentBatchItem\n         */\n        this.createCurrentRecordDetailCollection = function (currentRecord) {\n            //Get a new collection using the orderFulfillment.\n            _this.state.currentRecordOrderDetail = _this.collectionConfigService.newCollectionConfig("OrderFulfillment");\n            _this.state.currentRecordOrderDetail.addFilter("orderFulfillmentID", currentRecord[\'orderFulfillment_orderFulfillmentID\'], "=");\n            //For the order\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.orderOpenDateTime", "Open Date"); //date placed\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.orderCloseDateTime", "Close Date");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.orderNumber", "Order Number");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.orderID", "OrderID");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.calculatedTotal", "Total");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.paymentAmountDue", "Amount Due", { persistent: false });\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.paymentAmountAuthorizedTotal", "Authorized", { persistent: false });\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.paymentAmountCapturedTotal", "Captured", { persistent: false });\n            //For the account portion of the tab.\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.account.accountID", "Account Number");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.account.firstName", "First Name");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.account.lastName", "Last Name");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("order.account.company", "Company");\n            //For the shipping portion of the tab.\n            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingMethod.shippingMethodID");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingMethod.shippingMethodName");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingAddress.addressID");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingAddress.city");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingAddress.stateCode");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("orderFulfillmentStatusType.typeName");\n            _this.state.currentRecordOrderDetail.addDisplayProperty("shippingIntegration");\n            _this.state.currentRecordOrderDetail.getEntity().then(function (entityResults) {\n                if (entityResults[\'pageRecords\'].length) {\n                    _this.state.currentRecordOrderDetail = entityResults[\'pageRecords\'][0];\n                    //set the capturable amount to the amount that still needs to be paid on this order.\n                    if (_this.state.currentRecordOrderDetail) {\n                        _this.state.capturableAmount = _this.state.currentRecordOrderDetail[\'order_paymentAmountDue\'];\n                    }\n                    _this.state.currentRecordOrderDetail[\'fulfillmentBatchItem\'] = currentRecord;\n                    _this.state.currentRecordOrderDetail[\'comments\'] = _this.createCommentsCollectionForFulfillmentBatchItem(_this.state.currentSelectedFulfillmentBatchItemID);\n                    _this.emitUpdateToClient();\n                }\n            });\n        };\n        /**\n         * Returns account information given an accountID\n         */\n        this.getAccountNameByAccountID = function (accountID) {\n            var accountCollection = _this.collectionConfigService.newCollectionConfig("Account");\n            accountCollection.addFilter("accountID", accountID, "=");\n            accountCollection.getEntity().then(function (account) {\n                if (account[\'pageRecords\'].length) {\n                    _this.state.accountNames[accountID] = account[\'pageRecords\'][0][\'firstName\'] + \' \' + account[\'pageRecords\'][0][\'lastName\'];\n                    _this.emitUpdateToClient();\n                }\n            });\n        };\n        /**\n        * Setup the initial orderFulfillment Collection.\n        */\n        this.createLgOrderFulfillmentBatchItemCollection = function () {\n            _this.state.lgFulfillmentBatchItemCollection = _this.collectionConfigService.newCollectionConfig("FulfillmentBatchItem");\n            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.order.orderOpenDateTime", "Date");\n            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.shippingMethod.shippingMethodName");\n            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.shippingAddress.stateCode");\n            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.orderFulfillmentStatusType.typeName");\n            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("fulfillmentBatchItemID");\n            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.orderFulfillmentID");\n            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.shippingIntegration.integrationID");\n            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.lastMessage");\n            _this.state.lgFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.lastStatusCode");\n            _this.state.lgFulfillmentBatchItemCollection.addFilter("fulfillmentBatch.fulfillmentBatchID", _this.state.fulfillmentBatchId, "=");\n        };\n        /**\n        * Get a collection of orderFulfillment email templates.\n        */\n        this.getOrderFulfillmentEmailTemplates = function () {\n            var emailTemplates = _this.collectionConfigService.newCollectionConfig("EmailTemplate");\n            emailTemplates.addFilter("emailTemplateObject", "orderFulfillment", "=");\n            emailTemplates.getEntity().then(function (emails) {\n                if (emails[\'pageRecords\'].length) {\n                    _this.state.emailTemplates = emails[\'pageRecords\'];\n                    _this.emitUpdateToClient();\n                }\n            });\n        };\n        /**\n        * Setup the initial orderFulfillment Collection.\n        */\n        this.createSmOrderFulfillmentBatchItemCollection = function () {\n            _this.state.smFulfillmentBatchItemCollection = _this.collectionConfigService.newCollectionConfig("FulfillmentBatchItem");\n            _this.state.smFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.order.orderOpenDateTime");\n            _this.state.smFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.shippingMethod.shippingMethodName");\n            _this.state.smFulfillmentBatchItemCollection.addDisplayProperty("fulfillmentBatchItemID");\n            _this.state.smFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.orderFulfillmentID");\n            _this.state.smFulfillmentBatchItemCollection.addDisplayProperty("orderFulfillment.shippingIntegration.integrationID");\n            _this.state.smFulfillmentBatchItemCollection.addFilter("fulfillmentBatch.fulfillmentBatchID", _this.state.fulfillmentBatchId, "=");\n            return _this.state.smFulfillmentBatchItemCollection;\n        };\n        /**\n        * Setup the initial orderFulfillment Collection.\n        */\n        this.createLocationCollection = function () {\n            _this.state.locationCollection = _this.collectionConfigService.newCollectionConfig("FulfillmentBatchLocation");\n            _this.state.locationCollection.addDisplayProperty("locationID");\n            _this.state.locationCollection.addDisplayProperty("fulfillmentBatchID");\n            _this.state.locationCollection.addFilter("fulfillmentBatchID", _this.state.fulfillmentBatchId, "=");\n            return _this.state.locationCollection.getEntity().then(function (result) { return (result.pageRecords.length) ? result.pageRecords : []; });\n        };\n        /**\n         * Setup the initial print template -> orderFulfillment Collection.\n         */\n        this.getPrintList = function () {\n            _this.state.printCollection = _this.collectionConfigService.newCollectionConfig("PrintTemplate");\n            _this.state.printCollection.addDisplayProperty("printTemplateID");\n            _this.state.printCollection.addDisplayProperty("printTemplateName");\n            _this.state.printCollection.addDisplayProperty("printTemplateObject");\n            _this.state.printCollection.addFilter("printTemplateObject", \'OrderFulfillment\', "=");\n            _this.state.printCollection.getEntity().then(function (result) {\n                _this.state.printCollection = result.pageRecords || [];\n            });\n        };\n        /**\n         * Setup the initial email template -> orderFulfillment Collection.\n         */\n        this.getEmailList = function () {\n            _this.state.emailCollection = _this.collectionConfigService.newCollectionConfig("EmailTemplate");\n            _this.state.emailCollection.addDisplayProperty("emailTemplateID");\n            _this.state.emailCollection.addDisplayProperty("emailTemplateName");\n            _this.state.emailCollection.addDisplayProperty("emailTemplateObject");\n            _this.state.emailCollection.addFilter("emailTemplateObject", \'OrderFulfillment\', "=");\n            _this.state.emailCollection.getEntity().then(function (result) {\n                _this.state.emailCollection = result.pageRecords || [];\n            });\n        };\n        /**\n        * Add a box to the shipment\n        */\n        this.addNewBox = function (state) {\n            _this.state = state;\n            _this.state.boxes.push({});\n        };\n        /**\n        * Remove a box from the shipment\n        */\n        this.removeBox = function (index) {\n            _this.state.boxes.splice(index, 1);\n        };\n        /**\n         * Returns  orderFulfillmentItem Collection given an orderFulfillmentID.\n         */\n        this.createOrderFulfillmentItemCollection = function (orderFulfillmentID) {\n            var collection = _this.collectionConfigService.newCollectionConfig("OrderItem");\n            collection.addDisplayProperty("orderFulfillment.orderFulfillmentID");\n            collection.addDisplayProperty("sku.skuCode");\n            collection.addDisplayProperty("sku.product.productName");\n            collection.addDisplayProperty("sku.skuName");\n            collection.addDisplayProperty("sku.imagePath", "Path", { persistent: false });\n            collection.addDisplayProperty("sku.imageFileName", "File Name", { persistent: false });\n            collection.addDisplayProperty("sku.calculatedQOH");\n            collection.addDisplayProperty("quantity");\n            collection.addDisplayProperty("quantityDelivered");\n            collection.addDisplayProperty("orderItemID");\n            collection.addFilter("orderFulfillment.orderFulfillmentID", orderFulfillmentID, "=");\n            collection.setPageShow(100);\n            collection.getEntity().then(function (orderItems) {\n                if (orderItems && orderItems.pageRecords && orderItems.pageRecords.length) {\n                    _this.state.orderFulfillmentItemsCollection = orderItems[\'pageRecords\'];\n                }\n                else if (orderItems && orderItems.records && orderItems.records.length) {\n                    _this.state.orderFulfillmentItemsCollection = orderItems[\'records\'];\n                }\n                else {\n                    _this.state.orderFulfillmentItemsCollection = [];\n                }\n                _this.emitUpdateToClient();\n            });\n        };\n        /**\n        * Returns  orderFulfillmentItem Collection given an orderFulfillmentID.\n        */\n        this.createOrderDeliveryAttributeCollection = function () {\n            var orderDeliveryAttributes = [];\n            //Get all the attributes from those sets where the set object is orderDelivery.\n            var attributeCollection = _this.collectionConfigService.newCollectionConfig("Attribute");\n            attributeCollection.addFilter("attributeSet.attributeSetObject", "OrderDelivery", "=");\n            attributeCollection.getEntity().then(function (attributes) {\n                if (attributes && attributes.pageRecords) {\n                    attributes.pageRecords.forEach(function (attribute) {\n                        var newAttribute = {\n                            name: attribute.attributeName,\n                            code: attribute.attributeCode,\n                            description: attribute.attributeDescription,\n                            hint: attribute.attributeHint,\n                            type: attribute.attributeInputType,\n                            default: attribute.defaultValue,\n                            isRequired: attribute.requiredFlag,\n                            isActive: attributes.activeFlag\n                        };\n                        orderDeliveryAttributes.push(newAttribute);\n                    });\n                }\n            });\n            //For each attribute set, get all the attributes.\n            _this.state.orderDeliveryAttributes = orderDeliveryAttributes;\n            _this.emitUpdateToClient(); //alert the client that we have new data to give.\n        };\n        //To create a store, we instantiate it using the object that holds the state variables,\n        //and the reducer. We can also add a middleware to the end if you need.\n        this.orderFulfillmentStore = new FluxStore.IStore(this.state, this.orderFulfillmentStateReducer);\n        this.observerService.attach(this.swSelectionToggleSelectionfulfillmentBatchItemTable2, "swSelectionToggleSelectionfulfillmentBatchItemTable2", "swSelectionToggleSelectionfulfillmentBatchItemTableListener");\n    }\n    return OrderFulfillmentService;\n}());\nexports.OrderFulfillmentService = OrderFulfillmentService;\n\n\n//# sourceURL=webpack:///./orderfulfillment/services/orderfulfillmentservice.ts?')},"./orderitem/components/swchildorderitem.ts":
/*!**************************************************!*\
  !*** ./orderitem/components/swchildorderitem.ts ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWChildOrderItem = /** @class */ (function () {\n    function SWChildOrderItem($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) {\n        return {\n            restrict: "A",\n            scope: {\n                orderItem: "=",\n                orderId: "@",\n                childOrderItems: "=",\n                attributes: "="\n            },\n            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "childorderitem.html",\n            link: function (scope, element, attr) {\n                var columnsConfig = [\n                    {\n                        "isDeletable": false,\n                        "isExportable": true,\n                        "propertyIdentifier": "_orderitem.orderItemID",\n                        "ormtype": "id",\n                        "isVisible": true,\n                        "isSearchable": true,\n                        "title": "Order Item ID"\n                    },\n                    {\n                        "title": "Order Item Type",\n                        "propertyIdentifier": "_orderitem.orderItemType",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Order Item Price",\n                        "propertyIdentifier": "_orderitem.price",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Sku Name",\n                        "propertyIdentifier": "_orderitem.sku.skuName",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Sku Price",\n                        "propertyIdentifier": "_orderitem.skuPrice",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Sku ID",\n                        "propertyIdentifier": "_orderitem.sku.skuID",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "SKU Code",\n                        "propertyIdentifier": "_orderitem.sku.skuCode",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Product ID",\n                        "propertyIdentifier": "_orderitem.sku.product.productID",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Product Name",\n                        "propertyIdentifier": "_orderitem.sku.product.productName",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Product Description",\n                        "propertyIdentifier": "_orderitem.sku.product.productDescription",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Image File Name",\n                        "propertyIdentifier": "_orderitem.sku.imageFile",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.sku.skuPrice",\n                        "ormtype": "string"\n                    },\n                    {\n                        "title": "Product Type",\n                        "propertyIdentifier": "_orderitem.sku.product.productType",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.sku.baseProductType",\n                        "persistent": false\n                    },\n                    {\n                        "title": "Qty.",\n                        "propertyIdentifier": "_orderitem.quantity",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Fulfillment Method Name",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Fulfillment ID",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.orderFulfillmentID",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Fulfillment Method Type",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Street Address",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.streetAddress",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Street Address 2",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.street2Address",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Postal Code",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.postalCode",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "City",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.city",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "State",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.stateCode",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Country",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.countryCode",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Total",\n                        "propertyIdentifier": "_orderitem.itemTotal",\n                        "persistent": false\n                    },\n                    {\n                        "title": "Discount Amount",\n                        "propertyIdentifier": "_orderitem.discountAmount",\n                        "persistent": false\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.extendedPrice",\n                        "persistent": false\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.productBundleGroup.amount"\n                    },\n                    {\n                        "title": "Product Bundle Group",\n                        "propertyIdentifier": "_orderitem.productBundleGroup.productBundleGroupID",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.productBundleGroup.amountType"\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.productBundleGroupPrice",\n                        "persistent": false\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.productBundlePrice",\n                        "persistent": false\n                    }\n                ];\n                //add attributes to the column config\n                angular.forEach(scope.attributes, function (attribute) {\n                    var attributeColumn = {\n                        propertyIdentifier: "_orderitem." + attribute.attributeCode,\n                        attributeID: attribute.attributeID,\n                        attributeSetObject: "orderItem"\n                    };\n                    columnsConfig.push(attributeColumn);\n                });\n                var filterGroupsConfig = [\n                    {\n                        "filterGroup": [\n                            {\n                                "propertyIdentifier": "_orderitem.parentOrderItem.orderItemID",\n                                "comparisonOperator": "=",\n                                "value": scope.orderItem.$$getID(),\n                            }\n                        ]\n                    }\n                ];\n                var options = {\n                    columnsConfig: angular.toJson(columnsConfig),\n                    filterGroupsConfig: angular.toJson(filterGroupsConfig),\n                    allRecords: true\n                };\n                //hide the children on click\n                scope.hideChildren = function (orderItem) {\n                    //Set all child order items to clicked = false.\n                    angular.forEach(scope.childOrderItems, function (child) {\n                        console.dir(child);\n                        child.hide = !child.hide;\n                        scope.orderItem.clicked = !scope.orderItem.clicked;\n                    });\n                };\n                /**\n                * Returns a list of child order items.\n                */\n                scope.getChildOrderItems = function (orderItem) {\n                    orderItem.clicked = true;\n                    if (!scope.orderItem.childItemsRetrieved) {\n                        scope.orderItem.childItemsRetrieved = true;\n                        var orderItemsPromise = $hibachi.getEntity(\'orderItem\', options);\n                        orderItemsPromise.then(function (value) {\n                            var collectionConfig = {};\n                            collectionConfig.columns = columnsConfig;\n                            collectionConfig.baseEntityName = \'SlatwallOrderItem\';\n                            collectionConfig.baseEntityAlias = \'_orderitem\';\n                            var childOrderItems = $hibachi.populateCollection(value.records, collectionConfig);\n                            angular.forEach(childOrderItems, function (childOrderItem) {\n                                childOrderItem.hide = false;\n                                childOrderItem.depth = orderItem.depth + 1;\n                                childOrderItem.data.parentOrderItem = orderItem;\n                                childOrderItem.data.parentOrderItemQuantity = scope.orderItem.data.quantity / scope.orderItem.data.parentOrderItemQuantity;\n                                scope.childOrderItems.splice(scope.childOrderItems.indexOf(orderItem) + 1, 0, childOrderItem);\n                                childOrderItem.data.productBundleGroupPercentage = 1;\n                                if (childOrderItem.data.productBundleGroup.data.amountType === \'skuPricePercentageIncrease\') {\n                                    childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;\n                                }\n                                else if (childOrderItem.data.productBundleGroup.data.amountType === \'skuPricePercentageDecrease\') {\n                                    childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;\n                                }\n                            });\n                        });\n                    }\n                };\n            }\n        };\n    }\n    SWChildOrderItem.Factory = function () {\n        var directive = function ($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder) { return new SWChildOrderItem($log, $http, $compile, $templateCache, $hibachi, orderItemPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$log\',\n            \'$http\',\n            \'$compile\',\n            \'$templateCache\',\n            \'$hibachi\',\n            \'orderItemPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWChildOrderItem;\n}());\nexports.SWChildOrderItem = SWChildOrderItem;\n\n\n//# sourceURL=webpack:///./orderitem/components/swchildorderitem.ts?')},"./orderitem/components/swoishippinglabelstamp.ts":
/*!********************************************************!*\
  !*** ./orderitem/components/swoishippinglabelstamp.ts ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\n/**\n * Displays a shipping label in the order items row.\n * @module slatwalladmin\n * @class swOrderItemsShippingLabelStamp\n */\nvar SWOiShippingLabelStamp = /** @class */ (function () {\n    function SWOiShippingLabelStamp($log, orderItemPartialsPath, slatwallPathBuilder) {\n        return {\n            restrict: 'E',\n            scope: {\n                orderFulfillment: \"=\"\n            },\n            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + \"orderfulfillment-shippinglabel.html\",\n            link: function (scope, element, attrs) {\n                //Get the template.\n                $log.debug(\"\\n\\n<---ORDER FULFILLMENT STAMP---\x3e\\n\\n\");\n                $log.debug(scope.orderFulfillment);\n                $log.debug(scope.orderFulfillment.data.fulfillmentMethodType);\n            }\n        };\n    }\n    SWOiShippingLabelStamp.Factory = function () {\n        var directive = function ($log, orderItemPartialsPath, slatwallPathBuilder) { return new SWOiShippingLabelStamp($log, orderItemPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            '$log',\n            'orderItemPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWOiShippingLabelStamp;\n}());\nexports.SWOiShippingLabelStamp = SWOiShippingLabelStamp;\n\n\n//# sourceURL=webpack:///./orderitem/components/swoishippinglabelstamp.ts?")},"./orderitem/components/sworderitem.ts":
/*!*********************************************!*\
  !*** ./orderitem/components/sworderitem.ts ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWOrderItem = /** @class */ (function () {\n    //@ngInject\n    function SWOrderItem($log, $compile, $http, $templateCache, $hibachi, $timeout, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) {\n        return {\n            restrict: "A",\n            scope: {\n                orderItem: "=",\n                orderId: "@",\n                attributes: "=",\n                paginator: "=?"\n            },\n            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem.html",\n            link: function (scope, element, attr) {\n                $log.debug(\'order item init\');\n                $log.debug(scope.orderItem);\n                scope.orderItem.clicked = false; //Never been clicked\n                scope.orderItem.details = [];\n                scope.orderItem.events = [];\n                scope.orderItem.queuePosition;\n                scope.orderItem.onWaitlist = false;\n                scope.orderItem.isPending = false;\n                scope.orderItem.isRegistered = false;\n                var foundPosition = false;\n                if (scope.orderItem.data.sku.data.product.data.productType.data.systemCode === \'event\') {\n                    var eventRegistrationPromise = scope.orderItem.$$getEventRegistrations();\n                    eventRegistrationPromise.then(function () {\n                        angular.forEach(scope.orderItem.data.eventRegistrations, function (eventRegistration) {\n                            $log.debug(eventRegistration);\n                            var eventRegistrationPromise = eventRegistration.$$getEventRegistrationStatusType();\n                            eventRegistrationPromise.then(function (rec) {\n                                $log.debug(rec);\n                                angular.forEach(rec.records, function (record) {\n                                    $log.debug("Records");\n                                    $log.debug(record.eventRegistrationStatusType);\n                                    angular.forEach(record.eventRegistrationStatusType, function (statusType) {\n                                        if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstWaitlisted") {\n                                            scope.orderItem.onWaitlist = true;\n                                            $log.debug("Found + " + statusType.systemCode);\n                                            //Because the customer is waitlisted, we need to get the number of customers ahead of them in the queue.\n                                            var position = getPositionInQueueFor(scope.orderItem);\n                                            scope.orderItem.queuePosition = position;\n                                        }\n                                        else if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstRegistered") {\n                                            scope.orderItem.isRegistered = true;\n                                            $log.debug("Found + " + statusType.systemCode);\n                                        }\n                                        else if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === "erstPendingApproval") {\n                                            scope.orderItem.isPending = true;\n                                            $log.debug("Found + " + statusType.systemCode);\n                                        }\n                                        else {\n                                            $log.error("Couldn\'t resolve a status type for: " + statusType.systemCode);\n                                        }\n                                    });\n                                });\n                            });\n                        });\n                    });\n                }\n                /**\n                * Returns the current position in the queue for an orderItem that\'s on the waiting list.\n                */\n                var getPositionInQueueFor = function (orderItem) {\n                    $log.debug("Retrieving position in Queue: ");\n                    var queueConfig = [\n                        {\n                            "propertyIdentifier": "_eventregistration.waitlistQueuePositionStruct",\n                            "isVisible": true,\n                            "persistent": false,\n                            "title": "Event Registrations"\n                        }\n                    ];\n                    var queueGroupsConfig = [\n                        {\n                            "filterGroup": [\n                                {\n                                    "propertyIdentifier": "_eventregistration.orderItem.orderItemID",\n                                    "comparisonOperator": "=",\n                                    "value": orderItem.$$getID(),\n                                }\n                            ]\n                        }\n                    ];\n                    var queueOptions = {\n                        columnsConfig: angular.toJson(queueConfig),\n                        filterGroupsConfig: angular.toJson(queueGroupsConfig),\n                        allRecords: true\n                    };\n                    var positionPromise = $hibachi.getEntity(\'EventRegistration\', queueOptions);\n                    $log.debug(positionPromise);\n                    positionPromise.then(function (value) {\n                        angular.forEach(value.records, function (position) {\n                            $log.debug("Position: " + position.waitlistQueuePositionStruct);\n                            if (position.waitlistQueuePositionStruct !== -1) {\n                                scope.orderItem.queuePosition = position.waitlistQueuePositionStruct; //Use the value.\n                                return position.waitlistQueuePositionStruct;\n                            }\n                        });\n                    });\n                };\n                //define how we get child order items\n                var columnsConfig = [\n                    {\n                        "isDeletable": false,\n                        "isExportable": true,\n                        "propertyIdentifier": "_orderitem.orderItemID",\n                        "ormtype": "id",\n                        "isVisible": true,\n                        "isSearchable": true,\n                        "title": "Order Item ID"\n                    },\n                    {\n                        "title": "Order Item Type",\n                        "propertyIdentifier": "_orderitem.orderItemType",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Order Item Price",\n                        "propertyIdentifier": "_orderitem.price",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Sku Name",\n                        "propertyIdentifier": "_orderitem.sku.skuName",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Sku Price",\n                        "propertyIdentifier": "_orderitem.skuPrice",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Sku ID",\n                        "propertyIdentifier": "_orderitem.sku.skuID",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "SKU Code",\n                        "propertyIdentifier": "_orderitem.sku.skuCode",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Product Bundle Group",\n                        "propertyIdentifier": "_orderitem.productBundleGroup.productBundleGroupID",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Product ID",\n                        "propertyIdentifier": "_orderitem.sku.product.productID",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Product Name",\n                        "propertyIdentifier": "_orderitem.sku.product.productName",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Product Type",\n                        "propertyIdentifier": "_orderitem.sku.product.productType",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Product Description",\n                        "propertyIdentifier": "_orderitem.sku.product.productDescription",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.sku.baseProductType",\n                        "persistent": false\n                    },\n                    {\n                        "title": "Event Start Date",\n                        "propertyIdentifier": "_orderitem.sku.eventStartDateTime",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Product Description",\n                        "propertyIdentifier": "_orderitem.sku.options",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.skuPrice",\n                        "ormtype": "string"\n                    },\n                    {\n                        "title": "Image File Name",\n                        "propertyIdentifier": "_orderitem.sku.imageFile",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Qty.",\n                        "propertyIdentifier": "_orderitem.quantity",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Order Return ID",\n                        "propertyIdentifier": "_orderitem.orderReturn.orderReturnID",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Return Street Address",\n                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.streetAddress",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Return Street Address 2",\n                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.street2Address",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Return City",\n                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.city",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Return State",\n                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.stateCode",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Return Postal Code",\n                        "propertyIdentifier": "_orderitem.orderReturn.returnLocation.primaryAddress.address.postalCode",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Fulfillment Method Name",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Fulfillment ID",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.orderFulfillmentID",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Fulfillment Method Type",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Street Address",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.streetAddress",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Street Address 2",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.street2Address",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Postal Code",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.postalCode",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "City",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.city",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "State",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.stateCode",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Country",\n                        "propertyIdentifier": "_orderitem.orderFulfillment.shippingAddress.countryCode",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.orderFulfillment.pickupLocation.primaryAddress.address",\n                        "isVisible": true,\n                        "isDeletable": true\n                    },\n                    {\n                        "title": "Total",\n                        "propertyIdentifier": "_orderitem.itemTotal",\n                        "persistent": false\n                    },\n                    {\n                        "title": "Discount Amount",\n                        "propertyIdentifier": "_orderitem.discountAmount",\n                        "persistent": false\n                    },\n                    {\n                        "title": "Tax Amount",\n                        "propertyIdentifier": "_orderitem.taxAmount",\n                        "persistent": false\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.extendedPrice",\n                        "persistent": false\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.productBundleGroup.amount",\n                        "ormtype": "big_decimal"\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.productBundleGroup.amountType",\n                        "ormtype": "string"\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.productBundleGroupPrice",\n                        "persistent": false\n                    },\n                    {\n                        "propertyIdentifier": "_orderitem.productBundlePrice",\n                        "persistent": false\n                    }\n                ];\n                //Add attributes to the column configuration\n                angular.forEach(scope.attributes, function (attribute) {\n                    var attributeColumn = {\n                        propertyIdentifier: "_orderitem." + attribute.attributeCode,\n                        attributeID: attribute.attributeID,\n                        attributeSetObject: "orderItem"\n                    };\n                    columnsConfig.push(attributeColumn);\n                });\n                var filterGroupsConfig = [\n                    {\n                        "filterGroup": [\n                            {\n                                "propertyIdentifier": "_orderitem.parentOrderItem.orderItemID",\n                                "comparisonOperator": "=",\n                                "value": scope.orderItem.$$getID(),\n                            }\n                        ]\n                    }\n                ];\n                var options = {\n                    columnsConfig: angular.toJson(columnsConfig),\n                    filterGroupsConfig: angular.toJson(filterGroupsConfig),\n                    allRecords: true\n                };\n                //Create a list of order items.\n                scope.childOrderItems = [];\n                scope.orderItem.depth = 1;\n                /**\n                * Hide orderItem children on clicking the details link.\n                */\n                scope.hideChildren = function (orderItem) {\n                    //Set all child order items to clicked = false.\n                    angular.forEach(scope.childOrderItems, function (child) {\n                        $log.debug("hideing");\n                        child.hide = !child.hide;\n                        scope.orderItem.clicked = !scope.orderItem.clicked;\n                    });\n                };\n                //Delete orderItem\n                scope.deleteEntity = function () {\n                    $log.debug("Deleting");\n                    $log.debug(scope.orderItem);\n                    var deletePromise = scope.orderItem.$$delete();\n                    deletePromise.then(function (result) {\n                        if (!result.errors || !Object.keys(result.errors).length) {\n                            delete scope.orderItem;\n                            window.location.reload();\n                        }\n                        scope.paginator.getCollection();\n                    });\n                };\n                /**\n                * Gets a list of child order items if they exist.\n                */\n                scope.getChildOrderItems = function () {\n                    if (!scope.orderItem.childItemsRetrieved) {\n                        scope.orderItem.clicked = !scope.orderItem.clicked;\n                        scope.orderItem.hide = !scope.orderItem.hide;\n                        scope.orderItem.childItemsRetrieved = true;\n                        if (scope.orderItem.sku.bundleFlag === \'Yes \' || scope.orderItem.sku.bundleFlag === 1) {\n                            var skuBundleCollection = collectionConfigService.newCollectionConfig(\'SkuBundle\');\n                            skuBundleCollection.setDisplayProperties(\'bundledQuantity, bundledSku.skuCode, bundledSku.price, bundledSku.product.productName\');\n                            skuBundleCollection.addFilter(\'sku.skuID\', scope.orderItem.sku.skuID);\n                            var skuBundleCollectionPromise = skuBundleCollection.getEntity().then(function (data) {\n                                if (data.pageRecords.length) {\n                                    var childOrderItems = $hibachi.populateCollection(data.pageRecords, skuBundleCollection);\n                                    angular.forEach(childOrderItems, function (childOrderItem) {\n                                        childOrderItem.depth = scope.orderItem.depth + 1;\n                                        scope.childOrderItems.push(childOrderItem);\n                                        childOrderItem.data.productBundleGroupPercentage = 1;\n                                        if (childOrderItem.data.productBundleGroup.data.amountType === \'skuPricePercentageIncrease\') {\n                                            childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;\n                                        }\n                                        else if (childOrderItem.data.productBundleGroup.data.amountType === \'skuPricePercentageDecrease\') {\n                                            childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        else {\n                            var orderItemsPromise = $hibachi.getEntity(\'orderItem\', options);\n                            orderItemsPromise.then(function (value) {\n                                var collectionConfig = {};\n                                collectionConfig.columns = columnsConfig;\n                                collectionConfig.baseEntityName = \'SlatwallOrderItem\';\n                                collectionConfig.baseEntityAlias = \'_orderitem\';\n                                var childOrderItems = $hibachi.populateCollection(value.records, collectionConfig);\n                                angular.forEach(childOrderItems, function (childOrderItem) {\n                                    childOrderItem.depth = scope.orderItem.depth + 1;\n                                    scope.childOrderItems.push(childOrderItem);\n                                    childOrderItem.data.productBundleGroupPercentage = 1;\n                                    if (childOrderItem.data.productBundleGroup.data.amountType === \'skuPricePercentageIncrease\') {\n                                        childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;\n                                    }\n                                    else if (childOrderItem.data.productBundleGroup.data.amountType === \'skuPricePercentageDecrease\') {\n                                        childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;\n                                    }\n                                });\n                            });\n                        }\n                    }\n                    else {\n                        //We already have the items so we just need to show them.\n                        angular.forEach(scope.childOrderItems, function (child) {\n                            child.hide = !child.hide;\n                            scope.orderItem.clicked = !scope.orderItem.clicked;\n                        });\n                    }\n                };\n            }\n        };\n    }\n    SWOrderItem.Factory = function () {\n        var directive = function ($log, $compile, $http, $templateCache, $hibachi, $timeout, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) { return new SWOrderItem($log, $compile, $http, $templateCache, $hibachi, $timeout, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$log\',\n            \'$compile\',\n            \'$http\',\n            \'$templateCache\',\n            \'$hibachi\',\n            \'$timeout\',\n            \'collectionConfigService\',\n            \'orderItemPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWOrderItem;\n}());\nexports.SWOrderItem = SWOrderItem;\n\n\n//# sourceURL=webpack:///./orderitem/components/sworderitem.ts?')},"./orderitem/components/sworderitemdetailstamp.ts":
/*!********************************************************!*\
  !*** ./orderitem/components/sworderitemdetailstamp.ts ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\n/**\n * Displays a shipping label in the order items row.\n * @module slatwalladmin\n * @class swOrderItemsShippingLabelStamp\n */\nvar SWOrderItemDetailStamp = /** @class */ (function () {\n    function SWOrderItemDetailStamp($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) {\n        return {\n            restrict: \'A\',\n            scope: {\n                systemCode: "=",\n                orderItemId: "=",\n                skuId: "=",\n                orderItem: "="\n            },\n            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + "orderitem-detaillabel.html",\n            link: function (scope, element, attrs) {\n                scope.details = [];\n                scope.orderItem.detailsName = [];\n                var results;\n                $log.debug("Detail stamp");\n                $log.debug(scope.systemCode);\n                $log.debug(scope.orderItemId);\n                $log.debug(scope.skuId);\n                $log.debug(scope.orderItem);\n                /**\n                 * For each type of orderItem, get the appropriate detail information.\n                 *\n                 * Merchandise: Option Group Name and Option\n                 * Event: Event Date, Event Location\n                 * Subscription: Subscription Term, Subscription Benefits\n                 */\n                var getMerchandiseDetails = function (orderItem) {\n                    //Get option and option groups\n                    for (var i = 0; i <= orderItem.data.sku.data.options.length - 1; i++) {\n                        var optionGroupCollectionConfig = collectionConfigService.newCollectionConfig("Option");\n                        optionGroupCollectionConfig.addDisplayProperty("optionID,optionName, optionGroup.optionGroupName");\n                        optionGroupCollectionConfig.addFilter("optionID", orderItem.data.sku.data.options[i].optionID, "=");\n                        optionGroupCollectionConfig.getEntity().then(function (results) {\n                            if (angular.isDefined(results.pageRecords[0])) {\n                                orderItem.detailsName.push(results.pageRecords[0].optionGroup_optionGroupName);\n                                orderItem.details.push(results.pageRecords[0].optionName);\n                            }\n                        }, function (reason) {\n                            throw ("SWOrderItemDetailStamp had trouble retrieving the option group for option");\n                        });\n                    }\n                };\n                var getSubscriptionDetails = function (orderItem) {\n                    //get Subscription Term and Subscription Benefits\n                    var name = orderItem.data.sku.data.subscriptionTerm.data.subscriptionTermName || "";\n                    orderItem.detailsName.push("Subscription Term:");\n                    orderItem.details.push(name);\n                    //Maybe multiple benefits so show them all.\n                    for (var i = 0; i <= orderItem.data.sku.data.subscriptionBenefits.length - 1; i++) {\n                        var benefitName = orderItem.data.sku.data.subscriptionBenefits[i].subscriptionBenefitName || "";\n                        orderItem.detailsName.push("Subscription Benefit:");\n                        orderItem.details.push(benefitName);\n                    }\n                };\n                var getEventDetails = function (orderItem) {\n                    //get event date, and event location\n                    orderItem.detailsName.push("Event Date: ");\n                    orderItem.details.push(orderItem.data.sku.data.eventStartDateTime);\n                    //Need to iterate this.\n                    for (var i = 0; i <= orderItem.data.sku.data.locations.length - 1; i++) {\n                        orderItem.detailsName.push("Location: ");\n                        orderItem.details.push(orderItem.data.sku.data.locations[i].locationName);\n                    }\n                };\n                if (angular.isUndefined(scope.orderItem.details)) {\n                    scope.orderItem.details = [];\n                }\n                if (angular.isDefined(scope.orderItem.details)) {\n                    switch (scope.systemCode) {\n                        case "merchandise":\n                            getMerchandiseDetails(scope.orderItem);\n                            break;\n                        case "subscription":\n                            getSubscriptionDetails(scope.orderItem);\n                            break;\n                        case "event":\n                            getEventDetails(scope.orderItem);\n                            break;\n                    }\n                }\n            }\n        };\n    }\n    SWOrderItemDetailStamp.Factory = function () {\n        var directive = function ($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder) { return new SWOrderItemDetailStamp($log, $hibachi, collectionConfigService, orderItemPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$log\',\n            \'$hibachi\',\n            \'collectionConfigService\',\n            \'orderItemPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWOrderItemDetailStamp;\n}());\nexports.SWOrderItemDetailStamp = SWOrderItemDetailStamp;\n\n\n//# sourceURL=webpack:///./orderitem/components/sworderitemdetailstamp.ts?')},"./orderitem/components/sworderitems.ts":
/*!**********************************************!*\
  !*** ./orderitem/components/sworderitems.ts ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWOrderItems = /** @class */ (function () {\n    //@ngInject\n    function SWOrderItems($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService, observerService) {\n        return {\n            restrict: 'E',\n            scope: {\n                orderId: \"@\"\n            },\n            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + \"orderitems.html\",\n            link: function (scope, element, attrs) {\n                var options = {};\n                scope.keywords = \"\";\n                scope.loadingCollection = false;\n                scope.$watch('recordsCount', function (newValue, oldValue, scope) {\n                    //Do anything with $scope.letters\n                    if (oldValue != undefined && newValue != undefined && newValue.length > oldValue.length) {\n                        //refresh so order totals refresh.\n                        window.location.reload();\n                    }\n                });\n                var searchPromise;\n                scope.searchCollection = function () {\n                    if (searchPromise) {\n                        $timeout.cancel(searchPromise);\n                    }\n                    searchPromise = $timeout(function () {\n                        $log.debug('search with keywords');\n                        $log.debug(scope.keywords);\n                        //Set current page here so that the pagination does not break when getting collection\n                        scope.paginator.setCurrentPage(1);\n                        scope.loadingCollection = true;\n                        scope.getCollection();\n                    }, 500);\n                };\n                $log.debug('Init Order Item');\n                $log.debug(scope.orderId);\n                //Setup the data needed for each order item object.\n                scope.getCollection = function () {\n                    if (scope.pageShow === 'Auto') {\n                        scope.pageShow = 50;\n                    }\n                    var orderItemCollection = collectionConfigService.newCollectionConfig('OrderItem');\n                    orderItemCollection.setDisplayProperties(\"orderItemID,currencyCode,sku.skuName\\n                         ,price,skuPrice,sku.skuID,sku.skuCode,productBundleGroup.productBundleGroupID\\n\\t\\t\\t\\t\\t\\t ,sku.product.productID\\n \\t\\t\\t\\t\\t\\t ,sku.product.productName,sku.product.productDescription\\n\\t\\t\\t\\t\\t\\t ,sku.eventStartDateTime\\n \\t\\t\\t\\t\\t\\t ,quantity\\n\\t\\t\\t\\t\\t\\t ,orderFulfillment.fulfillmentMethod.fulfillmentMethodName\\n\\t\\t\\t\\t\\t\\t ,orderFulfillment.orderFulfillmentID\\n \\t\\t\\t\\t\\t\\t ,orderFulfillment.shippingAddress.streetAddress\\n     \\t\\t\\t\\t\\t ,orderFulfillment.shippingAddress.street2Address\\n\\t\\t\\t\\t\\t\\t ,orderFulfillment.shippingAddress.postalCode\\n\\t\\t\\t\\t\\t\\t ,orderFulfillment.shippingAddress.city,orderFulfillment.shippingAddress.stateCode\\n \\t\\t\\t\\t\\t\\t ,orderFulfillment.shippingAddress.countryCode\\n                         ,orderItemType.systemCode\\n\\t\\t\\t\\t\\t\\t ,orderFulfillment.fulfillmentMethod.fulfillmentMethodType\\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.streetAddress\\n\\t\\t\\t\\t\\t\\t ,orderFulfillment.pickupLocation.primaryAddress.address.street2Address\\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.city\\n\\t\\t\\t\\t\\t\\t ,orderFulfillment.pickupLocation.primaryAddress.address.stateCode\\n                         ,orderFulfillment.pickupLocation.primaryAddress.address.postalCode\\n\\t\\t\\t\\t\\t\\t ,orderReturn.orderReturnID\\n \\t\\t\\t\\t\\t\\t ,orderReturn.returnLocation.primaryAddress.address.streetAddress\\n\\t\\t\\t\\t\\t\\t ,orderReturn.returnLocation.primaryAddress.address.street2Address\\n                         ,orderReturn.returnLocation.primaryAddress.address.city\\n\\t\\t\\t\\t\\t\\t ,orderReturn.returnLocation.primaryAddress.address.stateCode\\n                         ,orderReturn.returnLocation.primaryAddress.address.postalCode\\n\\t\\t\\t\\t\\t\\t ,itemTotal,discountAmount,taxAmount,extendedPrice,productBundlePrice,sku.baseProductType\\n                         ,sku.subscriptionBenefits\\n\\t\\t\\t\\t\\t\\t ,sku.product.productType.systemCode\\n\\t\\t\\t\\t\\t\\t ,sku.bundleFlag \\n\\t\\t\\t\\t\\t\\t ,sku.options\\n\\t\\t\\t\\t\\t\\t ,sku.locations\\n \\t\\t\\t\\t\\t\\t ,sku.subscriptionTerm.subscriptionTermName\\n \\t\\t\\t\\t\\t\\t ,sku.imageFile\\n                         ,stock.location.locationName\")\n                        .addFilter('order.orderID', scope.orderId)\n                        .addFilter('parentOrderItem', 'null', 'IS')\n                        .setKeywords(scope.keywords)\n                        .setPageShow(scope.paginator.getPageShow())\n                        .setCurrentPage(scope.paginator.getCurrentPage());\n                    //add attributes to the column config\n                    angular.forEach(scope.attributes, function (attribute) {\n                        var attributeColumn = {\n                            propertyIdentifier: \"_orderitem.\" + attribute.attributeCode,\n                            attributeID: attribute.attributeID,\n                            attributeSetObject: \"orderItem\"\n                        };\n                        orderItemCollection.columns.push(attributeColumn);\n                    });\n                    var orderItemsPromise = orderItemCollection.getEntity();\n                    orderItemsPromise.then(function (value) {\n                        scope.collection = value;\n                        var collectionConfig = {};\n                        scope.recordsCount = value.pageRecords;\n                        scope.orderItems = $hibachi.populateCollection(value.pageRecords, orderItemCollection);\n                        for (var orderItem in scope.orderItems) {\n                            $log.debug(\"OrderItem Product Type\");\n                            $log.debug(scope.orderItems);\n                            //orderItem.productType = orderItem.data.sku.data.product.data.productType.$$getParentProductType();\n                        }\n                        scope.paginator.setPageRecordsInfo(scope.collection);\n                        scope.loadingCollection = false;\n                    }, function (value) {\n                        scope.orderItems = [];\n                    });\n                };\n                var attributesCollection = collectionConfigService.newCollectionConfig('Attribute');\n                attributesCollection.setDisplayProperties('attributeID,attributeCode,attributeName')\n                    .addFilter('displayOnOrderDetailFlag', true)\n                    .addFilter('activeFlag', true)\n                    .setAllRecords(true);\n                var attItemsPromise = attributesCollection.getEntity();\n                attItemsPromise.then(function (value) {\n                    scope.attributes = [];\n                    angular.forEach(value.records, function (attributeItemData) {\n                        //Use that custom attribute name to get the value.\n                        scope.attributes.push(attributeItemData);\n                    });\n                    scope.getCollection();\n                });\n                //Add claim function and cancel function\n                /*scope.appendToCollection = function(){\n                    if(scope.pageShow === 'Auto'){\n                        $log.debug('AppendToCollection');\n                        if(scope.paginator.autoScrollPage < scope.collection.totalPages){\n                            scope.paginator.autoScrollDisabled = true;\n                            scope.paginator.autoScrollPage++;\n\n                            var appendOptions:any = {};\n                            angular.extend(appendOptions,options);\n                            appendOptions.pageShow = 50;\n                            appendOptions.currentPage = scope.paginator.autoScrollPage;\n\n                            var collectionListingPromise = $hibachi.getEntity('orderItem', appendOptions);\n                            collectionListingPromise.then(function(value){\n                                scope.collection.pageRecords = scope.collection.pageRecords.concat(value.pageRecords);\n                                scope.autoScrollDisabled = false;\n                            },function(reason){\n                                scope.collection.pageRecords = [];\n                            });\n                        }\n                    }\n                };*/\n                scope.paginator = paginationService.createPagination();\n                scope.paginator.notifyById = false;\n                scope.paginator.collection = scope.collection;\n                scope.paginator.getCollection = scope.getCollection;\n                //set up custom event as temporary fix to update when new sku is adding via jquery ajax instead of angular scope\n                $(document).on(\"listingDisplayUpdate\", {}, function (event, arg1, arg2) {\n                    scope.orderItems = undefined;\n                    scope.getCollection();\n                });\n                observerService.attach(scope.getCollection, 'swPaginationAction');\n            } //<--End link\n        };\n    }\n    SWOrderItems.Factory = function () {\n        var directive = function ($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService, observerService) { return new SWOrderItems($log, $timeout, $location, $hibachi, collectionConfigService, formService, orderItemPartialsPath, slatwallPathBuilder, paginationService, observerService); };\n        directive.$inject = [\n            '$log',\n            '$timeout',\n            '$location',\n            '$hibachi',\n            'collectionConfigService',\n            'formService',\n            'orderItemPartialsPath',\n            'slatwallPathBuilder',\n            'paginationService',\n            'observerService'\n        ];\n        return directive;\n    };\n    return SWOrderItems;\n}());\nexports.SWOrderItems = SWOrderItems;\n\n\n//# sourceURL=webpack:///./orderitem/components/sworderitems.ts?")},"./orderitem/components/swresizedimage.ts":
/*!************************************************!*\
  !*** ./orderitem/components/swresizedimage.ts ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWResizedImage = /** @class */ (function () {\n    function SWResizedImage($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder) {\n        return {\n            restrict: 'E',\n            scope: {\n                orderItem: \"=\",\n            },\n            templateUrl: slatwallPathBuilder.buildPartialsPath(orderItemPartialsPath) + \"orderitem-image.html\",\n            link: function (scope, element, attrs) {\n                var profileName = attrs.profilename;\n                var skuID = scope.orderItem.data.sku.data.skuID;\n                //Get the template.\n                //Call slatwallService to get the path from the image.\n                $hibachi.getResizedImageByProfileName(profileName, skuID)\n                    .then(function (response) {\n                    $log.debug(response.resizedImagePaths[0]);\n                    scope.orderItem.imagePath = response.resizedImagePaths[0];\n                });\n            }\n        };\n    }\n    SWResizedImage.Factory = function () {\n        var directive = function ($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder) { return new SWResizedImage($http, $log, $q, $hibachi, orderItemPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            '$http', '$log', '$q', '$hibachi', 'orderItemPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWResizedImage;\n}());\nexports.SWResizedImage = SWResizedImage;\n\n\n//# sourceURL=webpack:///./orderitem/components/swresizedimage.ts?")},"./orderitem/orderitem.module.ts":
/*!***************************************!*\
  !*** ./orderitem/orderitem.module.ts ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../typings/tsd.d.ts\" />\n/// <reference path=\"../../typings/slatwallTypescript.d.ts\" />\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//directives\nvar swchildorderitem_1 = __webpack_require__(/*! ./components/swchildorderitem */ \"./orderitem/components/swchildorderitem.ts\");\nvar sworderitem_1 = __webpack_require__(/*! ./components/sworderitem */ \"./orderitem/components/sworderitem.ts\");\nvar swoishippinglabelstamp_1 = __webpack_require__(/*! ./components/swoishippinglabelstamp */ \"./orderitem/components/swoishippinglabelstamp.ts\");\nvar sworderitemdetailstamp_1 = __webpack_require__(/*! ./components/sworderitemdetailstamp */ \"./orderitem/components/sworderitemdetailstamp.ts\");\nvar sworderitems_1 = __webpack_require__(/*! ./components/sworderitems */ \"./orderitem/components/sworderitems.ts\");\nvar swresizedimage_1 = __webpack_require__(/*! ./components/swresizedimage */ \"./orderitem/components/swresizedimage.ts\");\nvar orderitemmodule = angular.module('hibachi.orderitem', [core_module_1.coremodule.name])\n    // .config(['$provide','baseURL',($provide,baseURL)=>{\n    // \t$provide.constant('paginationPartials', baseURL+basePartialsPath+'pagination/components/');\n    // }])\n    .run([function () {\n    }])\n    //directives\n    .directive('swChildOrderItem', swchildorderitem_1.SWChildOrderItem.Factory())\n    .directive('swOrderItem', sworderitem_1.SWOrderItem.Factory())\n    .directive('swoishippinglabelstamp', swoishippinglabelstamp_1.SWOiShippingLabelStamp.Factory())\n    .directive('swOrderItemDetailStamp', sworderitemdetailstamp_1.SWOrderItemDetailStamp.Factory())\n    .directive('swOrderItems', sworderitems_1.SWOrderItems.Factory())\n    .directive('swresizedimage', swresizedimage_1.SWResizedImage.Factory())\n    //constants\n    .constant('orderItemPartialsPath', 'orderitem/components/');\nexports.orderitemmodule = orderitemmodule;\n\n\n//# sourceURL=webpack:///./orderitem/orderitem.module.ts?")},"./product/components/swproductdeliveryscheduledates.ts":
/*!**************************************************************!*\
  !*** ./product/components/swproductdeliveryscheduledates.ts ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWProductDeliveryScheduleDatesController = /** @class */ (function () {\n    //@ngInject\n    function SWProductDeliveryScheduleDatesController($scope, collectionConfigService) {\n        var _this = this;\n        this.$scope = $scope;\n        this.collectionConfigService = collectionConfigService;\n        this.sortDeliveryScheduleDates = function () {\n            _this.deliverScheduleDates.sort(function (a, b) {\n                var a1 = Date.parse(a.deliveryScheduleDateValue);\n                a1 = a1.getTime();\n                var b1 = Date.parse(b.deliveryScheduleDateValue);\n                b1 = b1.getTime();\n                if (a1 > b1)\n                    return 1;\n                if (a1 < b1)\n                    return -1;\n                return 0;\n            });\n        };\n        this.removeDeliveryScheduleDate = function (index) {\n            _this.deliverScheduleDates.splice(index, 1);\n            _this.sortDeliveryScheduleDates();\n        };\n        this.getDeliveryScheduleDates = function () {\n            console.log(_this.collectionConfigService);\n            var deliveryScheduleDateCollection = _this.collectionConfigService.newCollectionConfig('DeliveryScheduleDate');\n            deliveryScheduleDateCollection.addFilter('product.productID', _this.productId);\n            deliveryScheduleDateCollection.setAllRecords(true);\n            deliveryScheduleDateCollection.getEntity().then(function (data) {\n                _this.deliverScheduleDates = data.records;\n                for (var i in _this.deliverScheduleDates) {\n                    _this.deliverScheduleDates[i].formattedDate = Date.parse(_this.deliverScheduleDates[i].deliveryScheduleDateValue);\n                }\n            });\n        };\n        this.addDate = function (newDeliverScheduleDate) {\n            if (newDeliverScheduleDate.deliveryScheduleDateValue) {\n                var deliverScheduleDate = angular.copy(newDeliverScheduleDate);\n                deliverScheduleDate.deliveryScheduleDateValue = deliverScheduleDate.deliveryScheduleDateValue.toString().slice(0, 24);\n                _this.deliverScheduleDates.push(deliverScheduleDate);\n                _this.sortDeliveryScheduleDates();\n            }\n        };\n        this.getDeliveryScheduleDates();\n        this.$scope.$watch('swProductDeliveryScheduleDates.deliverScheduleDates', function (newValue, oldValue) {\n            if (newValue && newValue != oldValue) {\n                _this.sortDeliveryScheduleDates();\n            }\n        });\n        this.currentDateTime = Date.today();\n        console.log(this.currentDateTime, 'test');\n    }\n    return SWProductDeliveryScheduleDatesController;\n}());\nexports.SWProductDeliveryScheduleDatesController = SWProductDeliveryScheduleDatesController;\nvar SWProductDeliveryScheduleDates = /** @class */ (function () {\n    //@ngInject\n    function SWProductDeliveryScheduleDates(productPartialsPath, slatwallPathBuilder) {\n        this.productPartialsPath = productPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = \"EA\";\n        this.scope = {};\n        this.bindToController = {\n            productId: \"@\",\n            edit: \"=\"\n        };\n        this.controller = SWProductDeliveryScheduleDatesController;\n        this.controllerAs = \"swProductDeliveryScheduleDates\";\n        this.link = function (scope, element, attrs) {\n            scope.openCalendarStart = function ($event) {\n                $event.preventDefault();\n                $event.stopPropagation();\n                scope.openedCalendarStart = true;\n            };\n            scope.openCalendarEnd = function ($event) {\n                $event.preventDefault();\n                $event.stopPropagation();\n                scope.openedCalendarEnd = true;\n            };\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productPartialsPath) + \"/productdeliveryscheduledates.html\";\n    }\n    SWProductDeliveryScheduleDates.Factory = function () {\n        var directive = function (productPartialsPath, slatwallPathBuilder) { return new SWProductDeliveryScheduleDates(productPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            'productPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWProductDeliveryScheduleDates;\n}());\nexports.SWProductDeliveryScheduleDates = SWProductDeliveryScheduleDates;\n\n\n//# sourceURL=webpack:///./product/components/swproductdeliveryscheduledates.ts?")},"./product/components/swproductlistingpages.ts":
/*!*****************************************************!*\
  !*** ./product/components/swproductlistingpages.ts ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWProductListingPagesController = /** @class */ (function () {\n    //@ngInject\n    function SWProductListingPagesController(collectionConfigService, listingService, utilityService) {\n        this.collectionConfigService = collectionConfigService;\n        this.listingService = listingService;\n        this.utilityService = utilityService;\n        this.collectionConfig = collectionConfigService.newCollectionConfig("Content");\n        this.collectionConfig.addDisplayProperty("contentID, title, activeFlag, site.siteName, titlePath");\n        this.typeaheadDataKey = utilityService.createID(32);\n        this.alreadySelectedContentCollectionConfig = collectionConfigService.newCollectionConfig("ProductListingPage");\n        this.alreadySelectedContentCollectionConfig.addDisplayProperty("productListingPageID, product.productID, content.contentID, content.title, content.site.siteName, content.activeFlag");\n        this.alreadySelectedContentCollectionConfig.addFilter("product.productID", this.productId, "=");\n    }\n    return SWProductListingPagesController;\n}());\nexports.SWProductListingPagesController = SWProductListingPagesController;\nvar SWProductListingPages = /** @class */ (function () {\n    //@ngInject\n    function SWProductListingPages($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) {\n        this.$http = $http;\n        this.$hibachi = $hibachi;\n        this.paginationService = paginationService;\n        this.productPartialsPath = productPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            edit: "=?",\n            selectedListingPageIdPaths: "@?",\n            productId: "@?"\n        };\n        this.controller = SWProductListingPagesController;\n        this.controllerAs = "swProductListingPages";\n        this.link = function ($scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productPartialsPath) + "/productlistingpages.html";\n    }\n    SWProductListingPages.Factory = function () {\n        var directive = function ($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) { return new SWProductListingPages($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$http\',\n            \'$hibachi\',\n            \'paginationService\',\n            \'productPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWProductListingPages;\n}());\nexports.SWProductListingPages = SWProductListingPages;\n\n\n//# sourceURL=webpack:///./product/components/swproductlistingpages.ts?')},"./product/components/swrelatedproducts.ts":
/*!*************************************************!*\
  !*** ./product/components/swrelatedproducts.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar SWRelatedProductsController = /** @class */ (function () {\n    //@ngInject\n    function SWRelatedProductsController(collectionConfigService, utilityService) {\n        this.collectionConfigService = collectionConfigService;\n        this.utilityService = utilityService;\n        this.collectionConfig = collectionConfigService.newCollectionConfig("Product");\n        this.collectionConfig.addDisplayProperty("productID,productName,productCode,calculatedSalePrice,activeFlag,publishedFlag,productType.productTypeNamePath,productType.productTypeName,defaultSku.price");\n        this.alreadySelectedProductsCollectionConfig = collectionConfigService.newCollectionConfig("ProductRelationship");\n        this.alreadySelectedProductsCollectionConfig.addDisplayProperty("productRelationshipID,sortOrder,relatedProduct.productID,relatedProduct.productName,relatedProduct.productCode,relatedProduct.calculatedSalePrice,relatedProduct.activeFlag,relatedProduct.publishedFlag");\n        this.alreadySelectedProductsCollectionConfig.addFilter("product.productID", this.productId, "=");\n        this.typeaheadDataKey = utilityService.createID(32);\n    }\n    return SWRelatedProductsController;\n}());\nexports.SWRelatedProductsController = SWRelatedProductsController;\nvar SWRelatedProducts = /** @class */ (function () {\n    //@ngInject\n    function SWRelatedProducts($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) {\n        this.$http = $http;\n        this.$hibachi = $hibachi;\n        this.paginationService = paginationService;\n        this.productPartialsPath = productPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            productId: "@?",\n            edit: "=?",\n            productSortProperty: "@?",\n            productSortDefaultDirection: "@?",\n            selectedRelatedProductIds: "@?"\n        };\n        this.controller = SWRelatedProductsController;\n        this.controllerAs = "swRelatedProducts";\n        this.link = function ($scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productPartialsPath) + "/relatedproducts.html";\n    }\n    SWRelatedProducts.Factory = function () {\n        var directive = function ($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder) { return new SWRelatedProducts($http, $hibachi, paginationService, productPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$http\',\n            \'$hibachi\',\n            \'paginationService\',\n            \'productPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWRelatedProducts;\n}());\nexports.SWRelatedProducts = SWRelatedProducts;\n\n\n//# sourceURL=webpack:///./product/components/swrelatedproducts.ts?')},"./product/controllers/preprocessproduct_create.ts":
/*!*********************************************************!*\
  !*** ./product/controllers/preprocessproduct_create.ts ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ProductCreateController = /** @class */ (function () {\n    //@ngInject\n    function ProductCreateController($q, $scope, $element, $log, $hibachi, collectionConfigService, selectionService, rbkeyService) {\n        var _this = this;\n        this.$q = $q;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$log = $log;\n        this.$hibachi = $hibachi;\n        this.collectionConfigService = collectionConfigService;\n        this.selectionService = selectionService;\n        this.rbkeyService = rbkeyService;\n        //on select change get collection\n        this.$scope.preprocessproduct_createCtrl.productTypeChanged = function (selectedOption) {\n            _this.$scope.preprocessproduct_createCtrl.selectedOption = selectedOption;\n            _this.$scope.preprocessproduct_createCtrl.getCollection();\n            _this.selectionService.clearSelection('ListingDisplay');\n        };\n        this.$scope.productTypeIDPaths = {};\n        this.$scope.preprocessproduct_createCtrl.getCollection = function () {\n            var productTypeDeffered = _this.$q.defer();\n            var productTypePromise = productTypeDeffered.promise;\n            if (angular.isUndefined(_this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value])) {\n                var productTypeCollectionConfig = _this.collectionConfigService.newCollectionConfig('ProductType');\n                productTypeCollectionConfig.addDisplayProperty('productTypeID, productTypeIDPath');\n                productTypeCollectionConfig.addFilter('productTypeID', _this.$scope.preprocessproduct_createCtrl.selectedOption.value, \"=\");\n                productTypeCollectionConfig.getEntity().then(function (result) {\n                    if (angular.isDefined(result.pageRecords[0])) {\n                        _this.$scope.productTypeIDPaths[result.pageRecords[0].productTypeID] = result.pageRecords[0].productTypeIDPath;\n                    }\n                    productTypeDeffered.resolve();\n                }, function (reason) {\n                    productTypeDeffered.reject();\n                    throw (\"ProductCreateController was unable to retrieve the product type ID Path.\");\n                });\n            }\n            else {\n                productTypeDeffered.resolve();\n            }\n            productTypePromise.then(function () {\n                if (_this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value]) {\n                    var collectionConfig = _this.collectionConfigService.newCollectionConfig('Option');\n                    collectionConfig.setDisplayProperties('optionGroup.optionGroupName,optionName', undefined, { isVisible: true });\n                    collectionConfig.setDisplayProperties('optionID', undefined, { isVisible: false });\n                    //this.collectionConfig.addFilter('optionGroup.optionGroupID',$('input[name=\"currentOptionGroups\"]').val(),'NOT IN')\n                    collectionConfig.addFilter('optionGroup.globalFlag', 1, '=');\n                    var productTypeIDArray = _this.$scope.productTypeIDPaths[_this.$scope.preprocessproduct_createCtrl.selectedOption.value].split(\",\");\n                    for (var j = 0; j < productTypeIDArray.length; j++) {\n                        collectionConfig.addFilter('optionGroup.productTypes.productTypeID', productTypeIDArray[j], '=', 'OR');\n                    }\n                    collectionConfig.setOrderBy('optionGroup.sortOrder|ASC,sortOrder|ASC');\n                    _this.$scope.preprocessproduct_createCtrl.collectionListingPromise = collectionConfig.getEntity();\n                    _this.$scope.preprocessproduct_createCtrl.collectionListingPromise.then(function (data) {\n                        _this.$scope.preprocessproduct_createCtrl.collection = data;\n                        _this.$scope.preprocessproduct_createCtrl.collection.collectionConfig = collectionConfig;\n                    });\n                }\n            }, function () {\n                throw (\"ProductCreateController was unable to resolve the product type.\");\n            });\n        };\n        var renewalMethodOptions = $(\"select[name='renewalMethod']\")[0];\n        this.$scope.preprocessproduct_createCtrl.renewalMethodOptions = [];\n        angular.forEach(renewalMethodOptions, function (option) {\n            var optionToAdd = {\n                label: option.label,\n                value: option.value\n            };\n            _this.$scope.preprocessproduct_createCtrl.renewalMethodOptions.push(optionToAdd);\n        });\n        this.$scope.preprocessproduct_createCtrl.renewalSkuChoice = this.$scope.preprocessproduct_createCtrl.renewalMethodOptions[1];\n        var productTypeOptions = $(\"select[name='product.productType.productTypeID']\")[0];\n        this.$scope.preprocessproduct_createCtrl.options = [];\n        angular.forEach(productTypeOptions, function (jQueryOption) {\n            var option = {\n                label: jQueryOption.label,\n                value: jQueryOption.value\n            };\n            _this.$scope.preprocessproduct_createCtrl.options.push(option);\n        });\n        this.$scope.preprocessproduct_createCtrl.selectedOption = {};\n        if (angular.isDefined(this.$scope.preprocessproduct_createCtrl.options[0]) && angular.isDefined(this.$scope.preprocessproduct_createCtrl.options[0].value)) {\n            this.$scope.preprocessproduct_createCtrl.selectedOption.value = this.$scope.preprocessproduct_createCtrl.options[0].value;\n            this.$scope.preprocessproduct_createCtrl.productTypeChanged(this.$scope.preprocessproduct_createCtrl.selectedOption);\n        }\n        else {\n            this.$scope.preprocessproduct_createCtrl.selectedOption.value = \"\";\n        }\n        this.$scope.preprocessproduct_createCtrl.getCollection();\n    }\n    return ProductCreateController;\n}());\nexports.ProductCreateController = ProductCreateController;\n\n\n//# sourceURL=webpack:///./product/controllers/preprocessproduct_create.ts?")},"./product/product.module.ts":
/*!***********************************!*\
  !*** ./product/product.module.ts ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//modules\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//services\n//controllers\nvar preprocessproduct_create_1 = __webpack_require__(/*! ./controllers/preprocessproduct_create */ \"./product/controllers/preprocessproduct_create.ts\");\n//filters\n//directives\nvar swproductlistingpages_1 = __webpack_require__(/*! ./components/swproductlistingpages */ \"./product/components/swproductlistingpages.ts\");\nvar swrelatedproducts_1 = __webpack_require__(/*! ./components/swrelatedproducts */ \"./product/components/swrelatedproducts.ts\");\nvar swproductdeliveryscheduledates_1 = __webpack_require__(/*! ./components/swproductdeliveryscheduledates */ \"./product/components/swproductdeliveryscheduledates.ts\");\nvar productmodule = angular.module('hibachi.product', [core_module_1.coremodule.name]).config(function () {\n})\n    .constant('productPartialsPath', 'product/components/')\n    //services\n    //controllers\n    .controller('preprocessproduct_create', preprocessproduct_create_1.ProductCreateController)\n    //filters\n    //directives\n    .directive('swProductListingPages', swproductlistingpages_1.SWProductListingPages.Factory())\n    .directive('swProductDeliveryScheduleDates', swproductdeliveryscheduledates_1.SWProductDeliveryScheduleDates.Factory())\n    .directive('swRelatedProducts', swrelatedproducts_1.SWRelatedProducts.Factory());\nexports.productmodule = productmodule;\n\n\n//# sourceURL=webpack:///./product/product.module.ts?")},"./productbundle/components/swproductbundlecollectionfilteritemtypeahead.ts":
/*!**********************************************************************************!*\
  !*** ./productbundle/components/swproductbundlecollectionfilteritemtypeahead.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar CollectionFilterItem = /** @class */ (function () {\n    function CollectionFilterItem(name, type, displayPropertyIdentifier, propertyIdentifier, displayValue, value, comparisonOperator, logicalOperator) {\n        this.name = name;\n        this.type = type;\n        this.displayPropertyIdentifier = displayPropertyIdentifier;\n        this.propertyIdentifier = propertyIdentifier;\n        this.displayValue = displayValue;\n        this.value = value;\n        this.comparisonOperator = comparisonOperator;\n        this.logicalOperator = logicalOperator;\n    }\n    return CollectionFilterItem;\n}());\nvar SWProductBundleCollectionFilterItemTypeaheadController = /** @class */ (function () {\n    // @ngInject\n    function SWProductBundleCollectionFilterItemTypeaheadController($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath) {\n        var _this = this;\n        this.$log = $log;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.productBundleService = productBundleService;\n        this.metadataService = metadataService;\n        this.utilityService = utilityService;\n        this.formService = formService;\n        this.$hibachi = $hibachi;\n        this.productBundlePartialsPath = productBundlePartialsPath;\n        this.init = function () {\n            _this.maxRecords = 10;\n            _this.recordsCount = 0;\n            _this.pageRecordsStart = 0;\n            _this.pageRecordsEnd = 0;\n            _this.recordsPerPage = 10;\n            _this.showAll = false;\n            _this.showAdvanced = false;\n            _this.currentPage = 1;\n            _this.pageShow = 10;\n            _this.searchAllCollectionConfigs = [];\n            if (angular.isUndefined(_this.filterPropertiesList)) {\n                _this.filterPropertiesList = {};\n                var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName(\'_sku\');\n                filterPropertiesPromise.then(function (value) {\n                    _this.metadataService.setPropertiesList(value, \'_sku\');\n                    _this.filterPropertiesList[\'_sku\'] = _this.metadataService.getPropertiesListByBaseEntityAlias(\'_sku\');\n                    _this.metadataService.formatPropertiesList(_this.filterPropertiesList[\'_sku\'], \'_sku\');\n                });\n            }\n            _this.skuCollectionConfig = {\n                baseEntityName: "Sku",\n                baseEntityAlias: "_sku",\n                collectionConfig: _this.productBundleGroup.data.skuCollectionConfig,\n                collectionObject: \'Sku\'\n            };\n            _this.searchOptions = {\n                options: [\n                    {\n                        name: "All",\n                        value: "All"\n                    },\n                    {\n                        name: "Product Type",\n                        value: "productType"\n                    },\n                    {\n                        name: "Brand",\n                        value: "brand"\n                    },\n                    {\n                        name: "Products",\n                        value: "product"\n                    },\n                    {\n                        name: "Skus",\n                        value: "sku"\n                    }\n                ],\n                selected: {\n                    name: "All",\n                    value: "All"\n                },\n                setSelected: function (searchOption) {\n                    _this.searchOptions.selected = searchOption;\n                    _this.getFiltersByTerm(_this.productBundleGroupFilters.keyword, searchOption);\n                }\n            };\n            _this.navigation = {\n                value: \'Basic\',\n                setValue: function (value) {\n                    _this.value = value;\n                }\n            };\n            _this.filterTemplatePath = _this.productBundlePartialsPath + "productbundlefilter.html";\n            _this.productBundleGroupFilters = {};\n            _this.productBundleGroupFilters.value = [];\n            if (angular.isUndefined(_this.productBundleGroup.data.skuCollectionConfig)) {\n                _this.productBundleGroup.data.skuCollectionConfig = {};\n                _this.productBundleGroup.data.skuCollectionConfig.filterGroups = [];\n            }\n            if (!angular.isDefined(_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0])) {\n                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0] = {};\n                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];\n            }\n            var options = {\n                filterGroupsConfig: _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup,\n                columnsConfig: _this.productBundleGroup.data.skuCollectionConfig.columns,\n            };\n            _this.getCollection();\n        };\n        this.openCloseAndRefresh = function () {\n            _this.showAdvanced = !_this.showAdvanced;\n            if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.length) {\n                _this.getCollection();\n            }\n        };\n        this.deleteEntity = function (type) {\n            if (angular.isNumber(type)) {\n                _this.removeProductBundleGroupFilter(type);\n            }\n            else {\n                _this.removeProductBundleGroup({ index: _this.index });\n                _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];\n            }\n        };\n        this.getCollection = function () {\n            var options = {\n                filterGroupsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.filterGroups),\n                columnsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.columns),\n                currentPage: 1,\n                pageShow: 10\n            };\n            var collectionPromise = _this.$hibachi.getEntity(\'Sku\', options);\n            collectionPromise.then(function (response) {\n                _this.collection = response;\n            });\n        };\n        this.increaseCurrentCount = function () {\n            if (angular.isDefined(_this.totalPages) && _this.totalPages != _this.currentPage) {\n                _this.currentPage++;\n            }\n            else {\n                _this.currentPage = 1;\n            }\n        };\n        this.resetCurrentCount = function () {\n            _this.currentPage = 1;\n        };\n        this.getFiltersByTerm = function (keyword, filterTerm) {\n            //save search\n            _this.keyword = keyword;\n            _this.filterTerm = filterTerm;\n            _this.loading = true;\n            _this.showAll = true;\n            var _loadingCount;\n            if (_this.timeoutPromise) {\n                _this.$timeout.cancel(_this.timeoutPromise);\n            }\n            _this.timeoutPromise = _this.$timeout(function () {\n                if (filterTerm.value === \'All\') {\n                    _this.showAll = true;\n                    _this.productBundleGroupFilters.value = [];\n                    _loadingCount = _this.searchOptions.options.length - 1;\n                    for (var i = 0; i < _this.searchOptions.options.length; i++) {\n                        if (i > 0) {\n                            var option = _this.searchOptions.options[i];\n                            (function (keyword, option) {\n                                if (_this.searchAllCollectionConfigs.length <= 4) {\n                                    _this.searchAllCollectionConfigs.push(_this.collectionConfigService.newCollectionConfig(_this.searchOptions.options[i].value));\n                                }\n                                _this.searchAllCollectionConfigs[i - 1].setKeywords(keyword);\n                                _this.searchAllCollectionConfigs[i - 1].setCurrentPage(_this.currentPage);\n                                _this.searchAllCollectionConfigs[i - 1].setPageShow(_this.pageShow);\n                                //searchAllCollectionConfig.setAllRecords(true);\n                                _this.searchAllCollectionConfigs[i - 1].getEntity().then(function (value) {\n                                    _this.recordsCount = value.recordsCount;\n                                    _this.pageRecordsStart = value.pageRecordsStart;\n                                    _this.pageRecordsEnd = value.pageRecordsEnd;\n                                    _this.totalPages = value.totalPages;\n                                    var formattedProductBundleGroupFilters = _this.productBundleService.formatProductBundleGroupFilters(value.pageRecords, option, _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup);\n                                    for (var j in formattedProductBundleGroupFilters) {\n                                        if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.indexOf(formattedProductBundleGroupFilters[j]) == -1) {\n                                            _this.productBundleGroupFilters.value.push(formattedProductBundleGroupFilters[j]);\n                                            _this.$log.debug(formattedProductBundleGroupFilters[j]);\n                                        }\n                                    }\n                                    // Increment Down The Loading Count\n                                    _loadingCount--;\n                                    // If the loadingCount drops to 0, then we can update scope\n                                    if (_loadingCount == 0) {\n                                        //This sorts the array of objects by the objects\' "type" property alphabetically\n                                        _this.productBundleGroupFilters.value = _this.utilityService.arraySorter(_this.productBundleGroupFilters.value, ["type", "name"]);\n                                        _this.$log.debug(_this.productBundleGroupFilters.value);\n                                        if (_this.productBundleGroupFilters.value.length == 0) {\n                                            _this.currentPage = 0;\n                                        }\n                                    }\n                                    _this.loading = false;\n                                });\n                            })(keyword, option);\n                        }\n                    }\n                }\n                else {\n                    _this.showAll = false;\n                    if (angular.isUndefined(_this.searchCollectionConfig) || filterTerm.value != _this.searchCollectionConfig.baseEntityName) {\n                        _this.searchCollectionConfig = _this.collectionConfigService.newCollectionConfig(filterTerm.value);\n                    }\n                    _this.searchCollectionConfig.setKeywords(keyword);\n                    _this.searchCollectionConfig.setCurrentPage(_this.currentPage);\n                    _this.searchCollectionConfig.setPageShow(_this.pageShow);\n                    _this.searchCollectionConfig.getEntity().then(function (value) {\n                        _this.recordsCount = value.recordsCount;\n                        _this.pageRecordsStart = value.pageRecordsStart;\n                        _this.pageRecordsEnd = value.pageRecordsEnd;\n                        _this.totalPages = value.totalPages;\n                        _this.productBundleGroupFilters.value = _this.productBundleService.formatProductBundleGroupFilters(value.pageRecords, filterTerm, _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup) || [];\n                        _this.loading = false;\n                    });\n                }\n            }, 500);\n        };\n        this.addFilterToProductBundle = function (filterItem, include, index) {\n            var collectionFilterItem = new CollectionFilterItem(filterItem.name, filterItem.type, filterItem.type, filterItem.propertyIdentifier, filterItem[filterItem.entityType.charAt(0).toLowerCase() + filterItem.entityType.slice(1) + \'ID\'], filterItem[filterItem.entityType.charAt(0).toLowerCase() + filterItem.entityType.slice(1) + \'ID\']);\n            if (include === false) {\n                collectionFilterItem.comparisonOperator = \'!=\';\n            }\n            else {\n                collectionFilterItem.comparisonOperator = \'=\';\n            }\n            if (_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.length > 0) {\n                collectionFilterItem.logicalOperator = \'OR\';\n            }\n            if (angular.isDefined(_this.searchCollectionConfig)) {\n                _this.searchCollectionConfig.addFilter(_this.searchCollectionConfig.baseEntityName + "ID", collectionFilterItem.value, "!=");\n            }\n            if (_this.showAll) {\n                switch (collectionFilterItem.type) {\n                    case \'Product Type\':\n                        _this.searchAllCollectionConfigs[0].addFilter("productTypeID", collectionFilterItem.value, "!=");\n                        break;\n                    case \'Brand\':\n                        _this.searchAllCollectionConfigs[1].addFilter("brandID", collectionFilterItem.value, "!=");\n                        break;\n                    case \'Products\':\n                        _this.searchAllCollectionConfigs[2].addFilter("productID", collectionFilterItem.value, "!=");\n                        break;\n                    case \'Skus\':\n                        _this.searchAllCollectionConfigs[3].addFilter("skuID", collectionFilterItem.value, "!=");\n                        break;\n                }\n            }\n            _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.push(collectionFilterItem);\n            _this.productBundleGroup.forms[_this.formName].skuCollectionConfig.$setDirty();\n            //reload the list to correct pagination show all takes too long for this to be graceful\n            if (!_this.showAll) {\n                _this.getFiltersByTerm(_this.keyword, _this.filterTerm);\n            }\n            else {\n                //Removes the filter item from the left hand search result\n                _this.productBundleGroupFilters.value.splice(index, 1);\n            }\n        };\n        this.removeProductBundleGroupFilter = function (index) {\n            //Pushes item back into array\n            _this.productBundleGroupFilters.value.push(_this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup[index]);\n            //Sorts Array\n            _this.productBundleGroupFilters.value = _this.utilityService.arraySorter(_this.productBundleGroupFilters.value, ["type", "name"]);\n            //Removes the filter item from the filtergroup\n            var collectionFilterItem = _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup.splice(index, 1)[0];\n            if (angular.isDefined(_this.searchCollectionConfig)) {\n                _this.searchCollectionConfig.removeFilter(_this.searchCollectionConfig.baseEntityAlias + \'.\' + _this.searchCollectionConfig.baseEntityName + "ID", collectionFilterItem.value, "!=");\n            }\n            if (_this.showAll) {\n                switch (collectionFilterItem.type) {\n                    case \'Product Type\':\n                        _this.searchAllCollectionConfigs[0].removeFilter("_productType.productTypeID", collectionFilterItem.value, "!=");\n                        break;\n                    case \'Brand\':\n                        _this.searchAllCollectionConfigs[1].removeFilter("_brand.brandID", collectionFilterItem.value, "!=");\n                        break;\n                    case \'Products\':\n                        _this.searchAllCollectionConfigs[2].removeFilter("_product.productID", collectionFilterItem.value, "!=");\n                        break;\n                    case \'Skus\':\n                        _this.searchAllCollectionConfigs[3].removeFilter("_sku.skuID", collectionFilterItem.value, "!=");\n                        break;\n                }\n            }\n            if (!_this.showAll) {\n                _this.getFiltersByTerm(_this.keyword, _this.filterTerm);\n            }\n            else {\n                _this.productBundleGroupFilters.value.splice(index, 0, collectionFilterItem);\n            }\n        };\n        this.init();\n    }\n    return SWProductBundleCollectionFilterItemTypeaheadController;\n}());\nexports.SWProductBundleCollectionFilterItemTypeaheadController = SWProductBundleCollectionFilterItemTypeaheadController;\nvar SWProductBundleCollectionFilterItemTypeahead = /** @class */ (function () {\n    // @ngInject\n    function SWProductBundleCollectionFilterItemTypeahead($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) {\n        this.$log = $log;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.productBundleService = productBundleService;\n        this.metadataService = metadataService;\n        this.utilityService = utilityService;\n        this.formService = formService;\n        this.$hibachi = $hibachi;\n        this.productBundlePartialsPath = productBundlePartialsPath;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            productBundleGroup: "=",\n            index: "=",\n            formName: "@"\n        };\n        this.controller = SWProductBundleCollectionFilterItemTypeaheadController;\n        this.controllerAs = "swProductBundleCollectionFilteritemTypeahead";\n        this.link = function ($scope, element, attrs, ctrl) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlecollectionfilteritemtypeahead.html";\n    }\n    SWProductBundleCollectionFilterItemTypeahead.Factory = function () {\n        var directive = function ($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) { return new SWProductBundleCollectionFilterItemTypeahead($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            "$log", "$timeout", "collectionConfigService", "productBundleService", "metadataService", "utilityService", "formService", "$hibachi", "productBundlePartialsPath",\n            "slatwallPathBuilder"\n        ];\n        return directive;\n    };\n    return SWProductBundleCollectionFilterItemTypeahead;\n}());\nexports.SWProductBundleCollectionFilterItemTypeahead = SWProductBundleCollectionFilterItemTypeahead;\n\n\n//# sourceURL=webpack:///./productbundle/components/swproductbundlecollectionfilteritemtypeahead.ts?')},"./productbundle/components/swproductbundlegroup.ts":
/*!**********************************************************!*\
  !*** ./productbundle/components/swproductbundlegroup.ts ***!
  \**********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nObject.defineProperty(exports, "__esModule", { value: true });\nvar CollectionFilterItem = /** @class */ (function () {\n    function CollectionFilterItem(name, type, displayPropertyIdentifier, propertyIdentifier, displayValue, value, comparisonOperator, logicalOperator) {\n        this.name = name;\n        this.type = type;\n        this.displayPropertyIdentifier = displayPropertyIdentifier;\n        this.propertyIdentifier = propertyIdentifier;\n        this.displayValue = displayValue;\n        this.value = value;\n        this.comparisonOperator = comparisonOperator;\n        this.logicalOperator = logicalOperator;\n    }\n    return CollectionFilterItem;\n}());\nvar SWProductBundleGroupController = /** @class */ (function () {\n    // @ngInject\n    function SWProductBundleGroupController($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath) {\n        var _this = this;\n        this.$log = $log;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.productBundleService = productBundleService;\n        this.metadataService = metadataService;\n        this.utilityService = utilityService;\n        this.formService = formService;\n        this.$hibachi = $hibachi;\n        this.productBundlePartialsPath = productBundlePartialsPath;\n        this.init = function () {\n            _this.maxRecords = 10;\n            _this.recordsCount = 0;\n            _this.pageRecordsStart = 0;\n            _this.pageRecordsEnd = 0;\n            _this.recordsPerPage = 10;\n            _this.showAll = false;\n            _this.showAdvanced = false;\n            _this.currentPage = 1;\n            _this.pageShow = 10;\n            _this.searchAllCollectionConfigs = [];\n            if (angular.isUndefined(_this.filterPropertiesList)) {\n                _this.filterPropertiesList = {};\n                var filterPropertiesPromise = _this.$hibachi.getFilterPropertiesByBaseEntityName(\'_sku\');\n                filterPropertiesPromise.then(function (value) {\n                    _this.metadataService.setPropertiesList(value, \'_sku\');\n                    _this.filterPropertiesList[\'_sku\'] = _this.metadataService.getPropertiesListByBaseEntityAlias(\'_sku\');\n                    _this.metadataService.formatPropertiesList(_this.filterPropertiesList[\'_sku\'], \'_sku\');\n                });\n            }\n            _this.searchOptions = {\n                options: [\n                    {\n                        name: "All",\n                        value: "All"\n                    },\n                    {\n                        name: "Product Type",\n                        value: "productType"\n                    },\n                    {\n                        name: "Brand",\n                        value: "brand"\n                    },\n                    {\n                        name: "Products",\n                        value: "product"\n                    },\n                    {\n                        name: "Skus",\n                        value: "sku"\n                    }\n                ],\n                selected: {\n                    name: "All",\n                    value: "All"\n                },\n                setSelected: function (searchOption) {\n                    _this.searchOptions.selected = searchOption;\n                }\n            };\n            _this.navigation = {\n                value: \'Basic\',\n                setValue: function (value) {\n                    _this.value = value;\n                }\n            };\n            _this.filterTemplatePath = _this.productBundlePartialsPath + "productbundlefilter.html";\n            _this.productBundleGroupFilters = {};\n            _this.productBundleGroupFilters.value = [];\n            if (angular.isUndefined(_this.productBundleGroup.data.skuCollectionConfig) || _this.productBundleGroup.data.skuCollectionConfig === null) {\n                _this.productBundleGroup.data.skuCollectionConfig = _this.collectionConfigService.newCollectionConfig("Sku").getCollectionConfig();\n            }\n            var options = {\n                filterGroupsConfig: _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup,\n                columnsConfig: _this.productBundleGroup.data.skuCollectionConfig.columns,\n            };\n            _this.getCollection();\n        };\n        this.deleteEntity = function (type) {\n            _this.removeProductBundleGroup({ index: _this.index });\n            _this.productBundleGroup.data.skuCollectionConfig.filterGroups[0].filterGroup = [];\n        };\n        this.getCollection = function () {\n            var options = {\n                filterGroupsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.filterGroups),\n                columnsConfig: angular.toJson(_this.productBundleGroup.data.skuCollectionConfig.columns),\n                currentPage: 1,\n                pageShow: 10\n            };\n            var collectionPromise = _this.$hibachi.getEntity(\'Sku\', options);\n            collectionPromise.then(function (response) {\n                _this.collection = response;\n            });\n        };\n        this.increaseCurrentCount = function () {\n            if (angular.isDefined(_this.totalPages) && _this.totalPages != _this.currentPage) {\n                _this.currentPage++;\n            }\n            else {\n                _this.currentPage = 1;\n            }\n        };\n        this.resetCurrentCount = function () {\n            _this.currentPage = 1;\n        };\n        this.save = function () {\n            var savePromise = _this.productBundleGroup.$$save();\n            savePromise.then(function (response) {\n                _this.productBundleGroup.data.$$toggleEdit();\n                _this.refreshProductBundleGroup();\n            }).catch(function (data) {\n                //error handling handled by $$save\n            });\n        };\n        this.saveAndAddBundleGroup = function () {\n            var savePromise = _this.productBundleGroup.$$save();\n            savePromise.then(function (response) {\n                _this.productBundleGroup.data.$$toggleEdit();\n                _this.addProductBundleGroup();\n            }).catch(function (data) {\n                //error handling handled by $$save\n            });\n        };\n        this.init();\n    }\n    return SWProductBundleGroupController;\n}());\nvar SWProductBundleGroup = /** @class */ (function () {\n    // @ngInject\n    function SWProductBundleGroup($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) {\n        this.$log = $log;\n        this.$timeout = $timeout;\n        this.collectionConfigService = collectionConfigService;\n        this.productBundleService = productBundleService;\n        this.metadataService = metadataService;\n        this.utilityService = utilityService;\n        this.formService = formService;\n        this.$hibachi = $hibachi;\n        this.productBundlePartialsPath = productBundlePartialsPath;\n        this.restrict = "EA";\n        this.scope = {};\n        this.bindToController = {\n            productBundleGroup: "=",\n            productBundleGroups: "=",\n            index: "=",\n            addProductBundleGroup: "&",\n            removeProductBundleGroup: "&",\n            refreshProductBundleGroup: "&",\n            formName: "@"\n        };\n        this.controller = SWProductBundleGroupController;\n        this.controllerAs = "swProductBundleGroup";\n        this.link = function ($scope, element, attrs, ctrl) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + "productbundlegroup.html";\n    }\n    SWProductBundleGroup.Factory = function () {\n        var directive = function ($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder) { return new SWProductBundleGroup($log, $timeout, collectionConfigService, productBundleService, metadataService, utilityService, formService, $hibachi, productBundlePartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            "$log", "$timeout", "collectionConfigService", "productBundleService", "metadataService", "utilityService", "formService", "$hibachi", "productBundlePartialsPath",\n            "slatwallPathBuilder"\n        ];\n        return directive;\n    };\n    return SWProductBundleGroup;\n}());\nexports.SWProductBundleGroup = SWProductBundleGroup;\n\n\n//# sourceURL=webpack:///./productbundle/components/swproductbundlegroup.ts?')},"./productbundle/components/swproductbundlegroups.ts":
/*!***********************************************************!*\
  !*** ./productbundle/components/swproductbundlegroups.ts ***!
  \***********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWProductBundleGroupsController = /** @class */ (function () {\n    //@ngInject\n    function SWProductBundleGroupsController($scope, $element, $attrs, $log, productBundleService, $hibachi) {\n        var _this = this;\n        this.$scope = $scope;\n        this.$element = $element;\n        this.$attrs = $attrs;\n        this.$log = $log;\n        this.productBundleService = productBundleService;\n        this.$hibachi = $hibachi;\n        this.removeProductBundleGroup = function (index) {\n            if (angular.isDefined(_this.productBundleGroups[index]) && _this.productBundleGroups[index].$$isPersisted()) {\n                _this.productBundleGroups[index].$$delete().then(function (data) {\n                    //no more logic to run\n                });\n            }\n            _this.productBundleGroups.splice(index, 1);\n        };\n        this.addProductBundleGroup = function () {\n            var productBundleGroup = _this.$hibachi.newProductBundleGroup();\n            productBundleGroup.$$setProductBundleSku(_this.sku);\n            productBundleGroup = _this.productBundleService.decorateProductBundleGroup(productBundleGroup);\n        };\n        this.refreshProductBundleGroup = function () {\n            for (var pbg in _this.productBundleGroups) {\n                if (_this.productBundleGroups[pbg]['forms'] != undefined || _this.productBundleGroups[pbg]['forms'][\"createProductBundle\" + pbg] != undefined) {\n                    //updates the min and max from the raw form values instead of making another http call.\n                    if (_this.productBundleGroups[pbg]['forms'][\"form.createProductBundle\" + pbg]['maximumQuantity'] != undefined && _this.productBundleGroups[pbg]['forms'][\"form.createProductBundle\" + pbg]['maximumQuantity']['$modelValue'] != undefined) {\n                        if (_this.productBundleGroups[\"\" + pbg]['data']['maximumQuantity'] !== _this.productBundleGroups[pbg]['forms'][\"form.createProductBundle\" + pbg]['maximumQuantity']['$modelValue']) {\n                            _this.productBundleGroups[\"\" + pbg]['data']['maximumQuantity'] = _this.productBundleGroups[pbg]['forms'][\"form.createProductBundle\" + pbg]['maximumQuantity']['$modelValue'];\n                        }\n                    }\n                    if (_this.productBundleGroups[pbg]['forms'][\"form.createProductBundle\" + pbg]['minimumQuantity'] != undefined && _this.productBundleGroups[pbg]['forms'][\"form.createProductBundle\" + pbg]['minimumQuantity']['$modelValue'] != undefined) {\n                        if (_this.productBundleGroups[\"\" + pbg]['data']['minimumQuantity'] !== _this.productBundleGroups[pbg]['forms'][\"form.createProductBundle\" + pbg]['minimumQuantity']['$modelValue']) {\n                            _this.productBundleGroups[\"\" + pbg]['data']['minimumQuantity'] = _this.productBundleGroups[pbg]['forms'][\"form.createProductBundle\" + pbg]['minimumQuantity']['$modelValue'];\n                        }\n                    }\n                }\n            }\n        };\n        $scope.editing = $scope.editing || true;\n        angular.forEach(this.productBundleGroups, function (obj) {\n            productBundleService.decorateProductBundleGroup(obj);\n            obj.data.$$editing = false;\n        });\n    }\n    return SWProductBundleGroupsController;\n}());\nexports.SWProductBundleGroupsController = SWProductBundleGroupsController;\nvar SWProductBundleGroups = /** @class */ (function () {\n    function SWProductBundleGroups($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) {\n        this.restrict = 'EA';\n        this.scope = {\n            sku: \"=\",\n            productBundleGroups: \"=\"\n        };\n        this.bindToController = {\n            sku: \"=\",\n            productBundleGroups: \"=\"\n        };\n        this.controller = SWProductBundleGroupsController;\n        this.controllerAs = \"swProductBundleGroups\";\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + \"productbundlegroups.html\";\n    }\n    SWProductBundleGroups.Factory = function () {\n        var directive = function ($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) { return new SWProductBundleGroups($http, $log, $hibachi, metadataService, productBundlePartialsPath, productBundleService, slatwallPathBuilder); };\n        directive.$inject = [\n            '$http',\n            '$log',\n            '$hibachi',\n            'metadataService',\n            'productBundlePartialsPath',\n            'productBundleService',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWProductBundleGroups;\n}());\nexports.SWProductBundleGroups = SWProductBundleGroups;\n\n\n//# sourceURL=webpack:///./productbundle/components/swproductbundlegroups.ts?")},"./productbundle/components/swproductbundlegrouptype.ts":
/*!**************************************************************!*\
  !*** ./productbundle/components/swproductbundlegrouptype.ts ***!
  \**************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWProductBundleGroupType = /** @class */ (function () {\n    function SWProductBundleGroupType($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) {\n        return {\n            restrict: 'A',\n            templateUrl: slatwallPathBuilder.buildPartialsPath(productBundlePartialsPath) + \"productbundlegrouptype.html\",\n            scope: {\n                productBundleGroup: \"=\"\n            },\n            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n                    $log.debug('productBundleGrouptype');\n                    $log.debug($scope.productBundleGroup);\n                    $scope.productBundleGroupTypes = {};\n                    $scope.$$id = \"productBundleGroupType\";\n                    $scope.productBundleGroupTypes.value = [];\n                    $scope.productBundleGroupTypes.$$adding = false;\n                    $scope.productBundleGroupTypeSaving = false;\n                    $scope.productBundleGroupType = {};\n                    $scope.productBundleGroupTypeCollection = collectionConfigService.newCollectionConfig((\"Type\"));\n                    $scope.productBundleGroupTypeCollection.setAllRecords(true);\n                    $scope.productBundleGroupTypeCollection.addFilter(\"parentType.systemCode\", \"productBundleGroupType\", \"=\");\n                    if (angular.isUndefined($scope.productBundleGroup.data.productBundleGroupType)) {\n                        var productBundleGroupType = $hibachi.newType();\n                        var parentType = $hibachi.newType();\n                        parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';\n                        productBundleGroupType.$$setParentType(parentType);\n                        $scope.productBundleGroup.$$setProductBundleGroupType(productBundleGroupType);\n                    }\n                    /**\n                     * Sets the state to adding and sets the initial data.\n                     */\n                    $scope.productBundleGroupTypes.setAdding = function () {\n                        $scope.productBundleGroupTypes.$$adding = !$scope.productBundleGroupTypes.$$adding;\n                        if (!$scope.productBundleGroupTypes.$$adding) {\n                            var productBundleGroupType = $hibachi.newType();\n                            var parentType = $hibachi.newType();\n                            parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';\n                            productBundleGroupType.$$setParentType(parentType);\n                            $scope.productBundleGroup.data.productBundleGroupType.data.typeName = \"\";\n                            productBundleGroupType.data.typeName = $scope.productBundleGroup.data.productBundleGroupType.data.typeName;\n                            productBundleGroupType.data.typeDescription = '';\n                            productBundleGroupType.data.typeNameCode = '';\n                            angular.extend($scope.productBundleGroup.data.productBundleGroupType, productBundleGroupType);\n                            //formService.getForm('form.addProductBundleGroupType').$setDirty();\n                        }\n                    };\n                    $scope.showAddProductBundleGroupTypeBtn = false;\n                    /**\n                     * Handles looking up the keyword and populating the dropdown as a user types.\n                     */\n                    $scope.productBundleGroupTypes.getTypesByKeyword = function (keyword) {\n                        $log.debug('getTypesByKeyword');\n                        var filterGroupsConfig = '[' +\n                            ' {  ' +\n                            '\"filterGroup\":[  ' +\n                            ' {  ' +\n                            ' \"propertyIdentifier\":\"_type.parentType.systemCode\",' +\n                            ' \"comparisonOperator\":\"=\",' +\n                            ' \"value\":\"productBundleGroupType\",' +\n                            ' \"ormtype\":\"string\",' +\n                            ' \"conditionDisplay\":\"Equals\"' +\n                            '},' +\n                            '{' +\n                            '\"logicalOperator\":\"AND\",' +\n                            ' \"propertyIdentifier\":\"_type.typeName\",' +\n                            ' \"comparisonOperator\":\"like\",' +\n                            ' \"ormtype\":\"string\",' +\n                            ' \"value\":\"%' + keyword + '%\"' +\n                            '  }' +\n                            ' ]' +\n                            ' }' +\n                            ']';\n                        return $hibachi.getEntity('type', { filterGroupsConfig: filterGroupsConfig.trim() })\n                            .then(function (value) {\n                            $log.debug('typesByKeyword');\n                            $log.debug(value);\n                            $scope.productBundleGroupTypes.value = value.pageRecords;\n                            var myLength = keyword.length;\n                            if (myLength > 0) {\n                                $scope.showAddProductBundleGroupTypeBtn = true;\n                            }\n                            else {\n                                $scope.showAddProductBundleGroupTypeBtn = false;\n                            }\n                            return $scope.productBundleGroupTypes.value;\n                        });\n                    };\n                    /**\n                     * Handles user selection of the dropdown.\n                     */\n                    $scope.selectProductBundleGroupType = function (item) {\n                        angular.extend($scope.productBundleGroup.data.productBundleGroupType.data, item);\n                        var parentType = $hibachi.newType();\n                        parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';\n                        $scope.productBundleGroup.data.productBundleGroupType.$$setParentType(parentType);\n                        $scope.showAddProductBundleGroupTypeBtn = false;\n                    };\n                    /**\n                     * Closes the add screen\n                     */\n                    $scope.closeAddScreen = function () {\n                        $scope.productBundleGroupTypes.$$adding = false;\n                        $scope.showAddProductBundleGroupTypeBtn = false;\n                    };\n                    /**\n                     * Clears the type name\n                     */\n                    $scope.clearTypeName = function () {\n                        if (angular.isDefined($scope.productBundleGroup.data.productBundleGroupType)) {\n                            $scope.productBundleGroup.data.productBundleGroupType.data.typeName = '';\n                        }\n                    };\n                    /**\n                     * Saves product bundle group type\n                     */\n                    $scope.saveProductBundleGroupType = function () {\n                        $scope.productBundleGroupTypeSaving = true;\n                        //Gets the promise from save                    \n                        var promise = $scope.productBundleGroup.data.productBundleGroupType.$$save();\n                        promise.then(function (response) {\n                            //Calls close function\n                            if (promise.$$state.status) {\n                                $scope.productBundleGroupTypeSaving = false;\n                                $scope.closeAddScreen();\n                            }\n                        }, function () {\n                            $scope.productBundleGroupTypeSaving = false;\n                        });\n                    };\n                    //Sets up clickOutside Directive call back arguments\n                    $scope.clickOutsideArgs = {\n                        callBackActions: [$scope.closeAddScreen]\n                    };\n                    /**\n                     * Works with swclickoutside directive to close dialog\n                     */\n                    $scope.closeThis = function (clickOutsideArgs) {\n                        //Check against the object state\n                        if (!$scope.productBundleGroup.data.productBundleGroupType.$$isPersisted()) {\n                            //Perform all callback actions\n                            for (var callBackAction in clickOutsideArgs.callBackActions) {\n                                clickOutsideArgs.callBackActions[callBackAction]();\n                            }\n                        }\n                    };\n                }]\n        };\n    }\n    SWProductBundleGroupType.Factory = function () {\n        var directive = function ($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder) { return new SWProductBundleGroupType($http, $log, $hibachi, formService, collectionConfigService, productBundlePartialsPath, productBundleService, slatwallPathBuilder); };\n        directive.$inject = [\n            '$http',\n            '$log',\n            '$hibachi',\n            'formService',\n            'collectionConfigService',\n            'productBundlePartialsPath',\n            'productBundleService',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWProductBundleGroupType;\n}());\nexports.SWProductBundleGroupType = SWProductBundleGroupType;\n\n\n//# sourceURL=webpack:///./productbundle/components/swproductbundlegrouptype.ts?")},"./productbundle/controllers/create-bundle-controller.ts":
/*!***************************************************************!*\
  !*** ./productbundle/controllers/create-bundle-controller.ts ***!
  \***************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar CreateBundleController = /** @class */ (function () {\n    //@ngInject\n    function CreateBundleController($scope, $location, $log, $rootScope, $window, $hibachi, dialogService, alertService, productBundleService, formService, productBundlePartialsPath) {\n        $scope.productBundlePartialsPath = productBundlePartialsPath;\n        var getParameterByName = function (name) {\n            name = name.replace(/[\\[]/, "\\\\[").replace(/[\\]]/, "\\\\]");\n            var regex = new RegExp("[\\\\?&]" + name + "=([^&#]*)"), results = regex.exec(location.search);\n            return results === null ? "" : decodeURIComponent(results[1].replace(/\\+/g, " "));\n        };\n        $scope.$id = "create-bundle-controller";\n        //if this view is part of the dialog section, call the inherited function\n        if (angular.isDefined($scope.scrollToTopOfDialog)) {\n            $scope.scrollToTopOfDialog();\n        }\n        var productID = getParameterByName(\'productID\');\n        var productBundleConstructor = function () {\n            $log.debug($scope);\n            if (angular.isDefined($scope.product)) {\n                for (var form in $scope.product.forms) {\n                    formService.resetForm($scope.product.forms[form]);\n                }\n                if (angular.isDefined($scope.product.data.skus[0])) {\n                    for (var form in $scope.product.data.skus[0].forms) {\n                        formService.resetForm($scope.product.data.skus[0].forms[form]);\n                    }\n                }\n                if (angular.isDefined($scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup)) {\n                    for (var form in $scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup.forms) {\n                        formService.resetForm($scope.product.data.skus[0].data.productBundleGroups.selectedProductBundleGroup.forms[form]);\n                    }\n                }\n            }\n            $scope.product = $hibachi.newProduct();\n            var brand = $hibachi.newBrand();\n            var productType = $hibachi.newProductType();\n            $scope.product.$$setBrand(brand);\n            $scope.product.$$setProductType(productType);\n            $scope.product.$$addSku();\n            $scope.product.data.skus[0].data.productBundleGroups = [];\n        };\n        $scope.productBundleGroup;\n        if (angular.isDefined(productID) && productID !== \'\') {\n            var productPromise = $hibachi.getProduct({ id: productID });\n            productPromise.promise.then(function () {\n                $log.debug(productPromise.value);\n                productPromise.value.$$getSkus().then(function () {\n                    productPromise.value.data.skus[0].$$getProductBundleGroups().then(function () {\n                        $scope.product = productPromise.value;\n                        angular.forEach($scope.product.data.skus[0].data.productBundleGroups, function (productBundleGroup) {\n                            productBundleGroup.$$getProductBundleGroupType();\n                            productBundleService.decorateProductBundleGroup(productBundleGroup);\n                            productBundleGroup.data.$$editing = false;\n                        });\n                    });\n                });\n            }, productBundleConstructor());\n        }\n        else {\n            productBundleConstructor();\n        }\n    }\n    return CreateBundleController;\n}());\nexports.CreateBundleController = CreateBundleController;\n\n\n//# sourceURL=webpack:///./productbundle/controllers/create-bundle-controller.ts?')},"./productbundle/productbundle.module.ts":
/*!***********************************************!*\
  !*** ./productbundle/productbundle.module.ts ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//modules\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//services\nvar productbundleservice_1 = __webpack_require__(/*! ./services/productbundleservice */ \"./productbundle/services/productbundleservice.ts\");\n//controllers\nvar create_bundle_controller_1 = __webpack_require__(/*! ./controllers/create-bundle-controller */ \"./productbundle/controllers/create-bundle-controller.ts\");\n//directives\nvar swproductbundlegrouptype_1 = __webpack_require__(/*! ./components/swproductbundlegrouptype */ \"./productbundle/components/swproductbundlegrouptype.ts\");\nvar swproductbundlegroups_1 = __webpack_require__(/*! ./components/swproductbundlegroups */ \"./productbundle/components/swproductbundlegroups.ts\");\nvar swproductbundlegroup_1 = __webpack_require__(/*! ./components/swproductbundlegroup */ \"./productbundle/components/swproductbundlegroup.ts\");\nvar swproductbundlecollectionfilteritemtypeahead_1 = __webpack_require__(/*! ./components/swproductbundlecollectionfilteritemtypeahead */ \"./productbundle/components/swproductbundlecollectionfilteritemtypeahead.ts\");\n//filters\nvar productbundlemodule = angular.module('hibachi.productbundle', [core_module_1.coremodule.name]).config(function () {\n})\n    //constants\n    .constant('productBundlePartialsPath', 'productbundle/components/')\n    //services\n    .service('productBundleService', productbundleservice_1.ProductBundleService)\n    //controllers\n    .controller('create-bundle-controller', create_bundle_controller_1.CreateBundleController)\n    //directives\n    .directive('swProductBundleGroupType', swproductbundlegrouptype_1.SWProductBundleGroupType.Factory())\n    .directive('swProductBundleGroups', swproductbundlegroups_1.SWProductBundleGroups.Factory())\n    .directive('swProductBundleGroup', swproductbundlegroup_1.SWProductBundleGroup.Factory())\n    .directive('swProductBundleCollectionFilterItemTypeahead', swproductbundlecollectionfilteritemtypeahead_1.SWProductBundleCollectionFilterItemTypeahead.Factory());\nexports.productbundlemodule = productbundlemodule;\n\n\n//# sourceURL=webpack:///./productbundle/productbundle.module.ts?")},"./productbundle/services/productbundleservice.ts":
/*!********************************************************!*\
  !*** ./productbundle/services/productbundleservice.ts ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ProductBundleService = /** @class */ (function () {\n    //ngInject\n    function ProductBundleService($log, $hibachi, utilityService) {\n        var _this = this;\n        this.$log = $log;\n        this.$hibachi = $hibachi;\n        this.utilityService = utilityService;\n        this.decorateProductBundleGroup = function (productBundleGroup) {\n            productBundleGroup.data.$$editing = true;\n            var prototype = {\n                $$setMinimumQuantity: function (quantity) {\n                    if (quantity < 0 || quantity === null) {\n                        this.minimumQuantity = 0;\n                    }\n                    if (quantity > this.maximumQuantity) {\n                        this.maximumQuantity = quantity;\n                    }\n                },\n                $$setMaximumQuantity: function (quantity) {\n                    if (quantity < 1 || quantity === null) {\n                        this.maximumQuantity = 1;\n                    }\n                    if (this.maximumQuantity < this.minimumQuantity) {\n                        this.minimumQuantity = this.maximumQuantity;\n                    }\n                },\n                $$setActive: function (value) {\n                    this.active = value;\n                },\n                $$toggleEdit: function () {\n                    if (angular.isUndefined(this.$$editing) || this.$$editing === false) {\n                        this.$$editing = true;\n                    }\n                    else {\n                        this.$$editing = false;\n                    }\n                }\n            };\n            angular.extend(productBundleGroup.data, prototype);\n        };\n        this.formatProductBundleGroupFilters = function (productBundleGroupFilters, filterTerm) {\n            _this.$log.debug('FORMATTING PRODUCT BUNDLE FILTERs');\n            _this.$log.debug(productBundleGroupFilters);\n            _this.$log.debug(filterTerm);\n            if (filterTerm.value === 'sku') {\n                for (var i in productBundleGroupFilters) {\n                    productBundleGroupFilters[i].name = productBundleGroupFilters[i][filterTerm.value + 'Code'];\n                    productBundleGroupFilters[i].type = filterTerm.name;\n                    productBundleGroupFilters[i].entityType = filterTerm.value;\n                    productBundleGroupFilters[i].propertyIdentifier = '_sku.skuID';\n                }\n            }\n            else {\n                for (var i in productBundleGroupFilters) {\n                    productBundleGroupFilters[i].name = productBundleGroupFilters[i][filterTerm.value + 'Name'];\n                    productBundleGroupFilters[i].type = filterTerm.name;\n                    productBundleGroupFilters[i].entityType = filterTerm.value;\n                    if (filterTerm.value === 'brand' || filterTerm.value === 'productType') {\n                        productBundleGroupFilters[i].propertyIdentifier = '_sku.product.' + filterTerm.value + '.' + filterTerm.value + 'ID';\n                    }\n                    else {\n                        productBundleGroupFilters[i].propertyIdentifier = '_sku.' + filterTerm.value + '.' + filterTerm.value + 'ID';\n                    }\n                }\n            }\n            _this.$log.debug(productBundleGroupFilters);\n            return productBundleGroupFilters;\n        };\n        this.$log = $log;\n        this.$hibachi = $hibachi;\n        this.utilityService = utilityService;\n    }\n    return ProductBundleService;\n}());\nexports.ProductBundleService = ProductBundleService;\n\n\n//# sourceURL=webpack:///./productbundle/services/productbundleservice.ts?")},"./sku/components/swaddskupricemodallauncher.ts":
/*!******************************************************!*\
  !*** ./sku/components/swaddskupricemodallauncher.ts ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWAddSkuPriceModalLauncherController = /** @class */ (function () {\n    //@ngInject\n    function SWAddSkuPriceModalLauncherController($hibachi, entityService, formService, listingService, observerService, skuPriceService, utilityService) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.entityService = entityService;\n        this.formService = formService;\n        this.listingService = listingService;\n        this.observerService = observerService;\n        this.skuPriceService = skuPriceService;\n        this.utilityService = utilityService;\n        this.baseName = "j-add-sku-item-";\n        this.currencyCodeEditable = false;\n        this.saveSuccess = true;\n        this.updateCurrencyCodeSelector = function (args) {\n            if (args != \'All\') {\n                _this.skuPrice.data.currencyCode = args;\n                _this.currencyCodeEditable = false;\n            }\n            else {\n                _this.currencyCodeEditable = true;\n            }\n            _this.observerService.notify("pullBindings");\n        };\n        this.initData = function () {\n            //these are populated in the link function initially\n            _this.skuPrice = _this.entityService.newEntity(\'SkuPrice\');\n            _this.skuPrice.$$setSku(_this.sku);\n            _this.skuPrice.$$setPriceGroup(_this.priceGroup);\n            if (angular.isUndefined(_this.disableAllFieldsButPrice)) {\n                _this.disableAllFieldsButPrice = false;\n            }\n            if (angular.isUndefined(_this.defaultCurrencyOnly)) {\n                _this.defaultCurrencyOnly = false;\n            }\n            if (angular.isDefined(_this.minQuantity) && !isNaN(parseInt(_this.minQuantity))) {\n                _this.skuPrice.data.minQuantity = parseInt(_this.minQuantity);\n            }\n            if (angular.isDefined(_this.maxQuantity) && !isNaN(parseInt(_this.minQuantity))) {\n                _this.skuPrice.data.maxQuantity = parseInt(_this.maxQuantity);\n            }\n            if (angular.isUndefined(_this.currencyCodeOptions) && angular.isDefined(_this.eligibleCurrencyCodeList)) {\n                _this.currencyCodeOptions = _this.eligibleCurrencyCodeList.split(",");\n            }\n            if (_this.defaultCurrencyOnly) {\n                _this.skuPrice.data.currencyCode = "USD"; //temporarily hardcoded\n            }\n            else if (angular.isDefined(_this.currencyCode)) {\n                _this.skuPrice.data.currencyCode = _this.currencyCode;\n            }\n            else if (angular.isDefined(_this.currencyCodeOptions) && _this.currencyCodeOptions.length) {\n                _this.skuPrice.data.currencyCode = _this.currencyCodeOptions[0];\n            }\n            if (angular.isDefined(_this.priceGroupId)) {\n                _this.skuPrice.data.priceGroup_priceGroupID = _this.priceGroupId;\n            }\n            _this.observerService.notify("pullBindings");\n        };\n        this.save = function () {\n            _this.observerService.notify("updateBindings");\n            var firstSkuPriceForSku = !_this.skuPriceService.hasSkuPrices(_this.sku.data.skuID);\n            var savePromise = _this.skuPrice.$$save();\n            savePromise.then(function (response) {\n                if (firstSkuPriceForSku) {\n                    _this.observerService.notifyById(\'swPaginationAction\', _this.listingID, { type: \'setCurrentPage\', payload: 1 });\n                }\n                _this.saveSuccess = true;\n                _this.observerService.notify(\'skuPricesUpdate\', { skuID: _this.sku.data.skuID, refresh: true });\n                //temporarily overriding for USD need to get this setting accessable to client side\n                if (angular.isDefined(_this.listingID) &&\n                    _this.skuPrice.data.currencyCode == "USD") {\n                    var pageRecords = _this.listingService.getListingPageRecords(_this.listingID);\n                    for (var i = 0; i < pageRecords.length; i++) {\n                        if (angular.isDefined(pageRecords[i].skuID) &&\n                            pageRecords[i].skuID == _this.sku.data.skuID) {\n                            var skuPageRecord = pageRecords[i];\n                            var index = i + 1;\n                            while (index < pageRecords.length && angular.isUndefined(pageRecords[index].skuID)) {\n                                //if there is a place in the listing to insert the new sku price lets insert it\n                                if ((pageRecords[index].minQuantity <= _this.skuPrice.data.minQuantity) &&\n                                    (index + 1 < pageRecords.length && (pageRecords[index + 1].minQuantity >= _this.skuPrice.data.minQuantity ||\n                                        angular.isDefined(pageRecords[index + 1].skuID))) || index + 1 == pageRecords.length) {\n                                    _this.skuPrice.data.eligibleCurrencyCodeList = _this.currencyCodeOptions.join(",");\n                                    //spoof the page record\n                                    var skuPriceForListing = {};\n                                    for (var key in _this.skuPrice.data) {\n                                        skuPriceForListing[key] = _this.skuPrice.data[key];\n                                    }\n                                    skuPriceForListing["sku_skuID"] = _this.sku.skuID;\n                                    skuPriceForListing["sku_skuCode"] = _this.sku.skuCode;\n                                    skuPriceForListing["sku_calculatedSkuDefinition"] = _this.sku.calculatedSkuDefinition || pageRecords[index][\'sku_calculatedSkuDefinition\'];\n                                    _this.skuPrice.$$getPriceGroup().then(function (data) {\n                                        skuPriceForListing["priceGroup_priceGroupID"] = _this.skuPrice.priceGroup.priceGroupID;\n                                        skuPriceForListing["priceGroup_priceGroupCode"] = _this.skuPrice.priceGroup.priceGroupCode;\n                                        pageRecords.splice(index + 1, 0, skuPriceForListing);\n                                    });\n                                    break;\n                                }\n                                index++;\n                            }\n                        }\n                    }\n                }\n            }, function (reason) {\n                //error callback\n                _this.saveSuccess = false;\n            }).finally(function () {\n                if (_this.saveSuccess) {\n                    for (var key in _this.skuPrice.data) {\n                        if (key != \'sku\' && key != \'currencyCode\') {\n                            _this.skuPrice.data[key] = null;\n                        }\n                    }\n                    _this.formService.resetForm(_this.formName);\n                    _this.initData();\n                    // if(firstSkuPriceForSku){\n                    //     this.listingService.getCollection(this.listingID); \n                    // }\n                    _this.listingService.notifyListingPageRecordsUpdate(_this.listingID);\n                }\n            });\n            return savePromise;\n        };\n        this.uniqueName = this.baseName + this.utilityService.createID(16);\n        this.formName = "addSkuPrice" + this.utilityService.createID(16);\n        this.skuPrice = this.entityService.newEntity(\'SkuPrice\');\n    }\n    return SWAddSkuPriceModalLauncherController;\n}());\nexports.SWAddSkuPriceModalLauncherController = SWAddSkuPriceModalLauncherController;\nvar SWAddSkuPriceModalLauncher = /** @class */ (function () {\n    function SWAddSkuPriceModalLauncher($hibachi, entityService, observerService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.entityService = entityService;\n        this.observerService = observerService;\n        this.scopeService = scopeService;\n        this.collectionConfigService = collectionConfigService;\n        this.skuPartialsPath = skuPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.skuData = {};\n        this.transclude = true;\n        this.bindToController = {\n            sku: "=?",\n            pageRecord: "=?",\n            minQuantity: "@?",\n            maxQuantity: "@?",\n            priceGroupId: "@?",\n            currencyCode: "@?",\n            eligibleCurrencyCodeList: "@?",\n            defaultCurrencyOnly: "=?",\n            disableAllFieldsButPrice: "=?"\n        };\n        this.controller = SWAddSkuPriceModalLauncherController;\n        this.controllerAs = "swAddSkuPriceModalLauncher";\n        this.compile = function (element, attrs) {\n            return {\n                pre: function ($scope, element, attrs) {\n                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive\n                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");\n                    if (angular.isDefined(currentScope.pageRecord)) {\n                        $scope.swAddSkuPriceModalLauncher.pageRecord = currentScope.pageRecord;\n                        //sku record case\n                        if (angular.isDefined(currentScope.pageRecord.skuID)) {\n                            var skuData = {\n                                skuID: currentScope.pageRecord.skuID,\n                                skuCode: currentScope.pageRecord.skuCode,\n                                skuDescription: currentScope.pageRecord.skuDescription,\n                                eligibleCurrencyCodeList: currentScope.pageRecord.eligibleCurrencyCodeList,\n                                imagePath: currentScope.pageRecord.imagePath\n                            };\n                            $scope.swAddSkuPriceModalLauncher.currencyCodeOptions = currentScope.pageRecord.eligibleCurrencyCodeList.split(",");\n                            $scope.swAddSkuPriceModalLauncher.sku = _this.$hibachi.populateEntity(\'Sku\', skuData);\n                            $scope.swAddSkuPriceModalLauncher.priceGroup = _this.$hibachi.newEntity(\'PriceGroup\');\n                            $scope.swAddSkuPriceModalLauncher.skuPrice = _this.entityService.newEntity(\'SkuPrice\');\n                            $scope.swAddSkuPriceModalLauncher.skuPrice.$$setSku($scope.swAddSkuPriceModalLauncher.sku);\n                        }\n                    }\n                    else {\n                        throw ("swAddSkuPriceModalLauncher was unable to find the pageRecord that it needs!");\n                    }\n                    var listingScope = _this.scopeService.getRootParentScope($scope, "swListingDisplay");\n                    if (angular.isDefined(listingScope.swListingDisplay)) {\n                        $scope.swAddSkuPriceModalLauncher.listingID = listingScope.swListingDisplay.tableID;\n                        $scope.swAddSkuPriceModalLauncher.selectCurrencyCodeEventName = "currencyCodeSelect" + listingScope.swListingDisplay.baseEntityId;\n                        _this.observerService.attach($scope.swAddSkuPriceModalLauncher.updateCurrencyCodeSelector, $scope.swAddSkuPriceModalLauncher.selectCurrencyCodeEventName);\n                    }\n                    else {\n                        throw ("swAddSkuPriceModalLauncher couldn\'t find listing scope");\n                    }\n                    $scope.swAddSkuPriceModalLauncher.initData();\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "addskupricemodallauncher.html";\n    }\n    SWAddSkuPriceModalLauncher.Factory = function () {\n        var directive = function ($hibachi, entityService, observerService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder) { return new SWAddSkuPriceModalLauncher($hibachi, entityService, observerService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$hibachi\',\n            \'entityService\',\n            \'observerService\',\n            \'scopeService\',\n            \'collectionConfigService\',\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWAddSkuPriceModalLauncher;\n}());\nexports.SWAddSkuPriceModalLauncher = SWAddSkuPriceModalLauncher;\n\n\n//# sourceURL=webpack:///./sku/components/swaddskupricemodallauncher.ts?')},"./sku/components/swdefaultskuradio.ts":
/*!*********************************************!*\
  !*** ./sku/components/swdefaultskuradio.ts ***!
  \*********************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWDefaultSkuRadioController = /** @class */ (function () {\n    //@ngInject\n    function SWDefaultSkuRadioController($hibachi, defaultSkuService) {\n        this.$hibachi = $hibachi;\n        this.defaultSkuService = defaultSkuService;\n        if (angular.isDefined(this.listingDisplayId) && angular.isDefined(this.columnId)) {\n            this.selectionId = this.listingDisplayId + this.columnId;\n        }\n        else if (angular.isDefined(this.listingDisplayId)) {\n            this.selectionId = this.listingDisplayId;\n        }\n        else {\n            throw ("You must provide the listingDisplayId to SWDefaultSkuRadioController");\n        }\n        defaultSkuService.attachObserver(this.selectionId, this.productProductId);\n        if (angular.isUndefined(this.selectionFieldName)) {\n            this.selectionFieldName = this.selectionId + \'selection\';\n        }\n        if (angular.isUndefined(this.skuId) && angular.isUndefined(this.sku)) {\n            throw ("You must provide a skuID to SWDefaultSkuRadioController");\n        }\n        this.isDefaultSku = (this.skuId == this.productDefaultSkuSkuId);\n        if (angular.isUndefined(this.sku)) {\n            var skuData = {\n                skuID: this.skuId\n            };\n            this.sku = this.$hibachi.populateEntity(\'Sku\', skuData);\n        }\n    }\n    return SWDefaultSkuRadioController;\n}());\nexports.SWDefaultSkuRadioController = SWDefaultSkuRadioController;\nvar SWDefaultSkuRadio = /** @class */ (function () {\n    function SWDefaultSkuRadio(skuPartialsPath, slatwallPathBuilder) {\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.bindToController = {\n            skuId: "@",\n            sku: "=?",\n            productProductId: "@?",\n            productDefaultSkuSkuId: "@?",\n            productId: "@?",\n            listingDisplayId: "@?",\n            columnId: "@?"\n        };\n        this.controller = SWDefaultSkuRadioController;\n        this.controllerAs = "swDefaultSkuRadio";\n        this.compile = function (element, attrs) {\n            return {\n                pre: function ($scope, element, attrs) {\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "defaultskuradio.html";\n    }\n    SWDefaultSkuRadio.Factory = function () {\n        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWDefaultSkuRadio(skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWDefaultSkuRadio;\n}());\nexports.SWDefaultSkuRadio = SWDefaultSkuRadio;\n\n\n//# sourceURL=webpack:///./sku/components/swdefaultskuradio.ts?')},"./sku/components/swdeleteskupricemodallauncher.ts":
/*!*********************************************************!*\
  !*** ./sku/components/swdeleteskupricemodallauncher.ts ***!
  \*********************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWDeleteSkuPriceModalLauncherController = /** @class */ (function () {\n    //@ngInject\n    function SWDeleteSkuPriceModalLauncherController($q, $hibachi, listingService, skuPriceService, utilityService, observerService) {\n        var _this = this;\n        this.$q = $q;\n        this.$hibachi = $hibachi;\n        this.listingService = listingService;\n        this.skuPriceService = skuPriceService;\n        this.utilityService = utilityService;\n        this.observerService = observerService;\n        this.baseName = \"j-delete-sku-item-\";\n        this.delete = function () {\n            var priceGroupID = undefined;\n            if (_this.skuPrice.data.priceGroup) {\n                priceGroupID = _this.skuPrice.data.priceGroup.data.priceGroupID;\n            }\n            var skuPricesToDelete = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuId, _this.skuPrice.data.minQuantity, _this.skuPrice.data.maxQuantity, undefined, priceGroupID);\n            var deletePromises = [];\n            skuPricesToDelete.then(function (skuPrices) {\n                for (var i = 0; i < skuPrices.length; i++) {\n                    if (skuPrices[i].data.skuPriceID.length) {\n                        deletePromises.push(skuPrices[i].$$delete());\n                    }\n                }\n            }, function (reason) {\n                //error\n            }).finally(function () {\n                _this.$q.all(deletePromises).then(function (response) {\n                    if (angular.isDefined(_this.listingID)) {\n                        var pageRecords = _this.listingService.getListingPageRecords(_this.listingID);\n                        for (var i = 0; i < pageRecords.length; i++) {\n                            if (angular.isDefined(pageRecords[i].skuPriceID) &&\n                                _this.skuPrice.data.skuPriceID == pageRecords[i].skuPriceID) {\n                                pageRecords.splice(i, 1);\n                                break;\n                            }\n                        }\n                    }\n                });\n            });\n            return _this.$q.all(deletePromises);\n        };\n        this.uniqueName = this.baseName + this.utilityService.createID(16);\n    }\n    return SWDeleteSkuPriceModalLauncherController;\n}());\nexports.SWDeleteSkuPriceModalLauncherController = SWDeleteSkuPriceModalLauncherController;\nvar SWDeleteSkuPriceModalLauncher = /** @class */ (function () {\n    function SWDeleteSkuPriceModalLauncher($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.scopeService = scopeService;\n        this.skuPartialsPath = skuPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = 'EA';\n        this.scope = {};\n        this.bindToController = {\n            pageRecord: \"=?\"\n        };\n        this.controller = SWDeleteSkuPriceModalLauncherController;\n        this.controllerAs = \"swDeleteSkuPriceModalLauncher\";\n        this.compile = function (element, attrs) {\n            return {\n                pre: function ($scope, element, attrs) {\n                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive\n                    var currentScope = _this.scopeService.getRootParentScope($scope, \"pageRecord\");\n                    if (angular.isDefined(currentScope.pageRecord)) {\n                        $scope.swDeleteSkuPriceModalLauncher.pageRecord = currentScope.pageRecord;\n                        if (angular.isDefined(currentScope.pageRecord.sku_skuID)) {\n                            $scope.swDeleteSkuPriceModalLauncher.skuId = currentScope.pageRecord.sku_skuID;\n                        }\n                        if (angular.isDefined(currentScope.pageRecord.skuPriceID) && currentScope.pageRecord.skuPriceID.length) {\n                            var skuPriceData = {\n                                skuPriceID: currentScope.pageRecord.skuPriceID,\n                                minQuantity: currentScope.pageRecord.minQuantity,\n                                maxQuantity: currentScope.pageRecord.maxQuantity,\n                                currencyCode: currentScope.pageRecord.currencyCode,\n                                price: currentScope.pageRecord.price\n                            };\n                            $scope.swDeleteSkuPriceModalLauncher.skuPrice = _this.$hibachi.populateEntity('SkuPrice', skuPriceData);\n                            var priceGroup = _this.$hibachi.populateEntity('PriceGroup', { priceGroupID: currentScope.pageRecord.priceGroup_priceGroupID });\n                            $scope.swDeleteSkuPriceModalLauncher.skuPrice.$$setPriceGroup(priceGroup);\n                        }\n                    }\n                    else {\n                        throw (\"swDeleteSkuPriceModalLauncher was unable to find the pageRecord that it needs!\");\n                    }\n                    var listingScope = _this.scopeService.getRootParentScope($scope, \"swListingDisplay\");\n                    if (angular.isDefined(listingScope.swListingDisplay)) {\n                        $scope.swDeleteSkuPriceModalLauncher.listingID = listingScope.swListingDisplay.tableID;\n                    }\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + \"deleteskupricemodallauncher.html\";\n    }\n    SWDeleteSkuPriceModalLauncher.Factory = function () {\n        var directive = function ($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWDeleteSkuPriceModalLauncher($hibachi, scopeService, skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            '$hibachi',\n            'scopeService',\n            'skuPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWDeleteSkuPriceModalLauncher;\n}());\nexports.SWDeleteSkuPriceModalLauncher = SWDeleteSkuPriceModalLauncher;\n\n\n//# sourceURL=webpack:///./sku/components/swdeleteskupricemodallauncher.ts?")},"./sku/components/sweditskupricemodallauncher.ts":
/*!*******************************************************!*\
  !*** ./sku/components/sweditskupricemodallauncher.ts ***!
  \*******************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWEditSkuPriceModalLauncherController = /** @class */ (function () {\n    //@ngInject\n    function SWEditSkuPriceModalLauncherController($hibachi, entityService, formService, listingService, observerService, skuPriceService, utilityService, scopeService, $scope) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.entityService = entityService;\n        this.formService = formService;\n        this.listingService = listingService;\n        this.observerService = observerService;\n        this.skuPriceService = skuPriceService;\n        this.utilityService = utilityService;\n        this.scopeService = scopeService;\n        this.$scope = $scope;\n        this.baseName = "j-add-sku-item-";\n        this.currencyCodeEditable = false;\n        this.saveSuccess = true;\n        this.updateCurrencyCodeSelector = function (args) {\n            if (args != \'All\') {\n                _this.skuPrice.data.currencyCode = args;\n                _this.currencyCodeEditable = false;\n            }\n            else {\n                _this.currencyCodeEditable = true;\n            }\n            _this.observerService.notify("pullBindings");\n        };\n        this.initData = function () {\n            //these are populated in the link function initially\n            if (angular.isUndefined(_this.disableAllFieldsButPrice)) {\n                _this.disableAllFieldsButPrice = false;\n            }\n            if (angular.isUndefined(_this.defaultCurrencyOnly)) {\n                _this.defaultCurrencyOnly = false;\n            }\n            if (angular.isDefined(_this.minQuantity) && !isNaN(parseInt(_this.minQuantity))) {\n                _this.skuPrice.data.minQuantity = parseInt(_this.minQuantity);\n            }\n            if (angular.isDefined(_this.maxQuantity) && !isNaN(parseInt(_this.minQuantity))) {\n                _this.skuPrice.data.maxQuantity = parseInt(_this.maxQuantity);\n            }\n            if (angular.isDefined(_this.priceGroupId)) {\n                _this.skuPrice.data.priceGroup.data.priceGroupId = parseInt(_this.priceGroupId);\n            }\n            if (angular.isUndefined(_this.currencyCodeOptions) && angular.isDefined(_this.eligibleCurrencyCodeList)) {\n                _this.currencyCodeOptions = _this.eligibleCurrencyCodeList.split(",");\n            }\n            if (_this.defaultCurrencyOnly) {\n                _this.skuPrice.data.currencyCode = "USD"; //temporarily hardcoded\n            }\n            else if (angular.isDefined(_this.currencyCode)) {\n                _this.skuPrice.data.currencyCode = _this.currencyCode;\n            }\n            else if (angular.isDefined(_this.currencyCodeOptions) && _this.currencyCodeOptions.length) {\n                _this.skuPrice.data.currencyCode = _this.currencyCodeOptions[0];\n            }\n            _this.observerService.notify("pullBindings");\n        };\n        this.save = function () {\n            _this.observerService.notify("updateBindings");\n            var firstSkuPriceForSku = !_this.skuPriceService.hasSkuPrices(_this.sku.data.skuID);\n            var savePromise = _this.skuPrice.$$save();\n            savePromise.then(function (response) {\n                _this.saveSuccess = true;\n                _this.observerService.notify(\'skuPricesUpdate\', { skuID: _this.sku.data.skuID, refresh: true });\n                //temporarily overriding for USD need to get this setting accessable to client side\n                if (angular.isDefined(_this.listingID) &&\n                    _this.skuPrice.data.currencyCode == "USD") {\n                    var pageRecords = _this.listingService.getListingPageRecords(_this.listingID);\n                    for (var i = 0; i < pageRecords.length; i++) {\n                        if (angular.isDefined(pageRecords[i].skuID) &&\n                            pageRecords[i].skuID == _this.sku.data.skuID) {\n                            var skuPageRecord = pageRecords[i];\n                            var index = i + 1;\n                            while (index < pageRecords.length && angular.isUndefined(pageRecords[index].skuID)) {\n                                //let\'s find and update the sku price\n                                if (pageRecords[index].skuPriceID === _this.skuPrice.skuPriceID) {\n                                    _this.skuPrice.data.eligibleCurrencyCodeList = _this.currencyCodeOptions.join(",");\n                                    //spoof the page record\n                                    var skuPriceForListing = {};\n                                    for (var key in _this.skuPrice.data) {\n                                        skuPriceForListing[key] = _this.skuPrice.data[key];\n                                    }\n                                    skuPriceForListing["sku_skuID"] = _this.sku.skuID;\n                                    skuPriceForListing["sku_skuCode"] = _this.sku.skuCode;\n                                    skuPriceForListing["sku_calculatedSkuDefinition"] = _this.sku.calculatedSkuDefinition;\n                                    skuPriceForListing["priceGroup_priceGroupCode"] = skuPriceForListing.selectedpriceGroup.priceGroupCode;\n                                    skuPriceForListing["priceGroup_priceGroupID"] = skuPriceForListing.selectedpriceGroup.priceGroupID;\n                                    pageRecords[index] = skuPriceForListing;\n                                    break;\n                                }\n                                index++;\n                            }\n                        }\n                    }\n                }\n            }, function (reason) {\n                //error callback\n                _this.saveSuccess = false;\n            }).finally(function () {\n                if (_this.saveSuccess) {\n                    for (var key in _this.skuPrice.data) {\n                        if (key != \'sku\' && key != \'currencyCode\') {\n                            _this.skuPrice.data[key] = null;\n                        }\n                    }\n                    _this.formService.resetForm(_this.formName);\n                    _this.initData();\n                    if (firstSkuPriceForSku) {\n                        _this.listingService.getCollection(_this.listingID);\n                    }\n                    _this.listingService.notifyListingPageRecordsUpdate(_this.listingID);\n                }\n            });\n            return savePromise;\n        };\n        this.uniqueName = this.baseName + this.utilityService.createID(16);\n        this.formName = "editSkuPrice" + this.utilityService.createID(16);\n        //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive\n        var currentScope = this.scopeService.getRootParentScope($scope, "pageRecord");\n        if (angular.isDefined(currentScope.pageRecord)) {\n            this.pageRecord = currentScope.pageRecord;\n            //sku record case\n            if (angular.isDefined(currentScope.pageRecord["sku_skuID"]) && angular.isDefined(currentScope.pageRecord.skuPriceID) && currentScope.pageRecord.skuPriceID.length) {\n                var skuData = {\n                    skuID: currentScope.pageRecord["sku_skuID"],\n                    skuCode: currentScope.pageRecord["sku_skuCode"],\n                    calculatedSkuDefinition: currentScope.pageRecord["sku_calculatedSkuDefinition"]\n                };\n                var skuPriceData = {\n                    skuPriceID: currentScope.pageRecord.skuPriceID,\n                    minQuantity: currentScope.pageRecord.minQuantity,\n                    maxQuantity: currentScope.pageRecord.maxQuantity,\n                    currencyCode: currentScope.pageRecord.currencyCode,\n                    price: currentScope.pageRecord.price\n                };\n                var priceGroupData = {\n                    priceGroupID: currentScope.pageRecord["priceGroup_priceGroupID"],\n                    priceGroupCode: currentScope.pageRecord["priceGroup_priceGroupCode"]\n                };\n                this.sku = this.$hibachi.populateEntity(\'Sku\', skuData);\n                this.skuPrice = this.$hibachi.populateEntity(\'SkuPrice\', skuPriceData);\n                this.priceGroup = this.$hibachi.populateEntity(\'PriceGroup\', priceGroupData);\n                this.skuPrice.$$setPriceGroup(this.priceGroup);\n                this.skuPrice.$$setSku(this.sku);\n                this.currencyCodeOptions = ["USD"]; //hard-coded for now\n            }\n            else {\n                return;\n            }\n        }\n        else {\n            throw ("swEditSkuPriceModalLauncher was unable to find the pageRecord that it needs!");\n        }\n        var listingScope = this.scopeService.getRootParentScope($scope, "swListingDisplay");\n        if (angular.isDefined(listingScope.swListingDisplay)) {\n            this.listingID = listingScope.swListingDisplay.tableID;\n            this.selectCurrencyCodeEventName = "currencyCodeSelect" + listingScope.swListingDisplay.baseEntityId;\n            this.defaultCurrencyOnly = true;\n            this.observerService.attach(this.updateCurrencyCodeSelector, this.selectCurrencyCodeEventName);\n        }\n        else {\n            throw ("swEditSkuPriceModalLauncher couldn\'t find listing scope");\n        }\n        this.initData();\n    }\n    return SWEditSkuPriceModalLauncherController;\n}());\nexports.SWEditSkuPriceModalLauncherController = SWEditSkuPriceModalLauncherController;\nvar SWEditSkuPriceModalLauncher = /** @class */ (function () {\n    function SWEditSkuPriceModalLauncher($hibachi, entityService, observerService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder) {\n        this.$hibachi = $hibachi;\n        this.entityService = entityService;\n        this.observerService = observerService;\n        this.scopeService = scopeService;\n        this.collectionConfigService = collectionConfigService;\n        this.skuPartialsPath = skuPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.skuData = {};\n        this.transclude = true;\n        this.bindToController = {\n            sku: "=?",\n            pageRecord: "=?",\n            minQuantity: "@?",\n            maxQuantity: "@?",\n            priceGroupId: "@?",\n            currencyCode: "@?",\n            eligibleCurrencyCodeList: "@?",\n            defaultCurrencyOnly: "=?",\n            disableAllFieldsButPrice: "=?"\n        };\n        this.controller = SWEditSkuPriceModalLauncherController;\n        this.controllerAs = "swEditSkuPriceModalLauncher";\n        this.compile = function (element, attrs) {\n            return {\n                pre: function ($scope, element, attrs) {\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "editskupricemodallauncher.html";\n    }\n    SWEditSkuPriceModalLauncher.Factory = function () {\n        var directive = function ($hibachi, entityService, observerService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder) { return new SWEditSkuPriceModalLauncher($hibachi, entityService, observerService, scopeService, collectionConfigService, skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$hibachi\',\n            \'entityService\',\n            \'observerService\',\n            \'scopeService\',\n            \'collectionConfigService\',\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWEditSkuPriceModalLauncher;\n}());\nexports.SWEditSkuPriceModalLauncher = SWEditSkuPriceModalLauncher;\n\n\n//# sourceURL=webpack:///./sku/components/sweditskupricemodallauncher.ts?')},"./sku/components/swimagedetailmodallauncher.ts":
/*!******************************************************!*\
  !*** ./sku/components/swimagedetailmodallauncher.ts ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWImageDetailModalLauncherController = /** @class */ (function () {\n    //@ngInject\n    function SWImageDetailModalLauncherController(observerService, formService, fileService, collectionConfigService, utilityService, $hibachi, $http, $element) {\n        var _this = this;\n        this.observerService = observerService;\n        this.formService = formService;\n        this.fileService = fileService;\n        this.collectionConfigService = collectionConfigService;\n        this.utilityService = utilityService;\n        this.$hibachi = $hibachi;\n        this.$http = $http;\n        this.$element = $element;\n        this.baseName = \"j-image-detail\";\n        this.imageOptions = [];\n        this.numberOfSkusWithImageFile = 0;\n        this.fetchImageOptionData = function () {\n            _this.imageOptionsAttachedToSku = _this.collectionConfigService.newCollectionConfig(\"Option\");\n            _this.imageOptionsAttachedToSku.addDisplayProperty('optionGroup.optionGroupName,optionName,optionCode,optionID');\n            _this.imageOptionsAttachedToSku.addFilter('skus.skuID', _this.skuId, \"=\");\n            _this.imageOptionsAttachedToSku.addFilter('optionGroup.imageGroupFlag', true, \"=\");\n            _this.imageOptionsAttachedToSku.setAllRecords(true);\n            _this.imageOptionsAttachedToSku.getEntity().then(function (data) {\n                angular.forEach(data.records, function (value, key) {\n                    _this.imageOptions.push(_this.$hibachi.populateEntity(\"Option\", value));\n                });\n            }, function (reason) {\n                throw (\"Could not calculate affected skus in SWImageDetailModalLauncher because of: \" + reason);\n            });\n            _this.otherSkusWithSameImageCollectionConfig = _this.collectionConfigService.newCollectionConfig(\"Sku\");\n            _this.otherSkusWithSameImageCollectionConfig.addFilter(\"imageFile\", _this.imageFile, \"=\");\n            _this.otherSkusWithSameImageCollectionConfig.setAllRecords(true);\n            _this.otherSkusWithSameImageCollectionConfig.getEntity().then(function (data) {\n                _this.skusAffectedCount = data.records.length;\n            }, function (reason) {\n                throw (\"Could not calculate affected skus in SWImageDetailModalLauncher because of: \" + reason);\n            });\n        };\n        this.updateImage = function (rawImage) {\n            console.log('update');\n        };\n        this.saveAction = function () {\n            var data = new FormData();\n            data.append('slatAction', \"admin:entity.processProduct\");\n            data.append('processContext', \"uploadDefaultImage\");\n            data.append('sRedirectAction', \"admin:entity.detailProduct\");\n            data.append('preprocessDisplayedFlag', \"1\");\n            data.append('ajaxRequest', \"1\");\n            data.append('productID', _this.swPricingManager.productId);\n            if (_this.sku.data.imageFile) {\n                data.append('imageFile', _this.sku.data.imageFile);\n            }\n            else if (_this.imageFileName) {\n                data.append('imageFile', _this.imageFileName);\n            }\n            var inputs = $('input[type=file]');\n            for (var _i = 0, _a = inputs; _i < _a.length; _i++) {\n                var input = _a[_i];\n                var classes = $(input).attr('class').split(' ');\n                if (input.files[0] && classes.indexOf(_this.skuCode) > -1) {\n                    data.append('uploadFile', input.files[0]);\n                    break;\n                }\n            }\n            var savePromise = _this.$http.post(\"/?s=1\", data, {\n                transformRequest: angular.identity,\n                headers: { 'Content-Type': undefined }\n            }).then(function () {\n                _this.sku.data.imagePath = _this.imageFileName.split('?')[0] + \"?version=\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n                _this.observerService.notifyById('swPaginationAction', _this.swListingDisplay.tableID, { type: 'setCurrentPage', payload: _this.swListingDisplay.collectionConfig.currentPage });\n            });\n            return savePromise;\n        };\n        this.cancelAction = function () {\n            _this.observerService.notify(_this.imageFileUpdateEvent, _this.imagePath);\n        };\n        this.$element = $element;\n        this.name = this.baseName + this.utilityService.createID(18);\n        this.imagePath;\n        fileService.imageExists(this.imagePath).then(function () {\n            _this.imagePathToUse = _this.imagePath + \"?version=\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n        }, function () {\n            _this.imagePathToUse = 'assets/images/image-placeholder.jpg';\n        }).finally(function () {\n            var skuData = {\n                skuID: _this.skuId,\n                skuCode: _this.skuCode,\n                imageFileName: _this.imageFileName,\n                imagePath: _this.imagePathToUse,\n                imageFile: _this.imageFile\n            };\n            _this.sku = _this.$hibachi.populateEntity(\"Sku\", skuData);\n            _this.imageFileUpdateEvent = \"file:\" + _this.imagePath;\n            _this.observerService.attach(_this.updateImage, _this.imageFileUpdateEvent, _this.skuId);\n            _this.fetchImageOptionData();\n        });\n    }\n    return SWImageDetailModalLauncherController;\n}());\nexports.SWImageDetailModalLauncherController = SWImageDetailModalLauncherController;\nvar SWImageDetailModalLauncher = /** @class */ (function () {\n    function SWImageDetailModalLauncher(skuPartialsPath, slatwallPathBuilder) {\n        this.restrict = 'EA';\n        this.scope = {};\n        this.require = { swPricingManager: '?^swPricingManager', swListingDisplay: \"?^swListingDisplay\" };\n        this.bindToController = {\n            skuId: \"@\",\n            skuCode: \"@\",\n            imagePath: \"@\",\n            imageFile: \"@\",\n            imageFileName: \"@\"\n        };\n        this.controller = SWImageDetailModalLauncherController;\n        this.controllerAs = \"swImageDetailModalLauncher\";\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + \"imagedetailmodallauncher.html\";\n    }\n    SWImageDetailModalLauncher.Factory = function () {\n        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWImageDetailModalLauncher(skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            'skuPartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWImageDetailModalLauncher;\n}());\nexports.SWImageDetailModalLauncher = SWImageDetailModalLauncher;\n\n\n//# sourceURL=webpack:///./sku/components/swimagedetailmodallauncher.ts?")},"./sku/components/swpricingmanager.ts":
/*!********************************************!*\
  !*** ./sku/components/swpricingmanager.ts ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWPricingManagerController = /** @class */ (function () {\n    //@ngInject\n    function SWPricingManagerController(collectionConfigService) {\n        var _this = this;\n        this.collectionConfigService = collectionConfigService;\n        this.productCollectionConfig = this.collectionConfigService.newCollectionConfig("Product");\n        this.productCollectionConfig.addFilter("productID", this.productId, "=", \'AND\', true);\n        this.productCollectionConfig.addDisplayProperty("productID,defaultSku.currencyCode");\n        this.productCollectionConfig.getEntity().then(function (response) {\n            _this.product = response.pageRecords[0];\n        }, function (reason) {\n        });\n    }\n    return SWPricingManagerController;\n}());\nexports.SWPricingManagerController = SWPricingManagerController;\nvar SWPricingManager = /** @class */ (function () {\n    // @ngInject\n    function SWPricingManager($hibachi, skuPartialsPath, slatwallPathBuilder) {\n        this.$hibachi = $hibachi;\n        this.skuPartialsPath = skuPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = \'EA\';\n        this.priority = 1000;\n        this.scope = {};\n        this.bindToController = {\n            productId: "@",\n            trackInventory: "=?"\n        };\n        this.controller = SWPricingManagerController;\n        this.controllerAs = "swPricingManager";\n        this.compile = function (element, attrs) {\n            return {\n                pre: function ($scope, element, attrs) {\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "pricingmanager.html";\n    }\n    SWPricingManager.Factory = function () {\n        var directive = function ($hibachi, skuPartialsPath, slatwallPathBuilder) { return new SWPricingManager($hibachi, skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'$hibachi\',\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWPricingManager;\n}());\nexports.SWPricingManager = SWPricingManager;\n\n\n//# sourceURL=webpack:///./sku/components/swpricingmanager.ts?')},"./sku/components/swskucodeedit.ts":
/*!*****************************************!*\
  !*** ./sku/components/swskucodeedit.ts ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWSkuCodeEditController = /** @class */ (function () {\n    //@ngInject\n    function SWSkuCodeEditController(historyService, listingService, observerService, skuPriceService, utilityService, $hibachi, $filter, $timeout) {\n        this.historyService = historyService;\n        this.listingService = listingService;\n        this.observerService = observerService;\n        this.skuPriceService = skuPriceService;\n        this.utilityService = utilityService;\n        this.$hibachi = $hibachi;\n        this.$filter = $filter;\n        this.$timeout = $timeout;\n        this.showSave = true;\n        this.baseEntityName = "Product";\n        if (angular.isDefined(this.pageRecord)) {\n            this.pageRecord.edited = false;\n        }\n        this.formName = this.utilityService.createID(32);\n        if (angular.isUndefined(this.skuId) && angular.isDefined(this.bundledSkuSkuId)) {\n            this.skuId = this.bundledSkuSkuId;\n        }\n        if (angular.isUndefined(this.price) && angular.isDefined(this.bundledSkuPrice)) {\n            this.price = this.bundledSkuPrice;\n        }\n        if (angular.isDefined(this.sku)) {\n            this.sku.data.price = this.currencyFilter(this.sku.data.price, this.currencyCode, 2, false);\n        }\n        if (angular.isDefined(this.skuPrice)) {\n            this.skuPrice.data.price = this.currencyFilter(this.skuPrice.data.price, this.currencyCode, 2, false);\n        }\n        if (angular.isDefined(this.bundledSkuSkuCode)) {\n            this.skuCode = this.bundledSkuSkuCode;\n        }\n        if (angular.isDefined(this.skuId) && angular.isUndefined(this.sku)) {\n            var skuData = {\n                skuID: this.skuId,\n                skuCode: this.skuCode\n            };\n            this.sku = this.$hibachi.populateEntity("Sku", skuData);\n        }\n    }\n    return SWSkuCodeEditController;\n}());\nexports.SWSkuCodeEditController = SWSkuCodeEditController;\nvar SWSkuCodeEdit = /** @class */ (function () {\n    function SWSkuCodeEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) {\n        var _this = this;\n        this.observerService = observerService;\n        this.historyService = historyService;\n        this.scopeService = scopeService;\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.bindToController = {\n            skuId: "@?",\n            skuPriceId: "@?",\n            skuCode: "@?",\n            price: "@?",\n            baseEntityId: "@?",\n            baseEntityName: "@?",\n            bundledSkuSkuId: "@?",\n            bundledSkuSkuCode: "@?",\n            bundledSkuCurrencyCode: "@?",\n            bundledSkuPrice: "@?",\n            eligibleCurrencyCodeList: "@?",\n            listingDisplayId: "@?",\n            currencyCode: "@?",\n            masterPriceObject: "=?",\n            revertToValue: "=?",\n            sku: "=?",\n            skuPrice: "=?"\n        };\n        this.controller = SWSkuCodeEditController;\n        this.controllerAs = "swSkuCodeEdit";\n        this.link = function (scope, element, attrs, formController, transcludeFn) {\n            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecord");\n            if (angular.isDefined(currentScope["pageRecord"])) {\n                scope.swSkuCodeEdit.pageRecord = currentScope["pageRecord"];\n            }\n            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecordKey");\n            if (angular.isDefined(currentScope["pageRecordKey"])) {\n                scope.swSkuCodeEdit.pageRecordIndex = currentScope["pageRecordKey"];\n            }\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skucodeedit.html";\n    }\n    SWSkuCodeEdit.Factory = function () {\n        var directive = function (observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuCodeEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'observerService\',\n            \'historyService\',\n            \'scopeService\',\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWSkuCodeEdit;\n}());\nexports.SWSkuCodeEdit = SWSkuCodeEdit;\n\n\n//# sourceURL=webpack:///./sku/components/swskucodeedit.ts?')},"./sku/components/swskucurrencyselector.ts":
/*!*************************************************!*\
  !*** ./sku/components/swskucurrencyselector.ts ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWSkuCurrencySelectorController = /** @class */ (function () {\n    //@ngInject\n    function SWSkuCurrencySelectorController(collectionConfigService, observerService, $hibachi) {\n        var _this = this;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.$hibachi = $hibachi;\n        this.currencyCodes = [];\n        this.baseEntityName = "Product";\n        this.select = function (currencyCode) {\n            _this.selectedCurrencyCode = currencyCode;\n            _this.observerService.notifyAndRecord(_this.selectCurrencyCodeEventName, currencyCode);\n        };\n        //this should be an rbkey\n        this.currencyCodes.push("All");\n        if (angular.isDefined(this.baseEntityId)) {\n            this.selectCurrencyCodeEventName = "currencyCodeSelect" + this.baseEntityId;\n        }\n        this.selectedCurrencyCode = "USD";\n        this.observerService.notifyAndRecord(this.selectCurrencyCodeEventName, this.selectedCurrencyCode);\n        if (angular.isDefined(this.baseEntityName) && angular.isDefined(this.baseEntityId)) {\n            this.baseEntityCollectionConfig = this.collectionConfigService.newCollectionConfig(this.baseEntityName);\n            this.baseEntityCollectionConfig.addDisplayProperty("eligibleCurrencyCodeList");\n            this.baseEntityCollectionConfig.addFilter("productID", this.baseEntityId, "=", \'AND\', true);\n            this.baseEntityCollectionConfig.getEntity().then(function (response) {\n                _this.product = _this.$hibachi.populateEntity(_this.baseEntityName, response.pageRecords[0]);\n                var tempCurrencyCodeArray = _this.product.data.eligibleCurrencyCodeList.split(",");\n                for (var key in tempCurrencyCodeArray) {\n                    _this.currencyCodes.push(tempCurrencyCodeArray[key]);\n                }\n            }, function (reason) {\n                //error callback\n            });\n        }\n    }\n    return SWSkuCurrencySelectorController;\n}());\nexports.SWSkuCurrencySelectorController = SWSkuCurrencySelectorController;\nvar SWSkuCurrencySelector = /** @class */ (function () {\n    function SWSkuCurrencySelector(scopeService, skuPartialsPath, slatwallPathBuilder) {\n        this.scopeService = scopeService;\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.bindToController = {\n            baseEntityName: "@?",\n            baseEntityId: "@?"\n        };\n        this.controller = SWSkuCurrencySelectorController;\n        this.controllerAs = "swSkuCurrencySelector";\n        this.link = function (scope, element, attrs, formController, transcludeFn) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skucurrencyselector.html";\n    }\n    SWSkuCurrencySelector.Factory = function () {\n        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuCurrencySelector(scopeService, skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'scopeService\',\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWSkuCurrencySelector;\n}());\nexports.SWSkuCurrencySelector = SWSkuCurrencySelector;\n\n\n//# sourceURL=webpack:///./sku/components/swskucurrencyselector.ts?')},"./sku/components/swskupriceedit.ts":
/*!******************************************!*\
  !*** ./sku/components/swskupriceedit.ts ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWSkuPriceEditController = /** @class */ (function () {\n    //@ngInject\n    function SWSkuPriceEditController(historyService, listingService, observerService, skuPriceService, utilityService, $hibachi, $filter, $timeout) {\n        var _this = this;\n        this.historyService = historyService;\n        this.listingService = listingService;\n        this.observerService = observerService;\n        this.skuPriceService = skuPriceService;\n        this.utilityService = utilityService;\n        this.$hibachi = $hibachi;\n        this.$filter = $filter;\n        this.$timeout = $timeout;\n        this.showSave = true;\n        this.baseEntityName = "Product";\n        this.updateDisplay = function (currencyCode) {\n            if (angular.isDefined(currencyCode) && angular.isDefined(_this.currencyCode)) {\n                _this.filterOnCurrencyCode = currencyCode;\n                if (_this.currencyCode == _this.filterOnCurrencyCode || _this.filterOnCurrencyCode == "All") {\n                    _this.showPriceEdit = true;\n                }\n                else {\n                    _this.showPriceEdit = false;\n                }\n            }\n        };\n        this.switchTabContext = function () {\n            _this.observerService.notify(_this.switchTabContextEventName, _this.tabToSwitchTo);\n        };\n        if (angular.isDefined(this.pageRecord)) {\n            this.pageRecord.edited = false;\n        }\n        this.currencyFilter = this.$filter(\'swcurrency\');\n        this.formName = this.utilityService.createID(32);\n        if (angular.isUndefined(this.showPriceEdit)) {\n            this.showPriceEdit = true;\n        }\n        if (angular.isUndefined(this.skuId) && angular.isDefined(this.bundledSkuSkuId)) {\n            this.skuId = this.bundledSkuSkuId;\n        }\n        if (angular.isDefined(this.bundledSkuCurrencyCode)) {\n            this.currencyCode = this.bundledSkuCurrencyCode;\n        }\n        if (angular.isUndefined(this.currencyCode) && angular.isDefined(this.sku)) {\n            this.currencyCode = this.sku.data.currencyCode;\n        }\n        if (angular.isUndefined(this.currencyCode) && angular.isDefined(this.skuPrice)) {\n            this.currencyCode = this.skuPrice.data.currencyCode;\n        }\n        if (angular.isUndefined(this.price) && angular.isDefined(this.bundledSkuPrice)) {\n            this.price = this.bundledSkuPrice;\n        }\n        if (angular.isDefined(this.sku)) {\n            this.sku.data.price = this.currencyFilter(this.sku.data.price, this.currencyCode, 2, false);\n        }\n        if (angular.isDefined(this.skuPrice)) {\n            this.skuPrice.data.price = this.currencyFilter(this.skuPrice.data.price, this.currencyCode, 2, false);\n        }\n        if (angular.isUndefined(this.skuId)\n            && angular.isUndefined(this.sku)\n            && angular.isUndefined(this.skuPriceId)\n            && angular.isUndefined(this.skuPrice)) {\n            throw ("You must provide either a skuID or a skuPriceID or a sku or a skuPrice to SWSkuPriceSingleEditController");\n        }\n        else {\n            if (angular.isDefined(this.skuId) && angular.isUndefined(this.sku)) {\n                var skuData = {\n                    skuID: this.skuId,\n                    skuCode: this.skuCode,\n                    currencyCode: this.currencyCode,\n                    price: this.currencyFilter(this.price, this.currencyCode, 2, false)\n                };\n                this.sku = this.$hibachi.populateEntity("Sku", skuData);\n            }\n            if (angular.isDefined(this.skuPriceId) && angular.isUndefined(this.skuPrice)) {\n                var skuPriceData = {\n                    skuPriceId: this.skuPriceId,\n                    currencyCode: this.currencyCode,\n                    minQuantity: this.minQuantity,\n                    maxQuantity: this.maxQuantity,\n                    price: this.currencyFilter(this.price, this.currencyCode, 2, false)\n                };\n                this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);\n                this.priceGroup = this.$hibachi.populateEntity(\'PriceGroup\', { priceGroupID: this.priceGroupId });\n                this.skuPrice.$$setPriceGroup(this.priceGroup);\n            }\n        }\n        if (angular.isDefined(this.masterPriceObject)) {\n            if (angular.isDefined(this.masterPriceObject.data.sku)) {\n                var sku = this.masterPriceObject.data.sku;\n            }\n            else {\n                var sku = this.masterPriceObject;\n            }\n            this.revertToValue = this.currencyFilter(this.skuPriceService.getInferredSkuPrice(sku, this.masterPriceObject.data.price, this.currencyCode), this.currencyCode, 2, false);\n        }\n    }\n    return SWSkuPriceEditController;\n}());\nexports.SWSkuPriceEditController = SWSkuPriceEditController;\nvar SWSkuPriceEdit = /** @class */ (function () {\n    function SWSkuPriceEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) {\n        var _this = this;\n        this.observerService = observerService;\n        this.historyService = historyService;\n        this.scopeService = scopeService;\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.bindToController = {\n            skuId: "@?",\n            skuPriceId: "@?",\n            skuCode: "@?",\n            price: "@?",\n            priceGroupId: "@?",\n            baseEntityId: "@?",\n            baseEntityName: "@?",\n            bundledSkuSkuId: "@?",\n            bundledSkuCurrencyCode: "@?",\n            bundledSkuPrice: "@?",\n            eligibleCurrencyCodeList: "@?",\n            listingDisplayId: "@?",\n            currencyCode: "@?",\n            masterPriceObject: "=?",\n            revertToValue: "=?",\n            sku: "=?",\n            skuPrice: "=?"\n        };\n        this.controller = SWSkuPriceEditController;\n        this.controllerAs = "swSkuPriceEdit";\n        this.link = function (scope, element, attrs, formController, transcludeFn) {\n            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecord");\n            if (angular.isDefined(currentScope["pageRecord"])) {\n                scope.swSkuPriceEdit.pageRecord = currentScope["pageRecord"];\n            }\n            var currentScope = _this.scopeService.getRootParentScope(scope, "pageRecordKey");\n            if (angular.isDefined(currentScope["pageRecordKey"])) {\n                scope.swSkuPriceEdit.pageRecordIndex = currentScope["pageRecordKey"];\n            }\n            var skuPricesEditScope = _this.scopeService.getRootParentScope(scope, "swSkuPricesEdit");\n            if (skuPricesEditScope != null) {\n                scope.swSkuPriceEdit.baseEntityId = skuPricesEditScope["swSkuPricesEdit"].baseEntityId;\n                scope.swSkuPriceEdit.baseEntityName = skuPricesEditScope["swSkuPricesEdit"].baseEntityName;\n            }\n            if (angular.isDefined(scope.swSkuPriceEdit.baseEntityId) && angular.isUndefined(scope.swSkuPriceEdit.skuId)) {\n                scope.swSkuPriceEdit.selectCurrencyCodeEventName = "currencyCodeSelect" + scope.swSkuPriceEdit.baseEntityId;\n                _this.observerService.attach(scope.swSkuPriceEdit.updateDisplay, scope.swSkuPriceEdit.selectCurrencyCodeEventName, scope.swSkuPriceEdit.formName);\n                if (_this.historyService.hasHistory(scope.swSkuPriceEdit.selectCurrencyCodeEventName)) {\n                    scope.swSkuPriceEdit.updateDisplay(_this.historyService.getHistory(scope.swSkuPriceEdit.selectCurrencyCodeEventName));\n                }\n            }\n            var tabGroupScope = _this.scopeService.getRootParentScope(scope, "swTabGroup");\n            var tabContentScope = _this.scopeService.getRootParentScope(scope, "swTabContent");\n            if (tabContentScope != null) {\n                if (angular.isDefined(tabGroupScope) && tabContentScope["swTabContent"].name == "Basic") {\n                    scope.swSkuPriceEdit.switchTabContextEventName = tabGroupScope["swTabGroup"].switchTabEventName;\n                    scope.swSkuPriceEdit.tabToSwitchTo = tabGroupScope["swTabGroup"].getTabByName("Pricing");\n                    scope.swSkuPriceEdit.showSwitchTabContextButton = true;\n                }\n                else {\n                    scope.swSkuPriceEdit.showSwitchTabContextButton = false;\n                }\n            }\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupriceedit.html";\n    }\n    SWSkuPriceEdit.Factory = function () {\n        var directive = function (observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPriceEdit(observerService, historyService, scopeService, skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'observerService\',\n            \'historyService\',\n            \'scopeService\',\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWSkuPriceEdit;\n}());\nexports.SWSkuPriceEdit = SWSkuPriceEdit;\n\n\n//# sourceURL=webpack:///./sku/components/swskupriceedit.ts?')},"./sku/components/swskupricequantityedit.ts":
/*!**************************************************!*\
  !*** ./sku/components/swskupricequantityedit.ts ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWSkuPriceQuantityEditController = /** @class */ (function () {\n    //@ngInject\n    function SWSkuPriceQuantityEditController($q, $hibachi, collectionConfigService, listingService, observerService, skuPriceService, $scope) {\n        var _this = this;\n        this.$q = $q;\n        this.$hibachi = $hibachi;\n        this.collectionConfigService = collectionConfigService;\n        this.listingService = listingService;\n        this.observerService = observerService;\n        this.skuPriceService = skuPriceService;\n        this.$scope = $scope;\n        this.skuPrices = [];\n        this.showSave = true;\n        this.refreshSkuPrices = function () {\n            _this.skuPriceService.loadSkuPricesForSku(_this.skuSkuId).finally(function () {\n                _this.getSkuPrices();\n            });\n        };\n        this.updateSkuPrices = function () {\n            angular.forEach(_this.skuPrices, function (value, key) {\n                if (key > 0) {\n                    var formName = _this.columnPropertyIdentifier + value.data.skuPriceID;\n                    value.forms[formName].$setDirty(true);\n                    if (angular.isDefined(value.forms[formName][_this.columnPropertyIdentifier]) &&\n                        angular.isFunction(value.forms[formName][_this.columnPropertyIdentifier].$setDirty)) {\n                        value.forms[formName][_this.columnPropertyIdentifier].$setDirty(true);\n                    }\n                    value.data[_this.columnPropertyIdentifier] = _this.skuPrice.data[_this.columnPropertyIdentifier];\n                }\n            });\n        };\n        this.saveSkuPrices = function () {\n            var savePromises = [];\n            angular.forEach(_this.skuPrices, function (value, key) {\n                if (value.skuPriceID.length) {\n                    if (key > 0) {\n                        savePromises.push(value.$$save());\n                    }\n                }\n            });\n            _this.savePromise = _this.$q.all(savePromises);\n            _this.savePromise.then(function (response) {\n                //success\n            }, function (reason) {\n                //failure\n            });\n            return _this.savePromise;\n        };\n        this.getSkuPrices = function () {\n            var promise = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuSkuId, _this.minQuantity, _this.maxQuantity, undefined, _this.priceGroupPriceGroupId);\n            promise.then(function (data) {\n                _this.skuPrices = data;\n            });\n            return promise;\n        };\n        if (angular.isDefined(this.pageRecord)) {\n            this.pageRecord.edited = false;\n        }\n        if (angular.isDefined(this.skuSkuId) && angular.isUndefined(this.skuPrice)) {\n            var skuPriceData = {\n                skuPriceID: this.skuPriceId,\n                minQuantity: parseInt(this.minQuantity),\n                maxQuantity: parseInt(this.maxQuantity),\n                currencyCode: this.currencyCode,\n                price: this.price\n            };\n            this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);\n            this.priceGroup = this.$hibachi.populateEntity(\'PriceGroup\', { priceGroupID: this.priceGroupPriceGroupId });\n            this.skuPrice.$$setPriceGroup(this.priceGroup);\n            this.skuPriceService.setSkuPrices(this.skuSkuId, [this.skuPrice]);\n            this.refreshSkuPrices();\n            this.observerService.attach(this.refreshSkuPrices, "skuPricesUpdate");\n        }\n    }\n    return SWSkuPriceQuantityEditController;\n}());\nexports.SWSkuPriceQuantityEditController = SWSkuPriceQuantityEditController;\nvar SWSkuPriceQuantityEdit = /** @class */ (function () {\n    function SWSkuPriceQuantityEdit(scopeService, skuPartialsPath, slatwallPathBuilder) {\n        var _this = this;\n        this.scopeService = scopeService;\n        this.skuPartialsPath = skuPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.bindToController = {\n            skuPrice: "=?",\n            skuPriceId: "@",\n            currencyCode: "@",\n            skuSkuId: "@",\n            column: "=?",\n            columnPropertyIdentifier: "@",\n            minQuantity: "@",\n            maxQuantity: "@",\n            price: "@",\n            showSave: "=?",\n            listingDisplayId: "@?",\n            priceGroupPriceGroupId: "@?"\n        };\n        this.controller = SWSkuPriceQuantityEditController;\n        this.controllerAs = "swSkuPriceQuantityEdit";\n        this.compile = function (element, attrs) {\n            return {\n                pre: function ($scope, element, attrs) {\n                    //have to do our setup here because there is no direct way to pass the pageRecord into this transcluded directive\n                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecord");\n                    if (angular.isDefined(currentScope["pageRecord"])) {\n                        $scope.swSkuPriceQuantityEdit.pageRecord = currentScope["pageRecord"];\n                    }\n                    var currentScope = _this.scopeService.getRootParentScope($scope, "pageRecordKey");\n                    if (angular.isDefined(currentScope["pageRecordKey"])) {\n                        $scope.swSkuPriceQuantityEdit.pageRecordIndex = currentScope["pageRecordKey"];\n                    }\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupricequantityedit.html";\n    }\n    SWSkuPriceQuantityEdit.Factory = function () {\n        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPriceQuantityEdit(scopeService, skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'scopeService\',\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWSkuPriceQuantityEdit;\n}());\nexports.SWSkuPriceQuantityEdit = SWSkuPriceQuantityEdit;\n\n\n//# sourceURL=webpack:///./sku/components/swskupricequantityedit.ts?')},"./sku/components/swskupricesedit.ts":
/*!*******************************************!*\
  !*** ./sku/components/swskupricesedit.ts ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWSkuPricesEditController = /** @class */ (function () {\n    //@ngInject\n    function SWSkuPricesEditController(observerService, collectionConfigService, utilityService, skuPriceService, $hibachi) {\n        var _this = this;\n        this.observerService = observerService;\n        this.collectionConfigService = collectionConfigService;\n        this.utilityService = utilityService;\n        this.skuPriceService = skuPriceService;\n        this.$hibachi = $hibachi;\n        this.baseEntityName = "Product";\n        this.refreshSkuPrices = function () {\n            _this.skuPriceService.loadSkuPricesForSku(_this.skuId).finally(function () {\n                _this.getSkuPrices();\n            });\n        };\n        this.hasSkuPrices = function () {\n            return _this.skuPriceService.hasSkuPrices(_this.skuId);\n        };\n        this.getSkuPrices = function () {\n            if (angular.isDefined(_this.skuSkuId)) {\n                _this.loadingPromise = _this.skuPriceService.getSkuPricesForQuantityRange(_this.skuId, _this.minQuantity, _this.maxQuantity, _this.eligibleCurrencyCodes, _this.priceGroupPriceGroupId);\n            }\n            else if (angular.isDefined(_this.skuId)) {\n                _this.loadingPromise = _this.skuPriceService.getBaseSkuPricesForSku(_this.skuId, _this.eligibleCurrencyCodes);\n            }\n            _this.loadingPromise.then(function (data) {\n                _this.skuPrices = data;\n            }, function (reason) {\n                throw ("swSkuPrices was unable to fetch skuPrices because: " + reason);\n            });\n            return _this.loadingPromise;\n        };\n        this.Id = this.utilityService.createID(32);\n        if (angular.isDefined(this.skuEligibleCurrencyCodeList)) {\n            this.eligibleCurrencyCodeList = this.skuEligibleCurrencyCodeList;\n        }\n        if (angular.isDefined(this.eligibleCurrencyCodeList)) {\n            this.eligibleCurrencyCodes = this.eligibleCurrencyCodeList.split(",");\n        }\n        if (angular.isUndefined(this.skuPrices)) {\n            this.skuPrices = [];\n        }\n        if (angular.isDefined(this.skuSkuId)) {\n            this.skuId = this.skuSkuId;\n        }\n        else {\n            //inflate the sku\n            this.sku = this.$hibachi.populateEntity("Sku", { skuID: this.skuId, price: this.price });\n        }\n        if (angular.isDefined(this.skuPriceId)) {\n            var skuPriceData = {\n                skuPriceID: this.skuPriceId,\n                minQuantity: this.minQuantity,\n                maxQuantity: this.maxQuantity,\n                currencyCode: this.currencyCode,\n                price: this.price,\n                priceGroup_priceGroupID: this.priceGroupPriceGroupId\n            };\n            this.skuPrice = this.$hibachi.populateEntity("SkuPrice", skuPriceData);\n        }\n        if (angular.isDefined(this.skuSkuId) && angular.isDefined(this.skuPrice)) {\n            this.masterPriceObject = this.skuPrice;\n        }\n        else if (angular.isDefined(this.sku)) {\n            this.masterPriceObject = this.sku;\n        }\n        this.refreshSkuPrices();\n        this.observerService.attach(this.refreshSkuPrices, "skuPricesUpdate");\n    }\n    return SWSkuPricesEditController;\n}());\nexports.SWSkuPricesEditController = SWSkuPricesEditController;\nvar SWSkuPricesEdit = /** @class */ (function () {\n    function SWSkuPricesEdit(scopeService, skuPartialsPath, slatwallPathBuilder) {\n        this.scopeService = scopeService;\n        this.skuPartialsPath = skuPartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.bindToController = {\n            skuId: "@",\n            skuSkuId: "@",\n            skuPriceId: "@",\n            minQuantity: "@",\n            maxQuantity: "@",\n            currencyCode: "@",\n            price: "@",\n            bundledSkuSkuId: "@",\n            baseEntityName: "@?",\n            baseEntityId: "@?",\n            listingDisplayId: "@?",\n            eligibleCurrencyCodeList: "@?",\n            skuEligibleCurrencyCodeList: "@?",\n            sku: "=?",\n            priceGroupPriceGroupId: "@?"\n        };\n        this.controller = SWSkuPricesEditController;\n        this.controllerAs = "swSkuPricesEdit";\n        this.compile = function (element, attrs) {\n            return {\n                pre: function ($scope, element, attrs) {\n                },\n                post: function ($scope, element, attrs) {\n                }\n            };\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skupricesedit.html";\n    }\n    SWSkuPricesEdit.Factory = function () {\n        var directive = function (scopeService, skuPartialsPath, slatwallPathBuilder) { return new SWSkuPricesEdit(scopeService, skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'scopeService\',\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWSkuPricesEdit;\n}());\nexports.SWSkuPricesEdit = SWSkuPricesEdit;\n\n\n//# sourceURL=webpack:///./sku/components/swskupricesedit.ts?')},"./sku/components/swskustockadjustmentmodallauncher.ts":
/*!*************************************************************!*\
  !*** ./sku/components/swskustockadjustmentmodallauncher.ts ***!
  \*************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWSkuStockAdjustmentModalLauncherController = /** @class */ (function () {\n    //@ngInject\n    function SWSkuStockAdjustmentModalLauncherController($http, $q, $hibachi, observerService, utilityService, collectionConfigService) {\n        var _this = this;\n        this.$http = $http;\n        this.$q = $q;\n        this.$hibachi = $hibachi;\n        this.observerService = observerService;\n        this.utilityService = utilityService;\n        this.collectionConfigService = collectionConfigService;\n        this.initData = function () {\n            _this.selectedLocation = undefined;\n            _this.stockAdjustmentType = undefined;\n            var skudata = {\n                skuID: _this.skuId,\n                skuCode: _this.skuCode,\n                skuDescription: _this.skuDescription,\n                imagePath: _this.imagePath,\n                calculatedQATS: _this.calculatedQats || 0,\n                calculatedQOH: _this.calculatedQoh || 0,\n            };\n            _this.sku = _this.$hibachi.populateEntity("Sku", skudata);\n            _this.sku.setNewQOH(_this.calculatedQoh || 0);\n            _this.stockAdjustmentID = "";\n            _this.stock = _this.$hibachi.newStock();\n            _this.stockAdjustment = _this.$hibachi.newStockAdjustment();\n            _this.stockAdjustmentItem = _this.$hibachi.newStockAdjustmentItem();\n            _this.selectedLocation = _this.$hibachi.newLocation();\n            _this.stockAdjustment.$$addStockAdjustmentItem(_this.stockAdjustmentItem);\n            _this.stock.$$setSku(_this.sku);\n            _this.stockAdjustmentStatusType = _this.$hibachi.populateEntity("Type", { typeID: "444df2e2f66ddfaf9c60caf5c76349a6" }); //new status type for stock adjusment\n            _this.stockAdjustment.$$setStockAdjustmentStatusType(_this.stockAdjustmentStatusType);\n            _this.stockAdjustmentItem.$$setSku(_this.sku);\n            _this.newQuantity = _this.calculatedQoh || 0;\n            _this.observerService.notify(_this.selectedLocationTypeaheadDataKey + \'clearSearch\');\n        };\n        this.save = function () {\n            if (_this.stockAdjustmentItem.data.quantity > 0) {\n                _this.stockAdjustment.$$setStockAdjustmentType(_this.$hibachi.populateEntity("Type", { typeID: "444df2e60db81c12589c9b39346009f2" })); //manual in stock adjustment type\n                _this.stockAdjustment.$$setToLocation(_this.selectedLocation);\n                _this.stockAdjustmentItem.$$setToStock(_this.stock);\n            }\n            else {\n                _this.stockAdjustment.$$setStockAdjustmentType(_this.$hibachi.populateEntity("Type", { typeID: "444df2e7dba550b7a24a03acbb37e717" })); //manual out stock adjustment type\n                _this.stockAdjustment.$$setFromLocation(_this.selectedLocation);\n                _this.stockAdjustmentItem.data.quantity = _this.stockAdjustmentItem.data.quantity * -1;\n                _this.stockAdjustmentItem.$$setFromStock(_this.stock);\n            }\n            return _this.$q.all([_this.observerService.notify(\'updateBindings\'), _this.stock.$$save()]).then().finally(function () {\n                var stockAdjustmentSavePromise = _this.stockAdjustment.$$save();\n                stockAdjustmentSavePromise.then(function (response) {\n                    _this.sku.newQOH = _this.newQuantity;\n                    _this.sku.data.newQOH = _this.newQuantity;\n                    _this.sku.data.calculatedQOH = _this.newQuantity;\n                    _this.stockAdjustmentID = response.stockAdjustmentID;\n                    _this.observerService.notify(\'updateBindings\');\n                }).finally(function () {\n                    _this.observerService.notify(\'updateBindings\');\n                    _this.$http({\n                        method: "POST",\n                        url: _this.$hibachi.getUrlWithActionPrefix() + "entity.processStockAdjustment&processContext=processAdjustment&stockAdjustmentID=" + _this.stockAdjustmentID\n                    }).then(function (response) {\n                        //don\'t need to do anything here\n                        _this.swListingDisplay.getCollection();\n                    });\n                });\n            });\n        };\n        this.addSelectedLocation = function (item) {\n            if (angular.isDefined(item)) {\n                _this.selectedLocation = _this.$hibachi.populateEntity(\'Location\', item);\n                _this.stock.$$setLocation(_this.selectedLocation);\n                //get existing stockID if one exists\n                _this.stockCollectionConfig = _this.collectionConfigService.newCollectionConfig(\'Stock\');\n                _this.stockCollectionConfig.addFilter(\'sku.skuID\', _this.stock.sku.skuID);\n                _this.stockCollectionConfig.addFilter(\'location.locationID\', _this.selectedLocation.locationID);\n                _this.stockCollectionConfig.setDistinct(true);\n                _this.stockCollectionConfig.getEntity().then(function (res) {\n                    if (res.pageRecords.length > 0) {\n                        _this.stock.stockID = res.pageRecords[0].stockID;\n                    }\n                });\n            }\n            else {\n                _this.selectedLocation = undefined;\n            }\n        };\n        this.updateNewQuantity = function (args) {\n            if (!isNaN(args.swInput.value)) {\n                _this.newQuantity = args.swInput.value;\n            }\n            else {\n                _this.sku.data.newQOH = 0;\n            }\n            _this.updateStockAdjustmentQuantity();\n        };\n        this.updateStockAdjustmentQuantity = function () {\n            if (!isNaN(_this.newQuantity)) {\n                _this.stockAdjustmentItem.data.quantity = _this.newQuantity - _this.sku.data.calculatedQOH;\n            }\n            else {\n                _this.newQuantity = 0;\n            }\n        };\n        this.selectedLocationTypeaheadDataKey = this.utilityService.createID(32);\n        if (angular.isDefined(this.skuId)) {\n            this.name = "skuStockAdjustment" + this.utilityService.createID(32);\n        }\n        else {\n            throw ("SWSkuStockAdjustmentModalLauncherController was not provided with a sku id");\n        }\n        if (angular.isDefined(this.calculatedQats)) {\n            this.calculatedQats = parseInt(this.calculatedQats);\n        }\n        if (angular.isDefined(this.calculatedQoh)) {\n            this.calculatedQoh = parseInt(this.calculatedQoh);\n        }\n        this.initData();\n        this.observerService.attach(this.updateNewQuantity, this.name + \'newQuantitychange\');\n    }\n    return SWSkuStockAdjustmentModalLauncherController;\n}());\nexports.SWSkuStockAdjustmentModalLauncherController = SWSkuStockAdjustmentModalLauncherController;\nvar SWSkuStockAdjustmentModalLauncher = /** @class */ (function () {\n    function SWSkuStockAdjustmentModalLauncher(skuPartialsPath, slatwallPathBuilder) {\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.require = { swListingDisplay: \'?^swListingDisplay\' };\n        this.bindToController = {\n            skuId: "@",\n            skuCode: "@",\n            skuDescription: "@",\n            imagePath: "@",\n            calculatedQats: "=?",\n            calculatedQoh: "=?"\n        };\n        this.controller = SWSkuStockAdjustmentModalLauncherController;\n        this.controllerAs = "swSkuStockAdjustmentModalLauncher";\n        this.link = function (scope, element, attrs) {\n            scope.$watch(\'swStockAdjustmentModalLauncherController.calculatedQoh\', function (newValue) {\n                scope.swSkuStockAdjustmentModalLauncher.newQuantity = newValue;\n            });\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skustockadjustmentmodallauncher.html";\n    }\n    SWSkuStockAdjustmentModalLauncher.Factory = function () {\n        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWSkuStockAdjustmentModalLauncher(skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWSkuStockAdjustmentModalLauncher;\n}());\nexports.SWSkuStockAdjustmentModalLauncher = SWSkuStockAdjustmentModalLauncher;\n\n\n//# sourceURL=webpack:///./sku/components/swskustockadjustmentmodallauncher.ts?')},"./sku/components/swskuthumbnail.ts":
/*!******************************************!*\
  !*** ./sku/components/swskuthumbnail.ts ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SWSkuThumbnailController = /** @class */ (function () {\n    //@ngInject\n    function SWSkuThumbnailController(fileService, $hibachi, $http, appConfig) {\n        var _this = this;\n        this.fileService = fileService;\n        this.$hibachi = $hibachi;\n        this.$http = $http;\n        this.appConfig = appConfig;\n        if (!angular.isDefined(this.skuData)) {\n            throw ("You must provide a sku to the SWSkuThumbnailController");\n        }\n        fileService.imageExists(this.skuData.imagePath).then(function () {\n            //Do nothing\n        }, function () {\n            _this.skuData.imagePath = _this.appConfig.baseURL + \'assets/images/image-placeholder.jpg\';\n        }).finally(function () {\n            if (angular.isDefined(_this.skuData.imagePath)) {\n                _this.image = _this.appConfig.baseURL + _this.skuData.imagePath;\n            }\n        });\n    }\n    return SWSkuThumbnailController;\n}());\nexports.SWSkuThumbnailController = SWSkuThumbnailController;\nvar SWSkuThumbnail = /** @class */ (function () {\n    function SWSkuThumbnail(skuPartialsPath, slatwallPathBuilder) {\n        this.restrict = \'EA\';\n        this.scope = {};\n        this.bindToController = {\n            skuData: "=",\n            imageOnly: "=?",\n            imagePath: "@?"\n        };\n        this.controller = SWSkuThumbnailController;\n        this.controllerAs = "swSkuThumbnail";\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(skuPartialsPath) + "skuthumbnail.html";\n    }\n    SWSkuThumbnail.Factory = function () {\n        var directive = function (skuPartialsPath, slatwallPathBuilder) { return new SWSkuThumbnail(skuPartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            \'skuPartialsPath\',\n            \'slatwallPathBuilder\'\n        ];\n        return directive;\n    };\n    return SWSkuThumbnail;\n}());\nexports.SWSkuThumbnail = SWSkuThumbnail;\n\n\n//# sourceURL=webpack:///./sku/components/swskuthumbnail.ts?')},"./sku/services/defaultskuservice.ts":
/*!*******************************************!*\
  !*** ./sku/services/defaultskuservice.ts ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar DefaultSkuService = /** @class */ (function () {\n    //@ngInject\n    function DefaultSkuService($hibachi, observerService) {\n        var _this = this;\n        this.$hibachi = $hibachi;\n        this.observerService = observerService;\n        this.observerKeys = {};\n        this.defaultSkuSelections = {};\n        this.attachObserver = function (selectionID, productID) {\n            if (angular.isUndefined(_this.observerKeys[selectionID])) {\n                _this.observerKeys[selectionID] = { attached: true, productID: productID, hasBeenCalled: false };\n                _this.observerService.attach(_this.decideToSaveSku, \'swSelectionToggleSelection\' + selectionID);\n            } //otherwise the event has been attached\n        };\n        this.decideToSaveSku = function (args) {\n            if (_this.defaultSkuSelections[args.selectionid] == null) {\n                _this.defaultSkuSelections[args.selectionid] = args.selection;\n            }\n            else if (_this.defaultSkuSelections[args.selectionid] != args.selection) {\n                _this.defaultSkuSelections[args.selectionid] = args.selection;\n                _this.saveDefaultSku(args);\n            }\n        };\n        this.saveDefaultSku = function (args) {\n            //we only want to call save on the second and subsequent times the event fires, because it will fire when it is initialized\n            _this.$hibachi.getEntity("Product", _this.observerKeys[args.selectionid].productID).then(function (product) {\n                var product = _this.$hibachi.populateEntity("Product", product);\n                product.$$setDefaultSku(_this.$hibachi.populateEntity("Sku", { skuID: args.selection }));\n                product.$$save().then(function () {\n                    //there was success\n                }, function () {\n                    //there was a problem\n                });\n            }, function (reason) {\n            });\n        };\n    }\n    return DefaultSkuService;\n}());\nexports.DefaultSkuService = DefaultSkuService;\n\n\n//# sourceURL=webpack:///./sku/services/defaultskuservice.ts?')},"./sku/services/skupriceservice.ts":
/*!*****************************************!*\
  !*** ./sku/services/skupriceservice.ts ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\n/// <reference path=\'../../../typings/slatwallTypescript.d.ts\' />\n/// <reference path=\'../../../typings/tsd.d.ts\' />\nvar SkuPriceService = /** @class */ (function () {\n    //@ngInject\n    function SkuPriceService($http, $q, $hibachi, entityService, cacheService, collectionConfigService, observerService, utilityService) {\n        var _this = this;\n        this.$http = $http;\n        this.$q = $q;\n        this.$hibachi = $hibachi;\n        this.entityService = entityService;\n        this.cacheService = cacheService;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.utilityService = utilityService;\n        this.skuPrices = {};\n        this.skuPriceCollectionConfigs = {};\n        this.skuPriceGetEntityPromises = {};\n        this.skuDictionary = {};\n        this.skuPriceHasEntityDeferred = {};\n        this.skuPriceHasEntityPromises = {};\n        this.newSkuPrice = function () {\n            return _this.entityService.newEntity(\'SkuPrice\');\n        };\n        this.getRelatedSkuPriceCollectionConfig = function (skuID, currencyCode, minQuantity, maxQuantity) {\n            var relatedSkuPriceCollectionConfig = _this.collectionConfigService.newCollectionConfig("SkuPrice");\n            relatedSkuPriceCollectionConfig.addDisplayProperty("skuPriceID,sku.skuID,minQuantity,maxQuantity,currencyCode,price,priceGroup.priceGroupID");\n            relatedSkuPriceCollectionConfig.addFilter("minQuantity", minQuantity, "=");\n            relatedSkuPriceCollectionConfig.addFilter("maxQuantity", maxQuantity, "=");\n            relatedSkuPriceCollectionConfig.addFilter("currencyCode", currencyCode, "!=");\n            relatedSkuPriceCollectionConfig.addFilter("sku.skuID", skuID, "=");\n            relatedSkuPriceCollectionConfig.addOrderBy("currencyCode|asc");\n            relatedSkuPriceCollectionConfig.setAllRecords(true);\n            return relatedSkuPriceCollectionConfig;\n        };\n        //wrapper function to split up args\n        this.updateSkuPrices = function (args) {\n            _this.loadSkuPricesForSku(args.skuID, args.refresh);\n        };\n        this.loadSkuPricesForSku = function (skuID, refresh) {\n            _this.skuPriceHasEntityDeferred[skuID] = _this.$q.defer();\n            _this.skuPriceHasEntityPromises[skuID] = _this.skuPriceHasEntityDeferred[skuID].promise;\n            if (angular.isUndefined(_this.skuPriceCollectionConfigs[skuID])) {\n                _this.skuPriceCollectionConfigs[skuID] = _this.collectionConfigService.newCollectionConfig("SkuPrice");\n                //get info to compare for line items\n                _this.skuPriceCollectionConfigs[skuID].addDisplayProperty("skuPriceID,minQuantity,maxQuantity,currencyCode,price,sku.skuID,priceGroup.priceGroupID,priceGroup.priceGroupCode");\n                _this.skuPriceCollectionConfigs[skuID].addFilter("sku.skuID", skuID, "=");\n                _this.skuPriceCollectionConfigs[skuID].addOrderBy("currencyCode|asc");\n                _this.skuPriceCollectionConfigs[skuID].setAllRecords(true);\n            }\n            if (angular.isUndefined(_this.skuPriceGetEntityPromises[skuID]) || refresh) {\n                _this.skuPriceGetEntityPromises[skuID] = _this.skuPriceCollectionConfigs[skuID].getEntity();\n                refresh = true;\n            }\n            if (refresh) {\n                _this.skuPriceGetEntityPromises[skuID].then(function (response) {\n                    angular.forEach(response.records, function (value, key) {\n                        var skuPrice = _this.$hibachi.populateEntity("SkuPrice", value);\n                        var priceGroup = _this.$hibachi.populateEntity(\'PriceGroup\', { priceGroupID: value.priceGroup_priceGroupID, priceGroupCode: value.priceGroup_priceGroupCode });\n                        skuPrice.$$setPriceGroup(priceGroup);\n                        var skuPrices = [skuPrice];\n                        _this.setSkuPrices(skuID, skuPrices);\n                    });\n                }, function (reason) {\n                    _this.skuPriceHasEntityPromises[skuID].reject();\n                    throw ("skupriceservice failed to get sku prices" + reason);\n                }).finally(function () {\n                    _this.skuPriceHasEntityPromises[skuID].resolve();\n                });\n            }\n            return _this.skuPriceGetEntityPromises[skuID];\n        };\n        this.setSkuPrices = function (skuID, skuPrices) {\n            if (angular.isDefined(_this.skuPrices[skuID])) {\n                for (var i = 0; i < skuPrices.length; i++) {\n                    if (_this.getKeyOfSkuPriceMatch(skuID, skuPrices[i]) != -1) {\n                        _this.getSkuPrices(skuID)[_this.getKeyOfSkuPriceMatch(skuID, skuPrices[i])].data.price = skuPrices[i].data.price;\n                        skuPrices.splice(i, 1);\n                        i--;\n                    }\n                }\n                _this.skuPrices[skuID] = _this.skuPrices[skuID].concat(skuPrices);\n            }\n            else {\n                _this.skuPrices[skuID] = skuPrices;\n            }\n        };\n        this.hasSkuPrices = function (skuID) {\n            if (angular.isDefined(_this.skuPrices[skuID])) {\n                return true;\n            }\n            return false;\n        };\n        this.getSkuPrices = function (skuID) {\n            if (angular.isDefined(_this.skuPrices[skuID])) {\n                return _this.skuPrices[skuID];\n            }\n        };\n        this.loadCurrencies = function () {\n            var loadCurrenciesDeferred = _this.$q.defer();\n            var loadCurrenciesPromise = loadCurrenciesDeferred.promise;\n            if (angular.isDefined(_this.currencies)) {\n                loadCurrenciesDeferred.resolve(_this.currencies);\n            }\n            else {\n                var currencyRatePromise = _this.$http({\n                    method: "POST",\n                    url: _this.$hibachi.getUrlWithActionPrefix() + "api:main.getcurrencyrates"\n                });\n                currencyRatePromise.then(function (response) {\n                    _this.currencies = response.data;\n                    loadCurrenciesDeferred.resolve(_this.currencies);\n                }, function (reason) {\n                    loadCurrenciesDeferred.reject(reason);\n                });\n            }\n            return loadCurrenciesPromise;\n        };\n        //logic for inferred currency prices\n        this.getInferredSkuPrice = function (sku, basePrice, currencyCode) {\n            if (angular.isDefined(_this.currencies[currencyCode]) && sku.data.currencyCode != currencyCode) {\n                var currencyData = _this.currencies[currencyCode];\n                if (currencyData.CONVERTFROM == sku.data.currencyCode) {\n                    return basePrice * (currencyData.CONVERSIONRATE);\n                }\n                else if (currencyData.CONVERTFROM == "EUR" && _this.currencies[sku.data.currencyCode].CONVERTFROM == "EUR") {\n                    //Convert using euro\n                    var tempPrice = basePrice * (currencyData.CONVERSIONRATE);\n                    return tempPrice * (_this.currencies[sku.data.currencyCode].CONVERSIONRATE);\n                }\n                else {\n                    return "N/A"; //will become NaN\n                }\n            }\n            else if (sku.data.currencyCode == currencyCode) {\n                return basePrice;\n            }\n            return "N/A"; //will become NaN\n        };\n        this.createInferredSkuPriceForCurrency = function (sku, skuPrice, currencyCode) {\n            var nonPersistedSkuPrice = _this.entityService.newEntity(\'SkuPrice\');\n            nonPersistedSkuPrice.$$setSku(sku);\n            nonPersistedSkuPrice.data.currencyCode = currencyCode;\n            //if for some reason the price that came back was preformatted althought this really shouldn\'t be needed\n            if (angular.isString(sku.data.price) && isNaN(parseFloat(sku.data.price.substr(0, 1)))) {\n                //strip currency symbol\n                sku.data.price = parseFloat(sku.data.price.substr(1, sku.data.price.length));\n            }\n            var basePrice = 0;\n            if (angular.isDefined(skuPrice)) {\n                basePrice = skuPrice.data.price;\n            }\n            else {\n                basePrice = sku.data.price;\n            }\n            nonPersistedSkuPrice.data.price = _this.getInferredSkuPrice(sku, basePrice, currencyCode);\n            if (angular.isDefined(skuPrice) && angular.isDefined(skuPrice.data.minQuantity) && !isNaN(skuPrice.data.minQuantity)) {\n                nonPersistedSkuPrice.data.minQuantity = skuPrice.data.minQuantity;\n            }\n            if (angular.isDefined(skuPrice) && angular.isDefined(skuPrice.data.maxQuantity) && !isNaN(skuPrice.data.maxQuantity)) {\n                nonPersistedSkuPrice.data.maxQuantity = skuPrice.data.maxQuantity;\n            }\n            nonPersistedSkuPrice.data.inferred = true;\n            return nonPersistedSkuPrice;\n        };\n        this.skuPriceSetHasCurrencyCode = function (skuPriceSet, currencyCode) {\n            for (var k = 0; k < skuPriceSet.length; k++) {\n                if (currencyCode == skuPriceSet[k].data.currencyCode) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        this.defaultCurrencySkuPriceForSet = function (skuPriceSet) {\n            for (var i = 0; i < skuPriceSet.length; i++) {\n                //temporarily hard coded\n                if (skuPriceSet[i].data.currencyCode == "USD") {\n                    return skuPriceSet[i];\n                }\n            }\n        };\n        this.getSku = function (skuID) {\n            var deferred = _this.$q.defer();\n            var promise = deferred.promise;\n            if (skuID in _this.skuDictionary) {\n                var sku = _this.skuDictionary[skuID];\n                deferred.resolve(sku);\n            }\n            else {\n                _this.$hibachi.getEntity("Sku", skuID).then(function (response) {\n                    _this.skuDictionary[skuID] = _this.$hibachi.populateEntity("Sku", response);\n                    deferred.resolve(_this.skuDictionary[skuID]);\n                }, function (reason) {\n                    deferred.reject(reason);\n                });\n            }\n            return promise;\n        };\n        this.loadInferredSkuPricesForSkuPriceSet = function (skuID, skuPriceSet, eligibleCurrencyCodes) {\n            var deferred = _this.$q.defer();\n            var promise = deferred.promise;\n            _this.loadCurrencies().then(function () {\n                _this.getSku(skuID).then(function (sku) {\n                    for (var j = 0; j < eligibleCurrencyCodes.length; j++) {\n                        if ((sku.data.currencyCode != eligibleCurrencyCodes[j]) &&\n                            (skuPriceSet.length > 0 && !_this.skuPriceSetHasCurrencyCode(skuPriceSet, eligibleCurrencyCodes[j])) ||\n                            ((sku.data.currencyCode != eligibleCurrencyCodes[j]) && skuPriceSet.length == 0)) {\n                            skuPriceSet.push(_this.createInferredSkuPriceForCurrency(sku, _this.defaultCurrencySkuPriceForSet(skuPriceSet), eligibleCurrencyCodes[j]));\n                        }\n                    }\n                    skuPriceSet = _this.sortSkuPrices(skuPriceSet);\n                }, function (reason) {\n                }).finally(function () {\n                    deferred.resolve(skuPriceSet);\n                });\n            });\n            return promise;\n        };\n        this.getBaseSkuPricesForSku = function (skuID, eligibleCurrencyCodes) {\n            var deferred = _this.$q.defer();\n            var promise = deferred.promise;\n            var skuPriceSet = [];\n            if (angular.isDefined(_this.skuPriceHasEntityPromises[skuID])) {\n                _this.skuPriceGetEntityPromises[skuID].then(function () {\n                    var skuPrices = _this.getSkuPrices(skuID) || [];\n                    for (var i = 0; i < skuPrices.length; i++) {\n                        var skuPrice = skuPrices[i];\n                        if (_this.isBaseSkuPrice(skuPrice.data)) {\n                            skuPriceSet.push(skuPrice);\n                        }\n                    }\n                }).finally(function () {\n                    if (angular.isDefined(eligibleCurrencyCodes)) {\n                        _this.loadInferredSkuPricesForSkuPriceSet(skuID, skuPriceSet, eligibleCurrencyCodes).then(function (data) {\n                            deferred.resolve(_this.sortSkuPrices(data));\n                        });\n                    }\n                    else {\n                        deferred.resolve(_this.sortSkuPrices(skuPriceSet));\n                    }\n                });\n            }\n            return promise;\n        };\n        this.getSkuPricesForQuantityRange = function (skuID, minQuantity, maxQuantity, eligibleCurrencyCodes, priceGroupID) {\n            var deferred = _this.$q.defer();\n            var promise = deferred.promise;\n            var skuPriceSet = [];\n            if (angular.isDefined(_this.skuPriceHasEntityPromises[skuID])) {\n                _this.skuPriceGetEntityPromises[skuID].then(function () {\n                    var skuPrices = _this.getSkuPrices(skuID);\n                    for (var i = 0; i < skuPrices.length; i++) {\n                        var skuPrice = skuPrices[i];\n                        if (_this.isQuantityRangeSkuPrice(skuPrice.data, minQuantity, maxQuantity, priceGroupID)) {\n                            skuPriceSet.push(skuPrice);\n                        }\n                    }\n                }).finally(function () {\n                    if (angular.isDefined(eligibleCurrencyCodes)) {\n                        _this.loadInferredSkuPricesForSkuPriceSet(skuID, skuPriceSet, eligibleCurrencyCodes).then(function (data) {\n                            deferred.resolve(_this.sortSkuPrices(data));\n                        });\n                    }\n                    else {\n                        deferred.resolve(_this.sortSkuPrices(skuPriceSet));\n                    }\n                });\n            }\n            return promise;\n        };\n        this.getKeyOfSkuPriceMatch = function (skuID, skuPrice) {\n            if (_this.hasSkuPrices(skuID)) {\n                for (var i = 0; i < _this.getSkuPrices(skuID).length; i++) {\n                    var savedSkuPriceData = _this.getSkuPrices(skuID)[i].data;\n                    var priceGroupID = undefined;\n                    if (skuPrice.data.priceGroup) {\n                        priceGroupID = skuPrice.data.priceGroup.$$getID() || skuPrice.data.priceGroup_priceGroupID;\n                    }\n                    if (savedSkuPriceData.currencyCode == skuPrice.data.currencyCode &&\n                        ((_this.isBaseSkuPrice(savedSkuPriceData) &&\n                            _this.isBaseSkuPrice(savedSkuPriceData) == _this.isBaseSkuPrice(skuPrice.data)) || _this.isQuantityRangeSkuPrice(savedSkuPriceData, skuPrice.data.minQuantity, skuPrice.data.maxQuantity, priceGroupID))) {\n                        return i;\n                    }\n                }\n            }\n            return -1;\n        };\n        this.isBaseSkuPrice = function (skuPriceData) {\n            return isNaN(parseInt(skuPriceData.minQuantity)) && isNaN(parseInt(skuPriceData.maxQuantity)) && !(skuPriceData.priceGroup && skuPriceData.priceGroup.$$getID().trim().length);\n        };\n        this.isQuantityRangeSkuPrice = function (skuPriceData, minQuantity, maxQuantity, priceGroupID) {\n            var minQuantityMatch = (parseInt(skuPriceData.minQuantity) == parseInt(minQuantity))\n                || (isNaN(parseInt(skuPriceData.minQuantity))\n                    && isNaN(parseInt(minQuantity)));\n            var maxQuantityMatch = (parseInt(skuPriceData.maxQuantity) == parseInt(maxQuantity)) || (isNaN(parseInt(skuPriceData.maxQuantity))\n                && isNaN(parseInt(maxQuantity)));\n            var priceGroupMatch = false;\n            if (typeof priceGroupID !== \'undefined\' && typeof skuPriceData.priceGroup_priceGroupID !== \'undefined\') {\n                if (skuPriceData.priceGroup_priceGroupID.length) {\n                    priceGroupMatch = skuPriceData.priceGroup_priceGroupID == priceGroupID;\n                }\n                else {\n                    skuPriceData.priceGroup_priceGroupID == priceGroupID;\n                }\n            }\n            else {\n                if (typeof priceGroupID == \'undefined\'\n                    && typeof skuPriceData.priceGroup_priceGroupID == \'undefined\') {\n                    priceGroupMatch = true;\n                }\n                else {\n                    priceGroupMatch = false;\n                }\n            }\n            return minQuantityMatch && maxQuantityMatch && priceGroupMatch;\n        };\n        this.sortSkuPrices = function (skuPriceSet) {\n            function compareSkuPrices(a, b) {\n                //temporarily hardcoded to usd needs to be default sku value\n                if (a.data.currencyCode == "USD")\n                    return -1;\n                if (a.data.currencyCode < b.data.currencyCode)\n                    return -1;\n                if (a.data.currencyCode > b.data.currencyCode)\n                    return 1;\n                return 0;\n            }\n            return skuPriceSet.sort(compareSkuPrices);\n        };\n        this.observerService.attach(this.updateSkuPrices, \'skuPricesUpdate\');\n    }\n    return SkuPriceService;\n}());\nexports.SkuPriceService = SkuPriceService;\n\n\n//# sourceURL=webpack:///./sku/services/skupriceservice.ts?')},"./sku/sku.module.ts":
/*!***************************!*\
  !*** ./sku/sku.module.ts ***!
  \***************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//modules\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//services\nvar defaultskuservice_1 = __webpack_require__(/*! ./services/defaultskuservice */ \"./sku/services/defaultskuservice.ts\");\nvar skupriceservice_1 = __webpack_require__(/*! ./services/skupriceservice */ \"./sku/services/skupriceservice.ts\");\n//controllers\n//directives\nvar swpricingmanager_1 = __webpack_require__(/*! ./components/swpricingmanager */ \"./sku/components/swpricingmanager.ts\");\nvar swimagedetailmodallauncher_1 = __webpack_require__(/*! ./components/swimagedetailmodallauncher */ \"./sku/components/swimagedetailmodallauncher.ts\");\nvar swaddskupricemodallauncher_1 = __webpack_require__(/*! ./components/swaddskupricemodallauncher */ \"./sku/components/swaddskupricemodallauncher.ts\");\nvar swdeleteskupricemodallauncher_1 = __webpack_require__(/*! ./components/swdeleteskupricemodallauncher */ \"./sku/components/swdeleteskupricemodallauncher.ts\");\nvar sweditskupricemodallauncher_1 = __webpack_require__(/*! ./components/sweditskupricemodallauncher */ \"./sku/components/sweditskupricemodallauncher.ts\");\nvar swskustockadjustmentmodallauncher_1 = __webpack_require__(/*! ./components/swskustockadjustmentmodallauncher */ \"./sku/components/swskustockadjustmentmodallauncher.ts\");\nvar swdefaultskuradio_1 = __webpack_require__(/*! ./components/swdefaultskuradio */ \"./sku/components/swdefaultskuradio.ts\");\nvar swskucurrencyselector_1 = __webpack_require__(/*! ./components/swskucurrencyselector */ \"./sku/components/swskucurrencyselector.ts\");\nvar swskupriceedit_1 = __webpack_require__(/*! ./components/swskupriceedit */ \"./sku/components/swskupriceedit.ts\");\nvar swskucodeedit_1 = __webpack_require__(/*! ./components/swskucodeedit */ \"./sku/components/swskucodeedit.ts\");\nvar swskupricesedit_1 = __webpack_require__(/*! ./components/swskupricesedit */ \"./sku/components/swskupricesedit.ts\");\nvar swskupricequantityedit_1 = __webpack_require__(/*! ./components/swskupricequantityedit */ \"./sku/components/swskupricequantityedit.ts\");\nvar swskuthumbnail_1 = __webpack_require__(/*! ./components/swskuthumbnail */ \"./sku/components/swskuthumbnail.ts\");\n//filters\nvar skumodule = angular.module('hibachi.sku', [core_module_1.coremodule.name]).config(function () {\n})\n    //constants\n    .constant('skuPartialsPath', 'sku/components/')\n    //services\n    .service('defaultSkuService', defaultskuservice_1.DefaultSkuService)\n    .service('skuPriceService', skupriceservice_1.SkuPriceService)\n    //controllers\n    //directives\n    .directive('swPricingManager', swpricingmanager_1.SWPricingManager.Factory())\n    .directive('swImageDetailModalLauncher', swimagedetailmodallauncher_1.SWImageDetailModalLauncher.Factory())\n    .directive('swAddSkuPriceModalLauncher', swaddskupricemodallauncher_1.SWAddSkuPriceModalLauncher.Factory())\n    .directive('swDeleteSkuPriceModalLauncher', swdeleteskupricemodallauncher_1.SWDeleteSkuPriceModalLauncher.Factory())\n    .directive('swEditSkuPriceModalLauncher', sweditskupricemodallauncher_1.SWEditSkuPriceModalLauncher.Factory())\n    .directive('swSkuStockAdjustmentModalLauncher', swskustockadjustmentmodallauncher_1.SWSkuStockAdjustmentModalLauncher.Factory())\n    .directive('swDefaultSkuRadio', swdefaultskuradio_1.SWDefaultSkuRadio.Factory())\n    .directive('swSkuCurrencySelector', swskucurrencyselector_1.SWSkuCurrencySelector.Factory())\n    .directive('swSkuPriceEdit', swskupriceedit_1.SWSkuPriceEdit.Factory())\n    .directive('swSkuCodeEdit', swskucodeedit_1.SWSkuCodeEdit.Factory())\n    .directive('swSkuPricesEdit', swskupricesedit_1.SWSkuPricesEdit.Factory())\n    .directive('swSkuPriceQuantityEdit', swskupricequantityedit_1.SWSkuPriceQuantityEdit.Factory())\n    .directive('swSkuThumbnail', swskuthumbnail_1.SWSkuThumbnail.Factory());\nexports.skumodule = skumodule;\n\n\n//# sourceURL=webpack:///./sku/sku.module.ts?")},"./slatwall/components/swcurrencyformatter.ts":
/*!****************************************************!*\
  !*** ./slatwall/components/swcurrencyformatter.ts ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nvar SWCurrencyFormatter = /** @class */ (function () {\n    function SWCurrencyFormatter($filter, $timeout) {\n        var _this = this;\n        this.$filter = $filter;\n        this.$timeout = $timeout;\n        this.restrict = \"A\";\n        this.require = \"ngModel\";\n        this.scope = {\n            ngModel: '=',\n            currencyCode: '@?'\n        };\n        this.link = function ($scope, element, attrs, modelCtrl) {\n            modelCtrl.$parsers.push(function (data) {\n                var currencyFilter = _this.$filter('swcurrency');\n                if (isNaN(data)) {\n                    data = 0;\n                    modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));\n                    modelCtrl.$render();\n                }\n                else {\n                    if (_this._timeoutPromise) {\n                        _this.$timeout.cancel(_this._timeoutPromise);\n                    }\n                    _this._timeoutPromise = _this.$timeout(function () {\n                        modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));\n                        modelCtrl.$render();\n                    }, 1500);\n                }\n                return modelCtrl.$viewValue;\n            });\n            modelCtrl.$formatters.push(function (data) {\n                if (isNaN(data)) {\n                    data = 0;\n                }\n                var currencyFilter = _this.$filter('swcurrency');\n                modelCtrl.$setViewValue(currencyFilter(data, $scope.currencyCode, 2, false));\n                modelCtrl.$render();\n                return modelCtrl.$viewValue;\n            });\n        };\n    }\n    SWCurrencyFormatter.Factory = function () {\n        var directive = function ($filter, $timeout) { return new SWCurrencyFormatter($filter, $timeout); };\n        directive.$inject = [\n            '$filter',\n            '$timeout'\n        ];\n        return directive;\n    };\n    return SWCurrencyFormatter;\n}());\nexports.SWCurrencyFormatter = SWCurrencyFormatter;\n\n\n//# sourceURL=webpack:///./slatwall/components/swcurrencyformatter.ts?")},"./slatwall/filters/swcurrency.ts":
/*!****************************************!*\
  !*** ./slatwall/filters/swcurrency.ts ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWCurrency = /** @class */ (function () {\n    function SWCurrency() {\n    }\n    //@ngInject\n    SWCurrency.Factory = function ($sce, $log, $hibachi, $filter) {\n        var data = null, serviceInvoked = false;\n        function realFilter(value, decimalPlace, returnStringFlag) {\n            if (returnStringFlag === void 0) { returnStringFlag = true; }\n            // REAL FILTER LOGIC, DISREGARDING PROMISES\n            if (!angular.isDefined(data)) {\n                $log.debug(\"Please provide a valid currencyCode, swcurrency defaults to $\");\n                data = \"$\";\n            }\n            if (!value || value.toString().trim() == '') {\n                value = 0;\n            }\n            if (angular.isDefined(value)) {\n                if (angular.isDefined(decimalPlace)) {\n                    value = $filter('number')(value.toString(), decimalPlace);\n                }\n                else {\n                    value = $filter('number')(value.toString(), 2);\n                }\n            }\n            if (returnStringFlag) {\n                return data + value;\n            }\n            else {\n                return value;\n            }\n        }\n        var filterStub;\n        filterStub = function (value, currencyCode, decimalPlace, returnStringFlag) {\n            if (returnStringFlag === void 0) { returnStringFlag = true; }\n            if (data === null && returnStringFlag) {\n                if (!serviceInvoked) {\n                    serviceInvoked = true;\n                    $hibachi.getCurrencies().then(function (currencies) {\n                        var result = currencies.data;\n                        data = result[currencyCode];\n                    });\n                }\n                return \"-\";\n            }\n            else\n                return realFilter(value, decimalPlace, returnStringFlag);\n        };\n        filterStub.$stateful = true;\n        return filterStub;\n    };\n    return SWCurrency;\n}());\nexports.SWCurrency = SWCurrency;\n\n\n//# sourceURL=webpack:///./slatwall/filters/swcurrency.ts?")},"./slatwall/services/slatwallpathbuilder.ts":
/*!**************************************************!*\
  !*** ./slatwall/services/slatwallpathbuilder.ts ***!
  \**************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\n/*services return promises which can be handled uniquely based on success or failure by the controller*/\nvar SlatwallPathBuilder = /** @class */ (function () {\n    //@ngInject\n    function SlatwallPathBuilder() {\n        var _this = this;\n        this.setBaseURL = function (baseURL) {\n            _this.baseURL = baseURL;\n        };\n        this.setBasePartialsPath = function (basePartialsPath) {\n            _this.basePartialsPath = basePartialsPath;\n        };\n        this.buildPartialsPath = function (componentsPath) {\n            if (angular.isDefined(_this.baseURL) && angular.isDefined(_this.basePartialsPath)) {\n                return _this.baseURL + _this.basePartialsPath + componentsPath;\n            }\n            else {\n                throw ('need to define baseURL and basePartialsPath in hibachiPathBuilder. Inject hibachiPathBuilder into module and configure it there');\n            }\n        };\n    }\n    return SlatwallPathBuilder;\n}());\nexports.SlatwallPathBuilder = SlatwallPathBuilder;\n\n\n//# sourceURL=webpack:///./slatwall/services/slatwallpathbuilder.ts?")},"./slatwall/slatwalladmin.module.ts":
/*!******************************************!*\
  !*** ./slatwall/slatwalladmin.module.ts ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../typings/tsd.d.ts\" />\n/// <reference path=\"../../typings/slatwallTypescript.d.ts\" />\nvar hibachi_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/hibachi/hibachi.module */ \"../../../org/Hibachi/client/src/hibachi/hibachi.module.ts\");\nvar workflow_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/workflow/workflow.module */ \"../../../org/Hibachi/client/src/workflow/workflow.module.ts\");\nvar entity_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/entity/entity.module */ \"../../../org/Hibachi/client/src/entity/entity.module.ts\");\nvar content_module_1 = __webpack_require__(/*! ../content/content.module */ \"./content/content.module.ts\");\nvar formbuilder_module_1 = __webpack_require__(/*! ../formbuilder/formbuilder.module */ \"./formbuilder/formbuilder.module.ts\");\nvar giftcard_module_1 = __webpack_require__(/*! ../giftcard/giftcard.module */ \"./giftcard/giftcard.module.ts\");\nvar optiongroup_module_1 = __webpack_require__(/*! ../optiongroup/optiongroup.module */ \"./optiongroup/optiongroup.module.ts\");\nvar orderitem_module_1 = __webpack_require__(/*! ../orderitem/orderitem.module */ \"./orderitem/orderitem.module.ts\");\nvar orderfulfillment_module_1 = __webpack_require__(/*! ../orderfulfillment/orderfulfillment.module */ \"./orderfulfillment/orderfulfillment.module.ts\");\nvar fulfillmentbatchdetail_module_1 = __webpack_require__(/*! ../fulfillmentbatch/fulfillmentbatchdetail.module */ \"./fulfillmentbatch/fulfillmentbatchdetail.module.ts\");\nvar product_module_1 = __webpack_require__(/*! ../product/product.module */ \"./product/product.module.ts\");\nvar productbundle_module_1 = __webpack_require__(/*! ../productbundle/productbundle.module */ \"./productbundle/productbundle.module.ts\");\nvar sku_module_1 = __webpack_require__(/*! ../sku/sku.module */ \"./sku/sku.module.ts\");\nvar subscriptionusage_module_1 = __webpack_require__(/*! ../subscriptionusage/subscriptionusage.module */ \"./subscriptionusage/subscriptionusage.module.ts\");\n//constant\nvar slatwallpathbuilder_1 = __webpack_require__(/*! ./services/slatwallpathbuilder */ \"./slatwall/services/slatwallpathbuilder.ts\");\n//directives\nvar swcurrencyformatter_1 = __webpack_require__(/*! ./components/swcurrencyformatter */ \"./slatwall/components/swcurrencyformatter.ts\");\n//filters\nvar swcurrency_1 = __webpack_require__(/*! ./filters/swcurrency */ \"./slatwall/filters/swcurrency.ts\");\nvar slatwalladminmodule = angular.module('slatwalladmin', [\n    //custom modules\n    hibachi_module_1.hibachimodule.name,\n    entity_module_1.entitymodule.name,\n    content_module_1.contentmodule.name,\n    formbuilder_module_1.formbuildermodule.name,\n    giftcard_module_1.giftcardmodule.name,\n    optiongroup_module_1.optiongroupmodule.name,\n    orderitem_module_1.orderitemmodule.name,\n    orderfulfillment_module_1.orderfulfillmentmodule.name,\n    fulfillmentbatchdetail_module_1.fulfillmentbatchdetailmodule.name,\n    product_module_1.productmodule.name,\n    productbundle_module_1.productbundlemodule.name,\n    sku_module_1.skumodule.name,\n    subscriptionusage_module_1.subscriptionusagemodule.name,\n    workflow_module_1.workflowmodule.name\n])\n    .constant(\"baseURL\", $.slatwall.getConfig().baseURL)\n    .constant('slatwallPathBuilder', new slatwallpathbuilder_1.SlatwallPathBuilder())\n    .config([\"$provide\", '$logProvider', '$filterProvider', '$httpProvider', '$routeProvider', '$injector', '$locationProvider', 'datepickerConfig', 'datepickerPopupConfig', 'slatwallPathBuilder', 'appConfig',\n    function ($provide, $logProvider, $filterProvider, $httpProvider, $routeProvider, $injector, $locationProvider, datepickerConfig, datepickerPopupConfig, slatwallPathBuilder, appConfig) {\n        //configure partials path properties\n        slatwallPathBuilder.setBaseURL($.slatwall.getConfig().baseURL);\n        slatwallPathBuilder.setBasePartialsPath('/admin/client/src/');\n        datepickerConfig.showWeeks = false;\n        datepickerConfig.format = 'MMM dd, yyyy hh:mm a';\n        datepickerPopupConfig.toggleWeeksText = null;\n        // route provider configuration\n    }])\n    .run(['$rootScope', '$filter', '$anchorScroll', '$hibachi', 'dialogService', 'observerService', 'utilityService', 'slatwallPathBuilder', function ($rootScope, $filter, $anchorScroll, $hibachi, dialogService, observerService, utilityService, slatwallPathBuilder) {\n        $anchorScroll.yOffset = 100;\n        $rootScope.openPageDialog = function (partial) {\n            dialogService.addPageDialog(partial);\n        };\n        $rootScope.closePageDialog = function (index) {\n            dialogService.removePageDialog(index);\n        };\n        $rootScope.createID = utilityService.createID;\n        $rootScope.slatwall = $rootScope.hibachiScope;\n        $rootScope.slatwall.getProcessObject = $hibachi.newEntity;\n    }])\n    //services\n    //directives\n    .directive('swCurrencyFormatter', swcurrencyformatter_1.SWCurrencyFormatter.Factory())\n    //controllers\n    .controller('preprocessaccount_addaccountpayment', ['$scope', '$compile', function ($scope, $compile) {\n        //Define the different payment types used here\n        var paymentType = { aptCharge: \"444df32dd2b0583d59a19f1b77869025\", aptCredit: \"444df32e9b448ea196c18c66e1454c46\", aptAdjustment: \"68e3fb57d8102b47acc0003906d16ddd\" };\n        $scope.totalAmountToApply = 0; //Default value to show on new form\n        $scope.paymentTypeName = $.slatwall.rbKey('define.charge'); //Default payment type\n        $scope.paymentTypeLock = true; //Used to lock down the order payment type dropdowns\n        $scope.amount = 0;\n        $scope.updatePaymentType = function () {\n            //Change all order payment types here\n            angular.forEach($scope.appliedOrderPayment, function (obj, key) {\n                //Only change the payment type if the type isn't adjustment'\n                if ($scope.paymentType != paymentType.aptAdjustment)\n                    obj.paymentType = $scope.paymentType;\n            });\n            if ($scope.paymentType == paymentType.aptCharge) {\n                $scope.paymentTypeName = $.slatwall.rbKey('define.charge');\n                $scope.paymentTypeLock = true;\n            }\n            else if ($scope.paymentType == paymentType.aptCredit) {\n                $scope.paymentTypeName = $.slatwall.rbKey('define.credit');\n                $scope.paymentTypeLock = true;\n            }\n            else if ($scope.paymentType == paymentType.aptAdjustment) {\n                $scope.paymentTypeLock = false;\n                $scope.paymentTypeName = $.slatwall.rbKey('define.adjustment');\n                $scope.amount = 0;\n            }\n            //Update the subtotal now that we changed the payment type\n            $scope.updateSubTotal();\n        };\n        $scope.updateSubTotal = function () {\n            $scope.totalAmountToApply = 0; //Reset the subtotal before we loop\n            //Loop through all the amount fields and create a running subtotal\n            angular.forEach($scope.appliedOrderPayment, function (obj, key) {\n                //Don't count the field if its undefied or not a number\n                if (obj.amount != undefined && !isNaN(obj.amount)) {\n                    //Charge / adjustment condition for subtotal\n                    if ($scope.paymentType == paymentType.aptCharge) {\n                        $scope.totalAmountToApply += parseFloat(obj.amount);\n                        //Credit condition for subtotal\n                    }\n                    else if ($scope.paymentType == paymentType.aptCredit) {\n                        $scope.totalAmountToApply -= parseFloat(obj.amount);\n                    }\n                    else if ($scope.paymentType == paymentType.aptAdjustment) {\n                        if (obj.paymentType == paymentType.aptCharge) {\n                            $scope.totalAmountToApply += parseFloat(obj.amount);\n                        }\n                        else if (obj.paymentType == paymentType.aptCredit) {\n                            $scope.totalAmountToApply -= parseFloat(obj.amount);\n                        }\n                    }\n                }\n            });\n            //The amount not applied to an order\n            $scope.amountUnapplied = (Math.round(($scope.amount - $scope.totalAmountToApply + $scope.amountUnassigned) * 100) / 100);\n            $scope.accountBalanceChange = parseFloat($scope.amount);\n            //Switch the account balance display amount to a negative if you are doing a charge\n            if ($scope.paymentType == paymentType.aptCharge)\n                $scope.accountBalanceChange = parseFloat(($scope.accountBalanceChange * -1).toString()); //If charge, change to neg since we are lowering account balance\n            else if ($scope.paymentType == paymentType.aptAdjustment)\n                $scope.accountBalanceChange += parseFloat($scope.amountUnapplied); //If adjustment, use the amount unapplied to determine the balance change\n        };\n    }])\n    //filters\n    .filter('swcurrency', ['$sce', '$log', '$hibachi', '$filter', swcurrency_1.SWCurrency.Factory]);\nexports.slatwalladminmodule = slatwalladminmodule;\n// ((): void => {\n//     var app = angular.module('slatwalladmin', ['hibachi','ngSlatwall','ngSlatwallModel','ui.bootstrap','ngAnimate','ngRoute','ngSanitize','ngCkeditor']);\n//     app.config(\n//         [\"$provide\",'$logProvider','$filterProvider','$httpProvider','$routeProvider','$injector','$locationProvider','datepickerConfig', 'datepickerPopupConfig',\n//         ($provide, $logProvider,$filterProvider,$httpProvider,$routeProvider,$injector,$locationProvider,datepickerConfig, datepickerPopupConfig) =>\n//      {\n//         datepickerConfig.showWeeks = false;\n//         datepickerConfig.format = 'MMM dd, yyyy hh:mm a';\n//             datepickerPopupConfig.toggleWeeksText = null;\n//         if(slatwallAngular.hashbang){\n//             $locationProvider.html5Mode( false ).hashPrefix('!');\n//         }\n//         //\n//         $provide.constant(\"baseURL\", $.slatwall.getConfig().baseURL);\n//         var _partialsPath = $.slatwall.getConfig().baseURL + '/admin/client/partials/';\n//         $provide.constant(\"partialsPath\", _partialsPath);\n//         $provide.constant(\"productBundlePartialsPath\", _partialsPath+'productbundle/');\n//         angular.forEach(slatwallAngular.constantPaths, function(constantPath,key){\n//             var constantKey = constantPath.charAt(0).toLowerCase()+constantPath.slice(1)+'PartialsPath';\n//             var constantPartialsPath = _partialsPath+constantPath.toLowerCase()+'/';\n//             $provide.constant(constantKey, constantPartialsPath);\n//         });\n//         $logProvider.debugEnabled( $.slatwall.getConfig().debugFlag );\n//         $filterProvider.register('likeFilter',function(){\n//             return function(text){\n//                 if(angular.isDefined(text) && angular.isString(text)){\n//                     return text.replace(new RegExp('%', 'g'), '');\n//                 }\n//             };\n//         });\n//         $filterProvider.register('truncate',function(){\n//             return function (input, chars, breakOnWord) {\n//                 if (isNaN(chars)) return input;\n//                 if (chars <= 0) return '';\n//                 if (input && input.length > chars) {\n//                     input = input.substring(0, chars);\n//                     if (!breakOnWord) {\n//                         var lastspace = input.lastIndexOf(' ');\n//                         //get last space\n//                         if (lastspace !== -1) {\n//                             input = input.substr(0, lastspace);\n//                         }\n//                     }else{\n//                         while(input.charAt(input.length-1) === ' '){\n//                             input = input.substr(0, input.length -1);\n//                         }\n//                     }\n//                     return input + '...';\n//                 }\n//                 return input;\n//             };\n//         });\n//         $httpProvider.interceptors.push('slatwallInterceptor');\n//         // route provider configuration\n//         $routeProvider.when('/entity/:entityName/', {\n//             template: function(params){\n//                 var entityDirectiveExists = $injector.has('sw'+params.entityName+'ListDirective');\n//                 if(entityDirectiveExists){\n//                     return '<sw-'+params.entityName.toLowerCase()+'-list>';\n//                 }else{\n//                     return '<sw-list></sw-list>';\n//                 }\n//             },\n//             controller: 'routerController'\n//         }).when('/entity/:entityName/:entityID', {\n//             template: function(params){\n//                 var entityDirectiveExists = $injector.has('sw'+params.entityName+'DetailDirective');\n//                 if(entityDirectiveExists){\n//                     return '<sw-'+params.entityName.toLowerCase()+'-detail>';\n//                 }else{\n//                     return '<sw-detail></sw-detail>';\n//                 }\n//             },\n//             controller: 'routerController',\n//         }).otherwise({\n//             //controller:'otherwiseController'\n//             templateUrl: $.slatwall.getConfig().baseURL + '/admin/client/js/partials/otherwise.html',\n//         });\n//     }]).run(['$rootScope','$filter','$anchorScroll','$hibachi','dialogService','observerService','utilityService', ($rootScope,$filter,$anchorScroll,$hibachi,dialogService,observerService,utilityService) => {\n//         $anchorScroll.yOffset = 100;\n//         $rootScope.openPageDialog = function( partial ) {\n//             dialogService.addPageDialog( partial );\n//         };\n//         $rootScope.closePageDialog = function( index ) {\n//             dialogService.removePageDialog( index );\n//         };\n//         $rootScope.loadedResourceBundle = false;\n//         $rootScope.loadedResourceBundle = $hibachi.hasResourceBundle();\n//         $rootScope.buildUrl = $hibachi.buildUrl;\n//         $rootScope.createID = utilityService.createID;\n//         var rbListener = $rootScope.$watch('loadedResourceBundle',function(newValue,oldValue){\n//             if(newValue !== oldValue){\n//                 $rootScope.$broadcast('hasResourceBundle');\n//                 rbListener();\n//             }\n//         });\n//     }])\n// })();\n\n\n//# sourceURL=webpack:///./slatwall/slatwalladmin.module.ts?")},"./subscriptionusage/components/swscheduleddeliveriescard.ts":
/*!*******************************************************************!*\
  !*** ./subscriptionusage/components/swscheduleddeliveriescard.ts ***!
  \*******************************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\n/// <reference path='../../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../../typings/tsd.d.ts' />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SWScheduledDeliveriesCardController = /** @class */ (function () {\n    //@ngInject\n    function SWScheduledDeliveriesCardController(collectionConfigService, observerService) {\n        var _this = this;\n        this.collectionConfigService = collectionConfigService;\n        this.observerService = observerService;\n        this.selectSubscriptionPeriod = function () {\n            delete _this.subscriptionOrderDeliveryItemsCollectionList;\n            var subscriptionOrderDeliveryItemsCollectionList = _this.collectionConfigService.newCollectionConfig('SubscriptionOrderDeliveryItem');\n            subscriptionOrderDeliveryItemsCollectionList.addFilter('subscriptionOrderItem.subscriptionUsage.subscriptionUsageID', _this.subscriptionUsageId, '=', 'AND', true);\n            subscriptionOrderDeliveryItemsCollectionList.setDisplayProperties('createdDateTime,quantity,subscriptionOrderItem.orderItem.calculatedExtendedPrice,earned');\n            subscriptionOrderDeliveryItemsCollectionList.setAllRecords(true);\n            if (_this.selectedSubscriptionPeriod == 'All Deliveries') {\n                var subscriptionOrderItemCollectionList = _this.collectionConfigService.newCollectionConfig('SubscriptionOrderItem');\n                subscriptionOrderItemCollectionList.addFilter('subscriptionUsage.subscriptionUsageID', _this.subscriptionUsageId, '=', 'AND', true);\n                subscriptionOrderItemCollectionList.setDisplayProperties('subscriptionOrderItemID,subscriptionUsage.subscriptionTerm.itemsToDeliver,orderItem.calculatedExtendedPrice');\n                subscriptionOrderItemCollectionList.addDisplayAggregate('subscriptionOrderDeliveryItems.quantity', 'SUM', 'subscriptionOrderDeliveryItemsQuantitySum');\n                subscriptionOrderItemCollectionList.setOrderBy('createdDateTime|DESC');\n                subscriptionOrderItemCollectionList.setAllRecords(true);\n                subscriptionOrderItemCollectionList.getEntity().then(function (data) {\n                    var itemsDelivered = 0;\n                    var itemsToDeliver = 0;\n                    var valueEarned = 0;\n                    for (var i in data.records) {\n                        var subscriptionOrderItemData = data.records[i];\n                        itemsDelivered += subscriptionOrderItemData.subscriptionOrderDeliveryItemsQuantitySum;\n                        itemsToDeliver += subscriptionOrderItemData.subscriptionUsage_subscriptionTerm_itemsToDeliver;\n                        valueEarned += subscriptionOrderItemData.orderItem_calculatedExtendedPrice * subscriptionOrderItemData.subscriptionOrderDeliveryItemsQuantitySum;\n                    }\n                    _this.numerator = itemsDelivered;\n                    _this.denominator = itemsToDeliver;\n                    _this.earned = valueEarned;\n                    _this.subscriptionOrderDeliveryItemsCollectionList = subscriptionOrderDeliveryItemsCollectionList;\n                });\n            }\n            else if (_this.selectedSubscriptionPeriod == 'Current Term') {\n                var subscriptionOrderItemCollectionList = _this.collectionConfigService.newCollectionConfig('SubscriptionOrderItem');\n                subscriptionOrderItemCollectionList.addFilter('subscriptionUsage.subscriptionUsageID', _this.subscriptionUsageId, '=', 'AND', true);\n                subscriptionOrderItemCollectionList.setDisplayProperties('subscriptionOrderItemID,subscriptionUsage.subscriptionTerm.itemsToDeliver,orderItem.calculatedExtendedPrice');\n                subscriptionOrderItemCollectionList.addDisplayAggregate('subscriptionOrderDeliveryItems.quantity', 'SUM', 'subscriptionOrderDeliveryItemsQuantitySum');\n                subscriptionOrderItemCollectionList.setOrderBy('createdDateTime|DESC');\n                subscriptionOrderItemCollectionList.setPageShow(1);\n                subscriptionOrderItemCollectionList.getEntity().then(function (data) {\n                    _this.numerator = data.pageRecords[0].subscriptionOrderDeliveryItemsQuantitySum;\n                    _this.denominator = data.pageRecords[0].subscriptionUsage_subscriptionTerm_itemsToDeliver;\n                    _this.earned = data.pageRecords[0].orderItem_calculatedExtendedPrice * data.pageRecords[0].subscriptionOrderDeliveryItemsQuantitySum;\n                    subscriptionOrderDeliveryItemsCollectionList.addFilter('subscriptionOrderItem.subscriptionOrderItemID', data.pageRecords[0].subscriptionOrderItemID, '=', 'AND', true);\n                    _this.subscriptionOrderDeliveryItemsCollectionList = subscriptionOrderDeliveryItemsCollectionList;\n                });\n            }\n        };\n    }\n    return SWScheduledDeliveriesCardController;\n}());\nexports.SWScheduledDeliveriesCardController = SWScheduledDeliveriesCardController;\nvar SWScheduledDeliveriesCard = /** @class */ (function () {\n    //@ngInject\n    function SWScheduledDeliveriesCard(subscriptionUsagePartialsPath, slatwallPathBuilder) {\n        this.subscriptionUsagePartialsPath = subscriptionUsagePartialsPath;\n        this.slatwallPathBuilder = slatwallPathBuilder;\n        this.restrict = \"EA\";\n        this.scope = {};\n        this.bindToController = {\n            subscriptionUsageId: \"@\"\n        };\n        this.controller = SWScheduledDeliveriesCardController;\n        this.controllerAs = \"swScheduledDeliveriesCard\";\n        this.link = function (scope, element, attrs) {\n        };\n        this.templateUrl = slatwallPathBuilder.buildPartialsPath(subscriptionUsagePartialsPath) + \"/scheduleddeliveriescard.html\";\n    }\n    SWScheduledDeliveriesCard.Factory = function () {\n        var directive = function (subscriptionUsagePartialsPath, slatwallPathBuilder) { return new SWScheduledDeliveriesCard(subscriptionUsagePartialsPath, slatwallPathBuilder); };\n        directive.$inject = [\n            'subscriptionUsagePartialsPath',\n            'slatwallPathBuilder'\n        ];\n        return directive;\n    };\n    return SWScheduledDeliveriesCard;\n}());\nexports.SWScheduledDeliveriesCard = SWScheduledDeliveriesCard;\n\n\n//# sourceURL=webpack:///./subscriptionusage/components/swscheduleddeliveriescard.ts?")},"./subscriptionusage/subscriptionusage.module.ts":
/*!*******************************************************!*\
  !*** ./subscriptionusage/subscriptionusage.module.ts ***!
  \*******************************************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='../../typings/slatwallTypescript.d.ts' />\n/// <reference path='../../typings/tsd.d.ts' />\n//modules\nvar core_module_1 = __webpack_require__(/*! ../../../../org/Hibachi/client/src/core/core.module */ \"../../../org/Hibachi/client/src/core/core.module.ts\");\n//services\n//controllers\n//filters\n//directives\nvar swscheduleddeliveriescard_1 = __webpack_require__(/*! ./components/swscheduleddeliveriescard */ \"./subscriptionusage/components/swscheduleddeliveriescard.ts\");\nvar subscriptionusagemodule = angular.module('hibachi.subscriptionusage', [core_module_1.coremodule.name]).config(function () {\n})\n    .constant('subscriptionUsagePartialsPath', 'subscriptionusage/components/')\n    //services\n    //controllers\n    //filters\n    //directives\n    .directive('swScheduledDeliveriesCard', swscheduleddeliveriescard_1.SWScheduledDeliveriesCard.Factory());\nexports.subscriptionusagemodule = subscriptionusagemodule;\n\n\n//# sourceURL=webpack:///./subscriptionusage/subscriptionusage.module.ts?")},0:
/*!****************************!*\
  !*** multi ./bootstrap.ts ***!
  \****************************/
/*! no static exports found */
/*! all exports used */function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! ./bootstrap.ts */"./bootstrap.ts");\n\n\n//# sourceURL=webpack:///multi_./bootstrap.ts?')}},[[0,"runtime","vendors~bundle"]]]);